<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c on Lei Xia</title><link>https://www.ddhigh.com/tags/c/</link><description>Recent content in c on Lei Xia</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 26 Feb 2019 17:32:16 +0000</lastBuildDate><atom:link href="https://www.ddhigh.com/tags/c/atom.xml" rel="self" type="application/rss+xml"/><item><title>c语言实现简单版的php z_val结构体</title><link>https://www.ddhigh.com/2019/02/26/c-php-simple-z-val-example/</link><pubDate>Tue, 26 Feb 2019 17:32:16 +0000</pubDate><guid>https://www.ddhigh.com/2019/02/26/c-php-simple-z-val-example/</guid><description>&lt;h2 id="源码">源码&lt;/h2>
&lt;p>学习过PHP的人都知道PHP是基于C语言开发的，但是C语言是强类型的，PHP如何实现弱类型呢？答案在于这个&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">union&lt;/span> _zvalue_value {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> lval; &lt;span style="color:#75715e">/* long value */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> dval; &lt;span style="color:#75715e">/* double value */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } str;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HashTable &lt;span style="color:#f92672">*&lt;/span>ht; &lt;span style="color:#75715e">/* hash table value */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zend_object_value obj;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zend_ast &lt;span style="color:#f92672">*&lt;/span>ast;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} zvalue_value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> _zval_struct {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Variable information */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zvalue_value value; &lt;span style="color:#75715e">/* value */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zend_uint refcount__gc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zend_uchar type; &lt;span style="color:#75715e">/* active type */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zend_uchar is_ref__gc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>type&lt;/strong>保存了实际的类型，而&lt;strong>value&lt;/strong>这个共用体保存了具体的值，我们使用到变量的时候需要根据变量类型来取出**_zvalue_value&lt;strong>中保存的具体值。
采用union能够避免内存浪费，同一时刻，一个&lt;/strong>_zval_struct&lt;strong>中的共用体&lt;/strong>zvalue_value**只有一个成员会分配内存，避免了无谓的内存分配。&lt;/p>
&lt;h2 id="编码">编码&lt;/h2>
&lt;p>阅读源码之前，可能觉得是一个很复杂的实现，阅读源码之后，其实也能自己实现，关键是type和value的组合。源码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;strings.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> z_val_type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DOUBLE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LONG,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> STRING
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> z_val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> dval;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> lval;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } str;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> z_val_type type;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">z_val_print&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> z_val &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// double
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> z_val &lt;span style="color:#f92672">*&lt;/span>doubleVal &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> z_val));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doubleVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>type &lt;span style="color:#f92672">=&lt;/span> DOUBLE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doubleVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.dval &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// long
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> z_val &lt;span style="color:#f92672">*&lt;/span>longVal &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> z_val));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> longVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>type &lt;span style="color:#f92672">=&lt;/span> LONG;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> longVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.lval &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> z_val &lt;span style="color:#f92672">*&lt;/span>strVal &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> z_val));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>type &lt;span style="color:#f92672">=&lt;/span> STRING;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.str.val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.str.len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">strlen&lt;/span>(strVal&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.str.val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">z_val_print&lt;/span>(doubleVal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">z_val_print&lt;/span>(longVal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">z_val_print&lt;/span>(strVal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>(strVal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>(longVal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>(doubleVal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">z_val_print&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> z_val &lt;span style="color:#f92672">*&lt;/span>val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (val&lt;span style="color:#f92672">-&amp;gt;&lt;/span>type)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> LONG:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;type: long, val: %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, val&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.lval);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> DOUBLE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;type: double, val: %f&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, val&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.dval);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> STRING:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;type: string, val: %s, len: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, val&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.str.val, val&lt;span style="color:#f92672">-&amp;gt;&lt;/span>value.str.len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译">编译&lt;/h2>
&lt;p>采用gcc编译&lt;/p>
&lt;pre tabindex="0">&lt;code>gcc -o union union.c
&lt;/code>&lt;/pre>&lt;h2 id="执行">执行&lt;/h2>
&lt;pre tabindex="0">&lt;code>./union
&lt;/code>&lt;/pre>&lt;p>输出&lt;/p>
&lt;pre tabindex="0">&lt;code>type: double, val: 1.000000
type: long, val: 1
type: string, val: Hello World!, len: 12
&lt;/code>&lt;/pre>&lt;p>可以看到输出跟预期一样，我们也实现了一个“弱类型”的变量，是不是很有成就感呢？
实现上，多阅读源码可以多多参考别人的思维方式和编码习惯，所谓“站在巨人的肩膀上，才能看得更远”&lt;/p></description></item></channel></rss>