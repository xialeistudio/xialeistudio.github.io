<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on Lei Xia</title><link>https://www.ddhigh.com/tags/c++/</link><description>Recent content in C++ on Lei Xia</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 20 Oct 2023 20:52:05 +0000</lastBuildDate><atom:link href="https://www.ddhigh.com/tags/c++/atom.xml" rel="self" type="application/rss+xml"/><item><title>Build a linux/c++ development environment based on docker/vscode step-by-step</title><link>https://www.ddhigh.com/2023/10/20/build-a-linux-c-development-environment-based-on-docker-vscode/</link><pubDate>Fri, 20 Oct 2023 20:52:05 +0000</pubDate><guid>https://www.ddhigh.com/2023/10/20/build-a-linux-c-development-environment-based-on-docker-vscode/</guid><description>&lt;p>Sometimes we want to develop some high-performance c++ application on Linux(like epoll/ioturing), installing a virtual machine is a solution, but I think it&amp;rsquo;s not the most convenient solution, today I&amp;rsquo;ll share how to build a linux/c++ development environment based on docker/vscode.&lt;/p>
&lt;h2 id="principle">Principle&lt;/h2>
&lt;ul>
&lt;li>Windows/macOs support the &lt;a href="https://www.docker.com/">Docker&lt;/a> platform with which you can run any linux-based image. So we can install docker engine and launch an image(like Ubuntu), install any linux software like a real Linux system, boost, protobuf, &amp;hellip;&lt;/li>
&lt;li>&lt;a href="https://code.visualstudio.com/">Visual Studio Code(known as VSCode)&lt;/a> is a powerfull IDE which has a huge number of extensions, and Microsoft provider a official solution to make Remote Development(SSH, Docker, &amp;hellip;), so we can attach to a running container launched by Docker to do anything like a normal Linux!&lt;/li>
&lt;/ul>
&lt;h2 id="step">Step&lt;/h2>
&lt;p>Let&amp;rsquo;s start to build a full-feature linux/c++ development environment from scratch!&lt;/p>
&lt;h3 id="install-docker">Install Docker&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Download Docker from &lt;a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/&lt;/a> base on your OS.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install docker and launch it&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open a terminal(linux/macos) or PowerShell/CMD(Windows)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Execute the following command to &lt;strong>launch&lt;/strong> a Ubuntu:22.04 image, this is the latest Ubuntu LTS Image.&lt;/p>
&lt;p>&lt;em>This may take some time to download image, just be patient.&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -itd --name LinuxDevelop ubuntu:22.04
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>After the command return, you can see a hash, then go to step 6.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Execute the following command to attach in the Ubuntu container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker exec -it LinuxDevelop /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>After attached to the container, execute the following command to install essential software.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt-get install build-essential cmake git vim -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create a C++ file with the following code, which can tell us whether the c++ works.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include &amp;lt;iostream&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>int main&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std::cout &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; std::endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Execute the following command to compile this program.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>g++ -std&lt;span style="color:#f92672">=&lt;/span>c++17 test.cc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Then you can see &lt;code>a.out&lt;/code> in your current dictory, just execute it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./a.bout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">201703&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Congradulations!Your linux/c++ environment is working! Execute the following command to detatch from the current container. Because we need to execute docker command on our host to save this image.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Execute the following command on your &lt;strong>Host Terminal&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker commit LinuxDevelop linux_develop:1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Yes, you get a durable image of a linux/c++ development environment.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="install-visual-studio-code">Install Visual Studio Code&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Go to &lt;a href="https://code.visualstudio.com/">https://code.visualstudio.com/&lt;/a> download Visual Studio Code based on Your OS.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install Visual Studio Code and launch it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install the Remote Development Extension.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xialeistudio/picture-bucket/main/blog/image-20231020212527112.png" alt="image-20231020212527112">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After you have installed the extension, you can see a Remote Explorer, attach to your Ubuntu container.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xialeistudio/picture-bucket/main/blog/image-20231020213850965.png" alt="image-20231020213850965">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Visual Studio Code will automatically download some application in your Docker container.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install C++ Extension&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xialeistudio/picture-bucket/main/blog/image-20231020214434083.png" alt="image-20231020214434083">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enjoy your development in this Visual Studio Code like your local development, in which you can aslo launch Terminal.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="test">Test&lt;/h3>
&lt;p>Let&amp;rsquo;s build a boost-based application.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open terminal in Visual Studio Code and run the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install libboost-dev -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create a cpp file &lt;code>main.cc&lt;/code> with the following code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;boost/log/trivial.hpp&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>[])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BOOST_LOG_TRIVIAL(trace) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A trace severity message&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BOOST_LOG_TRIVIAL(debug) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A debug severity message&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BOOST_LOG_TRIVIAL(info) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;An informational severity message&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BOOST_LOG_TRIVIAL(warning) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A warning severity message&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BOOST_LOG_TRIVIAL(error) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;An error severity message&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BOOST_LOG_TRIVIAL(fatal) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A fatal severity message&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Compile and run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>g++ -std&lt;span style="color:#f92672">=&lt;/span>c++17 main.cc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">107400&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item></channel></rss>