<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thrift on Lei Xia</title><link>https://www.ddhigh.com/tags/thrift/</link><description>Recent content in thrift on Lei Xia</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 19 May 2019 16:10:47 +0000</lastBuildDate><atom:link href="https://www.ddhigh.com/tags/thrift/atom.xml" rel="self" type="application/rss+xml"/><item><title>在Swoole环境下运行注入Yii2框架的thrift应用</title><link>https://www.ddhigh.com/2019/05/19/running-thrift-on-swoole-with-yii2/</link><pubDate>Sun, 19 May 2019 16:10:47 +0000</pubDate><guid>https://www.ddhigh.com/2019/05/19/running-thrift-on-swoole-with-yii2/</guid><description>&lt;p>前两天发布了&lt;a href="https://www.ddhigh.com/2019/05/16/running-thrift-on-swoole.html">使用swoole来运行thrift应用&lt;/a>，项目虽然可以运行起来，但是周边的生态（如缓存，ORM，日志等等）并没有跟上，实际上开发体验比较差。周末研究了一下，把Yii2框架集成到了thrift应用上。&lt;/p>
&lt;p>项目地址：&lt;a href="https://github.com/swoole-foundation/yii2-swoole-thrift">https://github.com/swoole-foundation/yii2-swoole-thrift&lt;/a>&lt;/p>
&lt;p>Yii2优势：&lt;/p>
&lt;ul>
&lt;li>完美的OOP设计&lt;/li>
&lt;li>大量开箱即用的组件(DB/Cache/Logger/RBAC等等)&lt;/li>
&lt;li>组件化开发&lt;/li>
&lt;li>扩展性&lt;/li>
&lt;/ul>
&lt;p>这些支持是提高thrift应用开发效率的保证，毕竟没有人会直接在生产环境下手写SQL不是?&lt;/p></description></item><item><title>使用swoole来运行thrift应用</title><link>https://www.ddhigh.com/2019/05/16/running-thrift-on-swoole/</link><pubDate>Thu, 16 May 2019 14:32:41 +0000</pubDate><guid>https://www.ddhigh.com/2019/05/16/running-thrift-on-swoole/</guid><description>&lt;h2 id="swoole扩展简介">Swoole扩展简介&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Swoole：面向生产环境的 PHP 异步网络通信引擎&lt;/strong>&lt;/p>
&lt;p>使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。&lt;/p>
&lt;/blockquote>
&lt;h2 id="thrift">thrift&lt;/h2>
&lt;blockquote>
&lt;p>Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="swoole实现">swoole实现&lt;/h2>
&lt;p>thrift官方提供的PHP服务端是运行在php原生阻塞IO模式的，性能比较差。笔者使用Swoole的异步服务端+thrift提供的接口实现一个了异步协程化的thrift应用。&lt;/p>
&lt;p>此项目已经在github上开源：&lt;/p>
&lt;p>&lt;a href="https://github.com/xialeistudio/swoole-thrift.git">https://github.com/xialeistudio/swoole-thrift.git&lt;/a>&lt;/p></description></item><item><title>nodejs thrift多路复用客户端</title><link>https://www.ddhigh.com/2018/02/08/nodejs-thrift-multiple-client/</link><pubDate>Thu, 08 Feb 2018 15:35:48 +0000</pubDate><guid>https://www.ddhigh.com/2018/02/08/nodejs-thrift-multiple-client/</guid><description>&lt;p>&lt;a href="http://thrift.apache.org/tutorial/nodejs">官网nodejs示例&lt;/a>中只实现了服务端是单一service的情形，而对于服务端属于&lt;code>多个服务复用一个连接地址&lt;/code>的例子却未实现。&lt;/p>
&lt;p>查看thrift的nodejs库源码发现实际上还是支持的。以下来展示调用单一服务和多个服务的区别。&lt;/p>
&lt;h2 id="单一服务">单一服务&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;thrift&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Calculator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./gen-nodejs/Calculator&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ttypes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./gen-nodejs/tutorial_types&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">assert&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;assert&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">transport&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">TBufferedTransport&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">protocol&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">TBinaryProtocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">connection&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">createConnection&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">9090&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transport&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">transport&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">protocol&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">createClient&lt;/span>(&lt;span style="color:#a6e22e">Calculator&lt;/span>, &lt;span style="color:#a6e22e">connection&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 已经可以调用client方法
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="复用服务">复用服务&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;thrift&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Calculator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./gen-nodejs/Calculator&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ttypes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./gen-nodejs/tutorial_types&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">assert&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;assert&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">transport&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">TBufferedTransport&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">protocol&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">TBinaryProtocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">connection&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">createConnection&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">9090&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transport&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">transport&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">protocol&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">thrift&lt;/span>.&lt;span style="color:#a6e22e">Multiplexer&lt;/span>(); &lt;span style="color:#75715e">// 关键
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">createClient&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;calculator&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">Calculator&lt;/span>, &lt;span style="color:#a6e22e">connection&lt;/span>); &lt;span style="color:#75715e">// calculator为服务端声明的服务名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 已经可以调用client方法
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过测试，以上代码能与golang实现的服务端正常通信。&lt;/p></description></item></channel></rss>