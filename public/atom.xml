<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2019-07-20T05:32:14.803Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NodeJs简明教程(5)</title>
    <link href="https//www.ddhigh.com/2019/07/20/nodejs-guide-path.html"/>
    <id>https//www.ddhigh.com/2019/07/20/nodejs-guide-path.html</id>
    <published>2019-07-20T05:00:27.000Z</published>
    <updated>2019-07-20T05:32:14.803Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>本文是NodeJs简明教程的第五篇，将介绍NodeJs path模块相关的基本操作。</p><blockquote><p>path 模块提供用于处理文件路径和目录路径的实用工具。 </p></blockquote><p><strong>注意：path模块只是处理文件路径，说白了就是字符串处理，跟文件系统无关</strong></p><h2 id="读取路径的文件名"><a href="#读取路径的文件名" class="headerlink" title="读取路径的文件名"></a>读取路径的文件名</h2><blockquote><p>path.basename() 方法返回 path 的最后一部分，类似于 Unix 的 basename 命令。 尾部的目录分隔符将被忽略。</p></blockquote><ol><li><p>返回带扩展名</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.basename(<span class="string">'/usr/local/a.txt'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出 a.txt</span></div></pre></td></tr></table></figure></li><li><p>返回不带扩展名</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.basename(<span class="string">'/usr/local/a.txt'</span>,<span class="string">'.txt'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出 a</span></div></pre></td></tr></table></figure></li></ol><h2 id="读取文件路径的目录名"><a href="#读取文件路径的目录名" class="headerlink" title="读取文件路径的目录名"></a>读取文件路径的目录名</h2><blockquote><p>path.dirname() 方法返回 path 的目录名，类似于 Unix 的 dirname 命令。 尾部的目录分隔符将被忽略。<br>path.extname() 方法返回 path 的扩展名，从最后一次出现 .（句点）字符到 path 最后一部分的字符串结束。 如果在 path 的最后一部分中没有 . ，或者如果 path 的基本名称（参阅 path.basename()）除了第一个字符以外没有 .，则返回空字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.dirname(<span class="string">'/usr/local/a.txt'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出 /usr/local</span></div></pre></td></tr></table></figure><h2 id="获取文件扩展名"><a href="#获取文件扩展名" class="headerlink" title="获取文件扩展名"></a>获取文件扩展名</h2><blockquote><p>path.extname() 方法返回 path 的扩展名，从最后一次出现 .（句点）字符到 path 最后一部分的字符串结束。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.extname(<span class="string">'/usr/local/a.txt'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 输出 .txt</span></div></pre></td></tr></table></figure><h2 id="检测路径是否为绝对路径"><a href="#检测路径是否为绝对路径" class="headerlink" title="检测路径是否为绝对路径"></a>检测路径是否为绝对路径</h2><blockquote><p>path.isAbsolute() 方法检测 path 是否为绝对路径。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// linux || macosx</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'/usr/local'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'usr/local'</span>)); <span class="comment">// 输出 false</span></div><div class="line"><span class="comment">// windows</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'//server'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'\\\\server'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'c:\windows'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'foo/bar'</span>)); <span class="comment">// 输出 false</span></div></pre></td></tr></table></figure><h2 id="生成规范化的路径"><a href="#生成规范化的路径" class="headerlink" title="生成规范化的路径"></a>生成规范化的路径</h2><blockquote><p>path.join() 方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。<br>零长度的 path 片段会被忽略。 如果连接的路径字符串是零长度的字符串，则返回 ‘.’，表示当前工作目录。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.join(<span class="string">'/a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'..'</span>)); <span class="comment">// 输出 /a/b</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.join(<span class="string">'.'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'..'</span>,<span class="string">'c'</span>)); <span class="comment">// 输出 a/c</span></div></pre></td></tr></table></figure><h2 id="解析路径"><a href="#解析路径" class="headerlink" title="解析路径"></a>解析路径</h2><blockquote><p>path.parse() 方法返回一个对象，其属性表示 path 的重要元素。 尾部的目录分隔符将被忽略。<br>返回对象属性如下：<br>dir 目录<br>root 根目录<br>base 带扩展名的文件名或者目录名(最后一级是目录的情况下)<br>name 文件名(不带扩展名)或目录名<br>ext 文件扩展名(如果是目录则为空字符串)</p></blockquote><h2 id="获取两个路径的相对路径"><a href="#获取两个路径的相对路径" class="headerlink" title="获取两个路径的相对路径"></a>获取两个路径的相对路径</h2><blockquote><p>path.relative() 方法根据当前工作目录返回 from 到 to 的相对路径。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>)); </div><div class="line"><span class="comment">// 输出 ../../impl/bbb</span></div></pre></td></tr></table></figure><h2 id="获取规范化的绝对路径"><a href="#获取规范化的绝对路径" class="headerlink" title="获取规范化的绝对路径"></a>获取规范化的绝对路径</h2><blockquote><p>path.resolve() 方法将路径或路径片段的序列解析为绝对路径。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>)); <span class="comment">// 输出 /for/bar/baz</span></div><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>);); <span class="comment">// 输出 /tmp/file</span></div><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'../c/img.gif'</span>));</div><div class="line"><span class="comment">// 假设当前工作目录 /home/wwwroot，上述语句输出 /home/wwwroot/a/c/img.gif</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.resolve()); <span class="comment">// 假设当前工作目录 /home/wwwroot 输出 /home/wwwroot</span></div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>path</code>模块的主要就是处理路径相关，经常和<code>fs</code>模块共同使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是NodeJs简明教程的第五篇，将介绍NodeJs path模块相关的基本操作。&lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(4)</title>
    <link href="https//www.ddhigh.com/2019/07/20/nodejs-guide-filesystem.html"/>
    <id>https//www.ddhigh.com/2019/07/20/nodejs-guide-filesystem.html</id>
    <published>2019-07-20T03:38:51.000Z</published>
    <updated>2019-07-20T05:27:25.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>本文是NodeJs简明教程的第四篇，将介绍NodeJs文件系统模块相关的基本操作。</p><blockquote><p>fs 模块提供了一个 API，用于以模仿标准 POSIX 函数的方式与文件系统进行交互。</p></blockquote><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>文件系统的大部分函数都存在 <strong>异步调用</strong> 和 <strong>同步调用</strong> 两种形式。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步模式下，回调函数的第一个参数总为 <strong>Error</strong> 对象，且函数一般无返回值。</p><ol><li>如果为null，则本次调用未出错</li><li>如果不为null，证明本次调用出错</li></ol><p>新建 <code>index.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'./index.js'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;, (err, data) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'读取文件失败'</span>, err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><code>readFile</code>的第二个参数如果不指定编码，回调函数取到的<code>data</code>对象是<code>Buffer</code>，需要手动转字符串。读取文本文件可以指定编码，但是读取二进制文件(<code>比如读取图片文件</code>)</p><ol><li>在当前目录执行 <code>node index.js</code></li><li><p>输出如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.readFile(&apos;./index.js&apos;, &#123; encoding: &apos;utf8&apos; &#125;, (err, data) =&gt; &#123;</div><div class="line">    if (err) &#123;</div><div class="line">        console.error(&apos;读取文件失败&apos;, err);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    console.log(data);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ol><h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><p>同步模式下，返回值为调用函数的结果，如果调用失败，将抛出<strong>Error</strong>对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> data = fs.readFileSync(<span class="string">'./index.js'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>, e)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出数据和同步模式一致。</p><p>可以看到同步模式和异步模式下处理错误的方式是不同的。</p><blockquote><p>各位读者在生产中尽量不要使用同步函数，否则会阻塞事件循环。<br>当然，有一种情况例外，需要同步读取配置文件然后才启动服务器的这种情况是可以的。</p></blockquote><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>新建<code>index.js</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> data = <span class="string">'Hello World'</span>;</div><div class="line"></div><div class="line">fs.writeFile(<span class="string">'./a.txt'</span>, data, (error) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'保存失败'</span>, error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ol><li>执行<code>node index.js</code></li><li>输出<code>保存成功</code>，同时当前目录会多出内容为<code>Hello World</code>的文本文件。</li></ol><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ol><li><code>fs.copyFile(src,dest[,flags],callback)</code> 复制文件</li><li><code>fs.stat(path[,options],callback)</code> 读取文件状态</li><li><code>fs.unlink(path,callback)</code> 删除文件</li><li><code>fs.rename(oldPath,newPath,callback)</code> 重命名文件</li><li><code>fs.mkdir(path[,options],callback)</code> 新建目录</li><li><code>fs.rmdir(path,callback)</code> 删除目录</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文件系统的学习暂时到此为止，用到的时候大家可以详细查看文件，文件系统的函数调用方式和本文的示例都是类似的，各位读者可以举一反三。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是NodeJs简明教程的第四篇，将介绍NodeJs文件系统模块相关的基本操作。&lt;/p&gt;
&lt;blockquote
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(3)</title>
    <link href="https//www.ddhigh.com/2019/07/19/nodejs-guide-http-server.html"/>
    <id>https//www.ddhigh.com/2019/07/19/nodejs-guide-http-server.html</id>
    <published>2019-07-19T03:04:46.000Z</published>
    <updated>2019-07-20T03:41:56.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>本文是NodeJs简明教程的第三篇，将介绍NodeJs自带HTTP模块服务器相关的基本操作。</p><h2 id="HTTP模块介绍"><a href="#HTTP模块介绍" class="headerlink" title="HTTP模块介绍"></a>HTTP模块介绍</h2><p>以下是官方原文[1]：</p><blockquote><p>The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses — the user is able to stream data.</p></blockquote><p>大致意思就是：</p><blockquote><p>NodeJs的HTTP模块旨在支持传统上HTTP协议难以使用的许多功能，让这些功能或者特性能够使用简单的API进行调用。</p></blockquote><h2 id="HTTP模块服务器开发"><a href="#HTTP模块服务器开发" class="headerlink" title="HTTP模块服务器开发"></a>HTTP模块服务器开发</h2><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>以下是NodeJs最简单的HTTP服务器示例:</p><ol><li>新建<code>index.js</code></li><li><p>编码</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s'</span>, req.method, req.url)</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(req.headers))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'listen on 8080'</span>))</div></pre></td></tr></table></figure></li><li><p>打开终端或者控制台，执行 <code>node index.js</code>，终端或控制台会输出<code>listen on 8080</code>，此时HTTP服务器已经启动，如果启动失败，可以在下方留言</p></li><li><p>打开浏览器访问 <code>http://localhost:8080</code>，笔者输出如下：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"localhost:8080"</span>,</div><div class="line">    <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span>,</div><div class="line">    <span class="attr">"cache-control"</span>: <span class="string">"max-age=0"</span>,</div><div class="line">    <span class="attr">"upgrade-insecure-requests"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"</span>,</div><div class="line">    <span class="attr">"dnt"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>,</div><div class="line">    <span class="attr">"accept-encoding"</span>: <span class="string">"gzip, deflate, br"</span>,</div><div class="line">    <span class="attr">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li>NodeJs采用 <strong>CMD模块系统</strong>，<strong>require</strong> 用来加载模块，本例中加载了<strong>NodeJs自带的http模块</strong>以使用其中的功能</li><li><code>http.createServer</code>函数创建了一个 <strong>HTTP服务器</strong>，并配置了请求回调函数，在本系列的第一篇文章中说到事件驱动是需要回调函数进行监听的。</li><li><code>server.listen</code>是监听系统端口，第二个参数是<strong>监听成功的回调函数</strong></li></ol><h3 id="req对象"><a href="#req对象" class="headerlink" title="req对象"></a>req对象</h3><p>服务器收到的HTTP请求对象，以下是常用的属性或方法：</p><ol><li><code>req.url</code> 本次请求的路径(不包含域名)</li><li><code>req.headers</code> 本次请求的请求头</li><li><code>req.httpVersion</code> 本次请求的<code>HTTP协议版本号</code></li><li><code>req.method</code> 本次请求的请求方法,有<code>GET/POST/PUT等等</code></li><li><code>on()</code> 监听请求体数据 <code>POST/PUT/PATCH</code>方法会有请求体</li></ol><h3 id="res对象"><a href="#res对象" class="headerlink" title="res对象"></a>res对象</h3><p>res对象是req请求对象相应的响应对象，HTTP协议设计是<code>请求-应答</code>模型，一次请求对应一次应答。</p><p>以下是常用的属性或方法：</p><ol><li><code>res.writeHead</code> 输出<code>响应状态码</code>，<code>状态码说明</code>以及<code>多个HTTP响应头</code></li><li><code>res.end</code> 输出数据并结束本次响应</li><li><code>res.write</code> 输出<code>部分内容(chunk)</code></li><li><code>res.setHeader</code> 输出<code>单个响应头</code></li></ol><h3 id="请求路由"><a href="#请求路由" class="headerlink" title="请求路由"></a>请求路由</h3><p>NodeJs自带的HTTP服务器是没有路由功能的，也是就说，根据请求的URI来执行不同的逻辑需要开发者手动去做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (req.url === <span class="string">'/'</span>) &#123;</div><div class="line">        res.end(<span class="string">'index'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (req.url === <span class="string">'/user'</span>) &#123;</div><div class="line">        res.end(<span class="string">'user'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'listen on 8080'</span>));</div></pre></td></tr></table></figure><ol><li>执行<code>node index.js</code></li><li>浏览器访问 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 会输出<code>index</code></li><li>浏览器访问 <a href="http://localhost:8080/user" target="_blank" rel="external">http://localhost:8080/user</a> 会输出<code>user</code> </li></ol><h3 id="读取请求参数"><a href="#读取请求参数" class="headerlink" title="读取请求参数"></a>读取请求参数</h3><h4 id="读取GET请求参数"><a href="#读取GET请求参数" class="headerlink" title="读取GET请求参数"></a>读取GET请求参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> parsed = url.parse(req.url);</div><div class="line">    <span class="keyword">const</span> query = qs.parse(parsed.query);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(query));</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'listen on 8080'</span>));</div></pre></td></tr></table></figure><ol><li>执行<code>node index.js</code></li><li>浏览器访问 <a href="http://localhost:8080/?a=x&amp;b=2&amp;c[]=1&amp;c[]=2" target="_blank" rel="external">http://localhost:8080/?a=x&amp;b=2&amp;c[]=1&amp;c[]=2</a></li><li><p>显示</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"a"</span>: <span class="string">"x"</span>,</div><div class="line">     <span class="attr">"b"</span>: <span class="string">"2"</span>,</div><div class="line">     <span class="attr">"c[]"</span>: [<span class="string">"1"</span>, <span class="string">"2"</span>]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></li></ol><h4 id="读取请求体参数"><a href="#读取请求体参数" class="headerlink" title="读取请求体参数"></a>读取请求体参数</h4><p>HTTP协议规范中POST/PUT/PATCH都可以携带请求体，NodeJs HTTP服务器接收请求体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> data = Buffer.alloc(<span class="number">0</span>);</div><div class="line">    req.on(<span class="string">'data'</span>, (buffer) =&gt; &#123;</div><div class="line">        data = Buffer.concat([data, buffer]);</div><div class="line">    &#125;)</div><div class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</div><div class="line">        res.end(data.toString())</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'listen on 8080'</span>));</div></pre></td></tr></table></figure><ol><li>执行<code>node index.js</code></li><li>使用 <strong>postman</strong> 发出POST请求<code>http://localhost:8080</code>，本例POST请求体为 <code>a=1&amp;b=2</code></li><li><strong>postman</strong>会返回 <code>a=1&amp;b=2</code></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一个简单的HTTP服务器就到此结束了，当然，实际生产中该方法用的比较少，几乎都是使用框架进行开发，提高开发效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是NodeJs简明教程的第三篇，将介绍NodeJs自带HTTP模块服务器相关的基本操作。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(2)</title>
    <link href="https//www.ddhigh.com/2019/07/19/nodejs-guide-installation.html"/>
    <id>https//www.ddhigh.com/2019/07/19/nodejs-guide-installation.html</id>
    <published>2019-07-19T02:15:29.000Z</published>
    <updated>2019-07-19T03:04:23.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>本文是NodeJs简明教程的第二篇，将介绍NodeJs在不同操作系统下的安装操作。</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org</a></p><p>由于国内的网络原因，官网可能访问速度有点慢，推荐直接使用淘宝镜像源下载</p><h2 id="淘宝镜像源"><a href="#淘宝镜像源" class="headerlink" title="淘宝镜像源"></a>淘宝镜像源</h2><p><a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="external">https://npm.taobao.org/mirrors/node</a>，这里是所有版本/所有操作系统的NodeJs安装包。</p><p>本系列文章使用 <strong>latest-v10.x</strong>，也就是 <strong>10.x</strong> 的NodeJs版本</p><ol><li>进入<a href="https://npm.taobao.org/mirrors/node/latest-v10.x/" target="_blank" rel="external">https://npm.taobao.org/mirrors/node/latest-v10.x/</a></li><li>可以看到最新的版本号为 <strong>node-v10.16.0</strong></li></ol><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><ol><li><strong>64位</strong> 系统选择<a href="https://npm.taobao.org/mirrors/node/latest-v10.x/node-v10.16.0-x64.msi" target="_blank" rel="external">node-v10.16.0-x64.msi</a></li><li><strong>32位</strong> 系统选择<a href="https://npm.taobao.org/mirrors/node/latest-v10.x/node-v10.16.0-x86.msi" target="_blank" rel="external">node-v10.16.0-x86.msi</a></li><li>双击即可完成安装</li><li>安装完毕之后打开<code>cmd</code>执行<code>node -v</code>，显示版本号即为安装成功，安装失败的读者可以在下方留言</li></ol><h2 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h2><h3 id="PKG安装包安装"><a href="#PKG安装包安装" class="headerlink" title="PKG安装包安装"></a>PKG安装包安装</h3><ol><li>选择<a href="https://npm.taobao.org/mirrors/node/latest-v10.x/node-v10.16.0.pkg" target="_blank" rel="external">node-v10.16.0.pkg</a></li><li>双击即可完成安装</li><li>安装完毕之后打开<code>终端</code>执行<code>node -v</code>，显示版本号即为安装成功，安装失败的读者可以在下方留言</li></ol><h3 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h3><ol><li><code>brew install node</code></li><li>安装完毕之后打开<code>终端</code>执行<code>node -v</code>，显示版本号即为安装成功，安装失败的读者可以在下方留言</li></ol><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><ol><li>选择<a href="https://npm.taobao.org/mirrors/node/latest-v10.x/node-v10.16.0-linux-x64.tar.gz" target="_blank" rel="external">node-v10.16.0-linux-x64.tar.gz</a>下载文件</li><li>执行<code>wget https://npm.taobao.org/mirrors/node/latest-v10.x/node-v10.16.0-linux-x64.tar.gz</code></li><li>执行<code>tar xf node-v10.16.0-linux-x64.tar.gz</code>解压</li><li>执行<code>mv node-v10.16.0-linux-x64 /opt/node</code>移动到<code>/opt</code>目录</li><li>执行<code>echo &quot;export PATH=/opt/node/bin:$PATH&quot; &gt;&gt; ~/.bashrc</code>编辑<code>PATH</code>环境变量</li><li>执行<code>source ~/.bashrc</code>更新环境变量</li><li>执行<code>node -v</code>，显示版本号即为安装成功，安装失败的读者可以在下方留言</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是NodeJs简明教程的第二篇，将介绍NodeJs在不同操作系统下的安装操作。&lt;/p&gt;
&lt;h2 id=&quot;官网&quot;
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(1)</title>
    <link href="https//www.ddhigh.com/2019/07/18/nodejs-guide-about.html"/>
    <id>https//www.ddhigh.com/2019/07/18/nodejs-guide-about.html</id>
    <published>2019-07-18T02:02:46.000Z</published>
    <updated>2019-07-18T03:25:36.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>本文是NodeJs简明教程的第一篇，将介绍NodeJs整体架构以及重点概念。</p><h2 id="NodeJs究竟是什么"><a href="#NodeJs究竟是什么" class="headerlink" title="NodeJs究竟是什么"></a>NodeJs究竟是什么</h2><p>来看一段官方的说法[1]：</p><blockquote><p>As an asynchronous event driven JavaScript runtime, Node is designed to build scalable network applications. In the following “hello world” example, many connections can be handled concurrently. Upon each connection the callback is fired, but if there is no work to be done, Node will sleep.</p></blockquote><p>Google翻译版本：</p><blockquote><p>作为异步事件驱动的JavaScript运行时，Node旨在构建可伸缩的网络应用程序。 在下面的“hello world”示例中，可以同时处理许多连接。 在每次连接时都会触发回调，但是如果没有工作要做，Node将会休眠。</p></blockquote><p>结合上面的介绍，我们可以得出一个结论：</p><blockquote><p>NodeJs的本质是一个Javascript运行时。该运行时基于异步事件驱动进行运作。</p></blockquote><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>本文中的异步指异步IO。维基百科对异步IO的定义[2]：</p><blockquote><p>异步IO是计算机操作系统对输入输出的一种处理方式：发起IO请求的线程不等IO操作完成，就继续执行随后的代码，IO结果用其他方式通知发起IO请求的程序。与异步IO相对的是更为常见的“同步（阻塞）IO”：发起IO请求的线程不从正在调用的IO操作函数返回（即被阻塞），直至IO操作完成。</p></blockquote><p>一言以蔽之就是：</p><blockquote><p>执行IO请求后，调用方不等执行结果就继续执行下面的代码，IO操作完成后执行者会告诉调用者“我执行完了”。在NodeJs中通知方式是“回调”。</p></blockquote><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>事件驱动是相对 <strong>线程驱动</strong> 而言的。<strong>线程驱动</strong> 下服务器为每个请求新建一个线程去处理。<br>维基百科对事件驱动的定义[3]：</p><blockquote><p>事件驱动程序模型下的系统，基本上的架构是预先设计一个事件循环所形成的程序，这个事件循环程序不断地检查当前要处理的信息，根据要处理的信息运行一个触发函数进行必要的处理。其中这个外部信息可能来自一个目录夹中的文件，可能来自键盘或鼠标的动作，或者是一个时间事件。</p></blockquote><p>以NodeJs的HTTP服务器为例，当调用<code>server.listen</code>函数时，NodeJs就会创建一个事件循环，当有客户端请求过来时，NodeJs将该请求入队列进行后续处理，主线程以及轮询客户端请求并入队列，队列中的请求执行完毕后会通过回调函数的形式通知主线程，如此循环。</p><h3 id="Javascript运行时"><a href="#Javascript运行时" class="headerlink" title="Javascript运行时"></a>Javascript运行时</h3><p>Javascript运行时是个比较复杂的概念，本文在介绍 <strong>Javascript运行时</strong> 之前介绍一下 <strong>Javascript引擎</strong>。</p><h4 id="Javascript引擎"><a href="#Javascript引擎" class="headerlink" title="Javascript引擎"></a>Javascript引擎</h4><p>维基百科的定义[4]：</p><blockquote><p>JavaScript引擎是一个专门处理JavaScript脚本的虚拟机，一般会附带在网页浏览器之中。</p></blockquote><p>个人理解：</p><blockquote><p>Javascript引擎主要是对Javascript代码进行词法、语法等分析，通过编译器将代码编译成可执行的机器码让计算机去执行。</p></blockquote><p>目前业内出名的Javascript引擎非V8莫属了。</p><h4 id="运行时的组成"><a href="#运行时的组成" class="headerlink" title="运行时的组成"></a>运行时的组成</h4><p>Javascript可以运行在浏览器，也可以运行在服务器(NodeJs)中，有些API或者对象只有浏览器有(比如DOM,BOM等)，而有些API或者对象只有服务器中有(如文件操作，HTTP服务器等)。</p><blockquote><p>Javascript运行时包括了Javascript引擎、特定环境API、事件循环和事件队列。</p></blockquote><h3 id="NodeJs架构图"><a href="#NodeJs架构图" class="headerlink" title="NodeJs架构图"></a>NodeJs架构图</h3><p>NodeJs由C++语言基于libuv开发，分层设计，Javascript只是其基于V8提供的上层接口，换句话说，如果把上层接口换成其他语言实现，比如换成PHP实现，那么PHP就可以实现异步事件驱动的服务器，运行时名称就成为 <strong>NODE-PHP</strong>。</p><p><img src="https://more-happy.ddhigh.com/FqnmcUJhX0mGNDjMAIa1lOSJhNHJ" alt="NodeJs架构图"></p><ul><li>Node standard library NodeJs标准库，也是直接提供给开发者调用的顶层代码</li><li>Node bindings Javascript和libuv在该层进行通信，基于V8打通语言壁垒</li><li>V8 执行JS代码</li><li>libuv 高性能异步I/O、事件驱动、线程池的库，也是NodeJs高性能的保证</li><li>C-ares 提供异步DNS</li><li>http_parser、OpenSSL、Zlib 提供HTTP解析、openssl加解密、数据压缩等接口</li></ul><h3 id="NodeJs到底是不是单线程"><a href="#NodeJs到底是不是单线程" class="headerlink" title="NodeJs到底是不是单线程"></a>NodeJs到底是不是单线程</h3><blockquote><p>不是，主线程Javascript线程是单线程，libuv提供线程池，NodeJs不仅仅是一个Javascript引擎，而是一套运行时，不能将Javascript线程孤立出来。</p></blockquote><h2 id="NodeJs为什么这么快"><a href="#NodeJs为什么这么快" class="headerlink" title="NodeJs为什么这么快"></a>NodeJs为什么这么快</h2><ol><li>单线程解决了多线程环境下线程切换开销以及可能的线程同步开销</li><li>异步+事件驱动保证了NodeJs主线程不会阻塞，会一直接受请求(这也是受人诟病的地方，其他语言实现的服务器，请求过大会排队处理，NodeJs会将请求全部入队，导致内存暴涨)</li></ol><h2 id="NodeJs优缺点以及适合的场景"><a href="#NodeJs优缺点以及适合的场景" class="headerlink" title="NodeJs优缺点以及适合的场景"></a>NodeJs优缺点以及适合的场景</h2><ol><li>由于主线程Javascript线程是单线程，所以主线程不能做CPU密集操作（比如什么加解密之类的，这种操作只能有Javascript线程运行，会阻塞事件循环），所以NodeJs适合I/O密集场景，比如常见的（TCP/HTTP服务器）</li><li>对于前端开发者来说，几乎没有语言门槛</li><li>跨平台，NodeJs在主流操作系统都有对应的二进制程序</li><li>标准库强大，第三方库也很多，降低了造轮子成本</li><li>易于部署，服务器安装一个NodeJs程序配合NPM包管理器即可运行，不用像PHP那样还要安装扩展，配置前端HTTP服务器</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>欢迎继续关注本系列文章。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://nodejs.org/en/about/" target="_blank" rel="external">About NodeJs</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%BC%82%E6%AD%A5IO" target="_blank" rel="external">异步IO</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="external">事件驱动</a></li><li><a href="https://zh.wikipedia.org/wiki/JavaScript%E5%BC%95%E6%93%8E" target="_blank" rel="external">Javascript引擎</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是NodeJs简明教程的第一篇，将介绍NodeJs整体架构以及重点概念。&lt;/p&gt;
&lt;h2 id=&quot;NodeJs
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>实现一个JS深拷贝函数</title>
    <link href="https//www.ddhigh.com/2019/07/16/make-a-deep-copy-function.html"/>
    <id>https//www.ddhigh.com/2019/07/16/make-a-deep-copy-function.html</id>
    <published>2019-07-16T03:17:59.000Z</published>
    <updated>2019-07-17T10:37:11.010Z</updated>
    
    <content type="html"><![CDATA[<p>JS深拷贝概念并不新鲜，但是真正要真正理解原理还是有点难度的。这也是JS语言精粹之一吧。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;</div><div class="line">    name: <span class="string">'demo'</span>,</div><div class="line">    age: <span class="number">18</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = a;</div><div class="line">b.name = <span class="string">'demo1'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 &#123;name: "demo1", age: 18&#125;</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 输出 &#123;name: "demo1", age: 18&#125;</span></div></pre></td></tr></table></figure><p>因为JS对于对象的赋值使用的是浅拷贝，其中<code>一个实例变量</code>的赋值会影响到<code>所有指向该对象</code>的<code>变量</code></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>粗暴好使的 <code>JSON.parse(JSON.stringify)</code>，缺点: <code>丢失成员函数</code></li><li><p><code>Object.assign</code>，缺点：<code>只有第一级深拷贝，子级对象依旧是浅拷贝</code>，例子如下：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>:&#123;<span class="attr">demo</span>:<span class="string">'1'</span>&#125;&#125;;</div><div class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 &#123;name:&#123;demo:'1'&#125;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 输出 &#123;name:&#123;demo:'1'&#125;&#125;</span></div><div class="line">b.name.demo = <span class="string">'2'</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 &#123;name:&#123;demo:'2'&#125;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 输出 &#123;name:&#123;demo:'2'&#125;&#125;</span></div></pre></td></tr></table></figure></li></ol><h2 id="手动实现原理"><a href="#手动实现原理" class="headerlink" title="手动实现原理"></a>手动实现原理</h2><ol><li>遍历待拷贝对象</li><li>判断当前值类型，如果是object类型且不是null(null也是object)，则递归调用拷贝函数</li><li>如果当前值类型时null或者非object类型，直接return，退出本次递归</li></ol><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> result = obj;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj !== <span class="literal">null</span>) &#123;</div><div class="line">        result = <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ? []: &#123;&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</div><div class="line">            result[prop] = deepCopy(obj[prop]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>验证一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>:&#123;<span class="attr">demo</span>:<span class="string">'1'</span>&#125;&#125;;</div><div class="line"><span class="keyword">let</span> b = deepCopy(a);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 &#123;name:&#123;demo:'1'&#125;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 输出 &#123;name:&#123;demo:'1'&#125;&#125;</span></div><div class="line">b.name.demo = <span class="string">'2'</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 &#123;name:&#123;demo:'1'&#125;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 输出 &#123;name:&#123;demo:'2'&#125;&#125;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JS深拷贝概念并不新鲜，但是真正要真正理解原理还是有点难度的。这也是JS语言精粹之一吧。&lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序数据字段大小写问题</title>
    <link href="https//www.ddhigh.com/2019/07/16/wechat-mini-program-data-column-case.html"/>
    <id>https//www.ddhigh.com/2019/07/16/wechat-mini-program-data-column-case.html</id>
    <published>2019-07-16T03:17:38.000Z</published>
    <updated>2019-07-18T03:19:54.659Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在开发微信小程序登录以及加解密的时候，因为数据大小写的问题被坑了一把。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>小程序调用<code>wx.login</code>时会获得<code>code</code>，传输给服务端可以得到<code>openid</code>,<code>unionid(绑定了开放平台)</code>,<code>session_key</code></li><li>小程序调用<code>getUserInfo</code>会获得<code>encrypted_data</code>,<code>iv</code>,解密后得到<code>unionId</code>,<code>openId</code></li><li><code>unionid</code>和<code>openid</code>这两个场景<code>键名大小写是不同的</code></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li><p>服务端根据<code>code获取session_key</code>返回结果如下：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"session_key"</span>: <span class="string">"我是session_key"</span>,</div><div class="line">    <span class="attr">"openid"</span>: <span class="string">"我是openid"</span>,</div><div class="line">    <span class="attr">"unionid"</span>: <span class="string">"我是unionid"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>服务端根据<code>session_key解密encrypted_data和iv</code>返回结果如下：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"openId"</span>: <span class="string">"OPENID"</span>,</div><div class="line">    <span class="attr">"nickName"</span>: <span class="string">"NICKNAME"</span>,</div><div class="line">    <span class="attr">"gender"</span>: GENDER,</div><div class="line">    <span class="attr">"city"</span>: <span class="string">"CITY"</span>,</div><div class="line">    <span class="attr">"province"</span>: <span class="string">"PROVINCE"</span>,</div><div class="line">    <span class="attr">"country"</span>: <span class="string">"COUNTRY"</span>,</div><div class="line">    <span class="attr">"avatarUrl"</span>: <span class="string">"AVATARURL"</span>,</div><div class="line">    <span class="attr">"unionId"</span>: <span class="string">"UNIONID"</span>,</div><div class="line">    <span class="attr">"watermark"</span>:</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"appid"</span>:<span class="string">"APPID"</span>,</div><div class="line">        <span class="attr">"timestamp"</span>:TIMESTAMP</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>可以看到两次同样的字段<code>openid</code>和<code>unionid</code>大小写是不同的，此处容易踩坑。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>服务端根据<code>code换session_key/openid/unionid</code>是<code>小写</code></li><li>服务端根据<code>encrypted_data和iv</code>解密得到的<code>openId/unionId</code>是<code>大写</code></li></ol><p>最后，祝大家在开发过程中少踩坑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天在开发微信小程序登录以及加解密的时候，因为数据大小写的问题被坑了一把。&lt;/p&gt;
&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;小程序调用&lt;code&gt;wx.logi
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="小程序" scheme="https//www.ddhigh.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>百度分享不支持HTTPS解决办法</title>
    <link href="https//www.ddhigh.com/2019/07/12/baidu-share-support-https.html"/>
    <id>https//www.ddhigh.com/2019/07/12/baidu-share-support-https.html</id>
    <published>2019-07-12T11:10:52.000Z</published>
    <updated>2019-07-12T11:34:45.033Z</updated>
    
    <content type="html"><![CDATA[<p>这两天接入文章页百度分享时发现本地可以显示分享按钮，但是发布到线上之后发现分享按钮不会展示。打开浏览器调试工具发现，HTTPS下的百度分享资源未加载，起初以为是HTTPS站点下面使用的是HTTP协议的链接，但是查看源代码发现是自适应协议的， 所以问题应该是处在百度这里。</p><p>打开<code>https://bdimg.share.baidu.com/static/api/js/share.js</code>发现浏览器提示<code>NET::ERR_CERT_COMMON_NAME_INVALID</code>，也就是<code>访问的域名和证书配置的域名不匹配</code>，证书的域名是<code>*.baidu.com</code>，访问的域名是<code>bdimg.share.baidu.com</code>，泛域名是不可以跨级使用的。</p><p>虽然是百度的问题，但是咱也不可能要他去改这个分享，所以只能自己来处理了。</p><h2 id="可能的处理方案"><a href="#可能的处理方案" class="headerlink" title="可能的处理方案"></a>可能的处理方案</h2><ol><li>全站使用HTTP，放弃该方案（现在都9012年了，免费证书一大把，基本都是HTTPS站点了）</li><li>将百度分享的资源打包下来进行部署<ol><li>部署到自己的服务器（成本低，易迁移，但是服务器带宽是个问题）</li><li>部署到CDN，本文以七牛为例</li></ol></li></ol><h2 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h2><p>百度分享相关JS我已经分享到github了，<a href="https://github.com/xialeistudio/baidu-share-resource" target="_blank" rel="external">一键直达仓库</a></p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><ol><li>将百度分享的资源解压到本地</li><li>使用PHP遍历目录上传到七牛(本文用的SPL进行文件夹遍历)</li><li>替换使用的百度分享JS路径</li></ol><h3 id="使用PHP变量目录上传到七牛"><a href="#使用PHP变量目录上传到七牛" class="headerlink" title="使用PHP变量目录上传到七牛"></a>使用PHP变量目录上传到七牛</h3><p>文件目录如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">|--static(百度分享资源目录)</span></div><div class="line"><span class="string">|--DirectorySync.php</span></div><div class="line"><span class="string">|--FilterScanner.php</span></div><div class="line"><span class="string">|--index.php</span></div></pre></td></tr></table></figure><p>DirectorySync.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 目录同步器</span></div><div class="line"><span class="comment"> * Class DirectorySync</span></div><div class="line"><span class="comment"> * <span class="doctag">@package</span> sync</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> xialeistudio</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-07-11</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectorySync</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $accessKey;</div><div class="line">    <span class="keyword">private</span> $secretKey;</div><div class="line">    <span class="keyword">private</span> $bucket;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@var</span> Auth</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> $auth;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * DirectorySync constructor.</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> $accessKey</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> $secretKey</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> $bucket</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($accessKey, $secretKey, $bucket)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;accessKey = $accessKey;</div><div class="line">        <span class="keyword">$this</span>-&gt;secretKey = $secretKey;</div><div class="line">        <span class="keyword">$this</span>-&gt;bucket = $bucket;</div><div class="line">        <span class="keyword">$this</span>-&gt;auth = <span class="keyword">new</span> Auth($accessKey, $secretKey);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 同步目录</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> array $list</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> xialeistudio</span></div><div class="line"><span class="comment">     * <span class="doctag">@date</span> 2019-07-11</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sync</span><span class="params">(array $list)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $uploader = <span class="keyword">new</span> UploadManager();</div><div class="line">        $token = <span class="keyword">$this</span>-&gt;auth-&gt;uploadToken(<span class="keyword">$this</span>-&gt;bucket);</div><div class="line">        <span class="keyword">foreach</span> ($list <span class="keyword">as</span> $path =&gt; $keyPrefix) &#123;</div><div class="line">            $scanner = <span class="keyword">new</span> FilterScanner($path);</div><div class="line">            <span class="keyword">foreach</span> ($scanner <span class="keyword">as</span> $filename) &#123;</div><div class="line">                printf(<span class="string">"uploading %s \n"</span>, $filename);</div><div class="line">                <span class="comment">/** <span class="doctag">@var</span> Error $error */</span></div><div class="line">                <span class="keyword">list</span>($ret, $error) = $uploader-&gt;putFile($token, $keyPrefix . $filename, $filename);</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">empty</span>($error)) &#123;</div><div class="line">                    printf(<span class="string">"uploading %s error: %s\n"</span>, $filename, $error-&gt;message());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>FilterScanner.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 文件扫描器</span></div><div class="line"><span class="comment"> * Class FilterScanner</span></div><div class="line"><span class="comment"> * <span class="doctag">@package</span> sync</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> xialeistudio</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-07-11</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterScanner</span> <span class="keyword">extends</span> <span class="title">FilterIterator</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * FilterScanner constructor.</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> $path</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">parent</span>::__construct(<span class="keyword">new</span> RecursiveIteratorIterator(<span class="keyword">new</span> RecursiveDirectoryIterator($path)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Check whether the current element of the iterator is acceptable</span></div><div class="line"><span class="comment">     * <span class="doctag">@link</span> https://php.net/manual/en/filteriterator.accept.php</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> bool true if the current element is acceptable, otherwise false.</span></div><div class="line"><span class="comment">     * <span class="doctag">@since</span> 5.1.0</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> substr(<span class="keyword">$this</span>-&gt;current(), <span class="number">-1</span>, <span class="number">1</span>) != <span class="string">'.'</span> &amp;&amp; substr(<span class="keyword">$this</span>-&gt;current(), <span class="number">-2</span>, <span class="number">2</span>) != <span class="string">'..'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$sync = <span class="keyword">new</span> DirectorySync(ACCESS_KEY, SECRET_KEY, BUCKET);</div><div class="line">$sync-&gt;sync([</div><div class="line">    <span class="string">'static'</span> =&gt; <span class="string">''</span></div><div class="line">]);</div></pre></td></tr></table></figure><p>上传之前需要修改一下百度分享js相关的域名。打开<code>static/api/js/share.js</code>，搜索到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jscfg: &#123;<span class="attr">domain</span>: &#123;<span class="attr">staticUrl</span>: <span class="string">"/"</span>&#125;&#125;</div></pre></td></tr></table></figure><p>将<code>staticUrl</code>改成七牛的域名，本站使用的是<code>static.ddhigh.com</code>，所以改完之后的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jscfg: &#123;<span class="attr">domain</span>: &#123;<span class="attr">staticUrl</span>: <span class="string">"//static.ddhigh.com/"</span>&#125;&#125;</div></pre></td></tr></table></figure><p>完事之后执行<code>php index.php</code>上传到七牛，此时就可以随意部署了~。</p><h2 id="部署到应用"><a href="#部署到应用" class="headerlink" title="部署到应用"></a>部署到应用</h2><p>将以往使用<code>bdimg.share.baidu.com/static/api/js/share.js</code>的地方换成<code>//static.ddhigh.com/static/api/js/share.js</code>即可，其他资源会自动加载。</p><p><em>本站的CDN域名做了防盗链处理，各位如果直接用我的share.js链接是会有问题的</em></p><h2 id="hexo-Next百度分享的额外处理"><a href="#hexo-Next百度分享的额外处理" class="headerlink" title="hexo Next百度分享的额外处理"></a>hexo Next百度分享的额外处理</h2><p>上传到七牛这个步骤完成之后，搜索文件<code>baidushare.swig</code>，找到最下面的如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span>(<span class="built_in">document</span>)<span class="number">0</span>[(getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]||body).appendChild(createElement(<span class="string">'script'</span>)).src=<span class="string">'//bdimg.share.baidu.com/static/api/js/share.js?cdnversion='</span>+~(-<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">36e5</span>)];</div></pre></td></tr></table></figure><p>将链接替换为自己的CDN链接，我这边替换后的结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span>(<span class="built_in">document</span>)<span class="number">0</span>[(getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]||body).appendChild(createElement(<span class="string">'script'</span>)).src=<span class="string">'//static.ddhigh.com/static/api/js/share.js?cdnversion='</span>+~(-<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">36e5</span>)];</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天接入文章页百度分享时发现本地可以显示分享按钮，但是发布到线上之后发现分享按钮不会展示。打开浏览器调试工具发现，HTTPS下的百度分享资源未加载，起初以为是HTTPS站点下面使用的是HTTP协议的链接，但是查看源代码发现是自适应协议的， 所以问题应该是处在百度这里。&lt;/
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
  </entry>
  
  <entry>
    <title>Js使用AES加密PHP使用Openssl解密</title>
    <link href="https//www.ddhigh.com/2019/07/11/js-encrypt-php-decrypt.html"/>
    <id>https//www.ddhigh.com/2019/07/11/js-encrypt-php-decrypt.html</id>
    <published>2019-07-11T07:00:43.000Z</published>
    <updated>2019-07-11T07:19:28.542Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到的几个网站在提交密码时提交的已经是密文，也就是说在网络上传输的密码是密文，这样提升了密码在网络传输中的安全性。</p><p>后端语言加解密已经有很成熟的方案了，前端的话Google之前出过一个<a href="https://www.npmjs.com/package/crypto-js" target="_blank" rel="external">crypto-js</a>，为浏览器的js提供了加解密方案。今天一起来了解一下基于AES的前后端加解密流程。</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ol><li>安装npm包 <code>npm install crypto-js</code></li><li><p>加密代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">"crypto-js"</span>);</div><div class="line"><span class="keyword">const</span> key = CryptoJS.enc.Latin1.parse(<span class="string">'1234567812345678'</span>);</div><div class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Latin1.parse(<span class="string">'1234567812345678'</span>);</div><div class="line"><span class="keyword">const</span> encoded = CryptoJS.AES.encrypt(<span class="string">'hahaha'</span>, key, &#123;</div><div class="line">    iv: iv,</div><div class="line">    mode: CryptoJS.mode.CBC,</div><div class="line">    adding: CryptoJS.pad.ZeroPadding</div><div class="line">&#125;).toString()</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'encoded'</span>, encoded)</div></pre></td></tr></table></figure></li><li><p>解密代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> key = CryptoJS.enc.Latin1.parse(<span class="string">'123456781234567812345678'</span>);</div><div class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Latin1.parse(<span class="string">'1234567812345678'</span>);</div><div class="line"><span class="keyword">const</span> decoded = CryptoJS.AES.decrypt(encoded, key, &#123;</div><div class="line">    iv: iv,</div><div class="line">    mode: CryptoJS.mode.CBC,</div><div class="line">    adding: CryptoJS.pad.ZeroPadding</div><div class="line">&#125;).toString(CryptoJS.enc.Utf8)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'decoded'</span>, decoded);</div></pre></td></tr></table></figure></li><li><p>输出如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">encoded 6bcgYd4f4ZgNOQH/3tqMpg==</div><div class="line">decoded hahaha</div></pre></td></tr></table></figure></li></ol><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>直接使用openssl解密即可，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$encoded = <span class="string">'6bcgYd4f4ZgNOQH/3tqMpg=='</span>;</div><div class="line">$key  = <span class="string">'123456781234567812345678'</span>;</div><div class="line">$iv = <span class="string">'1234567812345678'</span>;</div><div class="line">var_dump(openssl_decrypt($encoded, <span class="string">'AES-192-CBC'</span>, $key, <span class="number">0</span>,$iv));</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string(6) &quot;hahaha&quot;</div></pre></td></tr></table></figure><p>注意事项</p><ol><li>AES加密位数跟密钥<code>key</code>有关, 以下是密钥位数和加密对应关系<ol><li>16 =&gt; AES-128</li><li>24 =&gt; AES-192</li><li>32 =&gt; AES-256</li></ol></li><li><code>iv</code>是初始化向量. 超过16字节或者不足16字节都会被补足16字节或者截断到16字节。由于AES是块加密，铭文被分割成固定长度的块（一般是16字节长度），所以<code>iv</code>也是<code>16</code>字节。</li><li>CBC是加密模式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到的几个网站在提交密码时提交的已经是密文，也就是说在网络上传输的密码是密文，这样提升了密码在网络传输中的安全性。&lt;/p&gt;
&lt;p&gt;后端语言加解密已经有很成熟的方案了，前端的话Google之前出过一个&lt;a href=&quot;https://www.npmjs.com/pack
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="aes" scheme="https//www.ddhigh.com/tags/aes/"/>
    
      <category term="encrypt" scheme="https//www.ddhigh.com/tags/encrypt/"/>
    
  </entry>
  
  <entry>
    <title>vue webpack重写cookie路径</title>
    <link href="https//www.ddhigh.com/2019/07/08/vue-webpack-rewrite-cookie-path.html"/>
    <id>https//www.ddhigh.com/2019/07/08/vue-webpack-rewrite-cookie-path.html</id>
    <published>2019-07-08T09:24:05.000Z</published>
    <updated>2019-07-08T09:32:19.774Z</updated>
    
    <content type="html"><![CDATA[<p>webpack提供的反向代理服务器在开发阶段非常方便，几行简单的代码配置就可以使用反向代理功能，包括路径重写、cookie处理等。</p><p>项目开发阶段使用的API路径是 <code>/admin</code>，部署到线上是<code>/</code>，所以在开发过程中需要在<code>proxyTable</code>进行反向代理配置，将路径重写掉，路径重写代码如下(<code>config/index.js</code>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">      <span class="string">'/admin'</span>: &#123;</div><div class="line">        target: <span class="string">'http://127.0.0.1:8080'</span>,</div><div class="line">        changeOrigin: <span class="literal">true</span>,</div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/admin'</span>: <span class="string">'/admin2'</span></div><div class="line">        &#125;,</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动项目之后进行登录，此时API请求成功，但是获取登录用户信息时发现cookie没有带过去。查看请求发现登录请求的<code>Set-Cookie</code>响应头中的<code>Path</code>是<code>/admin2</code>。但是咱们请求的路径是<code>/admin</code>，cookie当然不会生效。</p><p>查阅文档发现，proxyTable支持<code>onProxyRes</code>回调函数来自定义响应，流程是通过替换后端服务器设置的<code>cookie-path</code>来进行处理，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">      <span class="string">'/admin'</span>: &#123;</div><div class="line">        target: <span class="string">'http://127.0.0.1:8080'</span>,</div><div class="line">        changeOrigin: <span class="literal">true</span>,</div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/admin'</span>: <span class="string">'/lesson/admin'</span></div><div class="line">        &#125;,</div><div class="line">        onProxyRes: <span class="function"><span class="keyword">function</span> (<span class="params">proxyRes, req, res</span>) </span>&#123;</div><div class="line">          <span class="keyword">const</span> cookies = proxyRes.headers[<span class="string">'set-cookie'</span>]</div><div class="line">          <span class="keyword">if</span> (cookies) &#123;</div><div class="line">            <span class="keyword">const</span> newCookies = cookies.map(<span class="function"><span class="params">cookie</span> =&gt;</span> &#123;</div><div class="line">              <span class="keyword">return</span> cookie.replace(<span class="regexp">/Path=\/admin2/</span>, <span class="string">'Path=/'</span>)</div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">delete</span> proxyRes.headers[<span class="string">'set-cookie'</span>]</div><div class="line">            proxyRes.headers[<span class="string">'set-cookie'</span>] = newCookies</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>重启webpack之后重新登录，发现cookie的路径已经被重写到<code>/</code>了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack提供的反向代理服务器在开发阶段非常方便，几行简单的代码配置就可以使用反向代理功能，包括路径重写、cookie处理等。&lt;/p&gt;
&lt;p&gt;项目开发阶段使用的API路径是 &lt;code&gt;/admin&lt;/code&gt;，部署到线上是&lt;code&gt;/&lt;/code&gt;，所以在开发过程
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="vue" scheme="https//www.ddhigh.com/tags/vue/"/>
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>druid SQL监控不显示问题</title>
    <link href="https//www.ddhigh.com/2019/07/08/druid-sql-monitor.html"/>
    <id>https//www.ddhigh.com/2019/07/08/druid-sql-monitor.html</id>
    <published>2019-07-08T09:13:40.000Z</published>
    <updated>2019-07-10T03:28:32.711Z</updated>
    
    <content type="html"><![CDATA[<p>新版druid数据源驱动的SQL监控如果用以前的老版本配置是无法监控到SQL的：</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    datasource:</span></div><div class="line"><span class="attr">        druid:</span></div><div class="line"><span class="attr">            filters:</span></div><div class="line"><span class="bullet">                -</span> <span class="string">stat</span></div><div class="line"><span class="bullet">                -</span> <span class="string">wall</span></div><div class="line"><span class="bullet">                -</span> <span class="string">log4j</span></div></pre></td></tr></table></figure><p>启动应用之后访问druid监控页面，除了SQL相关的页面都正常工作，但是访问SQL监控页面时没有看到SQL记录。<br>查看监控页面 <strong>数据源</strong> 菜单发现 <strong>filter类名</strong> 显示的是空，估计是filter配置有问题导致。</p><p>查阅官方文档发现filter配置有变更，改成以下形式即可统计SQL，同时在数据源页面 <strong>filter类名</strong> 会显示正常。</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    datasource:</span></div><div class="line"><span class="attr">        druid:</span></div><div class="line"><span class="attr">            initial-size:</span> <span class="number">5</span></div><div class="line"><span class="attr">            min-idle:</span> <span class="number">5</span></div><div class="line"><span class="attr">            max-active:</span> <span class="number">20</span></div><div class="line"><span class="attr">            max-wait:</span> <span class="number">5000</span></div><div class="line">            <span class="comment"># 状态监控</span></div><div class="line"><span class="attr">            filter:</span></div><div class="line"><span class="attr">                stat:</span></div><div class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                db-type:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">                log-slow-sql:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                slow-sql-millis:</span> <span class="number">2000</span></div><div class="line">            <span class="comment"># 监控过滤器</span></div><div class="line"><span class="attr">            web-stat-filter:</span></div><div class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                exclusions:</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.js"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.gif"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.jpg"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.png"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.css"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.ico"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"/druid/*"</span></div><div class="line">            <span class="comment"># druid 监控页面</span></div><div class="line"><span class="attr">            stat-view-servlet:</span></div><div class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                url-pattern:</span> <span class="string">/druid/*</span></div><div class="line"><span class="attr">                reset-enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">                login-username:</span> <span class="string">root</span></div><div class="line"><span class="attr">                login-password:</span> <span class="string">root</span></div></pre></td></tr></table></figure><p>数据源filter类名：<strong>com.alibaba.druid.filter.stat.StatFilter</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新版druid数据源驱动的SQL监控如果用以前的老版本配置是无法监控到SQL的：&lt;/p&gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
      
    
    </summary>
    
      <category term="java" scheme="https//www.ddhigh.com/categories/java/"/>
    
    
      <category term="druid" scheme="https//www.ddhigh.com/tags/druid/"/>
    
      <category term="spring boot" scheme="https//www.ddhigh.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>解决数据库N+1查询问题</title>
    <link href="https//www.ddhigh.com/2019/06/18/database-n-1-solution.html"/>
    <id>https//www.ddhigh.com/2019/06/18/database-n-1-solution.html</id>
    <published>2019-06-18T07:50:28.000Z</published>
    <updated>2019-06-18T09:17:55.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>数据表如下：</p><p>department表</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>测试部门</td></tr></tbody></table><p> user表</p><table><thead><tr><th>id</th><th>name</th><th>department_id</th></tr></thead><tbody><tr><td>1</td><td>test</td><td>1</td></tr></tbody></table><p>需求是得到以下结构的数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">"name"</span>:<span class="string">"test"</span>,</div><div class="line">        <span class="attr">"department_id"</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">"department"</span>:&#123;</div><div class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">            <span class="attr">"name"</span>:<span class="string">"测试部门"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="方法一-循环查询"><a href="#方法一-循环查询" class="headerlink" title="方法一:循环查询"></a>方法一:循环查询</h2><ol><li>查询用户列表</li><li>循环用户列表查询对应的部门信息</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$users = $db-&gt;query(<span class="string">'SELECT * FROM `user`'</span>);</div><div class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> &amp;$user) &#123;</div><div class="line">    $users[<span class="string">'department'</span>] = $db-&gt;query(<span class="string">'SELECT * FROM `department` WHERE `id` = '</span>.$user[<span class="string">'department_id'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该方法查询次数为：1+N(1次查询列表，N次查询部门)，性能最低，不可取。</p><h2 id="方法二：连表"><a href="#方法二：连表" class="headerlink" title="方法二：连表"></a>方法二：连表</h2><ol><li>通过连表查询用户和部门数据</li><li>处理返回数据</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$users = $db-&gt;query(<span class="string">'SELECT * FROM `user` INNER JOIN `department` ON `department`.`id` = `user`.`department_id`'</span>);</div><div class="line"><span class="comment">// 手动处理返回结果为需求结构</span></div></pre></td></tr></table></figure><p>该方法其实也有局限性，如果 <em>user</em> 和 <em>department</em> 不在同一个服务器是不可以连表的。</p><h2 id="方法三：1-1查询"><a href="#方法三：1-1查询" class="headerlink" title="方法三：1+1查询"></a>方法三：1+1查询</h2><ol><li>该方法先查询1次用户列表</li><li>取出列表中的部门ID组成数组</li><li>查询步骤2中的部门</li><li>合并最终数据</li></ol><p>代码大致如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$users = $db-&gt;query(<span class="string">'SELECT * FROM `user`'</span>);</div><div class="line">$departmentIds =[ ];</div><div class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> $user) &#123;</div><div class="line">    <span class="keyword">if</span>(!in_array($user[<span class="string">'department_id'</span>], $departmentIds)) &#123;</div><div class="line">        $departmentIds[] = $user[<span class="string">'department_id'</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$departments = $db-&gt;query(<span class="string">'SELECT * FROM `department` WHERE id in ('</span>.join(<span class="string">','</span>,$department_id).<span class="string">')'</span>);</div><div class="line">$map = []; <span class="comment">// [部门ID =&gt; 部门item]</span></div><div class="line"><span class="keyword">foreach</span>($departments <span class="keyword">as</span> $department) &#123;</div><div class="line">    $map[$department[<span class="string">'id'</span>]] = $department;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> $user) &#123;</div><div class="line">    $user[<span class="string">'department'</span>] = $map[$user[<span class="string">'department_id'</span>]] ?? <span class="keyword">null</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>该方法对两个表没有限制，在目前微服务盛行的情况下是比较好的一种做法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;数据表如下：&lt;/p&gt;
&lt;p&gt;department表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;nam
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="database" scheme="https//www.ddhigh.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>在Swoole环境下运行注入Yii2框架的thrift应用</title>
    <link href="https//www.ddhigh.com/2019/05/19/running-thrift-on-swoole-with-yii2.html"/>
    <id>https//www.ddhigh.com/2019/05/19/running-thrift-on-swoole-with-yii2.html</id>
    <published>2019-05-19T08:10:47.000Z</published>
    <updated>2019-05-19T08:15:37.106Z</updated>
    
    <content type="html"><![CDATA[<p>前两天发布了<a href="/2019/05/16/running-thrift-on-swoole.html">使用swoole来运行thrift应用</a>，项目虽然可以运行起来，但是周边的生态（如缓存，ORM，日志等等）并没有跟上，实际上开发体验比较差。周末研究了一下，把Yii2框架集成到了thrift应用上。</p><p>项目地址：<a href="https://github.com/swoole-foundation/yii2-swoole-thrift" target="_blank" rel="external">https://github.com/swoole-foundation/yii2-swoole-thrift</a></p><p>Yii2优势：</p><ul><li>完美的OOP设计</li><li>大量开箱即用的组件(DB/Cache/Logger/RBAC等等)</li><li>组件化开发</li><li>扩展性</li></ul><p>这些支持是提高thrift应用开发效率的保证，毕竟没有人会直接在生产环境下手写SQL不是?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天发布了&lt;a href=&quot;/2019/05/16/running-thrift-on-swoole.html&quot;&gt;使用swoole来运行thrift应用&lt;/a&gt;，项目虽然可以运行起来，但是周边的生态（如缓存，ORM，日志等等）并没有跟上，实际上开发体验比较差。周末研究了一
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="thrift" scheme="https//www.ddhigh.com/tags/thrift/"/>
    
      <category term="swoole" scheme="https//www.ddhigh.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>在swoole上运行Yii2应用</title>
    <link href="https//www.ddhigh.com/2019/05/19/running-yii2-on-swoole.html"/>
    <id>https//www.ddhigh.com/2019/05/19/running-yii2-on-swoole.html</id>
    <published>2019-05-19T08:02:07.000Z</published>
    <updated>2019-05-19T08:10:17.845Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yiiframework.com" target="_blank" rel="external">Yii2</a>：业界著名的开发框架，完美的OOP设计以及组件化开发思想保证了框架的扩展性。<br><a href="https://www.swoole.com/" target="_blank" rel="external">Swoole</a>：面向生产环境的 PHP 异步网络通信引擎。使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。</p><h2 id="Yii2优点"><a href="#Yii2优点" class="headerlink" title="Yii2优点"></a>Yii2优点</h2><ul><li>完美的OOP设计</li><li>大量开箱即用的组件(DB/Cache/Logger/RBAC等等)</li><li>组件化开发</li><li>扩展性</li></ul><h2 id="Swoole优点"><a href="#Swoole优点" class="headerlink" title="Swoole优点"></a>Swoole优点</h2><ul><li>高性能/异步/事件驱动</li><li>使用PHP语言开发</li><li>单文件容器化(传统的php-fpm容器化有点麻烦，一般使用apache的镜像，但是性能不行)</li></ul><p>如果这两者结合将会擦出什么样的火花呢?</p><h2 id="Yii2-Swoole-Extension"><a href="#Yii2-Swoole-Extension" class="headerlink" title="Yii2-Swoole-Extension"></a>Yii2-Swoole-Extension</h2><p><a href="https://github.com/swoole-foundation/yii2-swoole-extension" target="_blank" rel="external">Yii2-Swoole-Extension</a></p><p>基于swoole运行环境的Yii2扩展，基于标准Yii2组件化思想开发，对应用无侵入性，可以随时从 PHP-FPM &lt;-&gt; swoole 互相迁移。</p><p>通过简单的几行代码即可完成传统PHP-FPM应用到Swoole的升级，给应用带来实打实的性能提升!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.yiiframework.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yii2&lt;/a&gt;：业界著名的开发框架，完美的OOP设计以及组件化开发思想保证了框架的扩展性。&lt;br&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="yii2" scheme="https//www.ddhigh.com/tags/yii2/"/>
    
      <category term="swoole" scheme="https//www.ddhigh.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>使用swoole来运行thrift应用</title>
    <link href="https//www.ddhigh.com/2019/05/16/running-thrift-on-swoole.html"/>
    <id>https//www.ddhigh.com/2019/05/16/running-thrift-on-swoole.html</id>
    <published>2019-05-16T06:32:41.000Z</published>
    <updated>2019-05-16T06:42:27.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swoole扩展简介"><a href="#Swoole扩展简介" class="headerlink" title="Swoole扩展简介"></a>Swoole扩展简介</h2><blockquote><p><strong>Swoole：面向生产环境的 PHP 异步网络通信引擎</strong></p><p>使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。</p></blockquote><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><blockquote><p>Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的。</p></blockquote><h2 id="swoole实现"><a href="#swoole实现" class="headerlink" title="swoole实现"></a>swoole实现</h2><p>thrift官方提供的PHP服务端是运行在php原生阻塞IO模式的，性能比较差。笔者使用Swoole的异步服务端+thrift提供的接口实现一个了异步协程化的thrift应用。</p><p>此项目已经在github上开源：</p><p><a href="https://github.com/xialeistudio/swoole-thrift.git" target="_blank" rel="external">https://github.com/xialeistudio/swoole-thrift.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Swoole扩展简介&quot;&gt;&lt;a href=&quot;#Swoole扩展简介&quot; class=&quot;headerlink&quot; title=&quot;Swoole扩展简介&quot;&gt;&lt;/a&gt;Swoole扩展简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Swoole：面向生产环境的 PH
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="thrift" scheme="https//www.ddhigh.com/tags/thrift/"/>
    
      <category term="swoole" scheme="https//www.ddhigh.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>在缓存中使用闭包函数</title>
    <link href="https//www.ddhigh.com/2019/05/14/use-closure-in-cache.html"/>
    <id>https//www.ddhigh.com/2019/05/14/use-closure-in-cache.html</id>
    <published>2019-05-14T03:48:58.000Z</published>
    <updated>2019-05-14T05:46:59.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>PHP官方文档对于闭包函数的定义：</p><blockquote><p>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。</p></blockquote><p>简单来说，闭包函数也是一种数据类型，可以直接使用变量来存储、传参、调用等等。</p><h2 id="传统缓存操作"><a href="#传统缓存操作" class="headerlink" title="传统缓存操作"></a>传统缓存操作</h2><p>操作缓存的时候一般步骤如下：</p><ol><li>读取缓存</li><li>如果缓存不为空则返回缓存数据</li><li>读取数据库，然后设置到缓存</li><li>返回数据</li></ol><p>PHP示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUser</span><span class="params">($userId)</span> </span>&#123;</div><div class="line">    $data = $cache-&gt;get(<span class="string">'user-'</span>. $userId);</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($data)) &#123;</div><div class="line">        <span class="keyword">return</span> $data;</div><div class="line">    &#125;</div><div class="line">    $data = $db-&gt;findOne([<span class="string">'user_id'</span> =&gt; $userId]);</div><div class="line">    $cache-&gt;set(<span class="string">'user-'</span>. $userId, $data, <span class="number">7200</span>);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其实<strong>查找缓存，如果不存在则查找数据库之后写入缓存</strong>这个操作也可以用闭包来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrSet</span><span class="params">($key, callable $callable, $expire = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    $data = $cache-&gt;get($key);</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($data)) &#123;</div><div class="line">        <span class="keyword">return</span> $data;</div><div class="line">    &#125;</div><div class="line">    $data = call_user_func($callable);</div><div class="line">    $cache-&gt;set($key, $data, $expire);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUser</span><span class="params">($userId)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $cache-&gt;getOrSet(<span class="string">'user-'</span>. $userId, <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span><span class="params">($db, $userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> $db-&gt;findOne([<span class="string">'user_id'</span> =&gt; $userId]);</div><div class="line">    &#125;, <span class="number">7200</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到通过闭包省去了手动<strong>get</strong>和<strong>set</strong>的过程，而查询数据库那一步是只有在缓存读取不到才会执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包函数&quot;&gt;&lt;a href=&quot;#闭包函数&quot; class=&quot;headerlink&quot; title=&quot;闭包函数&quot;&gt;&lt;/a&gt;闭包函数&lt;/h2&gt;&lt;p&gt;PHP官方文档对于闭包函数的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名函数（Anonymous functions
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="closure" scheme="https//www.ddhigh.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>在事务中使用闭包函数简化开发</title>
    <link href="https//www.ddhigh.com/2019/05/14/use-closure-in-transaction.html"/>
    <id>https//www.ddhigh.com/2019/05/14/use-closure-in-transaction.html</id>
    <published>2019-05-14T02:25:43.000Z</published>
    <updated>2019-05-14T03:52:33.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>PHP官方文档对于闭包函数的定义：</p><blockquote><p>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。</p></blockquote><p>简单来说，闭包函数也是一种数据类型，可以直接使用变量来存储、传参、调用等等。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务简单来说就是一个核心:</p><blockquote><p>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</p></blockquote><p>一般情况下，每一条SQL的执行情况都需要进行判断，如果执行成功则继续，否则回滚事务。以下是PDO事务代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=demo'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $pdo-&gt;beginTransaction();</div><div class="line">    <span class="comment">//todo 业务代码</span></div><div class="line">    $pdo-&gt;commit();</div><div class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</div><div class="line">    $pdo-&gt;rollBack();</div><div class="line">    <span class="keyword">throw</span> $e;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><p>几乎所有事务都需要如此处理，但是这样重复代码太多，实际上只需要关心的部分是 <strong>业务代码</strong> 部分，使用闭包函数可以很好的解决这个问题。</p><p>闭包函数可以理解为具体的业务逻辑，不带任何事务相关操作，如果出现异常，会自动回滚事务。</p><p>PHP的简单实现代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transaction</span><span class="params">(PDO $pdo, callable $callable)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        $pdo-&gt;beginTransaction();</div><div class="line">        $result = call_user_func($callable, $pdo);</div><div class="line">        $pdo-&gt;commit();</div><div class="line">        <span class="keyword">return</span> $result;</div><div class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</div><div class="line">        $pdo-&gt;rollBack();</div><div class="line">        <span class="keyword">throw</span> $e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PHP调用方法代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transaction($pdo, <span class="function"><span class="keyword">function</span> <span class="params">(PDO $pdo)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $pdo-&gt;query(<span class="string">'INSERT INTO `test` VALUES (1)'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用闭包函数去简化样板代码在生产中是很常见的，具体的设计模式应该是类似“模板方法模式”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包函数&quot;&gt;&lt;a href=&quot;#闭包函数&quot; class=&quot;headerlink&quot; title=&quot;闭包函数&quot;&gt;&lt;/a&gt;闭包函数&lt;/h2&gt;&lt;p&gt;PHP官方文档对于闭包函数的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名函数（Anonymous functions
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="closure" scheme="https//www.ddhigh.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>使用systemd来构建你的服务</title>
    <link href="https//www.ddhigh.com/2019/02/28/build-service-by-systemd.html"/>
    <id>https//www.ddhigh.com/2019/02/28/build-service-by-systemd.html</id>
    <published>2019-02-28T13:51:16.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="systemd是什么"><a href="#systemd是什么" class="headerlink" title="systemd是什么"></a>systemd是什么</h2><p>Systemd 服务是一种以 .service 结尾的单元（unit）配置文件，用于控制由Systemd 控制或监视的进程。简单说，用于后台以守护精灵（daemon）的形式运行程序。</p><h2 id="为什么要使用systemd"><a href="#为什么要使用systemd" class="headerlink" title="为什么要使用systemd"></a>为什么要使用systemd</h2><ol><li>service文件编写简单易用</li><li>可以自动维持进程存活（强大的功能，可以取代PM2）</li><li>自动收集进程输出的输出</li></ol><h2 id="systemd主要命令"><a href="#systemd主要命令" class="headerlink" title="systemd主要命令"></a>systemd主要命令</h2><p>可以看到systemd以字母d结尾，根据linux惯用规则，可以判断该进程为守护进程，可以通过<code>systemctl</code>与之交互。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl start redis<span class="selector-class">.service</span> #启动服务</div><div class="line">systemctl stop redis<span class="selector-class">.service</span> #停止服务</div><div class="line">systemctl restart redis<span class="selector-class">.service</span> #重启服务</div><div class="line">systemctl enable redis<span class="selector-class">.service</span> #将redis设置为开机启动</div></pre></td></tr></table></figure><h2 id="编写systemd"><a href="#编写systemd" class="headerlink" title="编写systemd"></a>编写systemd</h2><p>systmd service文件一般放在<code>/etc/systemd/system/</code>文件夹中。</p><p>systemd service文件是结构化的，以下给出一份笔者常用的清单。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line"><span class="attribute">Description</span>=Git Auto Update Hook Service</div><div class="line"><span class="attribute">After</span>=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line"><span class="attribute">Type</span>=simple</div><div class="line"><span class="attribute">ExecStart</span>=/root/src/git-hookd/git-hookd</div><div class="line"><span class="attribute">Restart</span>=always</div><div class="line">[Install]</div><div class="line"><span class="attribute">WantedBy</span>=multi-user.target</div></pre></td></tr></table></figure><p>拿之前写过的init.d的脚本对比一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">### BEGIN INIT INFO</span></div><div class="line"><span class="comment"># Provides:          xialeistudio</span></div><div class="line"><span class="comment"># Required-Start:    $network</span></div><div class="line"><span class="comment"># Required-Stop:     $local_fs</span></div><div class="line"><span class="comment"># Default-Start:     2 3 4 5</span></div><div class="line"><span class="comment"># Default-Stop:      0 1 6</span></div><div class="line"><span class="comment"># Short-Description: test service</span></div><div class="line"><span class="comment"># Description:       test service</span></div><div class="line"><span class="comment">### END INIT INFO</span></div><div class="line">PROG=<span class="string">"testd"</span></div><div class="line">PROG_PATH=<span class="string">"/root/apps/testd"</span></div><div class="line">PROG_ARGS=<span class="string">"-u xialei"</span></div><div class="line">PID_PATH=<span class="string">"/var/run/"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span> ]; <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Error! <span class="variable">$PROG</span> is running!"</span> 2&gt;&amp;1</div><div class="line">                <span class="built_in">exit</span> 1</div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="variable">$PROG_PATH</span>/<span class="variable">$PROG</span> <span class="variable">$PROG_ARGS</span> 2&gt;&amp;1 &gt; <span class="string">"/var/log/<span class="variable">$PROG</span>.log"</span> &amp;</div><div class="line">                pid=`ps ax|grep testd|awk <span class="string">'&#123;print $2&#125;'</span>|head -n 1`</div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PROG</span> started"</span></div><div class="line">                <span class="built_in">echo</span> <span class="variable">$pid</span> &gt; <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span></div><div class="line">        <span class="keyword">fi</span>      </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span> ]; <span class="keyword">then</span></div><div class="line">                pid=`ps ax|grep testd|awk <span class="string">'&#123;print $2&#125;'</span>|head -n 1`</div><div class="line">                <span class="built_in">kill</span> <span class="variable">$pid</span></div><div class="line">        </div><div class="line">                rm -rf <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PROG</span> <span class="variable">$pid</span> killed"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Error! <span class="variable">$PROG</span> not running!"</span> 2&gt;&amp;1</div><div class="line">                <span class="built_in">exit</span> 1</div><div class="line">        <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$(id -u)</span>"</span> != <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Please run as root!"</span> 2&gt;&amp;1</div><div class="line">        <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">                start</div><div class="line">                <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">        stop)</div><div class="line">                stop</div><div class="line">                <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">        reload|restart)</div><div class="line">                stop</div><div class="line">                start</div><div class="line">                <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">        **)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|reload&#125;"</span> 2&gt;&amp;1</div><div class="line">                <span class="built_in">exit</span> 1</div><div class="line">        ;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure><p>可以看到init.d脚本实在是太原始了，systemd取代init.d指日可待</p><h2 id="systemd-service文件说明"><a href="#systemd-service文件说明" class="headerlink" title="systemd service文件说明"></a>systemd service文件说明</h2><p>service文件由 Unit, Service, Install 三部分组成</p><h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><p>所有引导过程中systemd要控制的文件/设备/程序等等都称为一个单元。</p><ul><li>Description: 服务描述</li><li>Wants: 本单元启动成功，则会启动此字段定义的单元，如果Wants定义的单元启动失败，对本单元无影响</li><li>Requires：本单元启动成功，则会启动此字段定义的单元，如果Requires定义的单元启动失败，本单元也失败。该字段无法控制先后顺序，如果Requires定义的单元未启动完成就启动本单元，那么一个都启动不了，不建议用这个字段</li><li>OnFailure： 本单元如果启动失败，则启动该字段定义的单元</li><li>Before/After：指定本单元的启动顺序</li></ul><p>本例中只需要依赖网络单元即可</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>服务本体定义：</p><ul><li>Type 启动类型</li><li>ExecStart 启动服务的命令</li><li>ExecStop 停止服务的命令（一般不写）</li><li>Restart 重启规则</li><li>RemainAfterExit 即使没有进程，也任务服务启动成功</li></ul><p>Type 启动类型有以下几种：</p><pre><code>+ simple： 默认类型，启动的进程将成为服务进程。+ forking：标准Unix Daemon进程。本进程启动后会通过系统调用fork，把必要的通信频道都设置好之后父进程退出，留下守护精灵的子进程。（也就是说你自己来将进程变成daemon进程）+ oneshot：一次性命令。该服务运行完毕后没有进程，所以需要配合RemainAfterExit。</code></pre><p>Restart 重启规则有以下几种：</p><pre><code>+ no（默认值）：退出后不会重启+ always：不管是什么退出原因，总是重启+ on-success：只有正常退出时（退出状态码为0），才会重启+ on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启+ on-abnormal：只有被信号终止和超时，才会重启+ on-abort：只有在收到没有捕捉到的信号终止时，才会重启+ on-watchdog：超时退出，才会重启</code></pre><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>systemd装载规则定义</p><ul><li>WantedBy 将被谁装载，本例中使用multi-user.target，最终服务将通过软链接到<code>/etc/systemd/system/multi-user.target.wants</code>目录</li><li>Alias 服务别名，可以通过 <code>systemctl 服务别名 restart</code> 之类的来操作</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>是时候通过systemd改写init.d的服务了，有必要的话可以连pm2守护的进程都交给systemd来处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;systemd是什么&quot;&gt;&lt;a href=&quot;#systemd是什么&quot; class=&quot;headerlink&quot; title=&quot;systemd是什么&quot;&gt;&lt;/a&gt;systemd是什么&lt;/h2&gt;&lt;p&gt;Systemd 服务是一种以 .service 结尾的单元（unit）配置文
      
    
    </summary>
    
      <category term="linux" scheme="https//www.ddhigh.com/categories/linux/"/>
    
    
      <category term="systemd" scheme="https//www.ddhigh.com/tags/systemd/"/>
    
      <category term="daemon" scheme="https//www.ddhigh.com/tags/daemon/"/>
    
      <category term="service" scheme="https//www.ddhigh.com/tags/service/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现简单版的php z_val结构体</title>
    <link href="https//www.ddhigh.com/2019/02/26/c-php-simple-z-val-example.html"/>
    <id>https//www.ddhigh.com/2019/02/26/c-php-simple-z-val-example.html</id>
    <published>2019-02-26T09:32:16.000Z</published>
    <updated>2019-07-18T03:18:40.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>学习过PHP的人都知道PHP是基于C语言开发的，但是C语言是强类型的，PHP如何实现弱类型呢？答案在于这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;</div><div class="line"><span class="keyword">long</span> lval;<span class="comment">/* long value */</span></div><div class="line"><span class="keyword">double</span> dval;<span class="comment">/* double value */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">char</span> *val;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line">&#125; str;</div><div class="line">HashTable *ht;<span class="comment">/* hash table value */</span></div><div class="line">zend_object_value obj;</div><div class="line">zend_ast *ast;</div><div class="line">&#125; zvalue_value;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></div><div class="line"><span class="comment">/* Variable information */</span></div><div class="line">zvalue_value value;<span class="comment">/* value */</span></div><div class="line">zend_uint refcount__gc;</div><div class="line">zend_uchar type;<span class="comment">/* active type */</span></div><div class="line">zend_uchar is_ref__gc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>type</strong>保存了实际的类型，而<strong>value</strong>这个共用体保存了具体的值，我们使用到变量的时候需要根据变量类型来取出<strong>_zvalue_value</strong>中保存的具体值。<br>采用union能够避免内存浪费，同一时刻，一个<strong>_zval_struct</strong>中的共用体<strong>zvalue_value</strong>只有一个成员会分配内存，避免了无谓的内存分配。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>阅读源码之前，可能觉得是一个很复杂的实现，阅读源码之后，其实也能自己实现，关键是type和value的组合。源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> z_val_type</div><div class="line">&#123;</div><div class="line">    DOUBLE,</div><div class="line">    LONG,</div><div class="line">    STRING</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z_val</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="keyword">double</span> dval;</div><div class="line">        <span class="keyword">long</span> lval;</div><div class="line">        <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">        &#123;</span></div><div class="line">            <span class="keyword">char</span> *val;</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">        &#125; str;</div><div class="line">    &#125; value;</div><div class="line">    <span class="keyword">enum</span> z_val_type type;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">z_val_print</span><span class="params">(struct z_val *)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// double</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">z_val</span> *<span class="title">doubleVal</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">z_val</span>));</span></div><div class="line">    doubleVal-&gt;type = DOUBLE;</div><div class="line">    doubleVal-&gt;value.dval = <span class="number">1.0</span>;</div><div class="line">    <span class="comment">// long</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">z_val</span> *<span class="title">longVal</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">z_val</span>));</span></div><div class="line">    longVal-&gt;type = LONG;</div><div class="line">    longVal-&gt;value.lval = <span class="number">1</span>;</div><div class="line">    <span class="comment">// string</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">z_val</span> *<span class="title">strVal</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">z_val</span>));</span></div><div class="line">    strVal-&gt;type = STRING;</div><div class="line">    strVal-&gt;value.str.val = <span class="string">"Hello World!"</span>;</div><div class="line">    strVal-&gt;value.str.len = <span class="built_in">strlen</span>(strVal-&gt;value.str.val);</div><div class="line"></div><div class="line">    z_val_print(doubleVal);</div><div class="line">    z_val_print(longVal);</div><div class="line">    z_val_print(strVal);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(strVal);</div><div class="line">    <span class="built_in">free</span>(longVal);</div><div class="line">    <span class="built_in">free</span>(doubleVal);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">z_val_print</span><span class="params">(struct z_val *val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">switch</span> (val-&gt;type)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> LONG:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"type: long, val: %ld\n"</span>, val-&gt;value.lval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> DOUBLE:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"type: double, val: %f\n"</span>, val-&gt;value.dval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> STRING:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"type: string, val: %s, len: %d\n"</span>, val-&gt;value.str.val, val-&gt;value.str.len);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>采用gcc编译</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -o <span class="class"><span class="keyword">union</span> <span class="title">union</span>.<span class="title">c</span></span></div></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./<span class="class"><span class="keyword">union</span></span></div></pre></td></tr></table></figure><p>输出</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">type:</span> <span class="keyword">double</span>, <span class="string">val:</span> <span class="number">1.000000</span></div><div class="line"><span class="string">type:</span> <span class="keyword">long</span>, <span class="string">val:</span> <span class="number">1</span></div><div class="line"><span class="string">type:</span> string, <span class="string">val:</span> Hello World!, <span class="string">len:</span> <span class="number">12</span></div></pre></td></tr></table></figure><p>可以看到输出跟预期一样，我们也实现了一个“弱类型”的变量，是不是很有成就感呢？<br>实现上，多阅读源码可以多多参考别人的思维方式和编码习惯，所谓“站在巨人的肩膀上，才能看得更远”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;学习过PHP的人都知道PHP是基于C语言开发的，但是C语言是强类型的，PHP如何实现弱类型呢？答案在于这个&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="c" scheme="https//www.ddhigh.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>无需编程导出微信表情包</title>
    <link href="https//www.ddhigh.com/2019/01/11/export-wechat-emotion.html"/>
    <id>https//www.ddhigh.com/2019/01/11/export-wechat-emotion.html</id>
    <published>2019-01-11T02:53:02.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<p>微信前两天推送了年度报告，其中的表情统计很有意思，的确，表情包这两年是越来越火了。但是有个问题是微信不支持导出表情包，有的小伙伴又需要导出来保存到其他地方。</p><p>本文分享一个比较简单的方式导出表情包，条件只有一个：谷歌浏览器。</p><ol><li>打开 <a href="https://wx.qq.com" target="_blank" rel="external">https://wx.qq.com</a> 并登陆，这是网页版微信登录入口</li><li>手机选择表情发送给文件传输助手</li><li>打开网页版微信，可以查看到图片<br><img src="http://download.ddhigh.com/blog-img/WX20190111-105910.png" alt="1"></li><li>接下来打开谷歌浏览器的开发者工具（不同电脑不太一样，但是都是右上角打开）<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110041.png" alt="2"></li><li>然后按照图片顺序点击如下图所示的图标<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110109.png" alt="3"></li><li>这时候鼠标处于选择元素的状态，直接悬浮在表情图片上即可<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110127.png" alt="4"></li><li>下方的窗口会出现图片链接，而且会有背景色（本图片的背景色是淡蓝色）<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110127.png" alt="5"></li><li>鼠标悬浮到刚才的淡蓝色窗口的链接上面，会出现表情的原图<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110137.png" alt="6"></li><li>在链接上面点击右键，选择如图名字的菜单（菜单顺序不同系统不同）<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110148.png" alt="7"></li><li>在新窗口打开的图片就是表情原始图片了，可以保存<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110159.png" alt="8"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信前两天推送了年度报告，其中的表情统计很有意思，的确，表情包这两年是越来越火了。但是有个问题是微信不支持导出表情包，有的小伙伴又需要导出来保存到其他地方。&lt;/p&gt;
&lt;p&gt;本文分享一个比较简单的方式导出表情包，条件只有一个：谷歌浏览器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a
      
    
    </summary>
    
    
  </entry>
  
</feed>
