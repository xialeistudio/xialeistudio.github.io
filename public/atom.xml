<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2017-11-29T13:06:40.000Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信H5点击跳转到关注页</title>
    <link href="https//www.ddhigh.com/2017/11/25/wechat-web-subscribe.html"/>
    <id>https//www.ddhigh.com/2017/11/25/wechat-web-subscribe.html</id>
    <published>2017-11-25T07:19:59.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>微信诱导关注接口在早两年已经被微信关停，但是一般的H5目的都是要关注公众号。<br>目前用的多的方法是用公众号发表一篇文章，文章里面一般是一个GIF的箭头图片指向公众号关注。<br>这种方法有点取巧。</p><p>今天要介绍的是另一种方法，感觉应该不会被微信封号。</p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>有个朋友在segmentfault上发了一个链接出来，微信打开可以直接到关注页<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//m</span>p.weixin.qq.com<span class="regexp">/mp/</span>profile_ext?action=home&amp;__biz=MzUzMDM3MjMyNQ==<span class="comment">#wechat_redirect</span></div></pre></td></tr></table></figure></p><p>条件反射发现<code>MzUzMDM3MjMyNQ==</code>是Base64编码后的参数，解码后是一段数字，然后我改了下数字，重新编码，再发送到微信，发现可以打开另外一个公众号的关注页<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//m</span>p.weixin.qq.com<span class="regexp">/mp/</span>profile_ext?action=home&amp;__biz=MzUzMDM3MjMyNA==<span class="comment">#wechat_redirect</span></div></pre></td></tr></table></figure></p><p>所以只要知道那个公众号数字就可以构造链接进行关注，想着这种ID一般在公众平台有，果然被我找到了。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>登录公众平台后台</li><li>点击右上角的公众号，来到公众号信息页面</li><li><p>查看公众号信息页面的源代码，在顶上找到以下代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.wx=&#123;</div><div class="line">uin:<span class="string">"xxxx"</span>||<span class="string">"0"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><code>xxxx</code> 就是你的公众号数字ID</p></li><li>将第4步找到的ID进行base64编码</li><li><p>构造如下链接</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//m</span>p.weixin.qq.com<span class="regexp">/mp/</span>profile_ext?action=home&amp;__biz=第<span class="number">5</span>步的结果<span class="comment">#wechat_redirect</span></div></pre></td></tr></table></figure></li><li><p>发送到微信之后即可。</p></li></ol><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>从打开的链接看页面还是蛮正式的，可能不是私有接口，但是微信文档中没说过这种方式，故使用本方式带来的后果请自行负责！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;微信诱导关注接口在早两年已经被微信关停，但是一般的H5目的都是要关注公众号。&lt;br&gt;目前用的多的方法是用公众号发表一篇文章，文章里面一般是一
      
    
    </summary>
    
    
      <category term="微信" scheme="https//www.ddhigh.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>从零开始打造自己的直播服务器-golang开发HTTP推流服务</title>
    <link href="https//www.ddhigh.com/2017/11/23/go-rtmp-http-publisher.html"/>
    <id>https//www.ddhigh.com/2017/11/23/go-rtmp-http-publisher.html</id>
    <published>2017-11-23T07:19:58.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前笔者只知道ffmpeg命令行推流到RTMP服务器，是没有HTTP接口的，像iOS和Android这种Native应用应该有RTMP SDK封装推流逻辑。但是像微信小程序这种录制音频只有原始<strong>ArrayBuffer</strong>的数据，则必须在服务端提供接口来进行推流。</p><p>本文将基于golang标准库以及ffmpeg命令来实现。</p><h2 id="服务端原理"><a href="#服务端原理" class="headerlink" title="服务端原理"></a>服务端原理</h2><ol><li>客户端上传base64编码后的音频数据</li><li>服务端接收后解码为<strong>[]byte</strong></li><li>将<strong>[]byte</strong>写入本地文件</li><li>golang调用ffmpeg命令将第3步写入的文件推流到RTMP服务端(<a href="/2017/11/23/nginx-rtmp-server.html" title="从零开始打造自己的直播服务器-Nginx安装">从零开始打造自己的直播服务器-Nginx安装</a>)</li><li>golang输出JSON响应，如果出错则返回错误JSON响应 <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"errmsg"</span>:<span class="string">"ok"</span>,</div><div class="line">  <span class="attr">"errcode"</span>:<span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><p>由于采用了log4go日志库<a href="https://github.com/alecthomas/log4go" target="_blank" rel="external">https://github.com/alecthomas/log4go</a>，故需要先安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/alecthomas/log4go</div></pre></td></tr></table></figure></p><p>完整服务端源代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"github.com/alecthomas/log4go"</span></div><div class="line"><span class="string">"flag"</span></div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"time"</span></div><div class="line"><span class="string">"encoding/json"</span></div><div class="line"><span class="string">"io/ioutil"</span></div><div class="line"><span class="string">"encoding/base64"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"os/exec"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">rtmp            <span class="keyword">string</span> <span class="comment">// rtmp 服务端地址</span></div><div class="line">ffmpeg          <span class="keyword">string</span> <span class="comment">// ffmpeg命令地址</span></div><div class="line">listen          <span class="keyword">string</span> <span class="comment">// 监听地址</span></div><div class="line">uploadKey       <span class="keyword">string</span> <span class="comment">// 上传key</span></div><div class="line">uploadDirectory <span class="keyword">string</span> <span class="comment">// 本地上传目录</span></div><div class="line">start           = time.Now()</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">VERSION = <span class="string">"1.0.0"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">flag.StringVar(&amp;rtmp, <span class="string">"rtmp"</span>, <span class="string">"rtmp://localhost:1935/hls"</span>, <span class="string">"rtmp upstream address"</span>)</div><div class="line">flag.StringVar(&amp;ffmpeg, <span class="string">"ffmpeg"</span>, <span class="string">"ffmpeg"</span>, <span class="string">"ffmpeg executable"</span>)</div><div class="line">flag.StringVar(&amp;listen, <span class="string">"listen"</span>, <span class="string">":8081"</span>, <span class="string">"http server address"</span>)</div><div class="line">flag.StringVar(&amp;uploadKey, <span class="string">"key"</span>, <span class="string">"testkey"</span>, <span class="string">"http upload key"</span>)</div><div class="line">flag.StringVar(&amp;uploadDirectory, <span class="string">"upload-directory"</span>, <span class="string">"upload"</span>, <span class="string">"local upload directory"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">flag.Parse()</div><div class="line">log4go.LoadConfiguration(<span class="string">"log4go.xml"</span>)</div><div class="line"><span class="keyword">if</span> rtmp == <span class="string">""</span> &#123;</div><div class="line"><span class="built_in">panic</span>(<span class="string">"rtmp upstream not set!"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建目录</span></div><div class="line">os.Mkdir(uploadDirectory, os.ModePerm)</div><div class="line">log4go.Info(<span class="string">"start ffmpeg-publisher, version %s"</span>, VERSION)</div><div class="line">log4go.Info(<span class="string">"RTMP UpStream %s"</span>, rtmp)</div><div class="line">log4go.Info(<span class="string">"HTTP Upload Directory %s"</span>, uploadDirectory)</div><div class="line">log4go.Info(<span class="string">"HTTP Listen ON %s"</span>, listen)</div><div class="line">log4go.Info(<span class="string">"HTTP Upload Key %s"</span>, uploadKey)</div><div class="line"></div><div class="line">http.HandleFunc(<span class="string">"/"</span>, handleIndex)</div><div class="line">http.HandleFunc(<span class="string">"/base64"</span>, handleBase64Publish)</div><div class="line"><span class="built_in">panic</span>(http.ListenAndServe(listen, <span class="literal">nil</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendResponse</span><span class="params">(errmsg <span class="keyword">string</span>, statusCode <span class="keyword">int</span>, w http.ResponseWriter)</span></span> &#123;</div><div class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>)</div><div class="line"><span class="keyword">if</span> statusCode == <span class="number">0</span> &#123;</div><div class="line">statusCode = <span class="number">200</span></div><div class="line">&#125;</div><div class="line">w.WriteHeader(statusCode)</div><div class="line">ret := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</div><div class="line"><span class="string">"errmsg"</span>:  errmsg,</div><div class="line"><span class="string">"errcode"</span>: statusCode,</div><div class="line">&#125;</div><div class="line">json.NewEncoder(w).Encode(&amp;ret)</div><div class="line"><span class="keyword">if</span> statusCode == <span class="number">500</span> &#123;</div><div class="line">log4go.Error(errmsg)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleIndex</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</div><div class="line">ret := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</div><div class="line"><span class="string">"name"</span>:    <span class="string">"ffpmeg-publisher"</span>,</div><div class="line"><span class="string">"version"</span>: VERSION,</div><div class="line"><span class="string">"uptime"</span>:  time.Since(start).String(),</div><div class="line">&#125;</div><div class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>)</div><div class="line">json.NewEncoder(w).Encode(&amp;ret)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleBase64Publish</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</div><div class="line">sendResponse(<span class="string">"Method Not Allowed"</span>, <span class="number">405</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取直播ID和key</span></div><div class="line"><span class="keyword">if</span> err := r.ParseForm(); err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 检测直播Key</span></div><div class="line"><span class="keyword">if</span> key := r.Form.Get(<span class="string">"key"</span>); key != uploadKey &#123;</div><div class="line">sendResponse(<span class="string">"Forbidden"</span>, <span class="number">403</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 检测直播ID</span></div><div class="line">id := r.Form.Get(<span class="string">"id"</span>)</div><div class="line"><span class="keyword">if</span> id == <span class="string">""</span> &#123;</div><div class="line">sendResponse(<span class="string">"Bad Request"</span>, <span class="number">400</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 读取base64</span></div><div class="line">base64Buf, err := ioutil.ReadAll(r.Body)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">buf, err := base64.StdEncoding.DecodeString(<span class="keyword">string</span>(base64Buf))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">log4go.Trace(<span class="string">"live %s receive %d bytes"</span>, id, <span class="built_in">len</span>(buf))</div><div class="line"><span class="keyword">if</span> err := publishVoice(buf, id); err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">sendResponse(<span class="string">"ok"</span>, <span class="number">0</span>, w)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 保存音频到临时文件目录,1个直播一个目录</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveVoice</span><span class="params">(buf []<span class="keyword">byte</span>, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">directory := uploadDirectory + <span class="string">"/"</span> + id</div><div class="line">os.Mkdir(directory, os.ModePerm)</div><div class="line">name := time.Now().Format(<span class="string">"2006-01-02-15-04-05"</span>) + <span class="string">".mp3"</span></div><div class="line">filename := directory + <span class="string">"/"</span> + name</div><div class="line">log4go.Trace(<span class="string">"live %s save chunk %s"</span>, id, filename)</div><div class="line">err := ioutil.WriteFile(filename, buf, os.ModePerm)</div><div class="line"><span class="keyword">return</span> filename, err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 发布音频至rtmp</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">publishVoice</span><span class="params">(buf []<span class="keyword">byte</span>, id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">mp3filename, err := saveVoice(buf, id)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log4go.Error(<span class="string">"live %s %q"</span>, id, err)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 执行系统命令</span></div><div class="line">cmd := exec.Command(ffmpeg, <span class="string">"-i"</span>, mp3filename, <span class="string">"-acodec"</span>, <span class="string">"aac"</span>, <span class="string">"-f"</span>, <span class="string">"flv"</span>, rtmp+<span class="string">"/"</span>+id)</div><div class="line">log4go.Trace(<span class="string">"live %s execute %s"</span>, id, strings.Join(cmd.Args, <span class="string">" "</span>))</div><div class="line">cmd.Stderr = os.Stderr</div><div class="line">cmd.Stdout = os.Stdout</div><div class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</div><div class="line">log4go.Error(<span class="string">"live %s execute %q"</span>, id, err)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/xialeistudio/go-rtmp-http-publisher" target="_blank" rel="external">https://github.com/xialeistudio/go-rtmp-http-publisher</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前笔者只知道ffmpeg命令行推流到RTMP服务器，是没有HTTP接口的，像iOS和Android这种Native应用应该有RTMP SDK封装推流逻辑。但是像微信小程序这种录制音频只有原始&lt;strong&gt;ArrayBuffer&lt;/strong&gt;的数据，则必须在服务端提供
      
    
    </summary>
    
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
      <category term="rtmp" scheme="https//www.ddhigh.com/tags/rtmp/"/>
    
      <category term="直播" scheme="https//www.ddhigh.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>从零开始打造自己的直播服务器-Nginx安装</title>
    <link href="https//www.ddhigh.com/2017/11/23/nginx-rtmp-server.html"/>
    <id>https//www.ddhigh.com/2017/11/23/nginx-rtmp-server.html</id>
    <published>2017-11-23T06:54:08.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>直播行业火了很长一段时间了，抛开那些复杂的实现，本系列将从零开始实现一个直播服务器。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>RTMP拉流(基于HLS)</li><li>RTMP推流(基于ffmpeg)</li><li>RTMP推流(基于HTTP)</li></ol><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>本文使用docker的ubuntu镜像作为种子机，非常干净!</p><p>文章最后会放出我写的Dockerfile，不想折腾的朋友可以直接拿过去build一个自己的镜像</p><p>以下操作在物理机ubuntu也可以进行。</p><ol><li><p>更新软件仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get update</div></pre></td></tr></table></figure></li><li><p>安装必要软件    </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install git gcc make wget libpcre3 libpcre3-dev openssl libssl-dev -y -q</div></pre></td></tr></table></figure></li><li><p>下载并解压nginx源码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</div><div class="line">tar xf nginx-1.12.2.tar.gz</div></pre></td></tr></table></figure></li><li><p>下载nginx-rtmp-module源码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/arut/nginx-rtmp-module.git</div></pre></td></tr></table></figure></li><li><p>开始编译安装(其他参数不是必须的，故本文略去，只添加以下参数对于一个RTMP服务器已足够)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.12.2</div><div class="line">./configure --add-module=../nginx-rtmp-module --with-http_flv_module --with-http_mp4_module</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></li><li><p>修改配置文件 <strong>/usr/local/nginx/nginx.conf</strong></p> <figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">worker_processes  auto;</div><div class="line">daemon off;</div><div class="line">error_log  logs/error.log;</div><div class="line">pid        logs/nginx.pid;</div><div class="line"></div><div class="line"><span class="keyword">events</span> &#123;</div><div class="line">    multi_accept on;</div><div class="line">    worker_connections  <span class="number">65535</span>;</div><div class="line">    <span class="literal">use</span> epoll;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">http</span> &#123;</div><div class="line">    <span class="literal">include</span>       mime.types;</div><div class="line"></div><div class="line">    log_format  <span class="keyword">main</span>  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line"></div><div class="line">    access_log  logs/access.log  <span class="keyword">main</span>;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    <span class="comment">#tcp_nopush     on;</span></div><div class="line"></div><div class="line">    <span class="comment">#keepalive_timeout  0;</span></div><div class="line">    keepalive_timeout  <span class="number">30</span>;</div><div class="line"></div><div class="line">    gzip  on;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       <span class="number">80</span>;</div><div class="line">        server_name  localhost;</div><div class="line">      </div><div class="line">        location /stat &#123;</div><div class="line">          rtmp_stat all;</div><div class="line">          rtmp_stat_stylesheet stat.xsl;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">location</span> /stat.<span class="keyword">xsl</span> &#123;</div><div class="line">           <span class="literal">root</span> /usr/local/src/nginx-rtmp-module;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">location</span> /<span class="keyword">control</span> &#123;</div><div class="line">          rtmp_control all;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">location</span> /<span class="keyword">hls</span> &#123;</div><div class="line">          types &#123;</div><div class="line">            application/vnd.apple.mpegurl m3u8;</div><div class="line">            video/mp2t ts;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">root</span> <span class="keyword">html</span>;</div><div class="line">          expires -1;</div><div class="line">        &#125;</div><div class="line">        location ~\.<span class="keyword">flv</span> &#123;</div><div class="line">          flv;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">location</span> ~\.<span class="keyword">mp4</span> &#123;</div><div class="line">          mp4;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">rtmp</span> &#123;</div><div class="line">  server &#123;</div><div class="line">    listen <span class="number">1935</span>;</div><div class="line">    chunk_size <span class="number">4096</span>;</div><div class="line">    application hls &#123;</div><div class="line">      allow publish <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>;</div><div class="line">      live on;</div><div class="line">      hls on;</div><div class="line">      hls_path /usr/local/nginx/html/hls;</div><div class="line">      hls_fragment <span class="number">5</span>s;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> nginx在docker运行需要关闭daemon选项.<br> <strong>rtmp-&gt;server-&gt;application</strong>为具体的直播应用,<strong>hls</strong>是我的直播应用名称，可以根据实际情况修改。</p></li><li>启动服务器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></li></ol><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install ffmpeg</div></pre></td></tr></table></figure><h2 id="推流测试"><a href="#推流测试" class="headerlink" title="推流测试"></a>推流测试</h2><h3 id="推流地址"><a href="#推流地址" class="headerlink" title="推流地址"></a>推流地址</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rtmp:<span class="regexp">//</span>localhost:<span class="number">1935</span><span class="regexp">/hls/</span>demo</div></pre></td></tr></table></figure><p><strong>hls</strong>为上面配置的<strong>application</strong>名称，<strong>demo</strong>是直播名称，客户端使用<strong><a href="http://localhost/hls/demo.m3u8" target="_blank" rel="external">http://localhost/hls/demo.m3u8</a></strong>进行播放</p><h3 id="视频推流"><a href="#视频推流" class="headerlink" title="视频推流"></a>视频推流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -i a.mp4 -vcodec copy -f flv rtmp://localhost:1935/hls/demo</div></pre></td></tr></table></figure><p>web中播放<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://localhost/hls/demo.m3u8"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="音频推流"><a href="#音频推流" class="headerlink" title="音频推流"></a>音频推流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -i a.mp3 -acodec aac -f flv rtmp://localhost:1935/hls/demo</div></pre></td></tr></table></figure><p>web中播放<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://localhost/hls/demo.m3u8"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="推流与播放地址说明"><a href="#推流与播放地址说明" class="headerlink" title="推流与播放地址说明"></a>推流与播放地址说明</h3><ol><li>假设nginx配置<strong>http端口</strong>为<strong>80</strong>,<strong>http目录为hls</strong>,<strong>rtmp端口</strong>为<strong>1935</strong>,<strong>application</strong>名称为<strong>hls</strong>,需要播放的直播名称为<strong>demo</strong></li><li>推流地址<strong>rtmp://localhost:1935/hls/demo</strong></li><li>播放地址<strong><a href="http://localhost/hls/demo.m3u8" target="_blank" rel="external">http://localhost/hls/demo.m3u8</a></strong></li></ol><h3 id="重要说明"><a href="#重要说明" class="headerlink" title="重要说明"></a>重要说明</h3><p>如果没有直播推流，nginx是不会产生m3u8文件的，这点需要注意!</p><h3 id="Docker镜像地址"><a href="#Docker镜像地址" class="headerlink" title="Docker镜像地址"></a>Docker镜像地址</h3><p><a href="https://github.com/xialeistudio/docker-nginx-rtmp" target="_blank" rel="external">https://github.com/xialeistudio/docker-nginx-rtmp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直播行业火了很长一段时间了，抛开那些复杂的实现，本系列将从零开始实现一个直播服务器。&lt;/p&gt;
&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;RTMP拉流(基于HLS)&lt;
      
    
    </summary>
    
    
      <category term="nginx" scheme="https//www.ddhigh.com/tags/nginx/"/>
    
      <category term="rtmp" scheme="https//www.ddhigh.com/tags/rtmp/"/>
    
      <category term="直播" scheme="https//www.ddhigh.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>log4go尝鲜</title>
    <link href="https//www.ddhigh.com/2017/11/21/log4go-get-started.html"/>
    <id>https//www.ddhigh.com/2017/11/21/log4go-get-started.html</id>
    <published>2017-11-21T09:06:16.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>日志系统对于软件是必不可少的，可以帮助我们记录关键信息，后期处理问题的时候会很方便。业界有很多出名的日志库，log4日志库相信每个人都不陌生，像log4j之于Java，log4php之于PHP等等。其实golang也有很多的log4实现，本文要使用的是<strong>alecthomas</strong>实现的版本。</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/alecthomas/log4go" target="_blank" rel="external">https://github.com/alecthomas/log4go</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/alecthomas/log4go</div></pre></td></tr></table></figure><h1 id="使用代码配置"><a href="#使用代码配置" class="headerlink" title="使用代码配置"></a>使用代码配置</h1><ol><li>新建golang项目</li><li><p>在项目根目录下新建<em>main.go</em>文件，代码如下</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"github.com/alecthomas/log4go"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> log4go.Close()</div><div class="line">    log4go.AddFilter(<span class="string">"stdout"</span>, log4go.DEBUG, log4go.NewConsoleLogWriter()) <span class="comment">// DEBUG级别+打印到控制台</span></div><div class="line">    log4go.AddFilter(<span class="string">"file"</span>, log4go.INFO, log4go.NewFileLogWriter(<span class="string">"test.log"</span>, <span class="literal">true</span>)) <span class="comment">// INFO级别+输出到文件，并开启rotate</span></div><div class="line">    log4go.Debug(<span class="string">"这是DEBUG日志"</span>) <span class="comment">// 输出测试</span></div><div class="line">    log4go.Info(<span class="string">"这是INFO日志"</span>) <span class="comment">// 输出测试</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <em>如果程序是守护进程，此处不用调用log4go.Close，因为log4go使用协程异步写入日志，此处可以调用log4go.Close也可以Sleep来实现写入，下文会有Sleep测试</em></p></li><li><code>go run main.go</code></li><li><p>此时可以看到终端输出，还可以发现项目目录下生成了<em>test.log</em>文件</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[17:11:35 CST 2017/11/21]</span> <span class="selector-attr">[DEBG]</span> (<span class="selector-tag">main</span><span class="selector-class">.main</span><span class="selector-pseudo">:9)</span> 这是<span class="selector-tag">DEBUG</span>日志</div><div class="line"><span class="selector-attr">[17:11:35 CST 2017/11/21]</span> <span class="selector-attr">[INFO]</span> (<span class="selector-tag">main</span><span class="selector-class">.main</span><span class="selector-pseudo">:10)</span> 这是<span class="selector-tag">INFO</span>日志</div></pre></td></tr></table></figure></li><li><p>重新执行时可以发现<strong>test.log</strong>被rotate到了<strong>test.log.1</strong></p></li></ol><h1 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h1><p>log4go支持使用xml来作为配置文件</p><ol><li><p>在项目根目录新建<strong>log4go.xml</strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>stdout<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>console<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>file<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>file<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span>test.log<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rotate"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxlines"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daily"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">logging</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>添加了<strong>console</strong>和<strong>file</strong>两个filter，跟代码添加其实是一样的，不同的是xml的可配置性更高。具体配置参数需要查看log4go对应的go源文件</p></li><li><p>修改<strong>main.go</strong></p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"github.com/alecthomas/log4go"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    log4go.LoadConfiguration(<span class="string">"log4go.xml"</span>)</div><div class="line">    log4go.Debug(<span class="string">"这是DEBUG日志"</span>)</div><div class="line">    log4go.Info(<span class="string">"这是INFO日志"</span>)</div><div class="line">    time.Sleep(time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行程序，终端依旧正确输出，同时也会生成<em>test.log</em></p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>log4go良好的设计带来了简洁又强大的使用体验，更多的使用细节以及更多的logger类型等待读者去发掘与实现，本文只做一个简单的介绍，即便如此也应该能够应付大部分场景了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;日志系统对于软件是必不可少的，可以帮助我们记录关键信息，后期处理问题的时候会很方便。业界有很多出名的日志库，log4日志库相信每个人都不陌生
      
    
    </summary>
    
    
      <category term="log" scheme="https//www.ddhigh.com/tags/log/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang实现TLV编码</title>
    <link href="https//www.ddhigh.com/2017/11/17/go-tlv.html"/>
    <id>https//www.ddhigh.com/2017/11/17/go-tlv.html</id>
    <published>2017-11-17T09:05:04.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TLV编码基础"><a href="#TLV编码基础" class="headerlink" title="TLV编码基础"></a>TLV编码基础</h2><a href="/2017/11/17/node-tlv.html" title="Tlv编码在NodeJs中的应用">Tlv编码在NodeJs中的应用</a><h2 id="golang实现"><a href="#golang实现" class="headerlink" title="golang实现"></a>golang实现</h2><p>主要使用bytes和binary包中的相关函数</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(tag <span class="keyword">int32</span>, data <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</div><div class="line"><span class="comment">// 写入TAG</span></div><div class="line"><span class="keyword">if</span> err := binary.Write(buf, binary.BigEndian, tag); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">dataBuf := []<span class="keyword">byte</span>(data)</div><div class="line"><span class="comment">// 写入length</span></div><div class="line"><span class="keyword">if</span> err := binary.Write(buf, binary.BigEndian, <span class="keyword">int32</span>(<span class="built_in">len</span>(dataBuf))); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 写入数据</span></div><div class="line"><span class="keyword">if</span> err := binary.Write(buf, binary.BigEndian, dataBuf); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> buf.Bytes(), <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decode</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int32</span>, <span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">buf := bytes.NewBuffer(b)</div><div class="line"><span class="keyword">var</span> tag, length <span class="keyword">int32</span></div><div class="line"><span class="comment">// 读取tag</span></div><div class="line"><span class="keyword">if</span> err := binary.Read(buf, binary.BigEndian, &amp;tag); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 读取length</span></div><div class="line"><span class="keyword">if</span> err := binary.Read(buf, binary.BigEndian, &amp;length); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 读取数据</span></div><div class="line">dataBuf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, length)</div><div class="line"><span class="keyword">if</span> err := binary.Read(buf, binary.BigEndian, &amp;dataBuf); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> tag, <span class="keyword">string</span>(dataBuf), <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于TLV编码容易上手加上golang完善的API，实现TLV编码也不算太曲折。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TLV编码基础&quot;&gt;&lt;a href=&quot;#TLV编码基础&quot; class=&quot;headerlink&quot; title=&quot;TLV编码基础&quot;&gt;&lt;/a&gt;TLV编码基础&lt;/h2&gt;&lt;a href=&quot;/2017/11/17/node-tlv.html&quot; title=&quot;Tlv编码在Node
      
    
    </summary>
    
    
      <category term="tlv" scheme="https//www.ddhigh.com/tags/tlv/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Tlv编码在NodeJs中的应用</title>
    <link href="https//www.ddhigh.com/2017/11/17/node-tlv.html"/>
    <id>https//www.ddhigh.com/2017/11/17/node-tlv.html</id>
    <published>2017-11-17T07:36:27.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在接入腾讯云的天御业务安全系统时接触到了TLV编码协议，好在TLV协议理解起来比较简单。故简要介绍一下该编码。</p><h2 id="TLV编码是什么？"><a href="#TLV编码是什么？" class="headerlink" title="TLV编码是什么？"></a>TLV编码是什么？</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TLV是一种编码格式，编码如下：</div><div class="line">[1-4字节] TYPE</div><div class="line">[5-8字节] Value的Length</div><div class="line">[9字节+] Value数据</div></pre></td></tr></table></figure><p>本文只探讨无嵌套数据的情况。NodeJs操作二进制数据主要依赖于<strong>Buffer</strong></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ol><li><p>编码Ascii数据，由于ascii编码的数据，一个字节就是一个字符，所以比较简单</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">TYPE:</span> <span class="number">1</span></div><div class="line"><span class="symbol">Value:</span> test</div></pre></td></tr></table></figure></li><li><p>根据编码规则，可以得出以下数据组装格式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span><span class="number">-4</span>字节] <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span></div><div class="line">[<span class="number">5</span><span class="number">-8</span>字节] <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span></div><div class="line">[<span class="number">9</span><span class="number">-12</span>字节] <span class="number">74</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> </div><div class="line"><span class="comment">// 74 对应字符*t*ascii编码*116*的16进制形式，其他以此类推</span></div></pre></td></tr></table></figure></li><li><p>javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// buf总长度为4字节TYPE+4字节VALUE长度+test的字节数为12</span></div><div class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">12</span>);</div><div class="line"><span class="comment">// 写入TYPE</span></div><div class="line">buf.writeIntBE(<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line"><span class="comment">// 写入LENGTH</span></div><div class="line">buf.writeIntBE(<span class="string">'test'</span>.length, <span class="number">4</span>, <span class="number">4</span>);</div><div class="line"><span class="comment">// 写入test</span></div><div class="line">buf.write(<span class="string">'test'</span>, <span class="number">8</span>, <span class="string">'test'</span>.length);</div><div class="line"><span class="comment">// 此时buf就是编码结果，由于是二进制的，如果走TCP协议的话已经可以了，但是腾讯云要求base64编码。所以最终结果为</span></div><div class="line">buf.toString(<span class="string">'base64'</span>);</div></pre></td></tr></table></figure></li><li><p>使用NodeJs交互式环境测试</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">➜  ~ node</div><div class="line">&gt; const buf = Buffer.alloc(<span class="number">12</span>);</div><div class="line">undefined</div><div class="line">&gt; buf</div><div class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</div><div class="line">&gt; buf.writeIntBE(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>)</div><div class="line"><span class="number">4</span></div><div class="line">&gt; buf.writeIntBE(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>)</div><div class="line"><span class="number">8</span></div><div class="line">&gt; buf.write('test',<span class="number">8</span>,<span class="number">4</span>)</div><div class="line"><span class="number">4</span></div><div class="line">&gt; buf</div><div class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">74</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span>&gt;</div><div class="line">&gt; buf.toString()</div><div class="line">'\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004test'</div><div class="line">&gt; buf.toString('base64')</div><div class="line">'AAAAAQAAAAR0ZXN0'</div><div class="line">&gt;</div></pre></td></tr></table></figure></li></ol><h2 id="非Ascii编码问题"><a href="#非Ascii编码问题" class="headerlink" title="非Ascii编码问题"></a>非Ascii编码问题</h2><p>如果发送的数据是Ascii编码表之外的数据，就会用到多字节编码，此时以上方法会有问题。<br>得意与Buffer完善的API，<em>Buffer.from</em>方法可以接收一个字符串和一个编码得到一个Buffer数组。</p><p>上例可以改为使用<em>Buffer.from</em>的版本:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> valueBuf = Buffer.from(value, <span class="string">'utf8'</span>);</div><div class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">8</span> + valueBuf.length);</div><div class="line">buf.writeIntBE(type, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">buf.writeIntBE(valueBuf.length, <span class="number">4</span>, <span class="number">4</span>);</div><div class="line">buf.write(value, <span class="number">8</span>, valueBuf.length);</div><div class="line">buf.toString(<span class="string">'base64'</span>);</div></pre></td></tr></table></figure><p>由于value使用的utf8编码，所以utf8编码表中的数据该方法都可以成功编码，经过腾讯云接口调用测试也是OK的。</p><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>说到编码就会有解码。解码是编码的逆运算，根据一样的规则还原数据而已。</p><ol><li><p>javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设str为base64编码之后Tlv数据</span></div><div class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> Buffer(str, <span class="string">'base64'</span>); <span class="comment">// 还原为Buffer</span></div><div class="line"><span class="comment">// 读取TYPE</span></div><div class="line"><span class="keyword">const</span> type = buf.readIntBE(<span class="number">0</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">// 读取VALUE长度</span></div><div class="line"><span class="keyword">const</span> length = buf.readIntBE(<span class="number">4</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">// 读取VALUE</span></div><div class="line"><span class="keyword">const</span> valueBuf = Buffer.alloc(length);</div><div class="line"><span class="comment">// 写入VALUE</span></div><div class="line">buf.copy(valueBuf, <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span> + length);</div><div class="line"><span class="comment">// 得到原始数据</span></div><div class="line">valueBuf.toString(<span class="string">'utf8'</span>);</div></pre></td></tr></table></figure></li><li><p>使用NodeJs交互式环境测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">➜  ~ node</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const str = <span class="string">'AAAAAQAAAAR0ZXN0'</span>;</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const buf = new Buffer(str, <span class="string">'base64'</span>);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const <span class="built_in">type</span> = buf.readIntBE(0,4);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const length = buf.readIntBE(4,4);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const value = Buffer.alloc(length);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> valueOf</span></div><div class="line">[Function: valueOf]</div><div class="line"><span class="meta">&gt;</span><span class="bash"> value</span></div><div class="line">&lt;Buffer 00 00 00 00&gt;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> buf.co</span></div><div class="line">buf.constructor  </div><div class="line"></div><div class="line">buf.copyWithin   </div><div class="line"></div><div class="line">buf.compare      buf.copy         </div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> buf.copy(value,0,8,8+length);</span></div><div class="line">4</div><div class="line"><span class="meta">&gt;</span><span class="bash"> value.to</span></div><div class="line">value.toLocaleString  value.toString        </div><div class="line"></div><div class="line">value.toJSON          </div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> value.toString()</span></div><div class="line">'test'</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></li></ol><h2 id="腾讯云天御业务安全系统"><a href="#腾讯云天御业务安全系统" class="headerlink" title="腾讯云天御业务安全系统"></a>腾讯云天御业务安全系统</h2><p>socket.io中如果需要接入该系统进行垃圾发言的过滤时，可以使用我开发的SDK<br><a href="https://www.npmjs.com/package/tencent-cloud-defend" target="_blank" rel="external">tencent-cloud-defend</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在接入腾讯云的天御业务安全系统时接触到了TLV编码协议，好在TLV协议理解起来比较简单。故简要介绍一下该编码。&lt;/p&gt;
&lt;h2 id=&quot;TLV编码是什么？&quot;&gt;&lt;a href=&quot;#TLV编码是什么？&quot; class=&quot;headerlink&quot; title=&quot;TLV编码是什么？
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https//www.ddhigh.com/tags/nodejs/"/>
    
      <category term="tlv" scheme="https//www.ddhigh.com/tags/tlv/"/>
    
  </entry>
  
  <entry>
    <title>使用docker-composer部署nodejs应用</title>
    <link href="https//www.ddhigh.com/2017/11/01/docker-composer-nodejs.html"/>
    <id>https//www.ddhigh.com/2017/11/01/docker-composer-nodejs.html</id>
    <published>2017-11-01T08:28:23.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建Dockerfile"><a href="#新建Dockerfile" class="headerlink" title="新建Dockerfile"></a>新建Dockerfile</h2><p>在应用目录下新建<strong>Dockerfile</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> node:<span class="number">8</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"><span class="bash">ADD . /usr/src/app</span></div><div class="line"><span class="bash">RUN npm install --registry=https://registry.npm.taobao.org</span></div><div class="line"><span class="bash">USER node</span></div><div class="line"><span class="bash">EXPOSE 8080</span></div></pre></td></tr></table></figure></p><p>8080 端口请根据实际情况调整。建议大于1024，否则使用<strong>node</strong>用户启动应用时可能权限不足</p><h2 id="新建docker-compose-yml"><a href="#新建docker-compose-yml" class="headerlink" title="新建docker-compose.yml"></a>新建docker-compose.yml</h2><p>在应用目录下新建<strong>docker-compose.yml</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"2"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  jsconsole:</span></div><div class="line"><span class="attr">    build:</span> <span class="string">.</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">.:/usr/src/app</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/usr/src/app/node_modules</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"127.0.0.1:8081:8080"</span></div><div class="line"><span class="attr">    command:</span> <span class="string">"npm start"</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">always</span></div></pre></td></tr></table></figure></p><p><strong>127.0.0.1:8081</strong>是<strong>宿主机IP和端口</strong>，我前端采用了<strong>nginx</strong>做反向代理。如果是直接提供公网服务的话把<strong>127.0.0.1</strong>去掉</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>在应用根目录下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose build</div></pre></td></tr></table></figure></p><h2 id="构建并运行"><a href="#构建并运行" class="headerlink" title="构建并运行"></a>构建并运行</h2><p>在应用根目录下执行<strong>-d</strong>是后台执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up -d</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新建Dockerfile&quot;&gt;&lt;a href=&quot;#新建Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;新建Dockerfile&quot;&gt;&lt;/a&gt;新建Dockerfile&lt;/h2&gt;&lt;p&gt;在应用目录下新建&lt;strong&gt;Dockerfile&lt;/st
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https//www.ddhigh.com/tags/nodejs/"/>
    
      <category term="docker" scheme="https//www.ddhigh.com/tags/docker/"/>
    
      <category term="docker-composer" scheme="https//www.ddhigh.com/tags/docker-composer/"/>
    
  </entry>
  
  <entry>
    <title>php-imagick-字符间距问题</title>
    <link href="https//www.ddhigh.com/2017/10/17/php-imagick-text-spacing.html"/>
    <id>https//www.ddhigh.com/2017/10/17/php-imagick-text-spacing.html</id>
    <published>2017-10-17T11:26:21.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在用<strong>php-imagick</strong>扩展做图像合成的时候，有个地方需要改下文本间距，百度一下发现<strong>setTextInterWordSpacing</strong>有这个方法，但是测试发现不管传多少<br>值都毫无作用。</p><p>后面google查了一下，发现<strong>setTextKerning</strong>才是设置文本字符间距的函数。</p><p>此外，还发现一个bug，mac下<strong>roundCorners</strong>函数不存在的问题，找了个把小时才发现这是imagick在mac上面的bug，先写在这里，等有空在研究下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在用&lt;strong&gt;php-imagick&lt;/strong&gt;扩展做图像合成的时候，有个地方需要改下文本间距，百度一下发现&lt;strong&gt;setTextInterWordSpacing&lt;/strong&gt;有这个方法，但是测试发现不管传多少&lt;br&gt;值都毫无作用。&lt;/p&gt;
&lt;p&gt;后
      
    
    </summary>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="imagick" scheme="https//www.ddhigh.com/tags/imagick/"/>
    
      <category term="图像合成" scheme="https//www.ddhigh.com/tags/%E5%9B%BE%E5%83%8F%E5%90%88%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>mac下php-imagick扩展library not loaded问题</title>
    <link href="https//www.ddhigh.com/2017/10/17/mac-php-imagick-library-not-loaded.html"/>
    <id>https//www.ddhigh.com/2017/10/17/mac-php-imagick-library-not-loaded.html</id>
    <published>2017-10-17T09:26:30.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用imagick开发图像合成功能，和往常一样，终端执行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>php71-imagick</div></pre></td></tr></table></figure><p>虽然homebrew提示我安装成功了，然而<code>php -m</code>的时候确提示<strong>php-imagick模块无法加载</strong>。</p><p>google发现很多使用homebrew的人都遇到了问题，解决方法是<strong>使用源码编译imagick</strong>扩展，当然有个Homebrew倒是不用自己输入很长串的编译命令。</p><p>终端执行</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>reinstall -s php71-imagick</div></pre></td></tr></table></figure><p><strong>-s</strong>代表源码编译。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用imagick开发图像合成功能，和往常一样，终端执行&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>yii2关闭csrf校验和cookie校验</title>
    <link href="https//www.ddhigh.com/2017/10/17/yii2-close-csrf-validation-cookie-validatetion.html"/>
    <id>https//www.ddhigh.com/2017/10/17/yii2-close-csrf-validation-cookie-validatetion.html</id>
    <published>2017-10-17T09:19:19.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">关闭该选项会导致应用安全性收到影响！</div></pre></td></tr></table></figure><h1 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h1><ol><li>开发API的时候发现POST请求老是不能通过验证，直接把报错文案放到项目中去搜索发现<strong>yii\web\Request</strong>中有<strong>enableCsrfValidation</strong>。</li><li>其他应用设置的cookie，抓包的时候可以看到请求中有cookie，但是yii2读取不到。</li></ol><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>找到<strong>yii\web\Request</strong>文件，看到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@var</span> bool whether to enable CSRF (Cross-Site Request Forgery) validation. Defaults to true.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> $enableCsrfValidation = <span class="keyword">true</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@var</span> bool whether cookies should be validated to ensure they are not tampered. Defaults to true.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> $enableCookieValidation = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p><p>发现是这里有问题，基于<strong>yii2一切都是组件的思想</strong>，去修改组件配置即可。</p><h1 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h1><p>编辑<strong>config/web.php的components节</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'request'</span>      =&gt; [</div><div class="line">    <span class="string">'cookieValidationKey'</span>    =&gt; <span class="string">'xxxx'</span>,</div><div class="line">    <span class="string">'enableCookieValidation'</span> =&gt; <span class="keyword">false</span>,</div><div class="line">    <span class="string">'enableCsrfValidation'</span>   =&gt; <span class="keyword">false</span>,</div><div class="line">    ],</div><div class="line">],</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重要提示&quot;&gt;&lt;a href=&quot;#重要提示&quot; class=&quot;headerlink&quot; title=&quot;重要提示&quot;&gt;&lt;/a&gt;重要提示&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="yii2" scheme="https//www.ddhigh.com/tags/yii2/"/>
    
      <category term="csrf" scheme="https//www.ddhigh.com/tags/csrf/"/>
    
  </entry>
  
  <entry>
    <title>koa-cooke使用maxAge代替expires来设置过期时间</title>
    <link href="https//www.ddhigh.com/2017/10/17/koa-cookie-use-maxage.html"/>
    <id>https//www.ddhigh.com/2017/10/17/koa-cookie-use-maxage.html</id>
    <published>2017-10-17T09:13:44.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h1><p>原来设置cookie使用的以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cookieOptions = &#123;</div><div class="line">  expires: moment().add(<span class="number">6</span>,<span class="string">'day'</span>).toDate(),</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>但是查看network的时候，cookie虽然设置了，但是过期时间比现在还早，导致一设置就过期，所以expires貌似没作用。</p><h1 id="maxage"><a href="#maxage" class="headerlink" title="maxage"></a>maxage</h1><p>查看对应的typescript定义文件<strong>index.d.ts</strong>发现还有一个<strong>maxAge</strong>选项也可以用来控制cookie过期时间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * a number representing the milliseconds from Date.now() for expiry</span></div><div class="line"><span class="comment"> */</span></div><div class="line">maxAge?: number;</div></pre></td></tr></table></figure></p><p>这个参数更简单，<strong>基于当前时间的毫秒数</strong>，使用以下代码测试之后，发现过期时间跟预期一致<strong>一个星期</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cookieOptions = &#123;</div><div class="line">  maxAge: <span class="number">3600</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">1000</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;expires&quot;&gt;&lt;a href=&quot;#expires&quot; class=&quot;headerlink&quot; title=&quot;expires&quot;&gt;&lt;/a&gt;expires&lt;/h1&gt;&lt;p&gt;原来设置cookie使用的以下代码&lt;/p&gt;
&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
    
      <category term="koa" scheme="https//www.ddhigh.com/tags/koa/"/>
    
      <category term="koa2" scheme="https//www.ddhigh.com/tags/koa2/"/>
    
      <category term="cookie" scheme="https//www.ddhigh.com/tags/cookie/"/>
    
      <category term="koa-cookie" scheme="https//www.ddhigh.com/tags/koa-cookie/"/>
    
  </entry>
  
  <entry>
    <title>ios新版本代理设置问题</title>
    <link href="https//www.ddhigh.com/2017/10/16/ios-proxy-certificate-setting.html"/>
    <id>https//www.ddhigh.com/2017/10/16/ios-proxy-certificate-setting.html</id>
    <published>2017-10-16T06:23:55.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>系统是iOS11，电脑端用的charles代理，目前需要查看一些https网站返回的数据，还是使用老方法把charles的根证书设为信任，手机也打开<strong>chls.pro/ssl</strong>把证书添加到系统了。<br>但是抓包的时候依旧无法访问，safari直接提示“该网站提供的证书不可信任”，查看详情发现charles证书虽然安装，但是没生效。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>可能是iOS加强了安全性以及用户体验，往常的时候一旦我们加入证书，除非卸载，该证书是一直生效的（排除掉被吊销或者过期情况），而iOS11在<strong>设置-通用-关于手机-证书信任设置</strong>中可以方便开关证书。<br>之前在iOS10.3也出现过问题，解决方法应该也是一致的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;系统是iOS11，电脑端用的charles代理，目前需要查看一些https网站返回的数据，还是使用老方法把charles的根证书设为信任，手
      
    
    </summary>
    
    
      <category term="ios" scheme="https//www.ddhigh.com/tags/ios/"/>
    
      <category term="proxy" scheme="https//www.ddhigh.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Servlet中print-writer和outputstream编码问题</title>
    <link href="https//www.ddhigh.com/2017/10/16/servlet-print-writer-outputstream-encoding.html"/>
    <id>https//www.ddhigh.com/2017/10/16/servlet-print-writer-outputstream-encoding.html</id>
    <published>2017-10-16T06:11:40.000Z</published>
    <updated>2017-11-29T13:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>有个项目需要使用java开发一个简单的web接口用来请求加密数据，但是servlet之前只随便用了一下，平时工作也是以<strong>node</strong>为主。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>问题大致是”iso 88591 encoding之类的问题，稍微去google搜了一下，可能是搜的关键词不准确导致搜到的答案不理想，无意中看到有人讲writer和outputstream的问题。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>google到PrintWriter和OutputStream的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PrintWriter是以字符为单位，对所有的信息进行处理，而ServletOutputStream仅对二进制的资料进行处理。</div></pre></td></tr></table></figure><p>而我输出的是UTF8格式的字符串，所以OutputStream并不认识。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>使用<strong>PrintWriter</strong>输出即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有个项目需要使用java开发一个简单的web接口用来请求加密数据，但是servlet之前只随便用了一下，平时工作也是以&lt;strong&gt;node&lt;/strong&gt;为主。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="java" scheme="https//www.ddhigh.com/tags/java/"/>
    
      <category term="servlet" scheme="https//www.ddhigh.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>excel-stream Unknown Encoding错误问题</title>
    <link href="https//www.ddhigh.com/2017/10/15/excel-stream-unknown-encoding.html"/>
    <id>https//www.ddhigh.com/2017/10/15/excel-stream-unknown-encoding.html</id>
    <published>2017-10-15T13:28:45.000Z</published>
    <updated>2017-10-15T13:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目上线有半年多了，一直没有出过问题，但是前几天升级过一次NodeJs到8.x的时候就出现过这个问题了。因为采用了消息队列，但是一到这里就挂，导致进程重复启动几百次。</p><h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">excel-<span class="keyword">stream</span>/csv-<span class="keyword">stream</span>/<span class="keyword">index</span>.js <span class="number">59</span> Buffer unknow encoding</div></pre></td></tr></table></figure><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>google了一下无果，后面发现反正源码反正自己有，倒不如自己改改，直接定位到相关代码即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CSVStream.prototype.write = <span class="function"><span class="keyword">function</span>(<span class="params">buffer,encoding</span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>._encoding = encoding || <span class="keyword">this</span>._encoding;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>._ended) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot write after end has been called.'</span>);</div><div class="line"><span class="keyword">if</span>(buffer) <span class="keyword">this</span>._buffer = Buffer.concat([<span class="keyword">this</span>._buffer, buffer], <span class="keyword">this</span>._buffer.length + buffer.length);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>._paused) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">this</span>._parser.parse(<span class="keyword">this</span>._buffer.toString(<span class="keyword">this</span>._encoding));</div><div class="line"><span class="keyword">this</span>._buffer = <span class="keyword">new</span> Buffer(<span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> !<span class="keyword">this</span>._paused;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>报错具体行数是<strong>this._parser.parse(this._buffer.toString(this._encoding));</strong>，错误很明显了，提示encoding错误。</p><p>那直接往上面找，发现<strong>this._encoding = encoding || this._encoding</strong>，这里就有可能传入的encoding导致了错误。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>这个项目已经3年没维护了，所以要修正问题的话，只能手动改了。</p><p>修改办法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._parser.parse(<span class="keyword">this</span>._buffer.toString(<span class="keyword">this</span>._encoding));</div></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._parser.parse(<span class="keyword">this</span>._buffer.toString());</div></pre></td></tr></table></figure><p>重新运行之后没有发现问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目上线有半年多了，一直没有出过问题，但是前几天升级过一次NodeJs到8.x的时候就出现过这个问题了。因为采用了消息队列，但是一到这里就挂，导致进程重复启动几百次。&lt;/p&gt;
&lt;h1 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从零开始向DefinitelyTyped贡献代码</title>
    <link href="https//www.ddhigh.com/2017/10/15/contributing-to-DefinitelyTyped-step-by-step.html"/>
    <id>https//www.ddhigh.com/2017/10/15/contributing-to-DefinitelyTyped-step-by-step.html</id>
    <published>2017-10-14T16:00:00.000Z</published>
    <updated>2017-10-14T21:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是DefinitelyTyped"><a href="#什么是DefinitelyTyped" class="headerlink" title="什么是DefinitelyTyped?"></a>什么是DefinitelyTyped?</h1><p>讲到DefinitelyTyped，我想做typescript开的人应该不会陌生，DefinitelyTyped是一个由typescript的发明者Microsoft维护的一个项目。</p><h1 id="为什么会有DefinitelyTyped"><a href="#为什么会有DefinitelyTyped" class="headerlink" title="为什么会有DefinitelyTyped?"></a>为什么会有DefinitelyTyped?</h1><p>typescript是基于declation的一门语言，declation这个东西有点像C语言的头文件，就是变量、函数等等需要事先声明才能通过typescript编辑。为了方便开发者，也为了快速推广typescript，官方维护的这个项目给npm常用的一些包都定义了declations文件。<br>既然是托管在github的OpenSource Project，那么只要是github的会员就可以提交PR（当然Merge与否还得看项目组成员）,由于社区的活跃使得该仓库越来越丰富。<br>很荣幸，我也提交了几个npm包的declations在上面。</p><h1 id="如何提交PR到DefinitelyTyped"><a href="#如何提交PR到DefinitelyTyped" class="headerlink" title="如何提交PR到DefinitelyTyped?"></a>如何提交PR到DefinitelyTyped?</h1><p>很多时候会遇到自己使用的npm包比较冷门，而DefinitelyTyped上面又没有，这时候虽然可以在本地定义，但是能够发布到DefinitelyTyped方便大家也是极好的，毕竟要拥抱开源嘛！<br>官方的ReadMe中有<code>How can I contribute?</code>来告知开发者如何提交PR，但是需要英语基础，哈哈。</p><h1 id="Step-By-Step"><a href="#Step-By-Step" class="headerlink" title="Step By Step"></a>Step By Step</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="fork-项目"><a href="#fork-项目" class="headerlink" title="fork 项目"></a>fork 项目</h3><p>要提交PR的第一步是必须fork到自己的仓库，别人不会随便给你直接改，万一改挂了他们还得背锅.<br>登录github,打开项目地址<a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="external">DefinitelyTyped</a><br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-024655.png" alt="fork"><br>fork完毕后，你会拥有一个自己的仓库地址，本文中我的地址是<a href="https://github.com/xialeistudio/DefinitelyTyped" target="_blank" rel="external">https://github.com/xialeistudio/DefinitelyTyped</a></p><h3 id="clone-到本地"><a href="#clone-到本地" class="headerlink" title="clone 到本地"></a>clone 到本地</h3><p>我本地的项目地址是<strong>~/WebstormProjects/DefinitelyTyped</strong><br>终端执行 <code>git clone https://github.com/xialeistudio/DefinitelyTyped</code></p><h3 id="安装npm依赖"><a href="#安装npm依赖" class="headerlink" title="安装npm依赖"></a>安装npm依赖</h3><p>终端执行 <code>cd ~/WebstormProjects/DefinitelyTyped &amp;&amp; yarn</code></p><h2 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h2><p>本文使用SourceTree配合git flow来进行项目管理。</p><ol><li>下载soucetree <a href="https://www.sourcetreeapp.com" target="_blank" rel="external">下载地址</a></li><li>安装sourcetree，期间需要登录。</li><li>用sourcetree打开刚才克隆的项目。<br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-030606.png" alt="p1"></li><li>点击菜单栏【仓库】-&gt;【git-flow或hg flow】-&gt;【初始化仓库】</li></ol><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><p>本文将以<a href="https://www.npmjs.com/package/types/koa2-cors" target="_blank" rel="external">koa2-cors</a>为例提交PR。</p><ol><li>使用sourcetree的git-flow创建feature<br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-030911.png" alt="p2"></li><li>分支名称填写<strong>koa2-cors</strong><br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-031005.png" alt="p3"></li><li>这时候已经可以编码了。我用的vscode，轻量，建议大家也用这个，webstorm打开这个项目就卡死了。</li><li>安装定义文件生成工具，终端执行<strong>npm install -g dts-gen</strong></li><li>生成项目文件，终端执行<strong>dts-gen –dt –name koa2-cors –template module</strong></li><li>这个时候在<strong>types/koa2-cors</strong>目录下就是我们需要编辑的文件了。如果编写定义文件不在本文范畴，有需要的朋友可以去tslang官网看看手册。</li><li><p>开始编辑<strong>index.d.ts</strong>，完整定义如下，记得改自己的个人信息:   </p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// Type definitions for koa2-cors 2.0</span></div><div class="line">    <span class="comment">// Project: https://github.com/zadzbw/koa2-cors#readme</span></div><div class="line">    <span class="comment">// Definitions by: xialeistudio &lt;https://github.com/xialeistudio&gt;</span></div><div class="line">    <span class="comment">// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped</span></div><div class="line"></div><div class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">declare</span> <span class="keyword">namespace</span> cors &#123;</div><div class="line">        <span class="keyword">interface</span> Options &#123;</div><div class="line">            origin?: <span class="built_in">any</span>;</div><div class="line">            exposeHeaders?: <span class="built_in">string</span>[];</div><div class="line">            maxAge?: <span class="built_in">number</span>;</div><div class="line">            credentials?: <span class="built_in">boolean</span>;</div><div class="line">            allowMethods?: <span class="built_in">string</span>[];</div><div class="line">            allowHeaders?: <span class="built_in">string</span>[];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">cors</span>(<span class="params">options?: cors.Options</span>): <span class="title">Koa</span>.<span class="title">Middleware</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> = cors;</div><div class="line">    <span class="string">``</span><span class="string">`   </span></div><div class="line"><span class="string">8. 编写单元测试文件**koa2-cors-tests.ts**，测试就是写上样板代码即可，只要能通过编译就行。   </span></div><div class="line"><span class="string">    `</span><span class="string">``</span>typescript</div><div class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span>;</div><div class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> cors <span class="keyword">from</span> <span class="string">'koa2-cors'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line">    app.use(cors(&#123;</div><div class="line">        origin: <span class="function"><span class="keyword">function</span> (<span class="params">ctx: Koa.Context</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ctx.url === <span class="string">'/test'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="string">'*'</span>;</div><div class="line">        &#125;,</div><div class="line">        exposeHeaders: [<span class="string">'WWW-Authenticate'</span>, <span class="string">'Server-Authorization'</span>],</div><div class="line">        maxAge: <span class="number">5</span>,</div><div class="line">        credentials: <span class="literal">true</span>,</div><div class="line">        allowMethods: [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'DELETE'</span>],</div><div class="line">        allowHeaders: [<span class="string">'Content-Type'</span>, <span class="string">'Authorization'</span>, <span class="string">'Accept'</span>],</div><div class="line">    &#125;));</div><div class="line">    app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></li><li><p>启动单元测试，终端执行<strong>npm run test</strong>，如果没有报错，即可进行提交流程，否则要修好错误才能提交。很幸运，单元测试通过：<br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-032934.png" alt="p4"></p></li><li>commit，终端执行<strong>git add . &amp;&amp; git commit -m “add koa2-cors definition”</strong></li><li>使用sourcetree创建PR<br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-033135.png" alt="p4"></li><li>点击<strong>在网上创建拉取请求</strong><br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-033252.png" alt="p5"></li><li>此时会自动打开github网页进行PR操作   </li><li>编辑PR提交模板，这个根据实际情况编写即可，注意下方的<strong>If xxx</strong>，这个是不同提交类型需要填写的。本文是新增，所以选择<strong>add</strong><br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-033524.png" alt="p6"></li><li>点击<strong>Create Pull Request</strong>，此时会进行<strong>travis</strong>自动化测试流程，如果有错误需要点进去看到错误信息之后修正，很不幸。我们的第一次提交失败：<br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-034009.png" alt="p7"></li><li>点击<strong>Details</strong>进行详细错误页面，找到<strong>=== Error ===</strong><br><img src="https://og5r5kasb.qnssl.com/upload/QQ20171015-034114.png" alt="p8"></li><li><p>可以发现我们错误是<strong>“ Expected <code>&quot;strictFunctionTypes&quot;: true</code> or <code>&quot;strictFunctionTypes&quot;: false</code></strong>,这个是<strong>tsconfig.json</strong>导致的问题，感觉是个历史遗留问题，因为使用的是默认创建的模板，不过为了提交PR，还是要手动修复。<br>编辑<strong>types/koa2-cors/tsconfig.json</strong>，在<strong>compilerOptions</strong>下添加，代码如下：   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</div><div class="line">        <span class="attr">"lib"</span>: [</div><div class="line">            <span class="string">"es6"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"noImplicitThis"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"baseUrl"</span>: <span class="string">"../"</span>,</div><div class="line">        <span class="attr">"strictFunctionTypes"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"typeRoots"</span>: [</div><div class="line">            <span class="string">"../"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"types"</span>: [],</div><div class="line">        <span class="attr">"noEmit"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"forceConsistentCasingInFileNames"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"files"</span>: [</div><div class="line">        <span class="string">"index.d.ts"</span>,</div><div class="line">        <span class="string">"koa2-cors-tests.ts"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>commit，终端执行<strong>git add . &amp;&amp; git commit -m “strictFunctionTypes” &amp;&amp; git push</strong>，不需要再创建PR了，当你在该分支PUSH的时候，远端会自动触发自动化测试任务。</p></li><li>成功通过测试后，就可以等待官方人员过来review了。一般来说都会通过并且合并到master中去。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是DefinitelyTyped&quot;&gt;&lt;a href=&quot;#什么是DefinitelyTyped&quot; class=&quot;headerlink&quot; title=&quot;什么是DefinitelyTyped?&quot;&gt;&lt;/a&gt;什么是DefinitelyTyped?&lt;/h1&gt;&lt;p&gt;讲到De
      
    
    </summary>
    
      <category term="typescript" scheme="https//www.ddhigh.com/categories/typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Docker来部署NodeJs应用</title>
    <link href="https//www.ddhigh.com/2017/10/10/docker-publish-nodejs.html"/>
    <id>https//www.ddhigh.com/2017/10/10/docker-publish-nodejs.html</id>
    <published>2017-10-09T16:00:00.000Z</published>
    <updated>2017-10-14T21:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker的环境无关性以及自动化特性实在是令人称赞，最近遇到的一个问题是，NodeJs使用8.x版本开发，但是线上服务器是7.x的，这时候又不能动线上的应用。<br>于是想到了使用Docker来部署NodeJs，服务器是Ubuntu的。</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt <span class="keyword">install</span> docker.io</div></pre></td></tr></table></figure><h2 id="Dockerfile编写"><a href="#Dockerfile编写" class="headerlink" title="Dockerfile编写"></a>Dockerfile编写</h2><p>由于默认的dockhub速度非常慢导致下载镜像慢，而且镜像下来的Ubuntu apt源又是国外的，简直是慢上加慢，本文使用<a href="https://www.daocloud.io/" target="_blank" rel="external">daocloud.io的Ubuntu镜像</a>以及<a href="http://mirrors.aliyun.com/" target="_blank" rel="external">阿里云的Ubuntu源</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> daocloud.io/library/ubuntu</div><div class="line"><span class="keyword">MAINTAINER</span> xialeistudio&lt;xialeistudio@gmail.com&gt;</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> PATH $PATH:/opt/node/bin</div><div class="line"><span class="keyword">ENV</span> PORT <span class="number">80</span></div><div class="line"><span class="keyword">ENV</span> HOST <span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line"><span class="comment"># prepare</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> sources.list /etc/apt/sources.list</span></div><div class="line"><span class="bash">RUN apt update</span></div><div class="line"><span class="bash">RUN apt install wget gcc python git -y</span></div><div class="line"><span class="bash"><span class="comment"># nodejs</span></span></div><div class="line"><span class="bash">RUN wget https://npm.taobao.org/mirrors/node/latest-v8.x/node-v8.6.0-linux-x64.tar.gz</span></div><div class="line"><span class="bash">RUN tar xf node-v8.6.0-linux-x64.tar.gz</span></div><div class="line"><span class="bash">RUN mv node-v8.6.0-linux-x64 /opt/node</span></div><div class="line"><span class="bash"><span class="comment"># app</span></span></div><div class="line"><span class="bash">RUN mkdir app</span></div><div class="line"><span class="bash">ADD . /root/app</span></div><div class="line"><span class="bash">WORKDIR /root/app</span></div><div class="line"><span class="bash">RUN /opt/node/bin/npm install --registry=https://registry.npm.taobao.org</span></div><div class="line"><span class="bash"><span class="comment"># start app</span></span></div><div class="line"><span class="bash">ENTRYPOINT [<span class="string">"npm"</span>,<span class="string">"start"</span>]</span></div></pre></td></tr></table></figure><p>指令解释一下</p><ol><li>指定模板镜像</li><li>维护者信息，这是本人写的，所以署名为本人</li><li>环境变量定义</li><li>复制宿主机当前目录的sources.list到docker中的/etc/apt目录用来替换默认的Ubuntu源</li><li>更新apt并安装必要软件</li><li>从淘宝镜像站下载nodejs二进制版本</li><li>解压并移动到/opt/node目录</li><li>创建应用目录，并把宿主机当前文件夹下的所有文件拷贝到docker景象中</li><li>使用淘宝镜像安装npm包</li><li>启动APP</li></ol><h2 id="build镜像"><a href="#build镜像" class="headerlink" title="build镜像"></a>build镜像</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t demo .</div></pre></td></tr></table></figure><p>运行完毕后就可以使用<em>docker images</em>查看镜像了</p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">docker</span> <span class="selector-tag">run</span> <span class="selector-tag">-d</span> <span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7001</span><span class="selector-pseudo">:80</span> <span class="selector-tag">demo</span></div></pre></td></tr></table></figure><p>这时候容器已经启动，并通过端口转发监听在宿主机的7001端口上，配合nginx做反向代理就可以部署一个公网应用了。<br>不管你容器中部署何种版本的NodeJs都不会对宿主机造成影响，这点很重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker的环境无关性以及自动化特性实在是令人称赞，最近遇到的一个问题是，NodeJs使用8.x版本开发，但是线上服务器是7.x的，这时候又不能动线上的应用。&lt;br&gt;于是想到了使用Docker来部署NodeJs，服务器是Ubuntu的。&lt;/p&gt;
&lt;h2 id=&quot;安装Doc
      
    
    </summary>
    
      <category term="docker" scheme="https//www.ddhigh.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx alias和root指令</title>
    <link href="https//www.ddhigh.com/2017/09/14/nginx-alias-root.html"/>
    <id>https//www.ddhigh.com/2017/09/14/nginx-alias-root.html</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-10-14T21:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx的root指令相信大家用的都挺多，用来指定document_root，但是如果是针对特定path的请求才启用的话，root指令显得不好用<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">/web</span> &#123;</div><div class="line">    root /home/wwwroot/site1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问 <em><a href="http://demo.com/web/a.js" target="_blank" rel="external">http://demo.com/web/a.js</a></em>的时候,nginx会去查找<em>/home/wwwroot/site1/web/a.js</em>，一般就会404了。因为文件是放在site1目录下的。<br>这时候就需要alias指令了。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location <span class="regexp">/web/</span>&#123;</div><div class="line">    alias <span class="regexp">/home/</span>wwwroot<span class="regexp">/site1/</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问 <em><a href="http://demo.com/web/a.js" target="_blank" rel="external">http://demo.com/web/a.js</a></em>的时候,nginx会去查找<em>/home/wwwroot/site1/a.js</em>。</p><p>注意 alias location末尾斜杠以及alias的末尾斜杠</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx的root指令相信大家用的都挺多，用来指定document_root，但是如果是针对特定path的请求才启用的话，root指令显得不好用&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="nginx" scheme="https//www.ddhigh.com/categories/nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot JPA 返回json时排除Null字段</title>
    <link href="https//www.ddhigh.com/2017/07/31/spring-boot-exclude-null.html"/>
    <id>https//www.ddhigh.com/2017/07/31/spring-boot-exclude-null.html</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-10-14T21:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot在返回JSON的时候默认会返回null字段，这个对客户端一般没什么作用，还会增加服务器带宽压力。使用如下配置可以屏蔽。</p><p>在pojo对象上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再使用<code>@ResponseBody</code>的时候就不会返回Null字段了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Boot在返回JSON的时候默认会返回null字段，这个对客户端一般没什么作用，还会增加服务器带宽压力。使用如下配置可以屏蔽。&lt;/p&gt;
&lt;p&gt;在pojo对象上添加注解&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="spring boot" scheme="https//www.ddhigh.com/categories/spring-boot/"/>
    
    
      <category term="json" scheme="https//www.ddhigh.com/tags/json/"/>
    
      <category term="jpa" scheme="https//www.ddhigh.com/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>使用pm2来保证Spring Boot应用稳定运行</title>
    <link href="https//www.ddhigh.com/2017/07/31/spring-boot-pm2.html"/>
    <id>https//www.ddhigh.com/2017/07/31/spring-boot-pm2.html</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-10-14T21:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot开发web应用就像开发普通的java程序一般简洁，因为其内嵌了web容易，启动的时候只需要一条命令<code>java -jar server.jar</code>即可，非常方便。<br>但是由此而来的问题是万一应用挂了怎么办？</p><p>别担心，有pm2进程管理工具可以帮到你。</p><h2 id="PM2简介"><a href="#PM2简介" class="headerlink" title="PM2简介"></a>PM2简介</h2><p>pm2原先是nodejs应用的进程管理工具，不过其良好的设计以及扩展性可以手动执行执行进程。</p><h2 id="PM2安装"><a href="#PM2安装" class="headerlink" title="PM2安装"></a>PM2安装</h2><ol><li>安装NodeJs</li><li><code>npm install pm2 -g</code></li></ol><h2 id="PM2基本命令"><a href="#PM2基本命令" class="headerlink" title="PM2基本命令"></a>PM2基本命令</h2><ul><li>pm2 list 查看所有被PM2管理的进程列表</li><li>pm2 start xxx 启动一个应用</li><li>pm2 stop xxx 停止一个应用</li><li>pm2 restart xxx 重启一个应用</li><li>pm2 describe xxx 查看应用详情</li><li>pm2 startup, pm2 save 两条命令，用来保证服务器启动时,pm2管理的程序自动运行</li></ul><h2 id="Java程序处理"><a href="#Java程序处理" class="headerlink" title="Java程序处理"></a>Java程序处理</h2><p>在jar的同级目录新建应用启动配置文件，如<code>pm2.json</code>，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"my-server"</span>,</div><div class="line">    <span class="attr">"script"</span>: <span class="string">"/usr/bin/java"</span>,</div><div class="line">    <span class="attr">"args"</span>: [</div><div class="line">        <span class="string">"-jar"</span>,</div><div class="line">        <span class="string">"server.jar"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"exec_interpreter"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"exec_mode"</span>: <span class="string">"fork"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明如下：</p><ul><li>name 进程名称（显示在<code>pm2 list</code>命令中）</li><li>script 执行进程名称，如果需要执行PHP脚本则填写php解释器的路径，本文为java</li><li>args 传给执行进程的参数，多个参数以数组单元分割</li><li>exec_interpreter NodeJs解析器，本文不适用</li><li>exec_mode 执行模式[cluster|fork]这个针对NodeJs应用的配置，非NodeJs应用统一fork</li></ul><p>配置文件完成后，使用<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p<span class="name">m2</span> start p<span class="name">m2.</span>jso<span class="symbol">n</span></div></pre></td></tr></table></figure></p><p>即可看到应用被启动</p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>日志路径在<code>~/.pm2/logs</code>，<code>stdout</code>和<code>stderr</code>被分开存放，程序中的所有<code>stdout</code>和<code>stderr</code>都被收集方便查错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Boot开发web应用就像开发普通的java程序一般简洁，因为其内嵌了web容易，启动的时候只需要一条命令&lt;code&gt;java -jar server.jar&lt;/code&gt;即可，非常方便。&lt;br&gt;但是由此而来的问题是万一应用挂了怎么办？&lt;/p&gt;
&lt;p&gt;别担心，
      
    
    </summary>
    
      <category term="spring book" scheme="https//www.ddhigh.com/categories/spring-book/"/>
    
    
      <category term="pm2" scheme="https//www.ddhigh.com/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>移动端rem和PSD单位换算问题</title>
    <link href="https//www.ddhigh.com/2017/07/28/mobile-rem.html"/>
    <id>https//www.ddhigh.com/2017/07/28/mobile-rem.html</id>
    <published>2017-07-27T16:00:00.000Z</published>
    <updated>2017-10-14T21:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>设计图尺寸一般750宽度，而需要兼容640宽度手机的话，需要调整缩放比率，之前使用<code>写死viewport</code>的做法来实现，不过这个方法有点取巧，而且有些场景并不适用。<br>本文用<code>标准的@media</code>来实现</p><h2 id="rem定义"><a href="#rem定义" class="headerlink" title="rem定义"></a>rem定义</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">750px</span>) &#123;</div><div class="line">  <span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">640px</span>) and (max-width: <span class="number">749px</span>) &#123;</div><div class="line">  <span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">480px</span>) and (max-width: <span class="number">639px</span>) &#123;</div><div class="line">  <span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">320px</span>) and (max-width: <span class="number">479px</span>) &#123;</div><div class="line">  <span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>假设PSD中有个button的大小为<code>100px*40px</code>，那使用rem时CSS如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">3.333rem</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1.333rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计图尺寸一般750宽度，而需要兼容640宽度手机的话，需要调整缩放比率，之前使用&lt;code&gt;写死viewport&lt;/code&gt;的做法来实现，不过这个方法有点取巧，而且有些场景并不适用。&lt;br&gt;本文用&lt;code&gt;标准的@media&lt;/code&gt;来实现&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="css3" scheme="https//www.ddhigh.com/categories/css3/"/>
    
    
      <category term="css3" scheme="https//www.ddhigh.com/tags/css3/"/>
    
      <category term="rem" scheme="https//www.ddhigh.com/tags/rem/"/>
    
  </entry>
  
</feed>
