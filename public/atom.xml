<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2019-08-24T09:02:58.493Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>socks5协议详解</title>
    <link href="https//www.ddhigh.com/2019/08/24/socks5-protocol.html"/>
    <id>https//www.ddhigh.com/2019/08/24/socks5-protocol.html</id>
    <published>2019-08-24T09:02:26.000Z</published>
    <updated>2019-08-24T09:02:58.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Socks5代理协议"><a href="#Socks5代理协议" class="headerlink" title="Socks5代理协议"></a>Socks5代理协议</h1><p>或许你没听说过socks5，但你一定听说过ShadowSocks，ShadowSockS内部使用的正是socks5协议。</p><p>socks5是一种网络传输协议，主要用于客户端与目标服务器之间通讯的透明传递。</p><p>该协议设计之初是为了让有权限的用户可以穿过防火墙的限制，访问外部资源。</p><h2 id="1-RFC地址"><a href="#1-RFC地址" class="headerlink" title="1. RFC地址"></a>1. RFC地址</h2><ol><li><a href="https://www.ietf.org/rfc/rfc1928.txt" target="_blank" rel="external">socks5协议规范rfc1928</a></li><li><a href="https://www.ietf.org/rfc/rfc1929.txt" target="_blank" rel="external">socks5账号密码鉴权规范rfc1929</a></li></ol><h2 id="2-协议过程"><a href="#2-协议过程" class="headerlink" title="2. 协议过程"></a>2. 协议过程</h2><p><img src="https://static.ddhigh.com/blog/2019-08-24-041841.png" alt="image.png"></p><ol><li>客户端连接上代理服务器之后需要发送请求告知服务器目前的socks协议版本以及支持的认证方式</li><li>代理服务器收到请求后根据其设定的认证方式返回给客户端</li><li>如果代理服务器不需要认证，客户端将直接向代理服务器发起真实请求</li><li>代理服务器收到该请求之后连接客户端请求的目标服务器</li><li>代理服务器开始转发客户端与目标服务器之间的流量</li></ol><h2 id="3-认证过程"><a href="#3-认证过程" class="headerlink" title="3. 认证过程"></a>3. 认证过程</h2><h3 id="3-1-客户端发出请求"><a href="#3-1-客户端发出请求" class="headerlink" title="3.1 客户端发出请求"></a>3.1 客户端发出请求</h3><blockquote><p>客户端连接服务器之后将直接发出该数据包给代理服务器</p></blockquote><table><thead><tr><th>VERSION</th><th>METHODS_COUNT</th><th style="text-align:left">METHODS…</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td style="text-align:left">1到255字节，长度由METHODS_COUNT值决定</td></tr><tr><td>0x05</td><td>0x03</td><td style="text-align:left">0x00 0x01 0x02</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，目前固定0x05</li><li>METHODS_COUNT 客户端支持的认证方法数量</li><li>METHODS… 客户端支持的认证方法，每个方法占用1个字节</li></ul><p>METHOD定义</p><ul><li>0x00 不需要认证（常用）</li><li>0x01 GSSAPI认证</li><li>0x02 账号密码认证（常用）</li><li>0x03 - 0x7F IANA分配</li><li>0x80 - 0xFE 私有方法保留</li><li>0xFF 无支持的认证方法</li></ul><h3 id="3-2-服务端返回选择的认证方法"><a href="#3-2-服务端返回选择的认证方法" class="headerlink" title="3.2 服务端返回选择的认证方法"></a>3.2 服务端返回选择的认证方法</h3><blockquote><p>接收完客户端支持的认证方法列表后，代理服务器从中选择一个受支持的方法返回给客户端</p></blockquote><h4 id="3-2-1-无需认证"><a href="#3-2-1-无需认证" class="headerlink" title="3.2.1 无需认证"></a>3.2.1 无需认证</h4><table><thead><tr><th>VERSION</th><th>METHOD</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td></tr><tr><td>0x05</td><td>0x00</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，目前固定0x05</li><li>METHOD 本次连接所用的认证方法，上例中为无需认证</li></ul><h4 id="3-2-2-账号密码认证"><a href="#3-2-2-账号密码认证" class="headerlink" title="3.2.2 账号密码认证"></a>3.2.2 账号密码认证</h4><table><thead><tr><th>VERSION</th><th>METHOD</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td></tr><tr><td>0x05</td><td>0x02</td></tr></tbody></table><h4 id="3-2-3-客户端发送账号密码"><a href="#3-2-3-客户端发送账号密码" class="headerlink" title="3.2.3 客户端发送账号密码"></a>3.2.3 客户端发送账号密码</h4><blockquote><p>服务端返回的认证方法为0x02(账号密码认证)时，客户端会发送账号密码数据给代理服务器</p></blockquote><table><thead><tr><th>VERSION</th><th>USERNAME_LENGTH</th><th>USERNAME</th><th>PASSWORD_LENGTH</th><th>PASSWORD</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td>1-255字节</td><td>1字节</td><td>1-255字节</td></tr><tr><td>0x01</td><td>0x01</td><td>0x0a</td><td>0x01</td><td>0x0a</td></tr></tbody></table><ul><li>VERSION 认证子协商版本（与SOCKS协议版本的0x05无关系）</li><li>USERNAME_LENGTH 用户名长度</li><li>USERNAME 用户名字节数组，长度为USERNAME_LENGTH</li><li>PASSWORD_LENGTH 密码长度</li><li>PASSWORD 密码字节数组，长度为PASSWORD_LENGTH</li></ul><h4 id="3-2-4-服务端响应账号密码认证结果"><a href="#3-2-4-服务端响应账号密码认证结果" class="headerlink" title="3.2.4 服务端响应账号密码认证结果"></a>3.2.4 服务端响应账号密码认证结果</h4><blockquote><p>收到客户端发来的账号密码后，代理服务器加以校验，并返回校验结果</p></blockquote><table><thead><tr><th>VERSION</th><th>STATUS</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td></tr></tbody></table><ul><li>VERSION 认证子协商版本，与客户端VERSION字段一致</li><li>STATUS 认证结果<ul><li>0x00 认证成功</li><li>大于0x00 认证失败</li></ul></li></ul><h2 id="4-命令过程"><a href="#4-命令过程" class="headerlink" title="4. 命令过程"></a>4. 命令过程</h2><blockquote><p>认证成功后，客户端会发送连接命令给代理服务器，代理服务器会连接目标服务器，并返回连接结果</p></blockquote><h4 id="4-1-客户端请求"><a href="#4-1-客户端请求" class="headerlink" title="4.1 客户端请求"></a>4.1 客户端请求</h4><table><thead><tr><th>VERSION</th><th>COMMAND</th><th>RSV</th><th>ADDRESS_TYPE</th><th>DST.ADDR</th><th>DST.PORT</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td>1字节</td><td>1字节</td><td>1-255字节</td><td>2字节</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，固定0x05</li><li>COMMAND 命令<ul><li>0x01 CONNECT 连接上游服务器</li><li>0x02 BIND 绑定，客户端会接收来自代理服务器的链接，著名的FTP被动模式</li><li>0x03 UDP ASSOCIATE UDP中继</li></ul></li><li>RSV 保留字段</li><li>ADDRESS_TYPE 目标服务器地址类型<ul><li>0x01 IP V4地址</li><li>0x03 域名地址(没有打错，就是没有0x02)，域名地址的第1个字节为域名长度，剩下字节为域名名称字节数组</li><li>0x04 IP V6地址</li></ul></li><li>DST.ADDR 目标服务器地址</li><li>DST.PORT 目标服务器端口</li></ul><h4 id="4-2-代理服务器响应"><a href="#4-2-代理服务器响应" class="headerlink" title="4.2 代理服务器响应"></a>4.2 代理服务器响应</h4><table><thead><tr><th>VERSION</th><th>RESPONSE</th><th>RSV</th><th>ADDRESS_TYPE</th><th>BND.ADDR</th><th>BND.PORT</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td>1字节</td><td>1字节</td><td>1-255字节</td><td>2字节</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，固定0x05</li><li>RESPONSE 响应命令<ul><li>0x00 代理服务器连接目标服务器成功</li><li>0x01 代理服务器故障</li><li>0x02 代理服务器规则集不允许连接</li><li>0x03 网络无法访问</li><li>0x04 目标服务器无法访问（主机名无效）</li><li>0x05 连接目标服务器被拒绝</li><li>0x06 TTL已过期</li><li>0x07 不支持的命令</li><li>0x08 不支持的目标服务器地址类型</li><li>0x09 - 0xFF 未分配</li></ul></li><li>RSV 保留字段</li><li>BND.ADDR 代理服务器连接目标服务器成功后的代理服务器IP</li><li>BND.PORT 代理服务器连接目标服务器成功后的代理服务器端口</li></ul><h2 id="5-通信过程"><a href="#5-通信过程" class="headerlink" title="5. 通信过程"></a>5. 通信过程</h2><blockquote><p>　经过认证与命令过程后，客户端与代理服务器进入正常通信，客户端发送需要请求到目标服务器的数据给代理服务器，代理服务器转发这些数据，并把目标服务器的响应转发给客户端，起到一个“透明代理”的功能。</p></blockquote><h2 id="6-实际例子"><a href="#6-实际例子" class="headerlink" title="6. 实际例子"></a>6. 实际例子</h2><p>上文详细讲解了协议规范，下面来一个实例的通信过程范例。</p><p><em>6.2中无需认证和需要账号密码认证是互斥的</em>，同一请求只会采取一种，本文都列在下面。</p><h3 id="6-1-客户端发送受支持的认证方法"><a href="#6-1-客户端发送受支持的认证方法" class="headerlink" title="6.1 客户端发送受支持的认证方法"></a>6.1 客户端发送受支持的认证方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x02 0x00 0x02</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x02 支持的认证方法数量</li><li>0x00 免认证</li><li>0x02 账号密码认证</li></ul><h3 id="6-2-服务端响应选择的认证方法"><a href="#6-2-服务端响应选择的认证方法" class="headerlink" title="6.2 服务端响应选择的认证方法"></a>6.2 服务端响应选择的认证方法</h3><h4 id="6-2-1-无需认证"><a href="#6-2-1-无需认证" class="headerlink" title="6.2.1 无需认证"></a>6.2.1 无需认证</h4><blockquote><p>以下是无需认证，客户端收到该响应后直接发送需要发送给目标服务器的数据给到代理服务器，此时进入通信错过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x00</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x00 免认证</li></ul><h4 id="6-2-2-需要账号密码认证"><a href="#6-2-2-需要账号密码认证" class="headerlink" title="6.2.2 需要账号密码认证"></a>6.2.2 需要账号密码认证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x02</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x02 账号密码认证</li></ul><h4 id="6-2-3-客户端发送账号密码"><a href="#6-2-3-客户端发送账号密码" class="headerlink" title="6.2.3 客户端发送账号密码"></a>6.2.3 客户端发送账号密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x01 0x04 0x61 0x61 0x61 0x61 0x04 0x61 0x61 0x61 0x61</div></pre></td></tr></table></figure><ul><li>0x01 子协商版本</li><li>0x04 用户名长度</li><li>0x61 0x61 0x61 0x61 转换为ascii字符之后为”aaaa”</li><li>0x04 密码长度</li><li>0x61 0x61 0x61 0x61 转换为ascii字符之后”aaaa”</li></ul><h4 id="6-2-4-代理服务器响应认证结果"><a href="#6-2-4-代理服务器响应认证结果" class="headerlink" title="6.2.4 代理服务器响应认证结果"></a>6.2.4 代理服务器响应认证结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x01 0x00</div></pre></td></tr></table></figure><ul><li>0x01 子协商版本</li><li>0x00 认证成功（也就是代理服务器允许aaaa账号以aaaa密码登录）</li></ul><h3 id="6-3-客户端请求代理服务器连接目标服务器"><a href="#6-3-客户端请求代理服务器连接目标服务器" class="headerlink" title="6.3 客户端请求代理服务器连接目标服务器"></a>6.3 客户端请求代理服务器连接目标服务器</h3><p>以127.0.0.1和80端口为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x01 0x01 0x01 0x7f 0x00 0x00 0x01 0x00 0x50</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS协议版本</li><li>0x01 CONNECT命令</li><li>0x01 RSV保留字段</li><li>0x01 地址类型为IPV4</li><li>0x7f 0x00 0x00 0x01 目标服务器IP为127.0.0.1</li><li>0x00 0x50 目标服务器端口为80</li></ul><h3 id="6-4-代理服务器连接目标主机，并返回结果给客户端"><a href="#6-4-代理服务器连接目标主机，并返回结果给客户端" class="headerlink" title="6.4 代理服务器连接目标主机，并返回结果给客户端"></a>6.4 代理服务器连接目标主机，并返回结果给客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x00 0x01 0x01 0x7f 0x00 0x00 0x01 0x00 0xaa 0xaa</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x00 连接成功</li><li>0x01 RSV保留字段</li><li>0x01 地址类型为IPV4</li><li>0x7f 0x00 0x00 0x01 代理服务器连接目标服务器成功后的代理服务器IP, 127.0.0.1</li><li>0xaa 0xaa 代理服务器连接目标服务器成功后的代理服务器端口（代理服务器使用该端口与目标服务器通信），本例端口号为43690</li></ul><h3 id="6-5-客户端发送请求数据给代理服务器"><a href="#6-5-客户端发送请求数据给代理服务器" class="headerlink" title="6.5 客户端发送请求数据给代理服务器"></a>6.5 客户端发送请求数据给代理服务器</h3><p>如果客户端需要请求目标服务器的HTTP服务,就会发送HTTP协议报文给代理服务器,代理服务器将这些报文原样转发给目标服务器,并将目标服务器的响应发送给客户端,代理服务器不会对客户端或者目标服务器的报文做任何解析。</p><h2 id="7-结尾"><a href="#7-结尾" class="headerlink" title="7. 结尾"></a>7. 结尾</h2><p>SOCKS5协议的讲解到此结束，后续会使用GOLANG实现一个SOCKS5服务器来讲述TCP协议服务器的开发。</p><p><img src="https://static.ddhigh.com/blog/2019-08-24-085213.jpg" alt="关注公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Socks5代理协议&quot;&gt;&lt;a href=&quot;#Socks5代理协议&quot; class=&quot;headerlink&quot; title=&quot;Socks5代理协议&quot;&gt;&lt;/a&gt;Socks5代理协议&lt;/h1&gt;&lt;p&gt;或许你没听说过socks5，但你一定听说过ShadowSocks，Shado
      
    
    </summary>
    
      <category term="protocol" scheme="https//www.ddhigh.com/categories/protocol/"/>
    
    
      <category term="socks5" scheme="https//www.ddhigh.com/tags/socks5/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(4)——中间件</title>
    <link href="https//www.ddhigh.com/2019/08/23/nestjs-middlware.html"/>
    <id>https//www.ddhigh.com/2019/08/23/nestjs-middlware.html</id>
    <published>2019-08-23T02:40:49.000Z</published>
    <updated>2019-08-23T03:03:52.646Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是在路由处理程序<strong>之前</strong>调用的函数。中间件函数可以访问<strong>请求</strong>和<strong>响应</strong>对象。</p><p>使用过koa和express的朋友应该知道，中间件是一个很核心的功能，尤其是koa，核心就是中间件，连路由功能都是由中间件提供的。</p><p>中间件可以提供以下功能：</p><ul><li>运行过程中执行任意代码</li><li>对请求和响应进行更改</li><li>结束本次请求的响应</li><li>继续调用下一个中间件</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>NestJs使用<code>@Injectable()</code>来装饰中间件，被装饰的对象应该实现<code>NestMiddleware</code>接口。</p><p>以下是一个日志中间件的实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// log.middleware.ts</span></div><div class="line"><span class="keyword">import</span> &#123;Injectable, NestMiddleware&#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Request, Response&#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> LogMiddleware <span class="keyword">implements</span> NestMiddleware &#123;</div><div class="line">    use(req: Request, resp: Response, next: <span class="built_in">Function</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.path&#125;</span>`</span>)</div><div class="line">        next();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.module.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">      .forRoutes(<span class="string">'users'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="针对请求方法应用中间件"><a href="#针对请求方法应用中间件" class="headerlink" title="针对请求方法应用中间件"></a>针对请求方法应用中间件</h2><p>上面的简单示例中会对所有的<code>users</code>路由应用中间件，如果需要只对特定的请求方法，比如GET请求才应用中间件，可以使用以下方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">       .forRoutes(&#123; path: <span class="string">'users'</span>, method: RequestMethod.GET &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="应用多个中间件"><a href="#应用多个中间件" class="headerlink" title="应用多个中间件"></a>应用多个中间件</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware, OtherMiddleware)</div><div class="line">       .forRoutes(&#123; path: <span class="string">'users'</span>, method: RequestMethod.GET &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="基于控制器名称应用中间件"><a href="#基于控制器名称应用中间件" class="headerlink" title="基于控制器名称应用中间件"></a>基于控制器名称应用中间件</h2><p>上述代码都是针对固定的路由地址应用中间件，在NestJs中路由地址是通过装饰器定义的，如果控制器的路由地址有变化，而中间件这里没有跟着改掉，就会导致问题。</p><p>NestJs在使用中间件的时候提供了基于控制器来注册的方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">       .forRoutes(UserController);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="排除指定路由"><a href="#排除指定路由" class="headerlink" title="排除指定路由"></a>排除指定路由</h2><p>有些场景下对控制器应用了中间件之后需要绕过其中几个方法，比如登录验证中间件应该放行登录路由，否则没有人能够登录成功。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">      .exclude(</div><div class="line">          &#123;path:<span class="string">'users/login'</span>,method:RequestMethod.GET&#125;</div><div class="line">      )</div><div class="line">       .forRoutes(UserController);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h2><p>类似于全局模块，中间件也可以全局注册，对每一个路由都生效。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.ts</span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</div><div class="line">app.use(LogMiddleware);</div><div class="line"><span class="keyword">await</span> app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>中间件给框架赋予了极大的灵活性，可以根据功能抽象为中间件，达到”可插拔“的目的。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(4)——模块系统</title>
    <link href="https//www.ddhigh.com/2019/08/22/nestjs-module.html"/>
    <id>https//www.ddhigh.com/2019/08/22/nestjs-module.html</id>
    <published>2019-08-22T03:27:38.000Z</published>
    <updated>2019-08-22T04:00:21.230Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>NestJs中模块是构建和组织业务单元的基本元素。使用<code>@Module()</code>装饰模块来声明该模块的元信息：</p><ul><li>本模块导出哪些服务提供者</li><li>本模块导入了哪些依赖模块</li><li>本模块提供了哪些控制器</li></ul><p>每个NestJs至少有一个跟模块，这个就是<code>app.module.ts</code>定义的。根模块一般不放具体的业务逻辑，具体业务逻辑应该下沉到各个子业务模块去做。</p><p>比如我们开发一个商城系统，该系统有以下业务模块：</p><ul><li>订单中心</li><li>用户中心</li><li>支付中心</li><li>商品中心</li><li>物流中心</li></ul><p>那我们可以定义以下的模块结构:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">|-- app.module.ts</span></div><div class="line"><span class="string">|-- order</span></div><div class="line">    <span class="string">|-- order.module.ts</span></div><div class="line">    <span class="string">|-- services</span></div><div class="line">        <span class="string">|-- order.service.ts</span></div><div class="line">    <span class="string">|-- controllers</span></div><div class="line">        <span class="string">|-- order.controller.ts</span></div><div class="line"><span class="string">|-- user</span></div><div class="line">    <span class="string">|-- user.module.ts</span></div><div class="line">    <span class="string">|-- services</span></div><div class="line">        <span class="string">|-- user.service.ts</span></div><div class="line">    <span class="string">|-- controllers</span></div><div class="line">        <span class="string">|-- user.controller.ts</span></div><div class="line"><span class="string">|-- pay</span></div><div class="line">    <span class="string">|-- pay.module.ts</span></div><div class="line">    <span class="string">|-- services</span></div><div class="line">        <span class="string">|-- wepay.service.ts</span></div><div class="line">        <span class="string">|-- alipay.service.ts</span></div><div class="line">        <span class="string">|-- pay.service.ts</span></div><div class="line">    <span class="string">|-- controller</span></div><div class="line">        <span class="string">|-- pay.controller.ts</span></div><div class="line">...</div></pre></td></tr></table></figure><p>模块化有以下优点：</p><ul><li>业务低耦合</li><li>边界清晰</li><li>便于排查错误</li><li>便于维护</li></ul><h2 id="模块声明与配置"><a href="#模块声明与配置" class="headerlink" title="模块声明与配置"></a>模块声明与配置</h2><p><code>@Module()</code>装饰的类为<code>模块类</code>，该装饰器的典型用法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [UserService],</div><div class="line">    controllers: [UserController],</div><div class="line">    imports: [OrderModule],</div><div class="line">    exports: [UserService]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">proviers</td><td style="text-align:left">服务提供者列表，本模块可用，可以自动注入</td></tr><tr><td style="text-align:left">controllers</td><td style="text-align:left">控制器列表，本模块可用，用来绑定路由访问</td></tr><tr><td style="text-align:left">imports</td><td style="text-align:left">本模块导入的模块，如果需要使用到其他模块的服务提供者，此处必须导入其他模块</td></tr><tr><td style="text-align:left">exports</td><td style="text-align:left">本模块导出的服务提供者，只有在此处定义的服务提供者才能在其他模块使用</td></tr></tbody></table><h2 id="模块重导出"><a href="#模块重导出" class="headerlink" title="模块重导出"></a>模块重导出</h2><p>ts中有以下用法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> A &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.ts</span></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./a'</span>;</div></pre></td></tr></table></figure><p>我们在使用的时候直接使用以下代码即可，方面封装</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;A&#125; <span class="keyword">from</span> <span class="string">'./index'</span></div></pre></td></tr></table></figure><p>NestJs中的模块也有类似用法，比如我们定义了两个基本模块，这两个基本模块用的时候基本都是一起导入的，此时我们通过模块重导出将其封装到一个叫<code>CoreModule</code>，其他地方直接导入<code>CoreModule</code>即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [CommonService],</div><div class="line">    exports: [CommonService]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CommonModule &#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [Util],</div><div class="line">    exports: [Util]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UtilModule &#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    imports: [CommonModule, UtilModule],</div><div class="line">    exports: [CommonModule, UtilModule]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CoreModule &#123;&#125;</div></pre></td></tr></table></figure><h2 id="模块初始化与依赖注入"><a href="#模块初始化与依赖注入" class="headerlink" title="模块初始化与依赖注入"></a>模块初始化与依赖注入</h2><p>如果需要在模块实例化的时候运行一些逻辑，而且该逻辑有外部依赖的时候，可以通过以下方式处理</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  controllers: [UserController],</div><div class="line">  providers: [UserService],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> catsModule &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123; <span class="comment">// 没有@Inject</span></div><div class="line">    <span class="comment">// 调用userService</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="全局模块"><a href="#全局模块" class="headerlink" title="全局模块"></a>全局模块</h2><p>上面定义的模块都是需要手动<code>imports</code>进来的，如果有些模块是使用率很高的，比如工具模块，此时可以声明为全局模块。</p><p>使用<code>@Global()</code>即可声明全局模块。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Global</span>()</div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  controllers: [UserController],</div><div class="line">  providers: [UserService],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> catsModule &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="动态模块"><a href="#动态模块" class="headerlink" title="动态模块"></a>动态模块</h2><p>上面定义的都是静态模块，如果我们需要动态声明我们的模块，比如数据库模块，连接成功我才返回模块，此时需要使用动态模块来处理。</p><p>使用<code>模块名.forRoot()</code>方法来返回模块定义，通过该方式定义的即为动态模块。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [DatabaseProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DatabaseModule &#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">async</span> forRoot(env: <span class="built_in">string</span>) &#123;</div><div class="line">         <span class="keyword">const</span> provider =  createDatabaseProvider(env); <span class="comment">// 根据环境变量连接不同的数据库</span></div><div class="line">         <span class="keyword">return</span> &#123;</div><div class="line">             <span class="keyword">module</span>: DatabaseModule,</div><div class="line">             providers: [provider],</div><div class="line">             exports: [provider]</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    imports: [DatabaseModule.forRoot(<span class="string">'production'</span>)]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</div></pre></td></tr></table></figure><h2 id="生产环境下的姿势"><a href="#生产环境下的姿势" class="headerlink" title="生产环境下的姿势"></a>生产环境下的姿势</h2><p>上面有一个商城系统的模块例子，当我们的业务模块开发完毕之后，需要将其注册到AppModule，这样才能生效，这个也有个好处，有点像插拔的例子，当需要下掉一个业务时，业务代码不动，在AppModule取消注册即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    imports:[UserModule,GoodsModule,OrderModule,PayModule]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>模块系统是NestJs另一个重要的特性，个人认为是基于DDD思想的，每个模块就是一个单独的领域业务，可以由一个小组去独立开发。多个模块时可以同时开发，如果有依赖问题的话，可以先把模块和响应的interface公开出去，别人正常调用你的interface，当实现类开发完毕之后NestJs会自动注入该实现类，调用方的代码不用更改。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(3)——服务提供者</title>
    <link href="https//www.ddhigh.com/2019/08/21/nestjs-provider.html"/>
    <id>https//www.ddhigh.com/2019/08/21/nestjs-provider.html</id>
    <published>2019-08-21T02:27:42.000Z</published>
    <updated>2019-08-21T03:58:14.449Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>服务提供者是NestJs一个非常重要的概念，一般来说，被装饰器<code>@Injectable()</code>修饰的类都可以视为服务提供者。服务提供者一般包含以下几种：</p><ul><li>Services(业务逻辑)</li><li>Factory(用来创建提供者)</li><li>Repository(数据库访问使用)</li><li>Utils(工具函数)</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>下文中将以Services来说明服务提供者的具体使用。</p><p>典型的MVC架构中其实有一个问题，业务逻辑到底放哪里？</p><ul><li>放在控制器，代码复用成了问题，不可能去New一个控制器然后调用方法，控制器方法都是根据路由地址绑定的</li><li>放在Model，导致Model层臃肿，Model应该是直接和数据库打交道的，业务逻辑跟数据库的关系并不是强制绑定的，只有业务逻辑涉及到数据查询/存储才会使用到Model层</li></ul><p>现阶段比较流行的架构是多添加一个Services层来写业务逻辑，分离Model层不应该做的事情。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 业务类 user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserServices &#123;</div><div class="line">  <span class="keyword">private</span> readonly users: User[] = [];</div><div class="line"></div><div class="line">  create(user: User) &#123;</div><div class="line">    <span class="keyword">this</span>.users.push(user);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  findAll(): User[] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.users;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用户控制器</span></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123;&#125; <span class="comment">// 注入UserService</span></div><div class="line"></div><div class="line">    <span class="meta">@Post</span>()</div><div class="line">    <span class="keyword">async</span> create(<span class="meta">@Body</span>() createUserDTO:CreateUserDTO) &#123;</div><div class="line">        <span class="keyword">this</span>.userService.create(createUserDTO);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Get</span>()</div><div class="line">    <span class="keyword">async</span> findAll() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.findAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务提供者的Scope"><a href="#服务提供者的Scope" class="headerlink" title="服务提供者的Scope"></a>服务提供者的Scope</h2><p>SpringBoot中提供了Scope注解来指明Bean的作用域，NestJs也提供了类似的<code>@Scope()</code>装饰器：</p><table><thead><tr><th style="text-align:left">scope名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SINGLETON</td><td style="text-align:left">单例模式，整个应用内只存在一份实例</td></tr><tr><td style="text-align:left">REQUEST</td><td style="text-align:left">每个请求初始化一次</td></tr><tr><td style="text-align:left">TRANSIENT</td><td style="text-align:left">每次注入都会实例化</td></tr></tbody></table><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Injectable</span>(&#123;scope: Scope.REQUEST&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="可选的依赖项"><a href="#可选的依赖项" class="headerlink" title="可选的依赖项"></a>可选的依赖项</h2><p>默认情况下，如果依赖注入的对象不存在会提示错误，中断应用运行，此时可以使用<code>@Optional()</code>来指明选择性注入，但依赖注入的对象不存在时不会发生错误。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">    constructor(@Optional() private readonly userService:UserService)&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="基于属性的注入"><a href="#基于属性的注入" class="headerlink" title="基于属性的注入"></a>基于属性的注入</h2><p>上文中的注入都是基于构造函数的，这样做有一个缺陷，如果涉及到继承的话，子类必须显示调用<code>super</code>来实例化父类。如果父类的构造函数参数过多的话反而成了子类的负担。</p><p>针对这个问题，NestJs建议的方式是<code>基于属性</code>进行注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="meta">@Inject</span>()</div><div class="line">    <span class="keyword">private</span> readonly userService:UserService;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务提供者注册"><a href="#服务提供者注册" class="headerlink" title="服务提供者注册"></a>服务提供者注册</h2><p>只有被注册过的服务提供者才能被NestJs进行自动注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    controllers:[UserController], <span class="comment">// 注册控制器</span></div><div class="line">    providers: [UserServices], <span class="comment">// 注册服务提供者，可以是services,factory等等</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="自定义服务提供者"><a href="#自定义服务提供者" class="headerlink" title="自定义服务提供者"></a>自定义服务提供者</h2><h3 id="使用值"><a href="#使用值" class="headerlink" title="使用值"></a>使用值</h3><p>上文中提供的Services一般用在编写业务逻辑，结构基本是固定的，如果需要集成其他库作为注入对象的话，需要使用的自定义的服务提供者。</p><p>比如我们使用sequelize创建了数据库连接，想把他注入到我们的Services中进行数据库操作。可以使用以下方式进行处理：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sequelize.ts 数据库访问</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(&#123;</div><div class="line">    <span class="comment">///</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sequelize.provider.ts</span></div><div class="line"><span class="keyword">import</span> &#123;sequelize&#125; <span class="keyword">from</span> <span class="string">'./sequelize'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> sequelizeProvider = &#123;</div><div class="line">    provide: <span class="string">'SEQUELIZE'</span>, <span class="comment">// 服务提供者标识</span></div><div class="line">    useValue: sequelize, <span class="comment">// 直接使用值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers:[UserService, sequelizeProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">    constructor(@Inject('SEQUELIZE') private readonly sequelize: Sequelize) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h3><p>OOP的一个重要思想就是<code>面向接口化</code>设计，比如我们开发了一个日志接口，有写入本地文件的实现，也有写入syslog的实现。依赖注入到时候我们希望使用接口进行注入，而不是具体的实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logger.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Logger &#123;</div><div class="line">    log(log:<span class="built_in">string</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file.logger.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FileLogger <span class="keyword">implements</span> Logger &#123;</div><div class="line">    log(log:<span class="built_in">string</span>) &#123;</div><div class="line">        <span class="comment">// 写入本地文件</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// syslog.logger.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SyslogLogger <span class="keyword">implements</span> Logger &#123;</div><div class="line">    log(log:<span class="built_in">string</span>) &#123;</div><div class="line">        <span class="comment">// 写入Syslog</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logger.provider.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> loggerProvider = &#123;</div><div class="line">    provide: Logger, <span class="comment">// 使用接口标识</span></div><div class="line">    useClass: process.env.NODE_ENV===<span class="string">'development'</span>?FileLogger:SyslogLogger, <span class="comment">// 开发日志写入本地，生产日志写入syslog</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers:[UserService,loggerProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">    constructor(@Inject(Logger) private readonly logger: Logger) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用工厂"><a href="#使用工厂" class="headerlink" title="使用工厂"></a>使用工厂</h3><p>工厂模式相信大家都不陌生，工厂模式本质上是一个函数或者方法，返回我们需要的产品。</p><p>传统的第三方库都是提供callback形式或者事件形式的进行连接，比如redis，如果需要使用该类型的注入对象，工厂模式是最佳方式。</p><p>以下是使用工厂模式创建数据库连接的例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// database.provider.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> databaseProvider = &#123;</div><div class="line">    provide:<span class="string">'DATABASE'</span>,</div><div class="line">    useFactory: <span class="keyword">async</span>(optionsProvider: OptionsProvider) &#123; <span class="comment">// 使用依赖，注入顺序和下面定义的顺序一致</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> connection = createConnection(optionsProvider.getDatabaseConfig())</div><div class="line">            connection.on(<span class="string">'ready'</span>,<span class="function"><span class="params">()</span>=&gt;</span>resolve(connection));</div><div class="line">            connection.on(<span class="string">'error'</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>reject(e));</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    inject:[OptionsProvider], <span class="comment">// 注入依赖</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers:[OptionsProvider, databaseProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">    constructor(@Inject('DATABASE') private readonly connection: Connection) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="别名方式"><a href="#别名方式" class="headerlink" title="别名方式"></a>别名方式</h3><p>别名方式可以基于现有的提供者进行创建。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> loggerAliasProvider = &#123;</div><div class="line">  provide: <span class="string">'AliasedLoggerService'</span>,</div><div class="line">  useExisting: Logger,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="导出服务提供者到其他模块"><a href="#导出服务提供者到其他模块" class="headerlink" title="导出服务提供者到其他模块"></a>导出服务提供者到其他模块</h2><p>模块的详细知识将在后文提到，但是有一点需要提前知道，<code>只有被模块导出的服务提供者才能被其他模块导入</code></p><h3 id="基于类型的导出"><a href="#基于类型的导出" class="headerlink" title="基于类型的导出"></a>基于类型的导出</h3><p>上文中的<code>UserService</code>是基于类型而不是进入名称进行注入的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [UserService],</div><div class="line">    exports: [UserService], <span class="comment">// 重要</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</div></pre></td></tr></table></figure><h3 id="基于名称的导出"><a href="#基于名称的导出" class="headerlink" title="基于名称的导出"></a>基于名称的导出</h3><p>上文中<code>DATABASE</code>和<code>SEQUELIZE</code>这种服务提供者都是自定义的，而且指定的标识符。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [sequelizeProvider],</div><div class="line">    exports: [<span class="string">'SEQUELIZE'</span>], <span class="comment">// 其他模块的组件直接使用@Inject('SEQUELIZE')即可</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>服务提供者是NestJs的精华之一，提供了几种方式方便我们在各种环境下的服务提供者创建。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(2)——控制器</title>
    <link href="https//www.ddhigh.com/2019/08/20/nestjs-controller.html"/>
    <id>https//www.ddhigh.com/2019/08/20/nestjs-controller.html</id>
    <published>2019-08-20T02:10:21.000Z</published>
    <updated>2019-08-20T06:30:34.732Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>说到控制器就不得不说经典的MVC架构。</p><blockquote><p>MVC模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><ul><li>控制器（Controller）- 负责转发请求，对请求进行处理，处理完毕后输出响应。</li><li>视图 （View） - 界面设计人员进行图形界面设计</li><li>模型 （Model）- 数据库查询和业务逻辑</li></ul></blockquote><p>可以看到控制器起着承上启下的作用，是Web开发中必备的一环，视图和模型倒不是必须的，理由如下：</p><ol><li>API项目直接输出JSON数据，无需渲染页面</li><li>无数据库或者复杂业务逻辑的项目时可以把请求处理直接在控制器完成</li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>控制器的目的是接收应用程序的特定请求。基于路由机制来实现请求的分发。通常，每个控制器具有多个路由，并且不同的路由可以执行不同的动作。</p><p>为了创建一个基本的控制器，我们使用类和装饰器。装饰器将类与所需的元数据相关联，并使Nest能够创建路由映射（将请求绑定到相应的控制器）。</p><h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><p>使用<code>@Controller</code>装饰器来定义控制器，传入一个可选的路由前缀可以将该控制器绑定到该前缀。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'cats'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsController &#123;</div><div class="line">  <span class="meta">@Get</span>(<span class="string">'list'</span>)</div><div class="line">  findAll(): <span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'This action returns all cats'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Get</span>(<span class="string">'show'</span>)</div><div class="line">  fineOne(): <span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'one cat'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  index():<span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'index'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上例程会生成以下路由：</p><ol><li>GET /cats/list CatsController::findAll方法处理</li><li>GET /cats/show CatsController::show方法处理</li><li>GET /cats CatsController::index方法处理</li></ol><p>上述例程使用的是<code>@Get</code>装饰器，所以只能处理<code>GET</code>请求，以下是支持的请求方法与对应的装饰器</p><table><thead><tr><th style="text-align:left">请求方法</th><th style="text-align:left">装饰器名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td style="text-align:left">@Get</td><td style="text-align:left">匹配GET请求</td></tr><tr><td style="text-align:left">POST</td><td style="text-align:left">@Post</td><td style="text-align:left">匹配POST请求</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">@Put</td><td style="text-align:left">匹配PUT请求</td></tr><tr><td style="text-align:left">HEAD</td><td style="text-align:left">@Head</td><td style="text-align:left">匹配HEAD请求</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">@Delete</td><td style="text-align:left">匹配DELETE请求</td></tr><tr><td style="text-align:left">OPTIONS</td><td style="text-align:left">@Options</td><td style="text-align:left">匹配OPTIONS请求</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">@All</td><td style="text-align:left">匹配所有请求方法</td></tr></tbody></table><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>上文中的路由方法接收的参数是固定的，所以只能匹配固定的请求，如果路由地址是动态变化的(<code>路由地址指请求的path，不包括QueryString</code>)，则上述路由定义方式无法正常工作。</p><p>NestJs支持基于路径的路由定义，使用如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="meta">@Controller</span>, Get&#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'cats'</span>)</div><div class="line"><span class="keyword">class</span> CatsController &#123;</div><div class="line">    <span class="meta">@Get</span>(<span class="string">':id'</span>)</div><div class="line">    findOne(<span class="meta">@Param</span>() params): <span class="built_in">string</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(params.id);</div><div class="line">        <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;params.id&#125;</span> cat`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当请求<code>/cats/猫ID</code>这种动态路由时(<code>因为猫ID是path的一部分，所以path是变化的</code>)，<code>params.id</code>就是<code>猫ID</code>，做过Vue或者React开发的读者应该熟悉以下写法：</p><p>路由定义 <code>/user/:userId/orders/:orderId</code><br>页面地址 <code>/user/1/orders/2</code></p><p>访问以上页面将产生以下参数:</p><ul><li>userId =&gt; 1</li><li>orderId =&gt; 2</li></ul><p>NestJs在这方面是一致的。</p><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><p>上述例子中，我们使用<code>@Params</code>读取了请求路径上的动态参数。NestJs还支持以下的装饰器来获取不同的请求参数</p><table><thead><tr><th style="text-align:left">装饰器名称</th><th style="text-align:left">底层对象</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">@Request()</td><td style="text-align:left">req</td><td style="text-align:left">原始请求对象</td></tr><tr><td style="text-align:left">@Response()</td><td style="text-align:left">res</td><td style="text-align:left">原始响应对象</td></tr><tr><td style="text-align:left">@Param(key?:string)</td><td style="text-align:left">req.params或req.params[key]</td><td style="text-align:left">路径参数</td></tr><tr><td style="text-align:left">@Body(key?:string)</td><td style="text-align:left">req.body或req.body[key]</td><td style="text-align:left">请求体，支持表单或JSON</td></tr><tr><td style="text-align:left">@Query(key?:string)</td><td style="text-align:left">req.query或req.query[key]</td><td style="text-align:left">请求链接的查询字符串</td></tr><tr><td style="text-align:left">@Headers(name?:string)</td><td style="text-align:left">req.headers或req.headers[key]</td><td style="text-align:left">请求头</td></tr></tbody></table><h2 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h2><p>在POST/PUT/PATCH请求中，会包含请求体，NestJs通过<code>@Body</code>装饰器可以自动获取该数据。比如如下代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppController &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly appService: AppService</span>) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="meta">@Post</span>()</div><div class="line">  findAll(<span class="meta">@Body</span>() data: <span class="built_in">any</span>) &#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上例程会原样输出请求内容。</p><h3 id="请求体绑定"><a href="#请求体绑定" class="headerlink" title="请求体绑定"></a>请求体绑定</h3><p>SpringBoot中<code>@RequestBody</code>注解可以直接绑定到给定的POJO对象实现请求参数自动注入，在NestJs中，该特性也得到了支持。</p><p>定义DTO对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserLoginDTO &#123;</div><div class="line">    readonly username: <span class="built_in">string</span>;</div><div class="line">    readonly password: <span class="built_in">string</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义控制器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">class</span> UserController() &#123;</div><div class="line">    <span class="meta">@Post</span>(<span class="string">'login'</span>)</div><div class="line">    login(<span class="meta">@Body</span>() userLoginDTO: UserLoginDTO) &#123;</div><div class="line">        <span class="built_in">console</span>.log(userLoginDTO.username, userLoginDTO.password);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到与SpringBoot的开发体验几乎一致。</p><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><p>如果需要输出响应头，可以使用<code>@Header(name:string,value:string)</code>装饰器来进行处理。</p><p><code>请注意：响应头使用@Header()装饰器，请求头使用@Headers()装饰器，末尾有个s的区别!</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="meta">@Head</span>(<span class="string">':id'</span>)</div><div class="line">    <span class="meta">@Header</span>(<span class="string">'x-version'</span>, <span class="string">'1.0.0'</span>)</div><div class="line">    function head(@Param('id') id:number) &#123;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p>从响应体的设计可以发现一个问题，由于不推荐直接操纵<code>response</code>对象，如果需要输出响应状态码怎么办?NestJs也为我们提供了解决方案。</p><p>使用<code>@HttpCode(statusCode:number)</code>装饰器可以设定响应状态码。</p><p>在Restful API设计中，DELETE请求应当返回<code>204 No Content</code>状态码，如下代码所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="meta">@DELETE</span>(<span class="string">":id"</span>)</div><div class="line">    <span class="meta">@HttpCode</span>(<span class="number">204</span>)</div><div class="line">    <span class="keyword">delete</span>(<span class="meta">@Param</span>(<span class="string">'id'</span>) id:<span class="built_in">number</span>) &#123;</div><div class="line">        <span class="comment">// 删除成功不需要返回数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h2><p>在express或者开发中，响应内容都是我们手动赋值或者输出的，但是在NestJs，可以直接根据路由函数的返回值<code>类型</code>自动识别响应体类型。NestJs支持以下格式的响应：</p><table><thead><tr><th style="text-align:left">TS类型</th><th style="text-align:left">响应类型</th><th style="text-align:left">响应格式</th></tr></thead><tbody><tr><td style="text-align:left">string</td><td style="text-align:left">字符串</td><td style="text-align:left">text/html</td></tr><tr><td style="text-align:left">object</td><td style="text-align:left">JSON</td><td style="text-align:left">application/json</td></tr><tr><td style="text-align:left">array</td><td style="text-align:left">JSON</td><td style="text-align:left">application/json</td></tr><tr><td style="text-align:left">null</td><td style="text-align:left">无(响应体长度为0)</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">undefined</td><td style="text-align:left">无(响应体长度为0)</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">Promise&lt;*&gt;</td><td style="text-align:left">根据Promise返回的结果类型确定(规则如上)</td><td style="text-align:left">-</td></tr></tbody></table><h2 id="异步路由函数"><a href="#异步路由函数" class="headerlink" title="异步路由函数"></a>异步路由函数</h2><p>在前面的例子中，我们所有的路由处理函数都是同步的，但是在实际开发中基本不可能，一旦涉及到数据库访问、缓存访问就会存在IO，有IO就会有异步。</p><p>NestJs天生完美支持异步，有以下两种方法进行异步编程：</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Get</span>()</div><div class="line"><span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve([]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RxJs"><a href="#RxJs" class="headerlink" title="RxJs"></a>RxJs</h3><p>RxJs中提供了<code>Observable</code>对象，NestJs可以自动订阅并获取最后一次产生的值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Get</span>()</div><div class="line">findAll: Observable&lt;<span class="built_in">any</span>[]&gt; &#123;</div><div class="line">    <span class="keyword">return</span> of([]); <span class="comment">// of为RxJs操作符</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="实现一个Restful-API"><a href="#实现一个Restful-API" class="headerlink" title="实现一个Restful API"></a>实现一个Restful API</h2><p>以下是基于Restful API规范开发的API，本文的主要内容为控制器，所以DTO对象的创建省略。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Controller, Get, Query, Post, Body, Put, Param, Delete &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; CreateCatDto, UpdateCatDto, ListAllEntities &#125; <span class="keyword">from</span> <span class="string">'./dto'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UsersController &#123;</div><div class="line">  <span class="comment">// 创建用户，POST请求会自动返回201状态码，响应体为空</span></div><div class="line">  <span class="meta">@Post</span>()</div><div class="line">  create(<span class="meta">@Body</span>() dto: CreateUserDto) &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 用户列表</span></div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  findAll() &#123;</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">          &#123;id:<span class="number">1</span>,username:<span class="string">'a'</span>,password:<span class="string">'a'</span>&#125;,</div><div class="line">          &#123;id:<span class="number">2</span>,username:<span class="string">'b'</span>,password:<span class="string">'b'</span>&#125;</div><div class="line">      ];</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 查看用户</span></div><div class="line">  <span class="meta">@Get</span>(<span class="string">':id'</span>)</div><div class="line">  findOne(<span class="meta">@Param</span>(<span class="string">'id'</span>) id: <span class="built_in">number</span>) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;id,username:<span class="string">'mock username'</span>, password: <span class="string">'mock password'</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 更新用户，需要返回编辑后的用户资源</span></div><div class="line">  <span class="meta">@Put</span>(<span class="string">':id'</span>)</div><div class="line">  update(<span class="meta">@Param</span>(<span class="string">'id'</span>) id: <span class="built_in">number</span>, <span class="meta">@Body</span>() updateUserDto: UpdateUserDto) &#123;</div><div class="line">      <span class="keyword">return</span> &#123;id,username:<span class="string">'updated username'</span>,password: <span class="string">'updated password'</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 删除用户，返回204状态码</span></div><div class="line">  <span class="meta">@Delete</span>(<span class="string">':id'</span>)</div><div class="line">  <span class="meta">@HttpCode</span>(<span class="number">204</span>)</div><div class="line">  remove(<span class="meta">@Param</span>(<span class="string">'id'</span>) id: <span class="built_in">number</span>) &#123;</div><div class="line">   </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>如果您觉得有所收获，请点击右下角在看或者转发朋友圈，分享给更多需要的朋友，谢谢！<br>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(1)——快速开始</title>
    <link href="https//www.ddhigh.com/2019/08/19/nestjs-get-started.html"/>
    <id>https//www.ddhigh.com/2019/08/19/nestjs-get-started.html</id>
    <published>2019-08-19T02:10:13.000Z</published>
    <updated>2019-08-19T03:45:11.821Z</updated>
    
    <content type="html"><![CDATA[<p>经过<a href="https://www.ddhigh.com/2019/07/18/nodejs-guide-about.html" target="_blank" rel="external">NodeJs系列课程</a>和<a href="https://www.ddhigh.com/2019/07/25/typescript-quick-guide.html" target="_blank" rel="external">Typescript系列课程</a>，终于开始了激动人心的NestJs学习之旅。</p><p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Nest（或NestJS）是一个用于构建高效，可扩展的Node.js服务器端应用程序的框架。它使用渐进式JavaScript，内置并完全支持TypeScript（但仍然允许开发人员使用纯JavaScript编写代码）并结合了OOP（面向对象编程），FP（功能编程）和FRP（功能反应编程）的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line">@Controller(<span class="string">'cats'</span>)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</div><div class="line">  @Get()</div><div class="line">  findAll(): string &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'This action returns all cats'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>熟悉Java的同学应该有似曾相识的感觉，SpringBoot中大量使用注解来简化开发。现在，使用基于ES6装饰器构建的NestJs框架，你也可以做到!</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>先说说优点吧：</p><ul><li>完美支持Typescript，因此可以使用日益繁荣的TS生态资源</li><li>兼容express中间件，降低造轮子成本</li><li>完美支持响应式编程框架rxjs</li><li>完美支持依赖注入</li><li>模块化思想，方便开发以及后期维护</li><li>使用装饰器简化开发，减少样板代码</li><li>组件化设计，解决Node.js无全栈框架约束的现存问题</li></ul><p>当然，”缺点”也是有点的，不过熟练之后这些都不是缺点：</p><ul><li>基于TS导致的语言门槛</li><li>代码设计上对模块化/组件化思想有一定要求</li></ul><h2 id="第一个NestJs应用"><a href="#第一个NestJs应用" class="headerlink" title="第一个NestJs应用"></a>第一个NestJs应用</h2><p>使用NestJs的命令行工具，可以简化项目的创建以及项目文件的创建。</p><ol><li><code>npm install -g @nestjs/cli</code>安装命令行工具</li><li><code>nest new 项目名称</code>初始化项目</li></ol><p>初始化完毕后可以看到一个完整的项目结果，目录如下(忽略node_modules)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">├── README.md                       自述文件</div><div class="line">├── nest-cli.json                   NestJs项目配置</div><div class="line">├── package.json                    npm文件</div><div class="line">├── src                             项目源码</div><div class="line">│   ├── app.controller.spec.ts      控制器测试文件</div><div class="line">│   ├── app.controller.ts           控制器类</div><div class="line">│   ├── app.module.ts               模块类</div><div class="line">│   ├── app.service.ts              服务类</div><div class="line">│   └── main.ts                     项目入口文件</div><div class="line">├── test                            测试目录</div><div class="line">│   ├── app.e2e-spec.ts             应用e2e测试</div><div class="line">│   └── jest-e2e.json               jest e2e测试配置</div><div class="line">├── tsconfig.build.json             生产环境Typescript所用</div><div class="line">├── tsconfig.json                   开发环境Typescript配置</div><div class="line">├── tslint.json                     tslint配置</div><div class="line">└── yarn.lock                       yarn锁文件</div></pre></td></tr></table></figure><p>NestJs有几大类文件是主要的是下面几种，其他类型的文件在后续课程会讲解；</p><ul><li>module 模块声明(这是NestJs的一个亮点，有点DDD的思想)</li><li>controller 控制器(负责接收数据，返回响应)</li><li>service 服务(主要业务逻辑)</li></ul><p>使用<code>npm run start</code>来运行项目。终端输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [NestFactory] Starting Nest application...</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [InstanceLoader] AppModule dependencies initialized +22ms</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [RoutesResolver] AppController &#123;/&#125;: +12ms</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [RouterExplorer] Mapped &#123;/, GET&#125; route +9ms</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [NestApplication] Nest application successfully started +6ms</div></pre></td></tr></table></figure><p>一般来说，看到<code>successfully</code>就可以认为启动成功了。启动失败的话可以根据错误提示进行处理，比较多的情况可能是端口占用导致的错误。</p><p>打开浏览器访问<code>http://localhost:3000</code>即可看到输出<code>Hello World!</code>。</p><h2 id="To-Be-Continued"><a href="#To-Be-Continued" class="headerlink" title="To Be Continued"></a>To Be Continued</h2><p>下一期将介绍Controller，欢迎持续关注!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过&lt;a href=&quot;https://www.ddhigh.com/2019/07/18/nodejs-guide-about.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJs系列课程&lt;/a&gt;和&lt;a href=&quot;https://www.
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nest" scheme="https//www.ddhigh.com/tags/nest/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(4)</title>
    <link href="https//www.ddhigh.com/2019/08/06/typescript-quick-guide4.html"/>
    <id>https//www.ddhigh.com/2019/08/06/typescript-quick-guide4.html</id>
    <published>2019-08-06T07:37:39.000Z</published>
    <updated>2019-08-08T03:03:12.750Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文讲解装饰器</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，访问符，属性或参数上。 装饰器使用<code>@expression</code>这种形式，expression必须是一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p><blockquote><p>Typescript中的装饰器是一项实验性功能，需要在tsconfig.json中开启该特性</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">        <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例如，有一个<code>@sealed</code>装饰器，我们这样定义<code>sealed</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">    <span class="comment">// 操作被装饰对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h2><p>如果需要给装饰器添加一些动态行为，比如开发一个监控统计的装饰器，需要传入当前统计的事件名称，有多个事件名称时只需要变更传入的事件名而不用重复定义装饰器。</p><p>这时候需要使用到装饰器工厂。装饰器工厂也是一个函数，只不过它的返回值是一个装饰器。例如如下的事件监控装饰器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">event</span>(<span class="params">eventName: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">        <span class="comment">// 获取到当前eventName和被装饰对象进行操作</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="装饰器组合"><a href="#装饰器组合" class="headerlink" title="装饰器组合"></a>装饰器组合</h2><p>多个装饰器可以同时应用到被装饰对象上，例如下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@sealed</span></div><div class="line"><span class="meta">@test</span>(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>装饰器执行顺序：</p><ol><li>装饰器工厂需要先求值，再装饰，求值顺序是由上到下</li><li>装饰器可以直接求值，装饰顺序是由下到上</li></ol><p>上面的说明可以难以理解，下面举一个实际的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'f求值'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'f装饰'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'g求值'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'g装饰'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@f</span>()</div><div class="line"><span class="meta">@g</span>()</div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例的执行顺序为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f求值</div><div class="line">g求值</div><div class="line">g装饰</div><div class="line">f装饰</div></pre></td></tr></table></figure><p>因为先求值，所以在上面的f会比g先求值。因为装饰器是由下到上装饰，所以求值后的g比f先执行。</p><h2 id="装饰器类型"><a href="#装饰器类型" class="headerlink" title="装饰器类型"></a>装饰器类型</h2><p>根据被装饰的对象不同，装饰器分为以下几类：</p><ol><li>类装饰器</li><li>方法装饰器</li><li>属性装饰器</li><li>函数参数装饰器</li></ol><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>类装饰器在定义类的地方。类装饰器可以监视、修改或替换类定义。类的构造函数将作为唯一参数传递给装饰器。如果类装饰器返回一个值，它会使用返回的构造函数替换原来的类声明。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">target: <span class="built_in">Function</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">Object</span>.seal(target);</div><div class="line">    <span class="built_in">Object</span>.seal(target.prototype);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@sealed</span></div><div class="line"><span class="keyword">class</span> Demo &#123;&#125;</div></pre></td></tr></table></figure><p>下面来一个替换构造函数的示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args: <span class="built_in">any</span>[]):&#123;&#125;&#125;&gt;(target: T) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> target &#123;</div><div class="line">        newname = <span class="string">"newName"</span>;</div><div class="line">        age = <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@replace</span></div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    oldname = <span class="string">"oldname"</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">oldname: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.oldname = oldname;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Demo(<span class="string">"oldname"</span>));</div></pre></td></tr></table></figure><p>以上例程会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class_1 &#123; oldname: &apos;oldname&apos;, newname: &apos;newName&apos;, age: 18 &#125;</div></pre></td></tr></table></figure><p>可以看到通过装饰器新增的newname和age属性已经成功注入了。</p><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>方法装饰器用来装饰类的方法（静态方法和实例方法都可以）。方法装饰器可以监视、修改或替换方法定义。<br>方法装饰器接收3个参数：</p><ol><li>类的原型对象，如果是静态方法则为类的构造函数</li><li>方法名称</li><li>方法的属性描述符</li></ol><p>下面是一个<code>修改</code>方法行为的装饰器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hack</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> oldFunction = target[propertyKey]; <span class="comment">// 获取方法引用</span></div><div class="line">    <span class="keyword">const</span> newFunction = <span class="function"><span class="keyword">function</span>(<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'call function '</span>, propertyKey);</div><div class="line">        oldFunction.call(target, ...args);</div><div class="line">    &#125;</div><div class="line">    descriptor.value = newFunction; <span class="comment">// 替换原声明</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    <span class="meta">@hack</span></div><div class="line">    demo() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'call demo'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> demo = <span class="keyword">new</span> Demo();</div><div class="line">demo.demo();</div></pre></td></tr></table></figure><p>以上例程输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">call function  demo</div><div class="line">call demo</div></pre></td></tr></table></figure><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>属性装饰器用来装饰类的成员属性。属性装饰器接收两个参数：</p><ol><li>类的原型对象，如果是静态方法则为类的构造函数</li><li>属性名</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">value: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">target[propertyKey] = value;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    <span class="meta">@demo</span>(<span class="string">'haha'</span>) name?: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Demo();</div><div class="line"><span class="built_in">console</span>.log(d.name);</div></pre></td></tr></table></figure><p>属性装饰器多用在属性依赖注入上面</p><h2 id="函数参数装饰器"><a href="#函数参数装饰器" class="headerlink" title="函数参数装饰器"></a>函数参数装饰器</h2><p>参数装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>参数的名字。</li><li>参数在函数参数列表中的索引。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathParam</span>(<span class="params">paramDesc: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, paramName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</div><div class="line">        !target.$meta &amp;&amp; (target.$meta = &#123;&#125;);</div><div class="line">        target.$meta[paramIndex] = paramDesc;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</div><div class="line">    getUser( <span class="meta">@PathParam</span>(<span class="string">"userId"</span>) userId: <span class="built_in">string</span>) &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log((&lt;<span class="built_in">any</span>&gt;Demo).prototype.$meta);</div></pre></td></tr></table></figure><p>以上例程输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; &apos;0&apos;: &apos;userId&apos; &#125;</div></pre></td></tr></table></figure><p>函数参数装饰器可以用在开发Web框架时自动注入请求参数。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>装饰器的介绍到这里就暂时结束了，装饰器的存在让Typescript有了与Java和C#等语言的注解相同的功能。当然，基于装饰器能做的工作是相当多的，注明的Angular2就大量使用了装饰器来分离业务逻辑。<br>对装饰器有想法的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(3)</title>
    <link href="https//www.ddhigh.com/2019/07/30/typescript-quick-guide3.html"/>
    <id>https//www.ddhigh.com/2019/07/30/typescript-quick-guide3.html</id>
    <published>2019-07-30T02:12:29.000Z</published>
    <updated>2019-07-30T03:46:43.989Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文讲解泛型</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p></blockquote><p>泛型的出现有效的降低了代码重复率，同时也能很好的保留类型信息，降低运行期崩溃的概率。</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>假设有个函数，你给他啥类型，他就返回啥类型，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">arg: <span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果需要支持字符串的话，有以下做法：</p><ol><li>复制一份代码，然后更改<code>number</code>为<code>string</code></li><li>把<code>number</code>改为<code>any</code></li></ol><p>但是以上做法有弊端，方法1会导致代码重复比较多，而且难以扩展（只能通过复制代码来扩展）；方法2的话会丢失变量类型信息，运行期可能会抛出异常。</p><p>因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了 类型变量，它是一种特殊的变量，只用于表示类型而不是值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> n = getValue&lt;<span class="built_in">number</span>&gt;(<span class="number">2</span>);</div><div class="line"><span class="keyword">const</span> s = getValue&lt;<span class="built_in">string</span>&gt;(<span class="string">'s'</span>);</div></pre></td></tr></table></figure><p>说明，如果<code>arg:T</code>中<code>arg</code>是<code>可自动推导类型（一般不是any就能推导）</code>，那么<code>&lt;&gt;</code>之间的类型可以省略，如果<code>&lt;&gt;</code>指定了类型，但是<code>arg</code>类型不匹配的话，编译失败。</p><p><code>T</code>是随便取的，你叫ABCD都没人管你</p><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><p>原型如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名&lt;泛型类型，有几个写几个，逗号分隔&gt;(<span class="params">参数名: 参数类型，参数名:参数类型</span>):返回值类型</span></div></pre></td></tr></table></figure><p>传统风格</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;(<span class="params">key: K, value: V</span>):<span class="title">map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">return</span> map&lt;K,V&gt;(key,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>箭头函数风格</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> makeMap: &lt;K,V&gt;<span class="function">(<span class="params">key:K,value:V</span>) =&gt;</span> map&lt;K,V&gt; = &#123; <span class="comment">// &lt;K,V&gt;(key:K,value:V) =&gt; map&lt;K,V&gt; 类型声明</span></div><div class="line">    <span class="keyword">return</span> map&lt;K,V&gt;(key,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>原型如下:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> 接口名称&lt;泛型类型，有几个写几个，逗号分隔&gt; &#123;</div><div class="line">    <span class="comment">// 使用泛型约束</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> GenericFunction&lt;T&gt; &#123;</div><div class="line">    getValue(arg:T):T;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 字符串类型</span></div><div class="line"><span class="keyword">class</span> Test <span class="keyword">implements</span> GenericFunction&lt;<span class="built_in">string</span>&gt; &#123;</div><div class="line">    getValue(arg:<span class="built_in">string</span>):<span class="built_in">string</span> &#123;</div><div class="line">        returna arg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 数字类型</span></div><div class="line"><span class="keyword">class</span> Test2 <span class="keyword">implements</span> GenericFunction&lt;<span class="built_in">number</span>&gt; &#123;</div><div class="line">    getValue(arg:<span class="built_in">number</span>):<span class="built_in">number</span> &#123;</div><div class="line">        returna arg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</div><div class="line"><span class="built_in">console</span>.log(test.getValue(<span class="string">'111'</span>));</div><div class="line"></div><div class="line"><span class="keyword">const</span> test2 = <span class="keyword">new</span> Test2();</div><div class="line"><span class="built_in">console</span>.log(test.getValue(<span class="number">111</span>));</div></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类的使用和泛型接口差不多</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> GenericClass&lt;T&gt; &#123;</div><div class="line">    add(a: T, b: T):T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> n = <span class="keyword">new</span> GenericClass&lt;<span class="built_in">number</span>&gt;();</div><div class="line"><span class="built_in">console</span>.log(n.add(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line"></div><div class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> GenericClass&lt;<span class="built_in">string</span>&gt;();</div><div class="line"><span class="built_in">console</span>.log(s.add(<span class="string">'1'</span>,<span class="string">'2'</span>));</div></pre></td></tr></table></figure><h2 id="使用继承约束"><a href="#使用继承约束" class="headerlink" title="使用继承约束"></a>使用继承约束</h2><p>Java中经常看到如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> T key;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中，T只能为<code>Number</code>子类。避免过大范围的泛型导致问题</p><p>TS也可以使用以上方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> BeeKeeper &#123;</div><div class="line">    hasMask: <span class="built_in">boolean</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ZooKeeper &#123;</div><div class="line">    nametag: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">    numLegs: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;</div><div class="line">    keeper: BeeKeeper;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;</div><div class="line">    keeper: ZooKeeper;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</div><div class="line">&#125;</div><div class="line"></div><div class="line">createInstance(Lion).keeper.nametag;  <span class="comment">// 编译OK</span></div><div class="line">createInstance(Bee).keeper.hasMask;   <span class="comment">// 编辑OK</span></div></pre></td></tr></table></figure><p>以下代码可能难以理解</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A</div></pre></td></tr></table></figure><p>拆开来看:</p><ol><li><a extends="" animal=""> 泛型约束，A必须是Animal子类</a></li><li><code>new () =&gt; A</code> 箭头函数，约束了传入的值必须是构造方法</li><li><code>:A</code> <code>createInstance</code>必须返回传入的构造函数的实例</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>泛型有效减少了重复代码，同时也解决了类型强制转换的问题，在开发中要尽量使用泛型而不是<code>any</code>。<br>TS的泛型用法大部分都比这复杂，但是原理是一样的，不足之处，敬请包涵。<br>对TS有兴趣的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(2)</title>
    <link href="https//www.ddhigh.com/2019/07/29/typescript-quick-guide2.html"/>
    <id>https//www.ddhigh.com/2019/07/29/typescript-quick-guide2.html</id>
    <published>2019-07-29T02:11:30.000Z</published>
    <updated>2019-07-29T03:30:43.199Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>传统JS使用<code>函数</code>和<code>原型链</code>进行集成，在<code>ES6</code>出现了<code>class</code>关键，JS也能使用传统OOP的方式进行继承，但是还是存在一定的局限性，在TS中，OOP已经和传统语言差不多。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    name: <span class="built_in">string</span>;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    say() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;this.name&#125;</span>, age: <span class="subst">$&#123;this.age&#125;</span>`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> Parent();</div><div class="line">parent.say();</div></pre></td></tr></table></figure><p>可以看到TS的OOP写法和Java还是有点类似的。但是他两的构造方法名不同，TS构造方法名为<code>constructor</code>，Java是<code>类名</code>。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承用来扩展现有的类，TS中这一点和传统语言一样使用<code>extends</code>语法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    name: <span class="built_in">string</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Parent say: <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123; <span class="comment">// 覆盖父类构造方法</span></div><div class="line">        <span class="keyword">super</span>(name); <span class="comment">// 调用父类构造方法</span></div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Child say: <span class="subst">$&#123;this.name&#125;</span> <span class="subst">$&#123;this.age&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> child: Parent = <span class="keyword">new</span> Child(<span class="string">"haha"</span> ,<span class="number">1</span>);</div><div class="line">child.say(); <span class="comment">// 输出 Child say haha 1</span></div></pre></td></tr></table></figure><ol><li>子类存在构造方法时，必须<code>显示调用</code>父类构造方法<code>先有父亲，后有儿子</code></li><li>TS方法调用是基于<code>值</code>而不是基于<code>类型声明</code>，比如<code>child</code>声明为<code>Parent</code>类型，但是值是子类型，所以调用方法时会调用<code>子类</code>的<code>say</code></li></ol><h2 id="访问限定符"><a href="#访问限定符" class="headerlink" title="访问限定符"></a>访问限定符</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>TS中方法和属性默认的访问限定符为<code>public</code>，所有外部或内部成员都可访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// public可以不加</span></div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Parent();</div><div class="line">p.name = <span class="string">'hello'</span>;</div><div class="line">p.say(); <span class="comment">// 输出 say hello</span></div></pre></td></tr></table></figure><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>私有访问，只能在<code>本类</code>访问,<code>子类和其他类都不行</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Parent();</div><div class="line">p.name = <span class="string">'hello'</span>; <span class="comment">// 错误，private限定的属性不能被外部访问</span></div><div class="line">p.say(); <span class="comment">// 错误，private限定的访问不能被外部访问</span></div></pre></td></tr></table></figure><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>保护性访问，只能<code>被本类或本类的子类(子类的子类也可以访问)</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</div><div class="line">    <span class="keyword">public</span> say() &#123; <span class="comment">// 提升访问性</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>); <span class="comment">// 访问父类属性</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Child(<span class="string">'hello'</span>);</div><div class="line">c.say(); <span class="comment">// 输出 say hello</span></div></pre></td></tr></table></figure><p>访问限定符只能提升，不能降低，如下例子是<code>无法通过编译的</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">// 错误，子类访问性必须&gt;=父类的访问性</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="只读限定"><a href="#只读限定" class="headerlink" title="只读限定"></a>只读限定</h2><p>TS使用<code>readonly</code>声明只读<code>属性(方法不能使用)</code>，必须在<code>声明时</code>或者<code>构造时</code>进行赋值,<code>其他地方不能赋值</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> readonly name = <span class="string">'hello'</span>;</div><div class="line">    <span class="keyword">private</span> readonly age: <span class="built_in">number</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><p>在上例中我们在构造方法中使用<code>this.age = age</code>对已存在的<code>私有只读属性age</code>进行了赋值。由于该操作时常用操作，所以TS有了更加便捷的写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span>, <span class="keyword">private</span> readonly age: <span class="built_in">number</span></span>) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span> <span class="subst">$&#123;this.age&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中声明了<code>公有只读的name属性，私有只读的age属性</code></p><h2 id="getter-amp-amp-setter"><a href="#getter-amp-amp-setter" class="headerlink" title="getter &amp;&amp; setter"></a>getter &amp;&amp; setter</h2><p>在传统语言中，几乎不会直接声明公有属性，然后对其进行操作，都会先定义私有属性，然后提供<code>getter</code>和<code>setter</code>方法对其操作(<code>Java中很多类都是这种情况</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">get</span> name(): <span class="built_in">string</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`name设置前: <span class="subst">$&#123;this._name&#125;</span> 设置后: <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">        <span class="keyword">this</span>._name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> Parent();</div><div class="line">parent.name = <span class="string">'ok'</span>; <span class="comment">// 可以直接使用赋值语句，但是会自动调用set name(name: string)方法</span></div></pre></td></tr></table></figure><p>getter和setter方法提高了开发者对属性的控制，一起对属性的访问都是可控的，为以后的扩展性打下了基础（比如如果需要加缓存，我们可以在set时设置缓存,get时读取缓存，如果是直接操作属性的话，该功能实现起来很麻烦</p><h2 id="静态属性-amp-amp-静态方法"><a href="#静态属性-amp-amp-静态方法" class="headerlink" title="静态属性 &amp;&amp; 静态方法"></a>静态属性 &amp;&amp; 静态方法</h2><p>以上讨论的都是<code>实例属性和梳理方法</code>，需要有实例才能调用，如果有些属性或方法并不是存在于实例上时可以使用静态方法或静态属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">static</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`name <span class="subst">$&#123;this.name&#125;</span>`</span>); <span class="comment">// 方法是静态，属性是静态时可以使用this</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Parent.say();<span class="comment">// 使用类名调用静态方法</span></div></pre></td></tr></table></figure><p>需要注意的是<code>实例可以直接调用静态，静态不能直接调用实例</code>，因为<code>实例需要实例化后调用</code></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>传统语言中接口只包含实现，不包含细节。而抽象类可以包含细节。一般来说，有些公有方法可以放到抽象类做，不同的子类完成不同功能的代码可以放到抽象类做。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</div><div class="line">    <span class="keyword">abstract</span> say(): <span class="built_in">void</span>; <span class="comment">// 声明抽象方法，子类必须实现</span></div><div class="line"></div><div class="line">    eat() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`animal eat`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123; <span class="comment">// 使用extends关键字</span></div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'human say words'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'dog say wangwang'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口用来限定子类的行为，不关心具体实现。与传统语言不同的是,TS接口还可以限定变量或常量的属性</p><p>限定子类行文：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Animal &#123;</div><div class="line">    say(): <span class="built_in">void</span>;</div><div class="line">    eat(): <span class="built_in">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human <span class="keyword">implements</span> Animal &#123;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'human say'</span>);</div><div class="line">    &#125;</div><div class="line">    eat() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'human eat'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>限定变量属性：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> A &#123;</div><div class="line">    name?: <span class="built_in">string</span>;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> obj: A = &#123;</div><div class="line">    age: <span class="number">10</span>,</div><div class="line">    <span class="comment">// name是可选的</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="可索引类型"><a href="#可索引类型" class="headerlink" title="可索引类型"></a>可索引类型</h3><p>使用<code>可索引类型</code>来<code>描述</code>可以通过<code>索引访问得到</code>的类型。如<code>person[&quot;name&quot;]</code>,<code>list[0]</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> HashMap &#123;</div><div class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 冒号左边为属性名类型，右边为值类型</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> map: HashMap = &#123;&#125;;</div><div class="line">map[<span class="string">"name"</span>] = <span class="string">"1"</span>;</div><div class="line">map.a = <span class="string">"2"</span>;</div></pre></td></tr></table></figure><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>与类继承类似，接口也可以通过继承来扩展现有的功能：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Animal &#123;</div><div class="line">    eat(): <span class="built_in">void</span>; <span class="comment">// 动物会吃，但是怎么吃的不管</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">interface</span> Human <span class="keyword">extends</span> Animal &#123;</div><div class="line">    say(): <span class="built_in">void</span>; <span class="comment">// 人会说话，但是怎么说，说什么不管</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>JS中，函数可以直接调用也可以通过对象方式调用，TS中可以通过接口声明被修饰的函数支持的调用方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Counter &#123;</div><div class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</div><div class="line">    step: <span class="built_in">number</span>;</div><div class="line">    reset(): <span class="built_in">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">const</span> counter = &lt;Counter&gt; <span class="function"><span class="keyword">function</span>(<span class="params">start: <span class="built_in">number</span></span>) </span>&#123;&#125;;</div><div class="line">    counter.step = <span class="number">1</span>;</div><div class="line">    counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> c = getCounter();</div><div class="line">c(<span class="number">1</span>);</div><div class="line">c.reset();</div><div class="line">c.step = <span class="number">2</span>;</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>面向对象中的类和接口内容实在是太多了，本文只选择了开发中常用到的用法进行说明，不足之处，敬请包涵。<br>对TS有兴趣的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>手把手从零开始小程序单元测试(附避坑指南以及源码跟踪)</title>
    <link href="https//www.ddhigh.com/2019/07/27/miniprogram-unit-test.html"/>
    <id>https//www.ddhigh.com/2019/07/27/miniprogram-unit-test.html</id>
    <published>2019-07-27T10:35:49.000Z</published>
    <updated>2019-07-29T02:12:36.045Z</updated>
    
    <content type="html"><![CDATA[<p>单元测试是一个老生常谈的话题，基于Web/NodeJs环境的测试框架、测试教程数不胜数，也趋于成熟了。但是对于微信小程序的单元测试，目前还是处于起步状态，这两天在研究微信小程序的测试，也遇到了一些坑，在这里记录一下，希望给看到本文的小伙伴带来一点帮助，少走一些弯路。</p><p>本文内容有点多，但是干货满满，不明白的小伙伴可以关注公众号给我留言<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><p><a href="https://github.com/xialeistudio/miniprogram-unit-test-demo" target="_blank" rel="external">https://github.com/xialeistudio/miniprogram-unit-test-demo</a></p><h2 id="关键依赖版本"><a href="#关键依赖版本" class="headerlink" title="关键依赖版本"></a>关键依赖版本</h2><p>本文写作时相关依赖版本如下(版本不同，源码行数可能不同)：</p><ol><li>miniprogram-simulate: 1.0.7</li><li>j-component: 1.1.6</li><li>miniprogram-exparser: 0.0.6</li></ol><h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2><ol><li>初始化小程序项目，编写待测试组件</li><li>安装jest,miniprogram-simulate测试环境</li><li>编写测试用例</li><li>执行测试</li></ol><h2 id="初始化小程序项目"><a href="#初始化小程序项目" class="headerlink" title="初始化小程序项目"></a>初始化小程序项目</h2><ol><li>使用小程序开发者工具初始化新项目，APPID选择<code>测试号</code>即可，语言选择<code>Javascript</code>。</li><li>使用小程序开发者工具新建<code>/components/user</code>组件</li><li><p><code>components/user.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// components/user.js</span></div><div class="line">Component(&#123;</div><div class="line">    data: &#123;</div><div class="line">        nickname: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        handleUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.setData(&#123; <span class="attr">nickname</span>: e.detail.userInfo.nickName &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p><code>components/user.wxml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"nickname"</span>&gt;</span>&#123;&#123;nickname&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"handleUserInfo"</span>&gt;</span>Oauth<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>pages/index/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">    data:&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p><code>pages/index/index.wxml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>打开小程序开发者工具，可以看到有一个<code>Oauth</code>按钮，点击之后会在上面显示昵称。</p></li><li>由此可以得到测试用例<code>点击授权按钮时上方显示为授权用户的昵称</code></li></ol><h2 id="安装jest-miniprogram-simulate测试环境"><a href="#安装jest-miniprogram-simulate测试环境" class="headerlink" title="安装jest/miniprogram-simulate测试环境"></a>安装jest/miniprogram-simulate测试环境</h2><ol><li>由于JS项目的小程序根目录没有<code>package.json</code>，需要手动生成一下</li><li>打开终端，在项目根目录执行<code>npm init -y</code>生成<code>package.json</code></li><li>安装测试工具集<code>npm install jest miniprogram-simulate --save-dev</code></li><li>编辑<code>package.json</code>，在<code>scripts</code>新建<code>test</code>命令 <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"unit-test-demo"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</div><div class="line">    <span class="attr">"scripts"</span>: &#123;</div><div class="line">        <span class="attr">"test"</span>: <span class="string">"jest"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"keywords"</span>: [],</div><div class="line">    <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">    <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">        <span class="attr">"jest"</span>: <span class="string">"^24.8.0"</span>,</div><div class="line">        <span class="attr">"miniprogram-simulate"</span>: <span class="string">"^1.0.7"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h2><ol><li>在项目根目录新建<code>tests/components/user.spec.js</code>文件(目录需要手动创建)</li><li>代码如下(参考微信官方单元测试文档编写): <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> simulate = <span class="built_in">require</span>(<span class="string">'miniprogram-simulate'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line">test(<span class="string">'components/user'</span>, (done) =&gt; &#123; <span class="comment">// 定义测试名称,传入done表示当前测试是异步测试，需要回调函数来告诉jest，我测试执行完毕</span></div><div class="line"><span class="keyword">const</span> id = simulate.load(path.join(__dirname, <span class="string">'../../components/user'</span>)); <span class="comment">// 加载组件</span></div><div class="line"><span class="keyword">const</span> component = simulate.render(id); <span class="comment">// 渲染组件</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> text = component.querySelector(<span class="string">'.nickname'</span>); <span class="comment">// 获取nickname节点</span></div><div class="line"><span class="keyword">const</span> button = component.querySelector(<span class="string">'.button'</span>); <span class="comment">// 获取button节点</span></div><div class="line">button.dispatchEvent(<span class="string">'getuserinfo'</span>, &#123; <span class="comment">// 模拟触发事件</span></div><div class="line">    detail: &#123;   <span class="comment">// 传递事件参数</span></div><div class="line">        userInfo: &#123;</div><div class="line">            nickName: <span class="string">'hello'</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步断言</span></div><div class="line">    expect(text.dom.innerHTML).toBe(<span class="string">'hello'</span>); <span class="comment">// 检测text节点的innerHTML等于模拟授权获取的昵称</span></div><div class="line">    done();</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><ol><li><code>npm run test</code>，等待一秒后发现，<code>不出意外的话，测试肯定过不去</code></li><li><p>部分出错日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Expected: &quot;hello&quot;</div><div class="line">Received: &quot;&quot;</div><div class="line">     at toBe (/Users/xialeistudio/WeChatProjects/unit-test-demo/tests/components/user.spec.js:18:32)</div><div class="line">     at Timeout.callback [as _onTimeout] (/Users/xialeistudio/WeChatProjects/unit-test-demo/node_modules/jsdom/lib/jsdom/browser/Window.js:678:19)</div><div class="line">     at listOnTimeout (internal/timers.js:535:17)</div><div class="line">     at processTimers (internal/timers.js:479:7)</div></pre></td></tr></table></figure></li><li><p>可以推测一下原因：</p><ol><li>dispatchEvent的事件触发有问题，导致handleUserInfo未触发[1]</li><li>dispatchEvent的事件触发成功，但是触发参数有问题[2]</li></ol></li></ol><h2 id="错误分析-源码跟踪过程"><a href="#错误分析-源码跟踪过程" class="headerlink" title="错误分析(源码跟踪过程)"></a>错误分析(源码跟踪过程)</h2><ol><li><p>针对第1点原因，可以写一下测试代码(<code>components/user.js</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    data: &#123;</div><div class="line">        nickname: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        handleUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p><code>npm run test</code>，可以看到事件还是成功触发了，不过<code>detail</code>是<code>{}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> console.log components/user.js:21</div><div class="line">&#123; type: &apos;getuserinfo&apos;,</div><div class="line">  timeStamp: 948,</div><div class="line">  target: &#123; id: &apos;&apos;, offsetLeft: 0, offsetTop: 0, dataset: &#123;&#125; &#125;,</div><div class="line">  currentTarget: &#123; id: &apos;&apos;, offsetLeft: 0, offsetTop: 0, dataset: &#123;&#125; &#125;,</div><div class="line">  detail: &#123;&#125;,</div><div class="line">  touches: &#123;&#125;,</div><div class="line">  changedTouches: &#123;&#125; &#125;</div></pre></td></tr></table></figure></li><li><p>原因1排除，查原因2</p></li><li><code>dispatchEvent</code>方法是<code>被测试组件的子组件</code>，<code>被测试组件</code>由<code>simulate.render</code>函数返回</li><li>浏览<code>node_modules/miniprogram-simulate/src/index.js</code>，看到<code>render函数(152行)</code>，可以看到返回的组件由<code>jComponent.create</code>提供</li><li>浏览<code>node_modules/j-component/src/index.js</code>的<code>create</code>函数，可以看到其返回了<code>RootComponent</code>实例，而<code>RootComponent</code>是由<code>./render/component.js</code>提供</li><li>浏览<code>node_modules/j-component/src/render/component.js</code>的<code>dispatchEvent</code>函数，在这里可以打下日志测试(本文就不打了，结果是这里的options就是<code>user.spec.js</code> <code>dispatchEvent</code>函数的<code>第二个参数</code>，<code>detail</code>是有值的)</li><li><p>继续跟踪源码，由于咱们的是<code>自定义事件</code>，所以会走到<code>91行</code>的代码，该代码块如下：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义事件</span></div><div class="line">  <span class="keyword">const</span> customEvent = <span class="keyword">new</span> CustomEvent(eventName, options);</div><div class="line"></div><div class="line">  <span class="comment">// 模拟异步情况</span></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    dom.dispatchEvent(customEvent);</div><div class="line"></div><div class="line">    exparser.Event.dispatchEvent(customEvent.target, exparser.Event.create(eventName, &#123;&#125;, &#123;</div><div class="line">      originalEvent: customEvent,</div><div class="line">      bubbles: <span class="literal">true</span>,</div><div class="line">      capturePhase: <span class="literal">true</span>,</div><div class="line">      composed: <span class="literal">true</span>,</div><div class="line">      extraFields: &#123;</div><div class="line">        touches: options.touches || &#123;&#125;,</div><div class="line">        changedTouches: options.changedTouches || &#123;&#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;));</div><div class="line">  &#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure></li><li><p>可以看到调用了<code>exparser.Event.dispatchEvent</code>函数，该函数的<code>第二个参数</code>调用了<code>exparser.Event.create</code>对自定义事件进行了包装，这里还没到最底层，需要继续跟踪</p></li><li><code>exparser</code>对象是<code>miniprogram-exparser模块</code>提供的，浏览<code>node_modules/miniprogram-exparser/exparser.min.js</code>，发现该文件被混淆了，不过没关系<code>混淆后的代码逻辑是不变的，只不过变量名变得无意义，可读性变差</code></li><li>使用webstorm格式化该文件，这里我传了一份格式化好的到github <a href="https://github.com/xialeistudio/miniprogram-unit-test-demo/blob/master/extra/wxparser.jscc" target="_blank" rel="external">wxparser.js，可在线观看</a></li><li><p>需要在源码中搜索<code>三个参数</code>的<code>create</code>函数(<code>Object.create不算</code>)，需要有耐心，经过排查后发现<a href="https://github.com/xialeistudio/miniprogram-unit-test-demo/blob/master/extra/wxparser.js#L168" target="_blank" rel="external">168行</a>代码应该是目标代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i.create = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, r</span>) </span>&#123;</div><div class="line">    r = r || &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> n = r.originalEvent, o = r.extraFields || &#123;&#125;, a = <span class="built_in">Date</span>.now() - l, s = <span class="keyword">new</span> i;</div><div class="line">    s.currentTarget = <span class="literal">null</span>, s.type = e, s.timeStamp = a, s.mark = <span class="literal">null</span>, s.detail = t, s.bubbles = !!r.bubbles, s.composed = !!r.composed, s.__originalEvent = n, s.__hasCapture = !!r.capturePhase, s.__stopped = !<span class="number">1</span>, s.__dispatched = !<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> u <span class="keyword">in</span> o) s[u] = o[u];</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>可以看到<code>s.detail = t</code>这个赋值，<code>t</code>是<code>create</code>的<code>第二个参数</code>，由<code>node_modules/j-component/render/component.js</code>的<code>wxparser.Event.create</code>传入，但是传入的<code>第二个参数写死了{}</code>，所以咱们的组件获取<code>detail</code>的时候<code>永远为{}</code>，将其修改为<code>options.detail||{}</code>即可，修改后代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exparser.Event.dispatchEvent(customEvent.target, exparser.Event.create(eventName, options.detail||&#123;&#125;, xxxxxx</div></pre></td></tr></table></figure></li><li><p>重新测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   PASS  tests/components/user.spec.js</div><div class="line">✓ components/user (1099ms)</div><div class="line"></div><div class="line">  Test Suites: 1 passed, 1 total</div><div class="line">  Tests:       1 passed, 1 total</div><div class="line">  Snapshots:   0 total</div><div class="line">  Time:        3.622s</div><div class="line">  Ran all test suites.</div></pre></td></tr></table></figure></li></ol><h2 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a>避坑指南</h2><ol><li><code>querySelector</code>用法同HTML，但是需要在<code>组件</code>执行，而不是<code>组件.dom</code>，HTML中实在<code>DOMNode</code>执行的</li><li><code>dispatchEvent</code>是触发事件，需要在<code>组件</code>执行，上述代码中是触发<code>button组件</code>的<code>自定义事件</code></li><li><code>dispatchEvent</code>事件名规范: <code>去掉前导bind剩余的字符串为事件名</code>，示例代码中<code>bindgetuserinfo</code>，触发时就是<code>getuserinfo</code>，如果是<code>bindtap</code>，那触发时就是<code>tap</code></li><li><p><code>dispatchEvent</code>底层是<code>j-component</code>这个<code>npm模块实现</code>的，跟踪源码发现执行是异步的(代码文件<code>node_modules/j-component/src/render/component.js</code>，函数名<code>dispatchEvent</code>)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义事件</span></div><div class="line">  <span class="keyword">const</span> customEvent = <span class="keyword">new</span> CustomEvent(eventName, options);</div><div class="line"></div><div class="line">  <span class="comment">// 模拟异步情况</span></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    dom.dispatchEvent(customEvent);</div><div class="line"></div><div class="line">    exparser.Event.dispatchEvent(customEvent.target, exparser.Event.create(eventName, &#123;&#125;, &#123;</div><div class="line">      originalEvent: customEvent,</div><div class="line">      bubbles: <span class="literal">true</span>,</div><div class="line">      capturePhase: <span class="literal">true</span>,</div><div class="line">      composed: <span class="literal">true</span>,</div><div class="line">      extraFields: &#123;</div><div class="line">        touches: options.touches || &#123;&#125;,</div><div class="line">        changedTouches: options.changedTouches || &#123;&#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;));</div><div class="line">  &#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure></li><li><p>由于<code>setTimeout</code>的存在，触发事件为异步，所以写断言时需要加定时器</p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>小程序单元测试基本是没什么经验扩借鉴，但是基于官网提供的工具，以及<code>开源</code>，咱们遇到问题时细心排查然后修改一下，还是可以解决问题的。对单元测试有疑问的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单元测试是一个老生常谈的话题，基于Web/NodeJs环境的测试框架、测试教程数不胜数，也趋于成熟了。但是对于微信小程序的单元测试，目前还是处于起步状态，这两天在研究微信小程序的测试，也遇到了一些坑，在这里记录一下，希望给看到本文的小伙伴带来一点帮助，少走一些弯路。&lt;/p&gt;
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="test" scheme="https//www.ddhigh.com/tags/test/"/>
    
      <category term="miniprogram" scheme="https//www.ddhigh.com/tags/miniprogram/"/>
    
  </entry>
  
  <entry>
    <title>使用Typescript装饰器来劫持React组件</title>
    <link href="https//www.ddhigh.com/2019/07/26/react-decorator-example.html"/>
    <id>https//www.ddhigh.com/2019/07/26/react-decorator-example.html</id>
    <published>2019-07-26T11:31:15.000Z</published>
    <updated>2019-07-27T11:43:08.568Z</updated>
    
    <content type="html"><![CDATA[<p>最近在捣鼓Typescript的装饰器，NodeJs项目的装饰器比较好理解，但是React项目的装饰器由于有JSX，走了一点弯路，但是总之来说是<code>新技能get</code></p><h2 id="typescript对装饰器的说明"><a href="#typescript对装饰器的说明" class="headerlink" title="typescript对装饰器的说明"></a>typescript对装饰器的说明</h2><blockquote><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 @expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p></blockquote><p>装饰器为我们提供了<code>运行时修改数据</code>的能力。</p><h2 id="React例子"><a href="#React例子" class="headerlink" title="React例子"></a>React例子</h2><p>Parent.tsx</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> App <span class="keyword">extends</span> PureComponent &#123;</div><div class="line">  handleClick() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent click'</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className=<span class="string">"App"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;parent&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure><p>Component装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; <span class="keyword">new</span>(...args: <span class="built_in">any</span>[]): <span class="built_in">any</span> &#125;&gt;(component: T) &#123; <span class="comment">// 泛型限定</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> component &#123;</div><div class="line">    handleClick() &#123; <span class="comment">// 劫持onClick</span></div><div class="line">      <span class="keyword">super</span>.handleClick()</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'child clicked'</span>);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">const</span> parent = <span class="keyword">super</span>.render()</div><div class="line">      <span class="comment">// 劫持onClick</span></div><div class="line">      <span class="keyword">return</span> React.cloneElement(parent, &#123; onClick: <span class="keyword">this</span>.handleClick &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击渲染之后的<code>parent</code>字符，可以看到劫持成功</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/26/16c2e0b64f0d48a7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="clipboard.png"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/react-decorator-example" target="_blank" rel="external">react-decorator-example</a></p><h2 id="文后"><a href="#文后" class="headerlink" title="文后"></a>文后</h2><p>本文写的只是比较简单的装饰器用法，但是可以基于此文的原来来开发如<code>登录后才能访问的组件</code>之类的装饰器，将业务逻辑更好的组织起来。</p><p>对TS有兴趣的伙伴可以加我微信交流~</p><p><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在捣鼓Typescript的装饰器，NodeJs项目的装饰器比较好理解，但是React项目的装饰器由于有JSX，走了一点弯路，但是总之来说是&lt;code&gt;新技能get&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;typescript对装饰器的说明&quot;&gt;&lt;a href=&quot;#type
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="react" scheme="https//www.ddhigh.com/tags/react/"/>
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(1)</title>
    <link href="https//www.ddhigh.com/2019/07/25/typescript-quick-guide.html"/>
    <id>https//www.ddhigh.com/2019/07/25/typescript-quick-guide.html</id>
    <published>2019-07-25T14:01:54.000Z</published>
    <updated>2019-07-26T04:53:10.539Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><blockquote><p>TypeScript是JavaScript的一个超集，支持 ECMAScript 6 标准。<br>TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。<br>Typescript由微软开发，与C#出自同一人之手!</p></blockquote><h2 id="TS与JS的区别"><a href="#TS与JS的区别" class="headerlink" title="TS与JS的区别"></a>TS与JS的区别</h2><blockquote><p>TS是JS的超集，扩展了TS的语法，因此现有的JS代码可<code>直接与TS一起工作无需任何修改</code>，TS通过类型注解提供编译时的静态类型检查。</p></blockquote><p>由于TS与JS语法大部分一致，本文只对有差异的部分进行讲解。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>有些知识点可能是交叉的建议通读完本文再开始真正的开发，这样疑惑会比较少一点</p><ol><li>数据类型与类型断言</li><li>函数</li><li>接口和类</li><li>泛型</li><li>枚举</li><li>命名空间和模块</li><li>装饰器(注解)</li><li>高级类型</li><li>声明文件</li><li>tsconfig.json</li><li>示例<ol><li>React示例(前端)</li><li>Koa示例(后端)</li></ol></li></ol><h2 id="数据类型与类型声明"><a href="#数据类型与类型声明" class="headerlink" title="数据类型与类型声明"></a>数据类型与类型声明</h2><p>TS使用<code>:</code>语法对类型进行声明。基础类型如下：</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>TS使用<code>boolean</code>来声明布尔类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> succeed: <span class="built_in">boolean</span> = <span class="literal">false</span>; <span class="comment">// 声明succeed为boolean类型</span></div></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>TS对数字的支持与JS一致，所有数字都是浮点数，所以TS并不存在<code>int</code>,<code>float</code>之类的数字类型声明，只有<code>number</code>。<br>除了支持十进制和十六进制，TS还支持ES6的二进制和八进制数字。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> age: <span class="built_in">number</span> = <span class="number">16</span>; <span class="comment">// 声明年龄为数字类型</span></div><div class="line"><span class="keyword">const</span> price: <span class="built_in">number</span> = <span class="number">99.99</span>; <span class="comment">// 声明价格为数字类型</span></div></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>TS使用<code>string</code>声明字符串，和JS一样，支持<code>单引号</code>和<code>双引号</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"demo"</span>;</div><div class="line"></div><div class="line">name = <span class="string">"demo1"</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> description = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// ES6语法</span></div></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>TS使用<code>类型[]</code>声明数组的元素类型，与JS不一样的地方在于，<code>TS</code>中一旦指明一个类型，所有元素必须是该类型。<code>JS</code>则可以往数组放任意类型的元素。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers: <span class="built_in">number</span>[] = [];</div><div class="line">numbers.push(<span class="number">1</span>);</div><div class="line">numbers.push(<span class="number">2</span>);</div><div class="line">numbers.push(<span class="string">'3'</span>); <span class="comment">// 错误，'3'不是数字类型</span></div></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>与JS一样，TS的对象也是由<code>键值对</code>构成，类型声明可以分别作用与<code>键类型</code>以及<code>值类型</code>。</p><p>声明语法：<code>{[key名称: key类型]: 值类型}</code><br>key名称可以<code>自定义</code>，如<code>key</code>,<code>index</code>都是合法的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125; = &#123;&#125;; <span class="comment">// 声明键和值都只能是字符串类型</span></div><div class="line">config.version = <span class="string">'1.0.0'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ages: &#123;[key: <span class="built_in">number</span>]: <span class="built_in">number</span>&#125; = &#123;&#125;; <span class="comment">// 声明键值对都是数字类型</span></div><div class="line">ages[<span class="number">10</span>] = <span class="string">'1.0.0'</span>; <span class="comment">// 赋值</span></div></pre></td></tr></table></figure><p>上例中赋值语法虽然和数组一致，但是ages对象的长度为1，如果ages是数组的话，长度为11。(0-9个元素为undefined)</p><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><p>TS用<code>any</code>用来声明<code>任意类型</code>，被<code>any</code>修饰的变量(或常量以及返回值等等)在编译阶段会<code>直接通过</code>，但是运行阶段可能会<code>抛出undefined或null相关错误</code>。</p><p><code>any</code>的出现使得现有的JS代码能够很快速的切换到TS。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> age:<span class="built_in">any</span> = <span class="number">10</span>;</div><div class="line">age = <span class="string">'name'</span>; <span class="comment">// 编译通过</span></div></pre></td></tr></table></figure><h3 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h3><p>TS使用<code>void</code>声明空类型。与<code>any</code>相反，表示没有任何类型，常用在函数返回值中。<br><code>void</code>类型只能被赋值为<code>null</code>和<code>undefined</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123; <span class="comment">// 声明函数无返回值，编译成JS之后取返回值会取到undefined，与JS一致</span></div><div class="line">    <span class="built_in">console</span>.log(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> v: <span class="built_in">void</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><p>TS中<code>默认情况</code>下，<code>null</code>和<code>undefined</code>是所有类型的子类型，换句话说，你可以把<code>null</code>和<code>undefined</code>直接赋值给<code>number</code>/<code>string</code>/<code>boolean</code>等类型。<br>但是不能反过来干，你不能把<code>number</code>/<code>string</code>/<code>boolean</code>类型赋值给<code>null</code>或者<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p><code>never</code>是<code>100%不存在的值</code>的类型。比如函数中直接抛出异常或者有死循环。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123; <span class="comment">// TS自动类型推断返回值类型为never，类型推断在下文中会提到</span></div><div class="line">    <span class="keyword">return</span> error(<span class="string">'failed'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123; <span class="comment">// 死循环，肯定不会返回</span></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>never</code>和<code>void</code>区别</p><ol><li>被<code>void</code>修饰的函数<code>能正常终止，只不过没有返回值</code></li><li>被<code>never</code>修饰的函数<code>不能正常终止，如抛出异常或死循环</code></li></ol><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举是对JS的一个扩展。TS使用<code>enum</code>关键字定义枚举类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;</div><div class="line">    Red,</div><div class="line">    Green,</div><div class="line">    Yellow</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c: Color = Color.Red;</div></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>TS使用<code>object</code>类修饰对象类型，TS中表示<code>非原始类型</code>。原始类型如下：</p><ol><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol(ES6新出类型)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a: object = &#123;&#125;; <span class="comment">// ok</span></div><div class="line"><span class="keyword">let</span> a: object = <span class="number">1</span>; <span class="comment">// error</span></div><div class="line"><span class="keyword">let</span> a: object = Symbol(); <span class="regexp">/ error</span></div></pre></td></tr></table></figure><p>虽然<code>Symbol</code>长得像<code>对象类型</code>，不过在<code>ES6</code>规范中，人家就是<code>原始类型</code>。</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>TS中可以对函数的<code>形参</code>以及<code>返回值</code>进行类型声明。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;name&#125;</span>,age:<span class="subst">$&#123;age&#125;</span>`</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言说白了就是<code>告诉编译器，你按照我指定的类型进行处理</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> value: <span class="built_in">any</span> = <span class="string">'a string'</span>;</div><div class="line"><span class="keyword">const</span> length: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;value).length;</div></pre></td></tr></table></figure><p>编译结果(正常编译且正常运行)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> value = <span class="string">'a string'</span>;</div><div class="line"><span class="keyword">const</span> length = value.length;</div></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>当没有手动指定类型时，TS编译器利用类型推断来推断类型。<br>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num = <span class="number">2</span>; <span class="comment">// 推断为number类型</span></div></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>TS函数与JS函数没有大的区别，多了一个类型系统。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123; <span class="comment">// 自动推断返回类型为string</span></div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>TS中函数每个形参都是<code>必须</code>的，当然你可以传递<code>null</code>和<code>undefined</code>，因为<code>他们是值</code>。但是在JS中，每个形参都是可选的，没传的情况下取值会得到<code>undefined</code>。<br>TS中<code>在参数名后面使用?号指明该参数为可选参数</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>:<span class="subst">$&#123;age&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line">test(<span class="string">'a'</span>); <span class="comment">// 输出 a:undefined</span></div></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>与ES6一致，TS也的函数也支持默认参数。需要注意的是<code>可选参数</code>和<code>默认参数</code>是<code>互斥</code>的。因为如果使用了默认参数，不管外部传不传值，取值的时候都是有值的，和可选参数矛盾。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = 10</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>:<span class="subst">$&#123;age&#125;</span>`</span>)</div><div class="line">&#125;</div><div class="line">test(<span class="string">'a'</span>); <span class="comment">// 输出 a:10</span></div></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>剩余参数和ES6表现一致，但是多了类型声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name1: <span class="built_in">string</span>, ...names: <span class="built_in">string</span>[]</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name1, names);</div><div class="line">&#125;</div><div class="line">test(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>);<span class="comment">// 输出 1 ['2', '3']</span></div></pre></td></tr></table></figure><h3 id="this执行"><a href="#this执行" class="headerlink" title="this执行"></a>this执行</h3><p>TS中this指向和JS一致，这里不做赘述。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>未完待续~欢迎加我微信交流TS相关的知识~</p><p><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(11) - 完结篇</title>
    <link href="https//www.ddhigh.com/2019/07/25/nodejs-guide-next-step.html"/>
    <id>https//www.ddhigh.com/2019/07/25/nodejs-guide-next-step.html</id>
    <published>2019-07-25T03:26:30.000Z</published>
    <updated>2019-07-25T03:45:21.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的完结篇，将对以往文章进行归档。</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="https://www.ddhigh.com/2019/07/18/nodejs-guide-about.html" target="_blank" rel="external">NodeJs简明教程(1)——简介</a></li><li><a href="https://www.ddhigh.com/2019/07/19/nodejs-guide-installation.html" target="_blank" rel="external">NodeJs简明教程(2)——安装</a></li><li><a href="https://www.ddhigh.com/2019/07/19/nodejs-guide-http-server.html" target="_blank" rel="external">NodeJs简明教程(3)——HTTP服务器</a></li><li><a href="https://www.ddhigh.com/2019/07/20/nodejs-guide-filesystem.html" target="_blank" rel="external">NodeJs简明教程(4)——文件系统</a></li><li><a href="https://www.ddhigh.com/2019/07/20/nodejs-guide-path.html" target="_blank" rel="external">NodeJs简明教程(5)——路径</a></li><li><a href="https://www.ddhigh.com/2019/07/21/nodejs-guide-crypto.html" target="_blank" rel="external">NodeJs简明教程(6)——加解密</a></li><li><a href="https://www.ddhigh.com/2019/07/22/nodejs-guide-events.html" target="_blank" rel="external">NodeJs简明教程(7)——事件</a></li><li><a href="https://www.ddhigh.com/2019/07/23/nodejs-guide-child-process.html" target="_blank" rel="external">NodeJs简明教程(8)——子进程</a></li><li><a href="https://www.ddhigh.com/2019/07/24/nodejs-guide-net.html" target="_blank" rel="external">NodeJs简明教程(9)——TCP开发</a></li><li><a href="https://www.ddhigh.com/2019/07/25/nodejs-guide-dgram.html" target="_blank" rel="external">NodeJs简明教程(10)——UDP开发</a></li></ol><h2 id="接下来的内容"><a href="#接下来的内容" class="headerlink" title="接下来的内容"></a>接下来的内容</h2><ol><li>Typescript语言基础</li><li>NodeJs常用第三方模块(缓存、数据库、通用连接池、消息队列等等)</li><li>koa 专题</li><li>express 专题</li><li>nestjs 专题</li></ol><p>欢迎持续关注~</p><p>欢迎加群交流NodeJs相关的开发~</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(10)</title>
    <link href="https//www.ddhigh.com/2019/07/25/nodejs-guide-dgram.html"/>
    <id>https//www.ddhigh.com/2019/07/25/nodejs-guide-dgram.html</id>
    <published>2019-07-25T03:00:00.000Z</published>
    <updated>2019-07-25T03:25:56.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第十篇，将介绍NodeJs <strong>dgram</strong> 模块(<code>UDP服务端/客户端</code>)相关的基本操作。</p><h2 id="啥是UDP"><a href="#啥是UDP" class="headerlink" title="啥是UDP"></a>啥是UDP</h2><blockquote><p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据报的方法。RFC 768描述了 UDP。</p></blockquote><p>NodeJs使用<code>dgram模块</code>实现<code>UDP服务端/客户端</code>相关功能。</p><p><code>dgram.createSocket</code>用来创建一个Socket对象，可以基于该套接口<code>接收</code>或<code>发送</code>数据。该方法原型如下：</p><p><code>dgram.createSocket(type[, callback])</code></p><ul><li>type <code>&lt;string&gt;</code> socket类型。<code>udp4</code>或<code>udp6</code>，对应<code>ipv4</code>和<code>ipv6</code></li><li>callback <code>&lt;Function&gt;</code> 接收到消息时的回调函数</li></ul><h2 id="Echo服务端开发"><a href="#Echo服务端开发" class="headerlink" title="Echo服务端开发"></a>Echo服务端开发</h2><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</div><div class="line"><span class="keyword">const</span> socket = dgram.createSocket(<span class="string">'udp4'</span>);</div><div class="line"></div><div class="line">socket.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">// 监听socket错误</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器错误'</span>, err);</div><div class="line">    socket.close();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">msg,sender</span>) </span>&#123; <span class="comment">// 监听收到数据</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s:%d =&gt; %s'</span>, sender.address,sender.port,msg.toString()); <span class="comment">// 打印该数据包详情</span></div><div class="line">    socket.send(<span class="string">'socket: '</span>+msg.toString(),sender.port,sender.address,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">// 发送数据给来源地址</span></div><div class="line">        <span class="keyword">if</span>(err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'回复%s:%d失败: %s'</span>,sender.address,sender.port,err.message);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">socket.bind(<span class="number">10000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 监听UDP端口</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器正在监听 %s:%d'</span>, socket.address().address, socket.address().port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="Echo客户端开发"><a href="#Echo客户端开发" class="headerlink" title="Echo客户端开发"></a>Echo客户端开发</h2><p>由于<code>telnet</code>连接服务器使用的是<code>TCP协议</code>，所以本文对应的客户端需要使用NodeJs开发。</p><p>client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> socket = dgram.createSocket(<span class="string">'udp4'</span>); <span class="comment">// 创建socket实例</span></div><div class="line"></div><div class="line">socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg,sender</span>) </span>&#123; <span class="comment">// 监听收到数据</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到%s:%d的消息:%s'</span>,sender.address,sender.port,msg.toString());</div><div class="line">    socket.close();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">socket.send(<span class="string">'hello'</span>,<span class="number">10000</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">// 向目标端口发送数据</span></div><div class="line">    <span class="keyword">if</span>(err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'发送错误'</span>, err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'发送成功'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><ol><li><p>终端执行<code>node server.js</code>，输出</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">服务器正在监听 0.0.0.0:10000</div></pre></td></tr></table></figure></li><li><p>终端执行<code>node client.js</code>，输出</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">发送成功</div><div class="line">接收到127.0.0.1:10000的消息:server: hello</div></pre></td></tr></table></figure></li><li><p>服务端输出:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:50577 =&gt; hello</div></pre></td></tr></table></figure></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>NodeJs UDP服务端与客户端开发到此结束，但是使用UDP的情况下，数据包确认、流量控制等等操作都需要程序员手动完成，这一方面确实挺复杂的，没有什么特殊的要求的话使用TCP即可。</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(9)</title>
    <link href="https//www.ddhigh.com/2019/07/24/nodejs-guide-net.html"/>
    <id>https//www.ddhigh.com/2019/07/24/nodejs-guide-net.html</id>
    <published>2019-07-24T02:23:56.000Z</published>
    <updated>2019-07-24T03:57:47.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第九篇，将介绍NodeJs <strong>net</strong> 模块(<code>TCP服务端/客户端</code>)相关的基本操作。</p><h2 id="啥是TCP"><a href="#啥是TCP" class="headerlink" title="啥是TCP"></a>啥是TCP</h2><blockquote><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。</p></blockquote><p>NodeJs使用<code>net模块</code>实现<code>TCP服务端/客户端</code>相关功能。</p><h2 id="Echo服务器开发"><a href="#Echo服务器开发" class="headerlink" title="Echo服务器开发"></a>Echo服务器开发</h2><blockquote><p>Echo服务器就是客户端发送什么，服务端就显示什么的一种服务端程序。主要为了调试网络和协议是否正常工作。</p></blockquote><p><code>net.createServer</code>用来创建一个服务端，该方法原型如下：</p><p><code>net.createServer([options][, connectionlistener]): net.Server</code></p><ul><li>options <code>&lt;Object&gt;</code><ul><li>allowHalfOpen <code>&lt;boolean&gt;</code> 表明是否允许半开的 TCP 连接。默认值: <code>false</code>。</li><li>pauseOnConnect <code>&lt;boolean&gt;</code> 表明是否应在传入连接上暂停套接字。默认值: false。</li></ul></li><li>connectionListener <code>&lt;Function&gt;</code> 客户端连接事件监听器。回调参数为<code>Socket(可以视为一个客户端连接)</code></li></ul><p>返回值为<code>net.Server</code>，<code>net.Server</code>主要方法如下：</p><p><code>server.listen([port[, host[, backlog]]][, callback])</code></p><ul><li>port <code>&lt;number&gt;</code> 监听端口</li><li>host <code>&lt;string&gt;</code> 监听主机</li><li>backlog <code>&lt;number&gt;</code> 待连接队列的最大长度</li><li>callback <code>&lt;Function&gt;</code> 监听成功回调函数</li></ul><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123; <span class="comment">// 创建服务端</span></div><div class="line">    <span class="built_in">console</span>.log(client.address().address, <span class="string">'连接成功'</span>); <span class="comment">// 客户端连接成功时打印客户端地址</span></div><div class="line"></div><div class="line">    client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(client.address().address, <span class="string">' error &gt;&gt; '</span>, e.message); <span class="comment">// 连接错误时（如客户端异常断开）</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// 收到客户端数据</span></div><div class="line">        <span class="built_in">console</span>.log(client.address().address, <span class="string">' &gt;&gt; '</span>, data.toString());</div><div class="line">        client.write(data); <span class="comment">// 往客户端写数据</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 客户端正常断开</span></div><div class="line">        <span class="built_in">console</span>.log(client.address().address, <span class="string">'断开连接'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; <span class="comment">// 服务器错误（如启动失败，端口占用）</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动失败'</span>, e);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">10000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'启动成功，地址'</span>, server.address().address);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ol><li>执行<code>node server.js</code>可以看到输出<code>启动成功，地址xxx</code></li><li><p>打开终端，执行<code>telnet localhost 10000</code>，可以看到输出如下（如果不一样，请加群讨论）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Trying ::1...</div><div class="line">Connected to localhost.</div><div class="line">Escape character is &apos;^]&apos;.</div></pre></td></tr></table></figure></li><li><p>终端继续输入以下字符：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">helloworld</div></pre></td></tr></table></figure></li><li><p>服务端会回复</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world</div></pre></td></tr></table></figure></li></ol><p>该Echo服务器就开发已经测试通过了。虽然代码量不多，但是演示了从零开始开发一个TCP服务器的流程，相比于C语言开发TCP服务器还是方便很多的。</p><h2 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h2><p><code>net.connect</code>可以连接目标TCP服务器，该方法原型如下：</p><p><code>net.connect(port[,host][,connectionListener])</code></p><ul><li>port <code>&lt;number&gt;</code> 连接端口</li><li>host <code>&lt;string&gt;</code> 连接主机</li><li>connectionListener <code>&lt;Function&gt;</code> 连接成功的回调</li></ul><p>还是以刚才监听<code>10000</code>端口的服务端为例来开发客户端</p><p>client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> client = net.connect(<span class="number">10000</span>, <span class="string">'localhost'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 连接服务器</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'连接服务器成功'</span>);</div><div class="line"></div><div class="line">    client.write(<span class="string">'我是客户端'</span>); <span class="comment">// 往服务端发送数据</span></div><div class="line"></div><div class="line">    client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// 接收到服务端数据</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'服务端消息'</span>, data.toString());</div><div class="line">        client.end(); <span class="comment">// 断开连接</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 连接断开事件</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'服务端连接断开'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>保证服务端开启的情况下，执行该js，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">连接服务器成功</div><div class="line">服务端消息 我是客户端</div><div class="line">服务端连接断开</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>NodeJs TCP服务端与客户端开发到此结束，但是TCP协议的学习远远不止于此，包括<code>自定义协议开发</code>、<code>TCP粘包问题</code>等等。这一块有问题的可以扫码加群交流：</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(8)</title>
    <link href="https//www.ddhigh.com/2019/07/23/nodejs-guide-child-process.html"/>
    <id>https//www.ddhigh.com/2019/07/23/nodejs-guide-child-process.html</id>
    <published>2019-07-23T02:52:47.000Z</published>
    <updated>2019-07-23T06:27:52.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第八篇，将介绍NodeJs <strong>子进程</strong> 模块相关的基本操作。</p><blockquote><p>child_process 模块提供了衍生子进程的能力（以一种与 popen(3) 类似但不相同的方式）。</p></blockquote><p>NodeJs的JS线程虽然是单线程，不能利用多核CPU，也不能执行CPU密集型的任务，但是通过派生子进程的形式加上<strong>IPC(进程间通信)</strong>，可以充分利用多核CPU。</p><h2 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h2><p> <code>spawn</code>可以执行<code>指定的命令</code>，<code>spawn</code>的函数原型如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">child_process.spawn(command[,args][,options])</div></pre></td></tr></table></figure><ul><li>command <code>&lt;string&gt;</code> 要执行的命令</li><li>args <code>&lt;string[]&gt;</code> 传给命令的参数列表</li><li>options <code>&lt;Object&gt;</code> 额外选项<ul><li>cwd <code>&lt;string&gt;</code> 子进程<code>workdir</code></li><li>env <code>&lt;Object&gt;</code> 子进程环境变量</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">const</span> ls = spawn(<span class="string">'ls'</span>, [<span class="string">'-lh'</span>, <span class="string">'/usr'</span>]); <span class="comment">// 命令配置</span></div><div class="line"></div><div class="line">ls.stdout.on(<span class="string">'data'</span>, (data) =&gt; &#123; <span class="comment">// 监听命令执行的标准输出</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ls.stderr.on(<span class="string">'data'</span>, (data) =&gt; &#123; <span class="comment">// 监听命令执行的标准错误输出</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ls.on(<span class="string">'close'</span>, (code) =&gt; &#123; <span class="comment">// 监听子进程退出</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`子进程退出，使用退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>以上例程输出(不同机器输出可能不一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">stdout: total 0</div><div class="line">drwxr-xr-x  970 root  wheel    30K  7 19 23:00 bin</div><div class="line">drwxr-xr-x  306 root  wheel   9.6K  7 12 22:35 lib</div><div class="line">drwxr-xr-x  249 root  wheel   7.8K  7 19 23:00 libexec</div><div class="line">drwxr-xr-x   15 root  wheel   480B  4  1 14:15 local</div><div class="line">drwxr-xr-x  239 root  wheel   7.5K  7 12 22:35 sbin</div><div class="line">drwxr-xr-x   46 root  wheel   1.4K  9 21  2018 share</div><div class="line">drwxr-xr-x    5 root  wheel   160B  9 21  2018 standalone</div><div class="line"></div><div class="line">子进程退出，使用退出码 0</div></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p><code>exec</code>也可以执行<code>指定的命令</code>，与<code>spawn</code>区别是执行结果通过回调通知，<code>spawn</code>是通过事件，<code>exec</code>函数原型如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exec(command[,options][,callback])</div></pre></td></tr></table></figure><ul><li>command <code>&lt;string&gt;</code> 要执行的命令，命令参数使用空格分隔</li><li>options <code>&lt;Object&gt;</code> 额外选项<ul><li>cwd <code>&lt;string&gt;</code> 子进程<code>workdir</code></li><li>env <code>&lt;Object&gt;</code> 子进程环境变量</li><li>timeout <code>&lt;number&gt;</code> 子进程执行超时</li></ul></li><li>callback <code>&lt;Function&gt;</code> 执行结果回调<ul><li>error <code>&lt;Error&gt;</code> 执行错误(不是子进程的错误输出)</li><li>stdout <code>&lt;string|Buffer&gt;</code> 子进程标准输出</li><li>stderr <code>&lt;string|Buffer&gt;</code> 子进程标准错误输出</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</div><div class="line"></div><div class="line">exec(<span class="string">'ls -lh /usr'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,stdout,stderr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'执行错误'</span>, err);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'stdout'</span>, stdout);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'stderr'</span>, stderr);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>以上例程输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">stdout: total 0</div><div class="line">drwxr-xr-x  970 root  wheel    30K  7 19 23:00 bin</div><div class="line">drwxr-xr-x  306 root  wheel   9.6K  7 12 22:35 lib</div><div class="line">drwxr-xr-x  249 root  wheel   7.8K  7 19 23:00 libexec</div><div class="line">drwxr-xr-x   15 root  wheel   480B  4  1 14:15 local</div><div class="line">drwxr-xr-x  239 root  wheel   7.5K  7 12 22:35 sbin</div><div class="line">drwxr-xr-x   46 root  wheel   1.4K  9 21  2018 share</div><div class="line">drwxr-xr-x    5 root  wheel   160B  9 21  2018 standalone</div><div class="line"></div><div class="line">子进程退出，使用退出码 0</div></pre></td></tr></table></figure><h2 id="execFile"><a href="#execFile" class="headerlink" title="execFile"></a>execFile</h2><p><code>execFile</code>类似于<code>exec</code>，但默认情况下不会派生shell， 相反，指定的可执行文件 file 会作为新进程直接地衍生，使其比 <code>exec</code>稍微更高效。</p><p>支持与<code>exec</code>相同的选项。 由于没有衍生 shell，因此<code>不支持 I/O 重定向和文件通配等行为</code>。<code>execFile</code>原型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">execFile(file[,args][,options][,callback])</div></pre></td></tr></table></figure><ul><li>file <code>&lt;string&gt;</code> 要执行的命令或可执行文件路径</li><li>args <code>&lt;string[]&gt;</code> 字符串数组形式的参数列表</li><li>options <code>&lt;Object&gt;</code> 额外选项<ul><li>cwd <code>&lt;string&gt;</code> 子进程<code>workdir</code></li><li>env <code>&lt;Object&gt;</code> 子进程环境变量</li><li>timeout <code>&lt;number&gt;</code> 子进程执行超时</li></ul></li><li>callback <code>&lt;Function&gt;</code> 执行结果回调<ul><li>error <code>&lt;Error&gt;</code> 执行错误(不是子进程的错误输出)</li><li>stdout <code>&lt;string|Buffer&gt;</code> 子进程标准输出</li><li>stderr <code>&lt;string|Buffer&gt;</code> 子进程标准错误输出</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> execFile = <span class="built_in">require</span>(<span class="string">'child_process'</span>).execFile;</div><div class="line">execFile(<span class="string">'ls'</span>, [<span class="string">'--version'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'执行错误'</span>, err);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'stdout'</span>, stdout);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'stderr'</span>, stderr);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>以上例程输出同<code>exec</code></p><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p><code>fork</code>是<code>spawn</code>的一个特例，专门用于派生新的<code>NodeJs进程</code>。<code>spawn</code>可以派生<code>任何进程</code>。<code>fork</code>方法原型如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fork(modulePath[,args][,options])</div></pre></td></tr></table></figure><ul><li>modulePath <code>&lt;string&gt;</code> 要执行的JS路径</li><li>args <code>&lt;string[]&gt;</code> 字符串数组形式的参数列表</li><li>options <code>&lt;Object&gt;</code> 额外选项<ul><li>cwd <code>&lt;string&gt;</code> 子进程的<code>workdir</code></li><li>env <code>&lt;Object&gt;</code> 环境变量</li><li>silent <code>&lt;boolean&gt;</code> 如果为 true，则子进程的 stdin、stdout 和 stderr 将会被输送到父进程，否则它们将会继承自父进程。默认<code>false</code></li></ul></li></ul><p>b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</div><div class="line"></div><div class="line"><span class="keyword">const</span> child = fork(<span class="string">'./a.js'</span>,&#123;<span class="attr">silent</span>:<span class="literal">true</span>&#125;); <span class="comment">// silent为true时可以监听子进程标准输出和标准错误输出</span></div><div class="line">child.stdout.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 监听子进程标准输出</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child stdout'</span>, data.toString(<span class="string">'utf8'</span>));</div><div class="line">&#125;);</div><div class="line">child.stderr.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 监听子进程标准错误输出</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child stderr'</span>, data.toString(<span class="string">'utf8'</span>));</div><div class="line">&#125;);</div><div class="line">child.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child exit'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'我是子进程`);</span></div></pre></td></tr></table></figure><p>终端执行<code>node b.js</code>，以上例程输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">child stdout 我是子进程</div><div class="line"></div><div class="line">child exit</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>子进程模块的介绍到此就告一段落了，一般情况下使用<code>spawn</code>和<code>execFile</code>即可。有任何疑问请扫码加群交流：</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(7)</title>
    <link href="https//www.ddhigh.com/2019/07/22/nodejs-guide-events.html"/>
    <id>https//www.ddhigh.com/2019/07/22/nodejs-guide-events.html</id>
    <published>2019-07-22T02:53:10.000Z</published>
    <updated>2019-07-23T06:14:56.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第七篇，将介绍NodeJs events模块相关的基本操作。</p><blockquote><p>大多数 Node.js 核心 API 构建于惯用的异步事件驱动架构，其中某些类型的对象（又称触发器，Emitter）会触发命名事件来调用函数（又称监听器，Listener）。</p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>使用事件监听器一般包含以下操作：</p><ol><li>新建事件监听器实例</li><li>设置监听函数</li><li>触发事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>); <span class="comment">// 引用模块</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125; <span class="comment">// 初始化监听器</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'event'</span>, () =&gt; &#123; <span class="comment">// 设置监听函数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'an event occurred!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'event'</span>); <span class="comment">// 触发事件</span></div></pre></td></tr></table></figure><p>以上例程会输出<code>an event occurred!</code></p><h2 id="一次性事件监听"><a href="#一次性事件监听" class="headerlink" title="一次性事件监听"></a>一次性事件监听</h2><p>上文中的监听方式<code>事件触发几次</code>就会<code>输出几次an event occurred!</code>，有些事件可能是一次性的。这时候可以使用<code>once</code>监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>); <span class="comment">// 引用模块</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125; <span class="comment">// 初始化监听器</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'event'</span>, () =&gt; &#123; <span class="comment">// 设置监听函数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'an event occurred!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'event'</span>); <span class="comment">// 触发事件</span></div><div class="line">myEmitter.emit(<span class="string">'event'</span>); <span class="comment">// 触发事件</span></div></pre></td></tr></table></figure><p>以上例程会输出<code>1次</code> <code>an event occurred!</code>;</p><h2 id="同一事件多次监听"><a href="#同一事件多次监听" class="headerlink" title="同一事件多次监听"></a>同一事件多次监听</h2><p>上文中的监听方式都是只有<code>1个</code>监听函数，通过<code>多次调用on</code>可以设置多个监听函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'event'</span>, () =&gt; &#123; <span class="comment">// 监听器1</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器1收到事件'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'event'</span>, () =&gt; &#123; <span class="comment">// 监听器2</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器2收到事件'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'event'</span>); <span class="comment">// 触发事件</span></div></pre></td></tr></table></figure><p>以上例程会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">监听器1收到事件</div><div class="line">监听器2收到事件</div></pre></td></tr></table></figure><h2 id="接收事件参数"><a href="#接收事件参数" class="headerlink" title="接收事件参数"></a>接收事件参数</h2><ol><li><code>emit</code>函数的第一个值为<code>事件名</code>,<code>后续参数为事件值</code></li><li><code>on</code>和<code>once</code>等监听器设置函数的回调函数收到的值<code>为emit传入的事件参数</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'event'</span>, (param1,param2,param3) =&gt; &#123; <span class="comment">// 接收事件参数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'收到事件'</span>,param1,param2,param3);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'event'</span>,<span class="string">'参数1'</span>,<span class="string">'参数2'</span>,&#123;<span class="attr">name</span>:<span class="string">'参数3'</span>&#125;); <span class="comment">// 发送事件参数</span></div></pre></td></tr></table></figure><p>以上例程会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">收到事件 参数1 参数2 &#123; name: &apos;参数3&apos; &#125;</div></pre></td></tr></table></figure><h2 id="获取事件监听器上所有事件"><a href="#获取事件监听器上所有事件" class="headerlink" title="获取事件监听器上所有事件"></a>获取事件监听器上所有事件</h2><p>使用<code>eventNames()实例方法</code>获取监听器上所有事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'event'</span>, (param1,param2,param3) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'收到事件'</span>,param1,param2,param3);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'event2'</span>,() =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'收到事件2'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(myEmitter.eventNames());</div></pre></td></tr></table></figure><p>以上例程输出<code>[ &#39;event&#39;, &#39;event2&#39; ]</code></p><h2 id="移除事件监听器"><a href="#移除事件监听器" class="headerlink" title="移除事件监听器"></a>移除事件监听器</h2><p>使用<code>off实例方法</code>移除单个监听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line"><span class="keyword">const</span> callback = <span class="function">(<span class="params">param1</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(param1);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'event'</span>, callback); <span class="comment">// 添加监听器</span></div><div class="line"></div><div class="line">myEmitter.off(<span class="string">'event'</span>, callback); <span class="comment">// 移除监听器</span></div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'event'</span>); <span class="comment">// 触发事件</span></div></pre></td></tr></table></figure><p>以上例程<code>没有输出</code>，因为<code>先添加监听器，随后移除，触发事件时已经没有可用的监听器了</code></p><h2 id="移除所有监听器"><a href="#移除所有监听器" class="headerlink" title="移除所有监听器"></a>移除所有监听器</h2><p>使用<code>removeAllListeners([eventName])实例方法移除所有监听器</code>。</p><ol><li>removeAllListener<code>不传参数</code>时移除该<code>emitter实例</code>上<code>所有</code>事件监听器</li><li>removeAllListener传入<code>字符串</code>参数时移除该<code>emitter实例</code>上<code>所有该事件</code>的监听器</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>事件系统是NodeJs的灵魂，在几乎所有的I/O模块都有使用，希望各位读者好好掌握。事件模块读后有疑问请加微信群讨论。</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(6)</title>
    <link href="https//www.ddhigh.com/2019/07/21/nodejs-guide-crypto.html"/>
    <id>https//www.ddhigh.com/2019/07/21/nodejs-guide-crypto.html</id>
    <published>2019-07-21T02:25:22.000Z</published>
    <updated>2019-07-23T06:14:56.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第六篇，将介绍NodeJs crypto模块相关的基本操作。</p><blockquote><p>crypto 模块提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。</p></blockquote><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><blockquote><p>Hash类是用于创建数据哈希值的工具类。</p></blockquote><p>哈希算法严格来说并不属于加密算法，传统意义上的 <strong>加密</strong> 是与 <strong>解密</strong> 相配对的。哈希算法能够保证被哈希的内容不被篡改。针对任意长度的输入数据都可以产生固定位数的哈希值。</p><p>crypto模块对hash的操作是一致的，除了算法名不一致之外，本文以 <strong>md5</strong> 和 <strong>sha1</strong> 作为示例。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>); <span class="comment">// 创建MD5 hash示例</span></div><div class="line"></div><div class="line">hash.update(<span class="string">'111111'</span>); <span class="comment">// 待计算hash的数据</span></div><div class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">'hex'</span>));</div></pre></td></tr></table></figure><p>以上例程输出 <code>96e79218965eb72c92a549dd5a330112</code></p><h3 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> hash = crypto.createHash(<span class="string">'sha1'</span>); <span class="comment">// 创建MD5 hash示例</span></div><div class="line"></div><div class="line">hash.update(<span class="string">'111111'</span>); <span class="comment">// 待计算hash的数据</span></div><div class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">'hex'</span>));</div></pre></td></tr></table></figure><p>以上例程输出 <code>3d4f2bf07dc1be38b20cd6e46949a1071f9d0e3d</code></p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p><code>Base64</code>并不是<code>crypto</code>模块的成员，但是跟本节内容比较相近，所以放过来了。Base64是一套编码算法，常用在二进制数据编码上。</p><h3 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = <span class="string">'111111'</span>;</div><div class="line"><span class="keyword">const</span> encodedData = Buffer.from(data, <span class="string">'utf8'</span>).toString(<span class="string">'base64'</span>); <span class="comment">// 输入编码为utf8,输出为base64</span></div><div class="line"><span class="built_in">console</span>.log(encodedData);</div></pre></td></tr></table></figure><p>以上例程输出 <code>MTExMTEx</code></p><h3 id="Base64解码"><a href="#Base64解码" class="headerlink" title="Base64解码"></a>Base64解码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = <span class="string">'MTExMTEx'</span>;</div><div class="line"><span class="keyword">const</span> decodedData = Buffer.from(data, <span class="string">'base64'</span>).toString(<span class="string">'utf8'</span>); <span class="comment">// 输入编码为base64,输出编码为utf8</span></div><div class="line"><span class="built_in">console</span>.log(decodedData);</div></pre></td></tr></table></figure><p>以上例程输出<code>111111</code></p><h2 id="Hmac"><a href="#Hmac" class="headerlink" title="Hmac"></a>Hmac</h2><blockquote><p>Hmac类是用于创建加密Hmac摘要的工具。</p></blockquote><p>Hmac算法也是一种hash算法，但是它需要一个密钥，针对同样的输入，传统的hash算法输出是固定的。<br>但是Hmac的输出会随着密钥的不同而不同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> hmac = crypto.createHmac(<span class="string">'sha256'</span>, <span class="string">'secret-key'</span>);</div><div class="line"></div><div class="line">hmac.update(<span class="string">'Hello, world!'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(hmac.digest(<span class="string">'hex'</span>));</div></pre></td></tr></table></figure><p>以上例程输出 <code>f4d850b1017eb4e20e0c58443919033c90cc9f4fe889b4d6b4572a4a0ec2d08a</code></p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><blockquote><p>AES是一种常用的对称加密算法，加解密都用同一个密钥。</p></blockquote><h3 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">'aes192'</span>, <span class="string">'111111111111111111111111'</span>, <span class="string">'1111111111111111'</span>)</div><div class="line"><span class="keyword">var</span> crypted = cipher.update(<span class="string">'1'</span>, <span class="string">'utf8'</span>, <span class="string">'hex'</span>); </div><div class="line">crypted += cipher.final(<span class="string">'hex'</span>);</div><div class="line"><span class="built_in">console</span>.log(crypted);</div></pre></td></tr></table></figure><p>以上例程输出 <code>5bb3e6eb39e502b5fa74d93796087efa</code></p><p><strong>说明：</strong></p><p><code>createCipheriv</code>原型如下：</p><p><code>crypto.createCipheriv（algorithm，key，iv [，options]）</code></p><ol><li><code>iv</code>是初始化向量，可以 <strong>为空</strong> 或者 <strong>16</strong> 字节的字符串</li><li><code>key</code>是加密密钥，根据选用的算法不同，密钥长度也不同，对应关系如下：<ol><li><code>aes128</code>对应<code>16位</code>长度密钥</li><li><code>aes192</code>对应<code>24位</code>长度秘钥</li><li><code>aes256</code>对应<code>32位</code>长度密钥</li></ol></li></ol><h3 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> cipher = crypto.createDecipheriv(<span class="string">'aes192'</span>, <span class="string">'111111111111111111111111'</span>, <span class="string">'1111111111111111'</span>)</div><div class="line"><span class="keyword">var</span> data = cipher.update(<span class="string">'5bb3e6eb39e502b5fa74d93796087efa'</span>, <span class="string">'hex'</span>, <span class="string">'utf8'</span>); <span class="comment">// 输入数据编码为hex(16进制)，输出为utf8</span></div><div class="line">data += cipher.final(<span class="string">'utf8'</span>);</div><div class="line"><span class="built_in">console</span>.log(data);</div></pre></td></tr></table></figure><p>以上例程输出<code>1</code></p><p><code>crypto.createDecipheriv</code>方法原型与<code>crypto.createCipher</code>一致，这里不在赘述。</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><blockquote><p>RSA算法是一种非对称加密算法，即由一个私钥和一个公钥构成的密钥对，通过私钥加密，公钥解密，或者通过公钥加密，私钥解密。其中，公钥可以公开，私钥必须保密。</p></blockquote><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><p>使用RSA算法前必须提供密钥对，本文使用<code>openssl</code>命令进行生成。</p><ol><li><code>openssl genrsa -out private.pem 2048</code> 生成<code>2048位</code>长度的<code>私钥</code></li><li><code>openssl rsa -in private.pem -pubout -out public.pem</code> 导出公钥</li></ol><p>这样在当前目录我们就得到了<code>private.pem</code>和<code>public.pem</code></p><h3 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> privateKey = fs.readFileSync(<span class="string">'./private.pem'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> encodedData = crypto.privateEncrypt(privateKey, Buffer.from(<span class="string">'111111'</span>,<span class="string">'utf8'</span>)); <span class="comment">// 传入utf8编码的数据</span></div><div class="line"><span class="built_in">console</span>.log(encodedData.toString(<span class="string">'hex'</span>));</div></pre></td></tr></table></figure><p>以上例程输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">44a1b50b9639e4cbe17d55ca57dcb041387acadae3d3721fd9803a3a33091a36d59977feaa6caad990e58b9542c26297de6014e20819f0a71eadd0793bfe0fac834f30d2a05f8b329a3b2409e9f8b7fbd7de3734ada00228b84027568be58a2a34ccf0c4a8b2d02c58eef510931423ed5f40c696361b606df11609248b271aebcd17f9a113f98a8fa86c9c45bd609256f4779ce01ea3027171fffb35e695f1c38553aecafb72a2f46a9012246fde0f2934eacba8932bca38e228f4f4294873ed75d9acf79ab854897ebaab2375384b2da682c1b2e2b49b0592929067b3d5a11971d912629a178691345f7f88137343588b5c51d60643e5c00998484727b8c4a8</div></pre></td></tr></table></figure><h3 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> publicKey = fs.readFileSync(<span class="string">'./public.pem'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> encodedData = <span class="string">'44a1b50b9639e4cbe17d55ca57dcb041387acadae3d3721fd9803a3a33091a36d59977feaa6caad990e58b9542c26297de6014e20819f0a71eadd0793bfe0fac834f30d2a05f8b329a3b2409e9f8b7fbd7de3734ada00228b84027568be58a2a34ccf0c4a8b2d02c58eef510931423ed5f40c696361b606df11609248b271aebcd17f9a113f98a8fa86c9c45bd609256f4779ce01ea3027171fffb35e695f1c38553aecafb72a2f46a9012246fde0f2934eacba8932bca38e228f4f4294873ed75d9acf79ab854897ebaab2375384b2da682c1b2e2b49b0592929067b3d5a11971d912629a178691345f7f88137343588b5c51d60643e5c00998484727b8c4a8'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> rawData = crypto.publicDecrypt(publicKey, Buffer.from(encodedData, <span class="string">'hex'</span>)); <span class="comment">// 传入hex(16进制)数据</span></div><div class="line"><span class="built_in">console</span>.log(rawData.toString(<span class="string">'utf8'</span>));</div></pre></td></tr></table></figure><p>以上例程输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">111111</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>常用的加解密、哈希、编解码用法已经介绍完毕，读后有疑问请加微信群讨论。</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(5)</title>
    <link href="https//www.ddhigh.com/2019/07/20/nodejs-guide-path.html"/>
    <id>https//www.ddhigh.com/2019/07/20/nodejs-guide-path.html</id>
    <published>2019-07-20T05:00:27.000Z</published>
    <updated>2019-07-23T06:14:56.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第五篇，将介绍NodeJs path模块相关的基本操作。</p><blockquote><p>path 模块提供用于处理文件路径和目录路径的实用工具。 </p></blockquote><p><strong>注意：path模块只是处理文件路径，说白了就是字符串处理，跟文件系统无关</strong></p><h2 id="读取路径的文件名"><a href="#读取路径的文件名" class="headerlink" title="读取路径的文件名"></a>读取路径的文件名</h2><blockquote><p>path.basename() 方法返回 path 的最后一部分，类似于 Unix 的 basename 命令。 尾部的目录分隔符将被忽略。</p></blockquote><ol><li><p>返回带扩展名</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.basename(<span class="string">'/usr/local/a.txt'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出 a.txt</span></div></pre></td></tr></table></figure></li><li><p>返回不带扩展名</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.basename(<span class="string">'/usr/local/a.txt'</span>,<span class="string">'.txt'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出 a</span></div></pre></td></tr></table></figure></li></ol><h2 id="读取文件路径的目录名"><a href="#读取文件路径的目录名" class="headerlink" title="读取文件路径的目录名"></a>读取文件路径的目录名</h2><blockquote><p>path.dirname() 方法返回 path 的目录名，类似于 Unix 的 dirname 命令。 尾部的目录分隔符将被忽略。<br>path.extname() 方法返回 path 的扩展名，从最后一次出现 .（句点）字符到 path 最后一部分的字符串结束。 如果在 path 的最后一部分中没有 . ，或者如果 path 的基本名称（参阅 path.basename()）除了第一个字符以外没有 .，则返回空字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.dirname(<span class="string">'/usr/local/a.txt'</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出 /usr/local</span></div></pre></td></tr></table></figure><h2 id="获取文件扩展名"><a href="#获取文件扩展名" class="headerlink" title="获取文件扩展名"></a>获取文件扩展名</h2><blockquote><p>path.extname() 方法返回 path 的扩展名，从最后一次出现 .（句点）字符到 path 最后一部分的字符串结束。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.extname(<span class="string">'/usr/local/a.txt'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 输出 .txt</span></div></pre></td></tr></table></figure><h2 id="检测路径是否为绝对路径"><a href="#检测路径是否为绝对路径" class="headerlink" title="检测路径是否为绝对路径"></a>检测路径是否为绝对路径</h2><blockquote><p>path.isAbsolute() 方法检测 path 是否为绝对路径。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// linux || macosx</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'/usr/local'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'usr/local'</span>)); <span class="comment">// 输出 false</span></div><div class="line"><span class="comment">// windows</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'//server'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'\\\\server'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'c:\windows'</span>)); <span class="comment">// 输出 true</span></div><div class="line"><span class="built_in">console</span>.log(path.isAbsolute(<span class="string">'foo/bar'</span>)); <span class="comment">// 输出 false</span></div></pre></td></tr></table></figure><h2 id="生成规范化的路径"><a href="#生成规范化的路径" class="headerlink" title="生成规范化的路径"></a>生成规范化的路径</h2><blockquote><p>path.join() 方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。<br>零长度的 path 片段会被忽略。 如果连接的路径字符串是零长度的字符串，则返回 ‘.’，表示当前工作目录。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.join(<span class="string">'/a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'..'</span>)); <span class="comment">// 输出 /a/b</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.join(<span class="string">'.'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'..'</span>,<span class="string">'c'</span>)); <span class="comment">// 输出 a/c</span></div></pre></td></tr></table></figure><h2 id="解析路径"><a href="#解析路径" class="headerlink" title="解析路径"></a>解析路径</h2><blockquote><p>path.parse() 方法返回一个对象，其属性表示 path 的重要元素。 尾部的目录分隔符将被忽略。<br>返回对象属性如下：<br>dir 目录<br>root 根目录<br>base 带扩展名的文件名或者目录名(最后一级是目录的情况下)<br>name 文件名(不带扩展名)或目录名<br>ext 文件扩展名(如果是目录则为空字符串)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line">path.parse(<span class="string">'/home/user/dir/file.txt'</span>);</div><div class="line"><span class="comment">// 返回:</span></div><div class="line"><span class="comment">// &#123; root: '/',</span></div><div class="line"><span class="comment">//   dir: '/home/user/dir',</span></div><div class="line"><span class="comment">//   base: 'file.txt',</span></div><div class="line"><span class="comment">//   ext: '.txt',</span></div><div class="line"><span class="comment">//   name: 'file' &#125;</span></div></pre></td></tr></table></figure><h2 id="获取两个路径的相对路径"><a href="#获取两个路径的相对路径" class="headerlink" title="获取两个路径的相对路径"></a>获取两个路径的相对路径</h2><blockquote><p>path.relative() 方法根据当前工作目录返回 from 到 to 的相对路径。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>)); </div><div class="line"><span class="comment">// 输出 ../../impl/bbb</span></div></pre></td></tr></table></figure><h2 id="获取规范化的绝对路径"><a href="#获取规范化的绝对路径" class="headerlink" title="获取规范化的绝对路径"></a>获取规范化的绝对路径</h2><blockquote><p>path.resolve() 方法将路径或路径片段的序列解析为绝对路径。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>)); <span class="comment">// 输出 /for/bar/baz</span></div><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>);); <span class="comment">// 输出 /tmp/file</span></div><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'../c/img.gif'</span>));</div><div class="line"><span class="comment">// 假设当前工作目录 /home/wwwroot，上述语句输出 /home/wwwroot/a/c/img.gif</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(path.resolve()); <span class="comment">// 假设当前工作目录 /home/wwwroot 输出 /home/wwwroot</span></div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>path</code>模块的主要就是处理路径相关，经常和<code>fs</code>模块共同使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(4)</title>
    <link href="https//www.ddhigh.com/2019/07/20/nodejs-guide-filesystem.html"/>
    <id>https//www.ddhigh.com/2019/07/20/nodejs-guide-filesystem.html</id>
    <published>2019-07-20T03:38:51.000Z</published>
    <updated>2019-07-23T06:14:56.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的第四篇，将介绍NodeJs文件系统模块相关的基本操作。</p><blockquote><p>fs 模块提供了一个 API，用于以模仿标准 POSIX 函数的方式与文件系统进行交互。</p></blockquote><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>文件系统的大部分函数都存在 <strong>异步调用</strong> 和 <strong>同步调用</strong> 两种形式。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步模式下，回调函数的第一个参数总为 <strong>Error</strong> 对象，且函数一般无返回值。</p><ol><li>如果为null，则本次调用未出错</li><li>如果不为null，证明本次调用出错</li></ol><p>新建 <code>index.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'./index.js'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;, (err, data) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'读取文件失败'</span>, err);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><code>readFile</code>的第二个参数如果不指定编码，回调函数取到的<code>data</code>对象是<code>Buffer</code>，需要手动转字符串。读取文本文件可以指定编码，但是读取二进制文件(<code>比如读取图片文件</code>)</p><ol><li>在当前目录执行 <code>node index.js</code></li><li><p>输出如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.readFile(&apos;./index.js&apos;, &#123; encoding: &apos;utf8&apos; &#125;, (err, data) =&gt; &#123;</div><div class="line">    if (err) &#123;</div><div class="line">        console.error(&apos;读取文件失败&apos;, err);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    console.log(data);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ol><h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><p>同步模式下，返回值为调用函数的结果，如果调用失败，将抛出<strong>Error</strong>对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> data = fs.readFileSync(<span class="string">'./index.js'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>, e)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出数据和同步模式一致。</p><p>可以看到同步模式和异步模式下处理错误的方式是不同的。</p><blockquote><p>各位读者在生产中尽量不要使用同步函数，否则会阻塞事件循环。<br>当然，有一种情况例外，需要同步读取配置文件然后才启动服务器的这种情况是可以的。</p></blockquote><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>新建<code>index.js</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> data = <span class="string">'Hello World'</span>;</div><div class="line"></div><div class="line">fs.writeFile(<span class="string">'./a.txt'</span>, data, (error) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'保存失败'</span>, error);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ol><li>执行<code>node index.js</code></li><li>输出<code>保存成功</code>，同时当前目录会多出内容为<code>Hello World</code>的文本文件。</li></ol><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ol><li><code>fs.copyFile(src,dest[,flags],callback)</code> 复制文件</li><li><code>fs.stat(path[,options],callback)</code> 读取文件状态</li><li><code>fs.unlink(path,callback)</code> 删除文件</li><li><code>fs.rename(oldPath,newPath,callback)</code> 重命名文件</li><li><code>fs.mkdir(path[,options],callback)</code> 新建目录</li><li><code>fs.rmdir(path,callback)</code> 删除目录</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文件系统的学习暂时到此为止，用到的时候大家可以详细查看文件，文件系统的函数调用方式和本文的示例都是类似的，各位读者可以举一反三。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
</feed>
