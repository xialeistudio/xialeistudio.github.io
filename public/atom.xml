<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2020-03-18T03:29:08.945Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack4不求人(5)——编写自定义插件</title>
    <link href="https//www.ddhigh.com/2020/03/18/webpack-plugin-development.html"/>
    <id>https//www.ddhigh.com/2020/03/18/webpack-plugin-development.html</id>
    <published>2020-03-18T04:00:00.000Z</published>
    <updated>2020-03-18T03:29:08.945Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.ddhigh.com/blog/2020-03-18-032856.png" alt></p><p>Webpack通过Loader完成模块的转换工作，让“一切皆模块”成为可能。Plugin机制则让其更加灵活，可以在Webpack生命周期中调用钩子完成各种任务，包括修改输出资源、输出目录等等。</p><p>今天我们一起来学习如何编写Webpack插件。</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>在编写插件之前，还需要了解一下Webpack的构建流程，以便在合适的时机插入合适的插件逻辑。Webpack的基本构建流程如下：</p><ol><li>校验配置文件</li><li>生成Compiler对象</li><li>初始化默认插件</li><li>run/watch：如果运行在watch模式则执行watch方法，否则执行run方法</li><li>compilation：创建Compilation对象回调compilation相关钩子</li><li>emit：文件内容准备完成，准备生成文件，这是最后一次修改最终文件的机会</li><li>afterEmit：文件已经写入磁盘完成</li><li>done：完成编译</li></ol><h2 id="插件示例"><a href="#插件示例" class="headerlink" title="插件示例"></a>插件示例</h2><p>一个典型的Webpack插件代码如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 插件代码</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebpackPlugin</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    <span class="hljs-comment">// 在emit阶段插入钩子函数</span></span><br><span class="line">    compiler.hooks.emit.tap(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = MyWebpackPlugin;</span><br></pre></td></tr></table></figure><p>接下来需要在webpack.config.js中引入这个插件。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-comment">// 传入插件实例</span></span><br><span class="line">    <span class="hljs-keyword">new</span> MyWebpackPlugin(&#123;</span><br><span class="line">      param:<span class="hljs-string">'paramValue'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Webpack在启动时会实例化插件对象，在初始化compiler对象之后会调用插件实例的apply方法，传入compiler对象，插件实例在apply方法中会注册感兴趣的钩子，Webpack在执行过程中会根据构建阶段回调相应的钩子。</p><h2 id="Compiler-amp-amp-Compilation对象"><a href="#Compiler-amp-amp-Compilation对象" class="headerlink" title="Compiler &amp;&amp; Compilation对象"></a>Compiler &amp;&amp; Compilation对象</h2><p>在编写Webpack插件过程中，最常用也是最主要的两个对象就是Webpack提供的Compiler和Compilation，Plugin通过访问Compiler和Compilation对象来完成工作。</p><ul><li>Compiler 对象包含了当前运行Webpack的配置，包括entry、output、loaders等配置，这个对象在启动Webpack时被实例化，而且是全局唯一的。Plugin可以通过该对象获取到Webpack的配置信息进行处理。</li><li>Compilation对象可以理解编译对象，包含了模块、依赖、文件等信息。在开发模式下运行Webpack时，每修改一次文件都会产生一个新的Compilation对象，Plugin可以访问到本次编译过程中的模块、依赖、文件内容等信息。</li></ul><h3 id="常见钩子"><a href="#常见钩子" class="headerlink" title="常见钩子"></a>常见钩子</h3><p>Webpack会根据执行流程来回调对应的钩子，下面我们来看看都有哪些常见钩子，这些钩子支持的tap操作是什么。</p><table><thead><tr><th>钩子</th><th>说明</th><th>参数</th><th>类型</th></tr></thead><tbody><tr><td>afterPlugins</td><td>启动一次新的编译</td><td>compiler</td><td>同步</td></tr><tr><td>compile</td><td>创建compilation对象之前</td><td>compilationParams</td><td>同步</td></tr><tr><td>compilation</td><td>compilation对象创建完成</td><td>compilation</td><td>同步</td></tr><tr><td>emit</td><td>资源生成完成，输出之前</td><td>compilation</td><td>异步</td></tr><tr><td>afterEmit</td><td>资源输出到目录完成</td><td>compilation</td><td>异步</td></tr><tr><td>done</td><td>完成编译</td><td>stats</td><td>同步</td></tr></tbody></table><h2 id="Tapable"><a href="#Tapable" class="headerlink" title="Tapable"></a>Tapable</h2><p>Tapable是Webpack的一个核心工具，Webpack中许多对象扩展自Tapable类。Tapable类暴露了tap、tapAsync和tapPromise方法，可以根据钩子的同步/异步方式来选择一个函数注入逻辑。</p><ul><li>tap 同步钩子</li><li>tapAsync 异步钩子，通过callback回调告诉Webpack异步执行完毕</li><li>tapPromise 异步钩子，返回一个Promise告诉Webpack异步执行完毕</li></ul><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>tap是一个同步钩子，同步钩子在使用时不可以包含异步调用，因为函数返回时异步逻辑有可能未执行完毕导致问题。</p><p>下面一个在compile阶段插入同步钩子的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.compile.tap(<span class="hljs-string">'MyWebpackPlugin'</span>, params =&gt; &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是同步钩子'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapAsync"><a href="#tapAsync" class="headerlink" title="tapAsync"></a>tapAsync</h3><p>tapAsync是一个异步钩子，我们可以通过callback告知Webpack异步逻辑执行完毕。</p><p>下面是一个在emit阶段的示例，在1秒后打印文件列表。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件列表'</span>, <span class="hljs-built_in">Object</span>.keys(compilation.assets).join(<span class="hljs-string">','</span>));</span><br><span class="line">    callback();</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapPromise"><a href="#tapPromise" class="headerlink" title="tapPromise"></a>tapPromise</h3><p>tapPromise也是也是异步钩子，和tapAsync的区别在于tapPromise是通过返回Promise来告知Webpack异步逻辑执行完毕。</p><p>下面是一个将生成结果上传到CDN的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.afterEmit.tapPromise(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> filelist = <span class="hljs-built_in">Object</span>.keys(compilation.assets);</span><br><span class="line">    uploadToCDN(filelist, (err) =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>apply方法中插入钩子的一般形式如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compileer.hooks.阶段.tap函数(<span class="hljs-string">'插件名称'</span>, (阶段回调参数) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="读取输出资源、模块及依赖"><a href="#读取输出资源、模块及依赖" class="headerlink" title="读取输出资源、模块及依赖"></a>读取输出资源、模块及依赖</h3><p>在emit阶段，我们可以读取最终需要输出的资源、chunk、模块和对应的依赖，如果有需要还可以更改输出资源。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apply(compiler) &#123;</span><br><span class="line">  compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// compilation.chunks存放了代码块列表</span></span><br><span class="line">    compilation.chunks.forEach(<span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="hljs-comment">// chunk包含多个模块，通过chunk.modulesIterable可以遍历模块列表 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> <span class="hljs-keyword">of</span> chunk.modulesIterable) &#123;</span><br><span class="line">        <span class="hljs-comment">// module包含多个依赖，通过module.dependencies进行遍历</span></span><br><span class="line">      <span class="hljs-built_in">module</span>.dependencies.forEach(<span class="hljs-function"><span class="hljs-params">dependency</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(dependency);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改输出资源"><a href="#修改输出资源" class="headerlink" title="修改输出资源"></a>修改输出资源</h3><p>通过操作compilation.assets对象，我们可以添加、删除、更改最终输出的资源。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apply(compiler) &#123;</span><br><span class="line">  compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// 修改或添加资源</span></span><br><span class="line">    compilation.assets[<span class="hljs-string">'main.js'</span>]  = &#123;</span><br><span class="line">      source() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'modified content'</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      size() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.source().length;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-comment">// 删除资源</span></span><br><span class="line">    <span class="hljs-keyword">delete</span> compilation.assets[<span class="hljs-string">'main.js'</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assets对象需要定义source和size方法，source方法返回资源的内容，支持字符串和Node.js的Buffer，size返回文件的大小字节数。</p><h2 id="插件编写实例"><a href="#插件编写实例" class="headerlink" title="插件编写实例"></a>插件编写实例</h2><p>接下来我们开始编写自定义插件，所有插件使用的示例项目如下(需要安装webpack和webpack-cli)：</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">|----src</span></span><br><span class="line"><span class="hljs-string">|----main.js</span></span><br><span class="line"><span class="hljs-string">|----plugins</span></span><br><span class="line"><span class="hljs-string">|----my-webpack-plugin.js</span></span><br><span class="line"><span class="hljs-string">|----package.json</span></span><br><span class="line"><span class="hljs-string">|----webpack.config.js</span></span><br></pre></td></tr></table></figure><p>相关文件的内容如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/main.js</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello World'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> MyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'my-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// webpack.config.js</span></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="hljs-string">'./src/main'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">    filename:<span class="hljs-string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> MyWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="生成清单文件"><a href="#生成清单文件" class="headerlink" title="生成清单文件"></a>生成清单文件</h3><p>通过在emit阶段操作compilation.assets实现。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebpackPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> manifest = &#123;&#125;;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> name <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(compilation.assets)) &#123;</span><br><span class="line">                manifest[name] = compilation.assets[name].size();</span><br><span class="line">                <span class="hljs-comment">// 将生成文件的文件名和大小写入manifest对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            compilation.assets[<span class="hljs-string">'manifest.json'</span>] = &#123;</span><br><span class="line">                source() &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(manifest);</span><br><span class="line">                &#125;,</span><br><span class="line">                size() &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.source().length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = MyWebpackPlugin;</span><br></pre></td></tr></table></figure><p>构建完成后会在build目录添加manifest.json，内容如下：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="hljs-attr">"main.js"</span>:<span class="hljs-number">956</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="构建结果上传到七牛"><a href="#构建结果上传到七牛" class="headerlink" title="构建结果上传到七牛"></a>构建结果上传到七牛</h3><p>在实际开发中，资源文件构建完成后一般会同步到CDN，最终前端界面使用的是CDN服务器上的静态资源。</p><p>下面我们编写一个Webpack插件，文件构建完成后上传的七牛CDN。</p><p>我们的插件依赖qiniu，因此需要额外安装qiniu模块</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qiniu --save-dev</span><br></pre></td></tr></table></figure><p>七牛的Node.js SDK文档地址如下：</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="hljs-regexp">//</span>developer.qiniu.com<span class="hljs-regexp">/kodo/</span>sdk<span class="hljs-regexp">/1289/</span>nodejs</span><br></pre></td></tr></table></figure><p>开始编写插件代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> qiniu = <span class="hljs-built_in">require</span>(<span class="hljs-string">'qiniu'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebpackPlugin</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 七牛SDK mac对象</span></span><br><span class="line">    mac = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">      <span class="hljs-comment">// 读取传入选项</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.options = options || &#123;&#125;;</span><br><span class="line">      <span class="hljs-comment">// 检查选项中的参数</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.checkQiniuConfig();</span><br><span class="line">      <span class="hljs-comment">// 初始化七牛mac对象</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.mac = <span class="hljs-keyword">new</span> qiniu.auth.digest.Mac(</span><br><span class="line">            <span class="hljs-keyword">this</span>.options.qiniu.accessKey,</span><br><span class="line">            <span class="hljs-keyword">this</span>.options.qiniu.secretKey</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    checkQiniuConfig() &#123;</span><br><span class="line">        <span class="hljs-comment">// 配置未传qiniu，读取环境变量中的配置</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.options.qiniu) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.options.qiniu = &#123;</span><br><span class="line">                accessKey: process.env.QINIU_ACCESS_KEY,</span><br><span class="line">                secretKey: process.env.QINIU_SECRET_KEY,</span><br><span class="line">                bucket: process.env.QINIU_BUCKET,</span><br><span class="line">                keyPrefix: process.env.QINIU_KEY_PREFIX || <span class="hljs-string">''</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">const</span> qiniu = <span class="hljs-keyword">this</span>.options.qiniu;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!qiniu.accessKey || !qiniu.secretKey || !qiniu.bucket) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'invalid qiniu config'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.afterEmit.tapPromise(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="hljs-comment">// 总上传数量</span></span><br><span class="line">                <span class="hljs-keyword">const</span> uploadCount = <span class="hljs-built_in">Object</span>.keys(compilation.assets).length;</span><br><span class="line">                <span class="hljs-comment">// 已上传数量</span></span><br><span class="line">                <span class="hljs-keyword">let</span> currentUploadedCount = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-comment">// 七牛SDK相关参数</span></span><br><span class="line">                <span class="hljs-keyword">const</span> putPolicy = <span class="hljs-keyword">new</span> qiniu.rs.PutPolicy(&#123; <span class="hljs-attr">scope</span>: <span class="hljs-keyword">this</span>.options.qiniu.bucket &#125;);</span><br><span class="line">                <span class="hljs-keyword">const</span> uploadToken = putPolicy.uploadToken(<span class="hljs-keyword">this</span>.mac);</span><br><span class="line">                <span class="hljs-keyword">const</span> config = <span class="hljs-keyword">new</span> qiniu.conf.Config();</span><br><span class="line">                config.zone = qiniu.zone.Zone_z1;</span><br><span class="line">                <span class="hljs-keyword">const</span> formUploader = <span class="hljs-keyword">new</span> qiniu.form_up.FormUploader()</span><br><span class="line">                <span class="hljs-keyword">const</span> putExtra = <span class="hljs-keyword">new</span> qiniu.form_up.PutExtra();</span><br><span class="line"><span class="hljs-comment">// 因为是批量上传，需要在最后将错误对象回调</span></span><br><span class="line">                <span class="hljs-keyword">let</span> globalError = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">              <span class="hljs-comment">// 遍历编译资源文件</span></span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> filename <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(compilation.assets)) &#123;</span><br><span class="line">                    <span class="hljs-comment">// 开始上传</span></span><br><span class="line">                    formUploader.putFile(</span><br><span class="line">                        uploadToken,</span><br><span class="line">                        <span class="hljs-keyword">this</span>.options.qiniu.keyPrefix + filename,</span><br><span class="line">                        path.resolve(compilation.outputOptions.path, filename),</span><br><span class="line">                        putExtra,</span><br><span class="line">                        (err) =&gt; &#123;</span><br><span class="line">                            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`uploade <span class="hljs-subst">$&#123;filename&#125;</span> result: <span class="hljs-subst">$&#123;err ? <span class="hljs-string">`Error:<span class="hljs-subst">$&#123;err.message&#125;</span>`</span> : <span class="hljs-string">'Success'</span>&#125;</span>`</span>)</span><br><span class="line">                            currentUploadedCount++;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">                                globalError = err;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (currentUploadedCount === uploadCount) &#123;</span><br><span class="line">                                globalError ? reject(globalError) : resolve();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = MyWebpackPlugin;</span><br></pre></td></tr></table></figure><p>Webpack中需要传递给该插件传递相关配置：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">    target: <span class="hljs-string">'node'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">        filename: <span class="hljs-string">'[name].js'</span>,</span><br><span class="line">      publicPath: <span class="hljs-string">'CDN域名'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="hljs-keyword">new</span> QiniuWebpackPlugin(&#123;</span><br><span class="line">            qiniu: &#123;</span><br><span class="line">                accessKey: <span class="hljs-string">'七牛AccessKey'</span>,</span><br><span class="line">                secretKey: <span class="hljs-string">'七牛SecretKey'</span>,</span><br><span class="line">                bucket: <span class="hljs-string">'static'</span>,</span><br><span class="line">                keyPrefix: <span class="hljs-string">'webpack-inaction/demo1/'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译完成后资源会自动上传到七牛CDN，这样前端只用交付index.html即可。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，Webpack相关常用知识和进阶知识都介绍完毕，需要各位读者在工作中去多加探索，Webpack配合Node.js生态，一定会涌现出更多优秀的新语言和新工具！</p><p><img src="https://static.ddhigh.com/blog/2020-03-11-060831.png" alt="0"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2020-03-18-032856.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Webpack通过Loader完成模块的转换工作，让“一切皆模块”成为可能。Plugin机制则让其更加灵活，可以在Webp
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(4)——编写自定义Loader</title>
    <link href="https//www.ddhigh.com/2020/03/11/webpack-loader-development.html"/>
    <id>https//www.ddhigh.com/2020/03/11/webpack-loader-development.html</id>
    <published>2020-03-11T04:00:00.000Z</published>
    <updated>2020-03-11T06:09:10.617Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的内容中，我们学习了Webpack的基本知识、常用脚手架和性能优化，虽然说大部分的开发场景社区已经又成熟的模块给我们使用，但是遇到特殊情况还是需要自己有独立开发的能力，因此今天我们一起来学习如何编写自定义Loader。</p><h2 id="基本Loader"><a href="#基本Loader" class="headerlink" title="基本Loader"></a>基本Loader</h2><p>Webpack中loader是一个CommonJs风格的函数，接收输入的源码，通过同步或异步的方式替换源码后进行输出。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source, sourceMap, meta</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>source是输入的内容</li><li>sourceMap是可选的</li><li>meta是模块的元数据，也是可选的</li></ul><p>需要注意的是，该导出函数必须使用function，不能使用箭头函数，因为loader编写过程中会经常使用到<code>this</code>访问选项和其他方法。</p><p>我们先编写一个基本的Loader，完成的工作很简单，那就是把输出的字符串进行替换。</p><p>1.新建loader-example目录，执行npm初始化，并安装webpack</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir loader-example</span><br><span class="line"><span class="hljs-built_in">cd</span> loadeer-example</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli</span><br></pre></td></tr></table></figure><p>2.构建项目目录</p><figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|<span class="hljs-params">----loader</span> <span class="hljs-comment"># loader目录</span></span><br><span class="line">|<span class="hljs-params">----replace-loader</span>.js <span class="hljs-comment"># 替换字符串的Loader</span></span><br><span class="line">|<span class="hljs-params">----src</span>   <span class="hljs-comment"># 应用源码</span></span><br><span class="line">|<span class="hljs-params">----index</span>.js <span class="hljs-comment"># 首页</span></span><br><span class="line">|<span class="hljs-params">----package</span>.json</span><br><span class="line">|<span class="hljs-params">----webpack</span>.config.js</span><br></pre></td></tr></table></figure><p>3.编写loader/replace-loader.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> source.replace(<span class="hljs-regexp">/World/g</span>, <span class="hljs-string">'Loader'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本例中我们Loader只是简单的将源码中的”World“替换成了”Loader“。</p><p>4.编写src/index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello World'</span>);</span><br></pre></td></tr></table></figure><p>5.编写webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">  target: <span class="hljs-string">'node'</span>, <span class="hljs-comment">// 我们编译为Node.js环境下的JS，等下直接使用Node.js执行编译完成的文件</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">    filename: <span class="hljs-string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="hljs-string">'replace-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">  modules: [<span class="hljs-string">'./node_modules'</span>, <span class="hljs-string">'./loader'</span>] <span class="hljs-comment">// 配置loader的查找目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.编写package.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.执行构建</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>8.构建完成后，执行build/main.js</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node build/main.js</span><br></pre></td></tr></table></figure><p>此时终端输出如下，我们编写的Loader工作正常。</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Hello Loader</span></span><br></pre></td></tr></table></figure><h2 id="Loader选项"><a href="#Loader选项" class="headerlink" title="Loader选项"></a>Loader选项</h2><p>我们使用第三方loader时经常可以看到传递选项的情况：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">  use:[</span><br><span class="line">    &#123;</span><br><span class="line">      loader:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        plugins:[<span class="hljs-string">'@babel/transform-runtime'</span>],</span><br><span class="line">        presets:[<span class="hljs-string">'@babel/env'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Loader编写时，Webpack中官方推荐通过loader-utils来读取配置选项，我们需要先安装。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install loader-utils</span><br></pre></td></tr></table></figure><p>我们给刚才编写的replace-loader传递一个选项，允许自定义替换结果。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">'loader-utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">const</span> options = loaderUtils.getOptions(<span class="hljs-keyword">this</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> source.replace(<span class="hljs-regexp">/World/g</span>, options.text);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来编辑webpack.config.js，给replace-loader传递选项。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          &#123;</span><br><span class="line">            loader:<span class="hljs-string">'replace-loader'</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">              text: <span class="hljs-string">'Webpack4'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolveLoader:&#123;</span><br><span class="line">    modules: [<span class="hljs-string">'./node_modules'</span>, <span class="hljs-string">'./loader'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行构建之后用Node.js执行build/main.js，可以看到输出的内容已经发生变化了。</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Hello</span> Webpack4</span><br></pre></td></tr></table></figure><h2 id="异步Loader"><a href="#异步Loader" class="headerlink" title="异步Loader"></a>异步Loader</h2><p>在Loader中，如果存在异步调用，那么就无法直接通过return返回构建后的结果了，此时需要使用到Webpack提供的回调函数将数据进行回调。</p><p>Webpack4给Loader提供了<code>this.async()</code>函数，调用之后返回一个callback，callback的签名如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  err: Error|null,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  content: string|Buffer,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  sourceMap?:SourceMap,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  meta?: any</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"></span>)</span></span><br></pre></td></tr></table></figure><p>例如我们需要在loader中调用setTimeout进行等待，则相应的代码如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> callback = <span class="hljs-keyword">this</span>.async();</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> output = source.replace(<span class="hljs-regexp">/World/g</span>, <span class="hljs-string">'Webpack4'</span>);</span><br><span class="line">    callback(<span class="hljs-literal">null</span>, output);</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行构建，Webpack会等待一秒，然后再输出构建内容，通过Node.js执行构建后的文件，输出如下</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Hello</span> Webpack4</span><br></pre></td></tr></table></figure><h2 id="“Raw”-Loader"><a href="#“Raw”-Loader" class="headerlink" title="“Raw” Loader"></a>“Raw” Loader</h2><p>默认情况下，资源文件会被转化为 UTF-8 字符串，然后传给 loader。通过设置 <code>raw</code>，loader 可以接收原始的 <code>Buffer</code>。比如处理非文本文件时(如图片等等)。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">  assert(source <span class="hljs-keyword">instanceof</span> Buffer);</span><br><span class="line">  <span class="hljs-keyword">return</span> someSyncOperation(source);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">module</span>.exports.raw = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 设置当前Loader为raw loader, webpack会将原始的Buffer对象传入</span></span><br></pre></td></tr></table></figure><h2 id="读取loader配置文件"><a href="#读取loader配置文件" class="headerlink" title="读取loader配置文件"></a>读取loader配置文件</h2><p>babel-loader在使用时可以加载.babelrc配置文件来配置plugins和presets，减少了webpack.config.js的代码量，便于维护。接下来我们编写一个i18n-loader，通过读取语言配置文件完成语言转换。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|<span class="hljs-params">----loader</span></span><br><span class="line">|<span class="hljs-params">----i18n-loader</span>.js <span class="hljs-comment"># loader</span></span><br><span class="line">|<span class="hljs-params">----i18n</span></span><br><span class="line">|<span class="hljs-params">----zh</span>.json <span class="hljs-comment"># 中文语言包</span></span><br><span class="line">|<span class="hljs-params">----src</span></span><br><span class="line">|<span class="hljs-params">----index</span>.js <span class="hljs-comment"># 入口文件</span></span><br><span class="line">|<span class="hljs-params">----webpack</span>.config.js</span><br></pre></td></tr></table></figure><p>i18n/zh.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"hello"</span>: <span class="hljs-string">"你好"</span>,</span><br><span class="line">    <span class="hljs-attr">"today"</span>: <span class="hljs-string">"今天"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loader/i18n-loader.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">'loader-utils'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> options = loaderUtils.getOptions(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> locale = options ? options.locale : <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 读取语言配置文件</span></span><br><span class="line">    <span class="hljs-keyword">let</span> json = <span class="hljs-literal">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (locale) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> filename = path.resolve(__dirname, <span class="hljs-string">'..'</span>, <span class="hljs-string">'i18n'</span>, <span class="hljs-string">`<span class="hljs-subst">$&#123;locale&#125;</span>.json`</span>);</span><br><span class="line">        json = <span class="hljs-built_in">require</span>(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 读取语言标记 &#123;&#123;&#125;&#125;</span></span><br><span class="line">    <span class="hljs-keyword">const</span> matches = source.match(<span class="hljs-regexp">/\&#123;\&#123;\w+\&#125;\&#125;/g</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> match <span class="hljs-keyword">of</span> matches) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> name = match.match(<span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/</span>)[<span class="hljs-number">1</span>].toLowerCase();</span><br><span class="line">        <span class="hljs-keyword">if</span> (json !== <span class="hljs-literal">null</span> &amp;&amp; json[name] !== <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">            source = source.replace(match, json[name]);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            source = source.replace(match, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'&#123;&#123;Hello&#125;&#125;, &#123;&#123;Today&#125;&#125; is a good day.'</span>);</span><br></pre></td></tr></table></figure><p>webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">        filename: <span class="hljs-string">'[name].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    target: <span class="hljs-string">'node'</span>,</span><br><span class="line">    <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="hljs-string">'i18n-loader'</span>,</span><br><span class="line">                        options: &#123; <span class="hljs-comment">// 传递选项</span></span><br><span class="line">                            locale: <span class="hljs-string">'zh'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolveLoader: &#123;</span><br><span class="line">        modules: [<span class="hljs-string">'./node_modules'</span>, <span class="hljs-string">'./loader'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行构建"><a href="#执行构建" class="headerlink" title="执行构建"></a>执行构建</h3><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="hljs-keyword">run</span><span class="hljs-bash"> build</span></span><br></pre></td></tr></table></figure><p>构建完毕后使用Node.js执行build/main.js输出如下：</p><figure class="highlight applescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好, 今天 <span class="hljs-keyword">is</span> a good <span class="hljs-built_in">day</span>.</span><br></pre></td></tr></table></figure><p>可以看到i18n-loader成功读取了配置文件。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文简要介绍了Webpack中如何编写一个自定义的loader，权当抛砖引玉，更多的用法等待读者在实际工作中去挖掘，要想掌握Webpack的高级知识，Loader是必不可少的技能，有时候如果社区找不到合适的Loader，大家可以根据需要自己进行开发。</p><p><img src="https://static.ddhigh.com/blog/2020-03-11-060831.png" alt="0"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前面的内容中，我们学习了Webpack的基本知识、常用脚手架和性能优化，虽然说大部分的开发场景社区已经又成熟的模块给我们使用，但是遇到特殊情况还是需要自己有独立开发的能力，因此今天我们一起来学习如何编写自定义Loader。&lt;/p&gt;
&lt;h2 id=&quot;基本Loader&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(3) ——性能优化</title>
    <link href="https//www.ddhigh.com/2020/03/06/webpack-optimize.html"/>
    <id>https//www.ddhigh.com/2020/03/06/webpack-optimize.html</id>
    <published>2020-03-06T04:00:00.000Z</published>
    <updated>2020-03-11T06:07:16.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限定Webpack处理文件范围"><a href="#限定Webpack处理文件范围" class="headerlink" title="限定Webpack处理文件范围"></a>限定Webpack处理文件范围</h2><p>项目比较小的情况下Webpack的性能问题几乎可以忽略，但是一旦项目复杂度上升，Webpack会有额外的性能损失需要我们进行优化。</p><p>通过前面内容的学习我们可以知道Webpack主要干下面这些事情：</p><ol><li>通过entry指定的入口脚本进行依赖解析。</li><li>找到文件后通过配置的loader对其进行处理。</li></ol><p>因此，我们可以从这方面入手进行优化，减少Webpack搜索文件的范围，减少不必要的处理。</p><h3 id="loader配置"><a href="#loader配置" class="headerlink" title="loader配置"></a>loader配置</h3><p>在之前的内容中介绍过loader可以使用test、include、exclude配置项来匹配需要Loader处理的文件，因此推荐给每个loader定义test之后还定义include或exclude。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="hljs-string">'src'</span>), <span class="hljs-comment">// 只处理src目录下的js文件</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="resolve-extensions配置"><a href="#resolve-extensions配置" class="headerlink" title="resolve.extensions配置"></a>resolve.extensions配置</h3><p>导入未添加扩展名的模块时，Webpack会通过resolve.extensions后缀去检查文件是否存在。由于resolve.extensions是一个数组，如果数组项比较多，正确的后缀放置得越靠后，Webpack尝试次数就会越多，影响到性能。</p><p>因此配置resolve.extensions时需要遵守以下规则：</p><ul><li>尽量减少后缀列表，不要将不可能存在的文件后缀配置进来</li><li>出现频率越高的后缀尽量写到前面，比如可以将.js写在第一个</li><li>业务代码中导入模块时，可以手动加上后缀导入，省去Webpack查找过程</li></ul><h3 id="module-noParse配置"><a href="#module-noParse配置" class="headerlink" title="module.noParse配置"></a>module.noParse配置</h3><p>module.noParse可以告诉Webpack忽略未采用模块系统文件的处理，可以有效地提高性能。比如常见的jQuery非常大，又没有采用模块系统，让Webpack解析这类型文件完全是浪费性能。</p><p>因此我们可以配置如下的module.noParse:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">  noParse:[<span class="hljs-regexp">/jQuery/</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h2><p>在导入模块时，IgnorePlugin可以忽略指定模块的生成。比如moment.js在导入时会自动导入本地化文件，一般情况下几乎不使用而且又比较大，此时可以通过IgnorePlugin忽略对本地化文件的生成，减小文件大小。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.IgnorePlugin(<span class="hljs-regexp">/\.\/local/</span>, /moment/)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h2><p>使用过Windows操作系统的读者应该会经常看到以.dll扩展名的文件，这些文件叫做动态链接库，包含了其他程序或动态链接库的函数和数据。</p><p>Webpack的DllPlugin的思想是类似的，先将公共模块打包为独立的Dll模块，然后在业务代码中直接引用这些模块。采用DllPlugin之后会大大提升Webpack构建速度，原因在于，包含大量复用模块的动态链接库只需要编译一次，之后的构建中会直接引用这些构建好的模块。</p><p>在Webpack中使用动态链接库有以下两个步骤：</p><ol><li>通过webpack.DllPlugin插件打包出Dll库</li><li>通过webpack.DllReferencePlugin引用打包好的Dll库</li></ol><p>下面以React项目为例进行说明。</p><p>Dll库需要单独构建，因此我们需要一份单独的配置Webpack文件。</p><p>1.新建webpack.dll.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">entry:&#123;</span><br><span class="line">  react: [<span class="hljs-string">'react'</span>, <span class="hljs-string">'react-dom'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename: <span class="hljs-string">'_dll_[name].js'</span>, <span class="hljs-comment">// 输出的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出到dist目录</span></span><br><span class="line">    library: <span class="hljs-string">'_dll_[name]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-comment">// name要等于output.library里的name</span></span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="hljs-string">"_dll_[name]"</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="hljs-string">"dist"</span>, <span class="hljs-string">"manifest.json"</span>) <span class="hljs-comment">// 清单文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.编辑webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="hljs-string">'./src/main'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename: <span class="hljs-string">'[name].js'</span>, <span class="hljs-comment">// 输出的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出到dist目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-comment">// 传入manifest.json</span></span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="hljs-string">"dist"</span>, <span class="hljs-string">"manifest.json"</span>) <span class="hljs-comment">// 清单文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.添加构建命令</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line"> <span class="hljs-attr">"build-dll"</span>:<span class="hljs-string">"webpack --config webpack.dll.config.js"</span>,</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.构建Dll</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build-dll</span><br></pre></td></tr></table></figure><p>5.构建应用</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><blockquote><p>Dll需要先构建，否则应用将构建失败</p></blockquote><h2 id="HappyPack"><a href="#HappyPack" class="headerlink" title="HappyPack"></a>HappyPack</h2><p>Webpack默认情况下是单进程执行的，因此无法利用多核优势，通过HappyPack可以变成多进程构建，从而提升构建速度。下面我们一起来看看如何使用happypack来加速构建。</p><p>1.安装happypack</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm isntall happypack</span><br></pre></td></tr></table></figure><p>2.编辑配置文件，需要将Loader配置到HappyPack插件中，由HappyPack对Loader进行调用。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> HappyPackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'happypack'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="hljs-string">'./src/main'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">    filename:<span class="hljs-string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'happypack/loader?id=js'</span>, <span class="hljs-comment">// 配置id为js</span></span><br><span class="line">        include:[</span><br><span class="line">          path.resolve(__dirname,<span class="hljs-string">'src'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.scss$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'happypack/loader?id=scss'</span>, <span class="hljs-comment">// 配置id为scss</span></span><br><span class="line">        include:[</span><br><span class="line">          path.resolve(__dirname,<span class="hljs-string">'src'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'happypack/loader?id=css'</span>, <span class="hljs-comment">// 配置id为css</span></span><br><span class="line">        include:[</span><br><span class="line">          path.resolve(__dirname,<span class="hljs-string">'src'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> HappyPackPlugin(&#123;</span><br><span class="line">      id:<span class="hljs-string">'js'</span>, <span class="hljs-comment">// id为js的loader配置</span></span><br><span class="line">      use:[</span><br><span class="line">        &#123;</span><br><span class="line">          loader:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            plugins:[<span class="hljs-string">'@babel/transform-runtime'</span>],</span><br><span class="line">            presets:[<span class="hljs-string">'@babel/env'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="hljs-keyword">new</span> HappyPackPlugin(&#123;</span><br><span class="line">      id:<span class="hljs-string">'scss'</span>, <span class="hljs-comment">// id为scss的loader配置</span></span><br><span class="line">      use:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>,<span class="hljs-string">'sass-loader'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="hljs-keyword">new</span> HappyPackPlugin(&#123;</span><br><span class="line">      id:<span class="hljs-string">'css'</span>, <span class="hljs-comment">// id为css的loader配置</span></span><br><span class="line">      use:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree-Shaking"></a>Tree-Shaking</h2><p>Tree-Shaking原始的本意是”摇动树“，这样就会将一些分支”摇掉“，从而减少主干大小。而Webpack中的Tree-Shaking是类似的，在Webpack项目中，有一个入口文件，相当于树的主干，入口文件又依赖了许多模块。实际开发中，虽然依赖了某个模块，但其实只使用了其中的部分代码，通过Tree-Shaking，可以将模块中未使用的代码剔除掉，从而减少构建结果的大小。</p><blockquote><p>注意：只有使用ES6模块系统的代码，在mode为production时，Tree-Shaking才会生效。因此，在编写代码时尽量使用import/export的方式。</p></blockquote><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><p>在开发中，我们一般会将业务代码打包为app.js，其他第三方依赖打包为vendor.js。这样会有一个比较大的问题，如果依赖的第三方模块过多，vendor.js会越来越大，而在浏览器加载时需要完全加载完vendor.js才可以，这样就会造成无谓的等待，因为我们当前页面可能只使用了一部分代码。此时可以使用Webpack来实现按需加载，只有在真正用到这个模块时才会加载相应的js。</p><p>比如基于echarts开发了一个数据可视化页面，可以在这个路由组件下面使用异步的方式加载echarts的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span>(<span class="hljs-string">'echarts'</span>).then(<span class="hljs-function"><span class="hljs-params">modules</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> echarts = modules.default;</span><br><span class="line">  <span class="hljs-keyword">const</span> chart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#chart'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过使用按需加载时，构建代码中会包含Promise调用，因此低版本浏览器需要注入Promise的polyfill实现。</p><h2 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h2><p>Webpack4中可以将多个公共模块打包一份，减少代码冗余，Webpack4之前的版本是使用webpack内置的CommonsChunkPlugin实现的，Webpack4直接配置<code>optimization</code>即可。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks:&#123;</span><br><span class="line">      cacheGroups:&#123;</span><br><span class="line">        common:&#123; <span class="hljs-comment">// 应用代码中公共模块</span></span><br><span class="line">          chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">          <span class="hljs-comment">// 最小公共模块引用次数</span></span><br><span class="line">          minChunks: <span class="hljs-number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        vendor:&#123; <span class="hljs-comment">// node_modules中第三方模块</span></span><br><span class="line">test: <span class="hljs-regexp">/node_modules/</span>,</span><br><span class="line">          chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">          minChunks: <span class="hljs-number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三方库代码的变更一般比较少(通过package.json的版本可以指定依赖版本)，因此构建出来的vendor.js基本不会变就可以利用浏览器的缓存机制进行缓存。</p><p>而应用代码的变更是比较频繁的，因此单独打包为common.js，浏览器可以单独缓存，如果应用代码发生变更，浏览器只用重新下载common.js文件，而不用重新下载vendor.js。</p><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>HMR(Hot Module Replacement)是Webpack提供的常用功能之一，它允许在运行时对模块进行修改，而无需刷新整个页面(LiveReload需要刷新页面才能加载)，这样有以下优势：</p><ul><li>保留应用状态，比如使用Vue/React时如果使用LiveReload，组件状态全部丢失，而HMR不会</li><li>只更新变更的内容，节省开发时间</li></ul><p>使用以下配置即可打开内置的HMR功能：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">    hot: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用热加载</span></span><br><span class="line">    contentBase: <span class="hljs-string">'./dist'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line"><span class="hljs-keyword">new</span> webpack.NamedModulesPlugin(), <span class="hljs-comment">// 打印更新的模块路径</span></span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="hljs-comment">// 热更新插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文我们对Webpack4最常用的性能优化技术进行了学习，这些优化方法对业务代码的侵入性非常小（只有按需加载优化会要求使用import()函数进行加载），在实际的开发中，可以结合这些技术进行针对性的优化，比如开发时编译慢，可能就需要使用HappyPack插件进行多进程编译以加快编译速度等等。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;限定Webpack处理文件范围&quot;&gt;&lt;a href=&quot;#限定Webpack处理文件范围&quot; class=&quot;headerlink&quot; title=&quot;限定Webpack处理文件范围&quot;&gt;&lt;/a&gt;限定Webpack处理文件范围&lt;/h2&gt;&lt;p&gt;项目比较小的情况下Webpack的性
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(2) ——手把手搭建TypeScript+React16+ReactRouter5同构应用脚手架</title>
    <link href="https//www.ddhigh.com/2020/03/02/react-ssr-example.html"/>
    <id>https//www.ddhigh.com/2020/03/02/react-ssr-example.html</id>
    <published>2020-03-02T04:00:00.000Z</published>
    <updated>2020-03-11T06:07:14.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同构应用"><a href="#同构应用" class="headerlink" title="同构应用"></a>同构应用</h2><p>使用同一份应用代码，同时提供浏览器环境和服务器环境下的应用，解决传统浏览器单页应用的两个顽固问题：</p><ul><li>不利于SEO，浏览器环境代码是在客户端渲染，大部分爬虫都只能爬到一个空白的入口文件</li><li>代码在浏览器渲染，低端机可能会卡顿</li></ul><p>接下来我们一起从零开始搭建基于Webpack的React同构应用脚手架。</p><h2 id="SSR流程"><a href="#SSR流程" class="headerlink" title="SSR流程"></a>SSR流程</h2><ol><li>Web应用构建完成后输出CSS、JS和HTML</li><li>SSR应用构建完成后输出一个CommonJs模块文件，可以将虚拟DOM在服务端渲染为HTML字符串</li><li>Node.js新建HTTP服务器，收到请求后调用SSR模块导出的render函数输出HTML到客户端</li></ol><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-ssr-example</span><br><span class="line"><span class="hljs-built_in">cd</span> react-ssr-example</span><br><span class="line">yarn init -y</span><br><span class="line"></span><br><span class="line">yarn add webpack webpack-cli webpack-dev-server -D <span class="hljs-comment"># 安装Webpack</span></span><br><span class="line">yarn add react react-dom react-router-dom <span class="hljs-comment"># 安装React</span></span><br><span class="line">yarn add @types/react @types/react-dom @types/react-router-dom -D <span class="hljs-comment"># 安装React声明文件</span></span><br><span class="line">yarn add express <span class="hljs-comment"># 安装express</span></span><br><span class="line">yarn add css-loader sass-loader node-sass mini-css-extract-plugin <span class="hljs-comment"># 安装CSS相关模块</span></span><br><span class="line">yarn add ts-loader typescript <span class="hljs-comment"># 安装TypeScript</span></span><br><span class="line">yarn add html-webpack-plugin <span class="hljs-comment"># 安装HTML处理插件</span></span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>脚手架的完整目录如下：(这些文件一步步都会有)</p><figure class="highlight dsconfig hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">|--<span class="hljs-built_in">--build</span> <span class="hljs-comment"># 构建结果目录</span></span><br><span class="line">|--<span class="hljs-built_in">--styles</span> <span class="hljs-comment"># 样式</span></span><br><span class="line">|--<span class="hljs-built_in">--main.css</span></span><br><span class="line"><span class="hljs-built_in"></span>|--<span class="hljs-built_in">--bundle.ssr.js</span> <span class="hljs-comment"># SSR应用文件</span></span><br><span class="line">|--<span class="hljs-built_in">--bundle.web.js</span> <span class="hljs-comment"># Web应用文件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.html</span> <span class="hljs-comment"># Web应用入口HTML</span></span><br><span class="line">|--<span class="hljs-built_in">--src</span> <span class="hljs-comment"># 应用源码</span></span><br><span class="line">|--<span class="hljs-built_in">--home</span> <span class="hljs-comment"># 首页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.scss</span> <span class="hljs-comment"># 首页SCSS</span></span><br><span class="line">|--<span class="hljs-built_in">--index.tsx</span> <span class="hljs-comment"># 首页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--signin</span> <span class="hljs-comment"># 登录页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.scss</span> <span class="hljs-comment"># 登录页SCSS</span></span><br><span class="line">|--<span class="hljs-built_in">--index.tsx</span> <span class="hljs-comment"># 登录页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--App.tsx</span> <span class="hljs-comment"># 应用路由设置</span></span><br><span class="line">|--<span class="hljs-built_in">--index.html</span> <span class="hljs-comment"># Web应用入口HTML</span></span><br><span class="line">|--<span class="hljs-built_in">--main.ssr.tsx</span> <span class="hljs-comment"># SSR入口文件</span></span><br><span class="line">|--<span class="hljs-built_in">--main.web.tsx</span> <span class="hljs-comment"># Web入口文件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.js</span> <span class="hljs-comment">#　express服务器入口</span></span><br><span class="line">|--<span class="hljs-built_in">--package.json</span></span><br><span class="line"><span class="hljs-built_in">|----tsconfig.json</span> <span class="hljs-comment"># TypeScript配置文件</span></span><br><span class="line">|--<span class="hljs-built_in">--webpack.config.js</span> <span class="hljs-comment"># Web应用webpack配置</span></span><br><span class="line">|--<span class="hljs-built_in">--webconfig.ssr.config.js</span> <span class="hljs-comment"># SSR应用Webpack配置</span></span><br></pre></td></tr></table></figure><h2 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h2><p>1.TypeScript配置，新建tsconfig.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"compilerOptions"</span>: &#123;</span><br><span class="line">      <span class="hljs-attr">"target"</span>: <span class="hljs-string">"es5"</span>, </span><br><span class="line">      <span class="hljs-attr">"module"</span>: <span class="hljs-string">"commonjs"</span>, </span><br><span class="line">      <span class="hljs-attr">"jsx"</span>: <span class="hljs-string">"react"</span>, </span><br><span class="line">      <span class="hljs-attr">"strict"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">      <span class="hljs-attr">"lib"</span>: [</span><br><span class="line">        <span class="hljs-string">"DOM"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="hljs-attr">"esModuleInterop"</span>: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"include"</span>: [</span><br><span class="line">      <span class="hljs-string">"./src/**/*.ts"</span>,</span><br><span class="line">      <span class="hljs-string">"./src/**/*.tsx"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"exclude"</span>: [</span><br><span class="line">      <span class="hljs-string">"node_modules"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主要是添加了jsx设置和include设置</p><p>2.Web环境webpack配置，新建webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> MiniCssPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/main.web'</span>, <span class="hljs-comment">// 入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>), <span class="hljs-comment">// 输出目录</span></span><br><span class="line">        filename: <span class="hljs-string">'bundle.web.js'</span> <span class="hljs-comment">// 输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.tsx?$/</span>, <span class="hljs-comment">// ts文件处理</span></span><br><span class="line">                use: <span class="hljs-string">'ts-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.scss$/</span>, <span class="hljs-comment">// scss文件处理</span></span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'sass-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">// css文件处理</span></span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            chunks: [<span class="hljs-string">'main'</span>], <span class="hljs-comment">// chunk名称，entry是字符串类型，因此chunk为main</span></span><br><span class="line">            filename: <span class="hljs-string">'index.html'</span>, <span class="hljs-comment">// 输出到build目录的文件名</span></span><br><span class="line">            template: <span class="hljs-string">'src/index.html'</span> <span class="hljs-comment">// 模板路径</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">            filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>, <span class="hljs-comment">// 输出的CSS文件名</span></span><br><span class="line">            chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="hljs-string">'.ts'</span>, <span class="hljs-string">'.tsx'</span>, <span class="hljs-string">'.js'</span>, <span class="hljs-string">'.json'</span>] <span class="hljs-comment">// 添加ts和tsx后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.SSR环境Webpack配置，新建webpack.ssr.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> MiniCssPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/main.ssr'</span>,</span><br><span class="line">    target: <span class="hljs-string">'node'</span>, <span class="hljs-comment">// 必须指定为Node.js，否则会打包Node.js内置模块</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">        filename: <span class="hljs-string">'bundle.ssr.js'</span>,</span><br><span class="line">        libraryTarget: <span class="hljs-string">'commonjs2'</span> <span class="hljs-comment">// 打包为CommonJs模块才能被Node.js加载</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.tsx?$/</span>,</span><br><span class="line">                use: <span class="hljs-string">'ts-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.scss$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'sass-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">            filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="hljs-string">'.ts'</span>, <span class="hljs-string">'.tsx'</span>, <span class="hljs-string">'.js'</span>, <span class="hljs-string">'.json'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.package.json添加npm命令</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"webpack"</span>,</span><br><span class="line">    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"webpack-dev-server"</span>,</span><br><span class="line">    <span class="hljs-attr">"build-ssr"</span>: <span class="hljs-string">"webpack --config webpack.ssr.config.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用编码"><a href="#应用编码" class="headerlink" title="应用编码"></a>应用编码</h2><p>src/home/index.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &apos;./index.scss&apos;;</span><br><span class="line"></span><br><span class="line">export default class Home extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;main&quot;&gt;首页&lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/home/index.scss</p><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/signin/index.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; withRouter &#125; from &apos;react-router-dom&apos;;</span><br><span class="line"></span><br><span class="line">function SignIn(props: any) &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; props.history.replace(&apos;/&apos;)&#125;&gt;登录&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">export default withRouter(SignIn);</span><br></pre></td></tr></table></figure><p>src/App.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; Switch, Route, Link &#125; from &apos;react-router-dom&apos;; // router</span><br><span class="line"></span><br><span class="line">// 导入页面组件</span><br><span class="line">import Home from &apos;./home&apos;;</span><br><span class="line">import SignIn from &apos;./signin&apos;;</span><br><span class="line"></span><br><span class="line">// 导出路由组件配置</span><br><span class="line">export default function App() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=&quot;/signin&quot; component=&#123;SignIn&#125; /&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src/main.ssr.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; StaticRouter, Link &#125; from &apos;react-router-dom&apos;;</span><br><span class="line">import &#123; renderToString &#125; from &apos;react-dom/server&apos;;</span><br><span class="line">import App from &apos;./App&apos;; // 将路由组件导入进来</span><br><span class="line"></span><br><span class="line">export function render(req: any) &#123; // 导出一个渲染函数，根据请求链接进行分发</span><br><span class="line">    const context = &#123;&#125;;</span><br><span class="line">    const html = renderToString(</span><br><span class="line">        &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;nav&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;Link to=&quot;/signin&quot;&gt;登录&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/nav&gt;</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;/StaticRouter&gt;</span><br><span class="line">    );</span><br><span class="line">    return [html, context]; // 导出context和html渲染结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/main.web.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &#123; BrowserRouter, Link &#125; from &apos;react-router-dom&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render( // 渲染路由</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;&lt;Link to=&quot;/signin&quot;&gt;登录&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;, document.querySelector(&apos;#app&apos;))</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>); <span class="hljs-comment">// 加载express</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; render &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./build/bundle.ssr'</span>); <span class="hljs-comment">// 加载ssr</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="hljs-string">'.'</span>)) <span class="hljs-comment">// 静态资源配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/*'</span>, (req, res) =&gt; &#123; <span class="hljs-comment">// 所有请求都走这里处理，必须加*</span></span><br><span class="line">    <span class="hljs-keyword">const</span> [html, context] = render(req)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(context) <span class="hljs-comment">// context目前没发现啥用处</span></span><br><span class="line">    res.send(<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;html&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;head&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;title&gt;SSR&lt;/title&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;link href="build/styles/main.8f173ff5.css" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/head&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;body&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;div id="app"&gt;<span class="hljs-subst">$&#123;html&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;script src="build/bundle.web.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/body&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/html&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(context)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="hljs-number">8080</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>静态资源配置必须在最上面</li><li>app.get(‘/<em>‘)必须有</em>号</li><li>HTML字符串必须手动引入CSS和Web构建结果</li></ul><h2 id="执行构建"><a href="#执行构建" class="headerlink" title="执行构建"></a>执行构建</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run build <span class="hljs-comment"># 构建Web</span></span><br><span class="line">npm run build-ssr <span class="hljs-comment">#　构建SSR</span></span><br><span class="line">node index.js <span class="hljs-comment"># 启动Express服务器</span></span><br></pre></td></tr></table></figure><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>首页样式</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093301.png" alt="image-20200302173258430"></p><p>首页代码</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093323.png" alt="image-20200302173322601"></p><p>登录页样式</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093346.png" alt="image-20200302173344488"></p><p>登录页代码</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093408.png" alt="image-20200302173405907"></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p>Https://github.com/xialeistudio/react-ssr-example</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同构应用&quot;&gt;&lt;a href=&quot;#同构应用&quot; class=&quot;headerlink&quot; title=&quot;同构应用&quot;&gt;&lt;/a&gt;同构应用&lt;/h2&gt;&lt;p&gt;使用同一份应用代码，同时提供浏览器环境和服务器环境下的应用，解决传统浏览器单页应用的两个顽固问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本快速入门(2)</title>
    <link href="https//www.ddhigh.com/2020/02/11/shell-operator-flow-control.html"/>
    <id>https//www.ddhigh.com/2020/02/11/shell-operator-flow-control.html</id>
    <published>2020-02-11T04:00:00.000Z</published>
    <updated>2020-02-11T10:45:55.268Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来学习Shell的运算符和流程控制。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Shell和其他编程语言一样支持多种运算符，包括：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>下面我们一起来看看。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>原生bash不支持简单的数学运算，需要借助expr命令。</p></blockquote><p>例如，输出两个数的和：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum=`expr 1 + 1`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span></span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>操作数和操作符之间必须用空格分开；</p><p>表达式必须使用反引号包裹；</p></blockquote><table><thead><tr><th>操作符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>expr 1 + 1</td></tr><tr><td>-</td><td>减法</td><td>expr 1 - 1</td></tr><tr><td>*</td><td>乘法</td><td>expr 1 \<em> 1 需要转义</em>号</td></tr><tr><td>/</td><td>除法</td><td>expr 1 / 1</td></tr><tr><td>%</td><td>取余</td><td>expr 2 % 2</td></tr></tbody></table><p>完整示例如下：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="hljs-comment"># 加法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 减法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> - <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>-<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 乘法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> \* <span class="hljs-variable">$b</span>` <span class="hljs-comment"># 必须转义</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>*<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 除法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> / <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>/<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 取余</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> % <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>%<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符是比较两个操作数的数学大小关系，支持数字和数字字符串(如”1”)</p><table><thead><tr><th>运算符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>-eq</td><td>检测两数是否相等</td><td>[ <code>$a -eq $b</code> ]</td></tr><tr><td>-ne</td><td>检测两数是否不等</td><td>[ <code>$a -ne $b</code> ]</td></tr><tr><td>-gt</td><td>检查左边是否大于右边(greater than)</td><td>[ <code>$a -gt $b</code> ]</td></tr><tr><td>-lt</td><td>检查左边是否小于右边(less than)</td><td>[ <code>$a -lt $b</code> ]</td></tr><tr><td>-ge</td><td>检查左边是否大于等于右边</td><td>[ <code>$a -ge $b</code> ]</td></tr><tr><td>-le</td><td>检查左边是否小于等于右边</td><td>[ <code>$a -le $b</code> ]</td></tr><tr><td>==</td><td>判断两数是否相等</td><td>[ <code>$a == $b</code> ]</td></tr><tr><td>!=</td><td>判断两数是否不想等</td><td>[ <code>$a != $b</code> ]</td></tr></tbody></table><p>下面是一个if比较的示例，if语法将在本文介绍流程控制的时候进行详细学习。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -eq <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>=<span class="hljs-variable">$b</span>"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>!=<span class="hljs-variable">$b</span>"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符就是与(AND)、或(OR)、非(NOT)。</p><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>!</td><td>逻辑非</td><td>[ !false]返回true</td></tr><tr><td>-o</td><td>逻辑或</td><td>[ <code>$a -gt 0 -o $b -gt 0</code>] 当a和b有一个大于0时返回true</td></tr><tr><td>-a</td><td>逻辑与</td><td>[ <code>$a -gt 0 -a $b -gt 0</code> ]当a和b都大于0时返回true</td></tr></tbody></table><p>下面是结合关系运算符的例子：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"1!=2"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"1=2"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt 0 -o <span class="hljs-variable">$b</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a或b大于0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a和b都不大于0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt 0 -a <span class="hljs-variable">$b</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a和b都大于0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a和b不都大于0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>Shell被常用来处理字符串数据，因此有一些专门适用于字符串的运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>检查两个字符串是否相等</td><td>[ <code>$a = $b</code> ]</td></tr><tr><td>!=</td><td>检查两个字符串是否不想等</td><td>[ <code>$a != $b</code> ]</td></tr><tr><td>-z</td><td>检查字符串长度是否为0</td><td>[ <code>-z $a</code> ]</td></tr><tr><td>-n</td><td>检查字符串长度是否不为0</td><td>[ <code>-n $a</code> ]</td></tr><tr><td>$</td><td>检查字符串是否为空</td><td>[ <code>$a</code> ]</td></tr></tbody></table><p>下面是一些示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="hljs-string">"hello"</span></span><br><span class="line">b=<span class="hljs-string">"world"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> = <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>和<span class="hljs-variable">$b</span>相同"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>和<span class="hljs-variable">$b</span>不同"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$a</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度为0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度不为0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -n <span class="hljs-variable">$a</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度不为0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度为0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>不为空"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>为空"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测文件的各种状态。下表列出了常用的文件测试运算符。</p><table><thead><tr><th>操作符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>-d file</td><td>检查文件是否是目录</td><td>[ <code>-d $file</code> ]</td></tr><tr><td>-f file</td><td>检查文件是否是普通文件(不是目录，也不是块设备文件)</td><td>[ <code>-f $file</code>]</td></tr><tr><td>-r file</td><td>检查文件是否可读</td><td>[ <code>-r $file</code> ]</td></tr><tr><td>-w file</td><td>检查文件是否可写</td><td>[ <code>-w $file</code> ]</td></tr><tr><td>-x file</td><td>检查文件是否可执行</td><td>[ <code>-x $file</code> ]</td></tr><tr><td>-s file</td><td>检查文件大小是否为0</td><td>[ <code>-s $file</code> ]</td></tr><tr><td>-e file</td><td>检查文件或文件夹是否存在</td><td>[ <code>-e $file</code> ]</td></tr><tr><td>-S</td><td>检查文件是否是Socket文件</td><td>[ <code>-S $file</code> ]</td></tr><tr><td>-L</td><td>检查文件是否存在且是一个符号链接</td><td>[ <code>-L $file</code> ]</td></tr></tbody></table><p>下面是一些示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">file=<span class="hljs-string">"/etc/passwd"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$file</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>是目录"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>不是目录"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$file</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>是普通文件"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>不是普通文件"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -e <span class="hljs-variable">$file</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>存在"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>不存在"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>Shell的流程控制也包含判断和循环，我们一起来学习一下。</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if/else"></a>if/else</h3><p>语法</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> condition</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"> 语句1</span><br><span class="line"> 语句2</span><br><span class="line"> ...</span><br><span class="line"> 语句N</span><br><span class="line"><span class="hljs-keyword">elif</span> condition2</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"> 语句1</span><br><span class="line"> 语句2</span><br><span class="line"> ...</span><br><span class="line"> 语句N</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"> 语句1</span><br><span class="line"> 语句2</span><br><span class="line"> ...</span><br><span class="line"> 语句N</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>elif和else分支是可以省略的</p></li><li><p>if/fi 需要配对</p></li></ul></blockquote><p>下面是一些示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"a = b"</span></span><br><span class="line"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"a &gt; b"</span></span><br><span class="line"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"a &lt; b"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"所有条件都不匹配"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>do/done需要配对</li><li>in列表支持文件列表、字符串、数字和其他数组数据</li></ul></blockquote><p>下面是循环输出<code>/etc</code>下文件和目录的示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> `ls /etc`</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$dir</span>"</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span> condition</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=1</span><br><span class="line"><span class="hljs-keyword">while</span>(( <span class="hljs-variable">$c</span>&lt;=10 ))</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$c</span></span><br><span class="line">c=`expr <span class="hljs-variable">$c</span> + 1`</span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> 值 <span class="hljs-keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line">;;</span><br><span class="line">模式2)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line">;;</span><br><span class="line">easc</span><br></pre></td></tr></table></figure><blockquote><ul><li>模式匹配之后不会再执行其他模式语句(不需要手动break)</li><li>case/easc 必须配对</li><li>每个模式语句的末尾必须添加两个分号</li><li>使用*号捕获其他模式</li></ul></blockquote><p>如下是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'输入星期几'</span></span><br><span class="line"><span class="hljs-built_in">read</span> day</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-variable">$day</span> <span class="hljs-keyword">in</span></span><br><span class="line">1)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"星期一"</span></span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"星期二"</span></span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"输入的数字无效"</span></span><br><span class="line">;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>read是从标准输入读取一行赋值给指定变量</li></ul></blockquote><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出循环体。下面是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> n</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">sum=`expr <span class="hljs-variable">$sum</span> + <span class="hljs-variable">$n</span>`</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">break</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令允许跳过本次循环，直接进行下一轮循环。下面是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> n</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">sum=`expr <span class="hljs-variable">$sum</span> + <span class="hljs-variable">$n</span>`</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">continue</span> <span class="hljs-comment"># 本次输入不合法，跳过，</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><p>结合今日所学，我们用Shell来打印一个九九乘法表：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le 9 ] <span class="hljs-comment"># i &lt;= 9</span></span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">j=1</span><br><span class="line"><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$j</span> -le 9 ] <span class="hljs-comment"># j &lt;= 9</span></span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -ge <span class="hljs-variable">$j</span> ] <span class="hljs-comment"># if($i &gt;= $j)</span></span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">val=`expr <span class="hljs-variable">$i</span> \* <span class="hljs-variable">$j</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">"<span class="hljs-variable">$j</span>*<span class="hljs-variable">$i</span>=<span class="hljs-variable">$val</span> "</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line">j=`expr <span class="hljs-variable">$j</span> + 1` <span class="hljs-comment"># j++</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br><span class="line"><span class="hljs-built_in">echo</span></span><br><span class="line">i=`expr <span class="hljs-variable">$i</span> + 1` <span class="hljs-comment"># i++</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">1</span>=<span class="hljs-number">1</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">2</span>=<span class="hljs-number">2</span> <span class="hljs-number">2</span>*<span class="hljs-number">2</span>=<span class="hljs-number">4</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">3</span>=<span class="hljs-number">3</span> <span class="hljs-number">2</span>*<span class="hljs-number">3</span>=<span class="hljs-number">6</span> <span class="hljs-number">3</span>*<span class="hljs-number">3</span>=<span class="hljs-number">9</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">4</span>=<span class="hljs-number">4</span> <span class="hljs-number">2</span>*<span class="hljs-number">4</span>=<span class="hljs-number">8</span> <span class="hljs-number">3</span>*<span class="hljs-number">4</span>=<span class="hljs-number">12</span> <span class="hljs-number">4</span>*<span class="hljs-number">4</span>=<span class="hljs-number">16</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">5</span>=<span class="hljs-number">5</span> <span class="hljs-number">2</span>*<span class="hljs-number">5</span>=<span class="hljs-number">10</span> <span class="hljs-number">3</span>*<span class="hljs-number">5</span>=<span class="hljs-number">15</span> <span class="hljs-number">4</span>*<span class="hljs-number">5</span>=<span class="hljs-number">20</span> <span class="hljs-number">5</span>*<span class="hljs-number">5</span>=<span class="hljs-number">25</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">6</span>=<span class="hljs-number">6</span> <span class="hljs-number">2</span>*<span class="hljs-number">6</span>=<span class="hljs-number">12</span> <span class="hljs-number">3</span>*<span class="hljs-number">6</span>=<span class="hljs-number">18</span> <span class="hljs-number">4</span>*<span class="hljs-number">6</span>=<span class="hljs-number">24</span> <span class="hljs-number">5</span>*<span class="hljs-number">6</span>=<span class="hljs-number">30</span> <span class="hljs-number">6</span>*<span class="hljs-number">6</span>=<span class="hljs-number">36</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">7</span>=<span class="hljs-number">7</span> <span class="hljs-number">2</span>*<span class="hljs-number">7</span>=<span class="hljs-number">14</span> <span class="hljs-number">3</span>*<span class="hljs-number">7</span>=<span class="hljs-number">21</span> <span class="hljs-number">4</span>*<span class="hljs-number">7</span>=<span class="hljs-number">28</span> <span class="hljs-number">5</span>*<span class="hljs-number">7</span>=<span class="hljs-number">35</span> <span class="hljs-number">6</span>*<span class="hljs-number">7</span>=<span class="hljs-number">42</span> <span class="hljs-number">7</span>*<span class="hljs-number">7</span>=<span class="hljs-number">49</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">8</span>=<span class="hljs-number">8</span> <span class="hljs-number">2</span>*<span class="hljs-number">8</span>=<span class="hljs-number">16</span> <span class="hljs-number">3</span>*<span class="hljs-number">8</span>=<span class="hljs-number">24</span> <span class="hljs-number">4</span>*<span class="hljs-number">8</span>=<span class="hljs-number">32</span> <span class="hljs-number">5</span>*<span class="hljs-number">8</span>=<span class="hljs-number">40</span> <span class="hljs-number">6</span>*<span class="hljs-number">8</span>=<span class="hljs-number">48</span> <span class="hljs-number">7</span>*<span class="hljs-number">8</span>=<span class="hljs-number">56</span> <span class="hljs-number">8</span>*<span class="hljs-number">8</span>=<span class="hljs-number">64</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">9</span>=<span class="hljs-number">9</span> <span class="hljs-number">2</span>*<span class="hljs-number">9</span>=<span class="hljs-number">18</span> <span class="hljs-number">3</span>*<span class="hljs-number">9</span>=<span class="hljs-number">27</span> <span class="hljs-number">4</span>*<span class="hljs-number">9</span>=<span class="hljs-number">36</span> <span class="hljs-number">5</span>*<span class="hljs-number">9</span>=<span class="hljs-number">45</span> <span class="hljs-number">6</span>*<span class="hljs-number">9</span>=<span class="hljs-number">54</span> <span class="hljs-number">7</span>*<span class="hljs-number">9</span>=<span class="hljs-number">63</span> <span class="hljs-number">8</span>*<span class="hljs-number">9</span>=<span class="hljs-number">72</span> <span class="hljs-number">9</span>*<span class="hljs-number">9</span>=<span class="hljs-number">81</span></span><br></pre></td></tr></table></figure><p>今天的内容是Shell中比较重要的，也是最常用的语法。下一篇将对Shell的输入输出进行学习。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p><p>(未完待续)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来学习Shell的运算符和流程控制。&lt;/p&gt;
&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;p&gt;Shell和其他编程语言一样支持多种运算符，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="devtools" scheme="https//www.ddhigh.com/categories/devtools/"/>
    
    
      <category term="shell" scheme="https//www.ddhigh.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本快速入门(1)</title>
    <link href="https//www.ddhigh.com/2020/02/10/shell-quickstart.html"/>
    <id>https//www.ddhigh.com/2020/02/10/shell-quickstart.html</id>
    <published>2020-02-10T04:00:00.000Z</published>
    <updated>2020-02-10T09:46:46.387Z</updated>
    
    <content type="html"><![CDATA[<p>Shell 是一个用 C 语言编写的程序，用户可以通过Shell脚本语言来进行程序开发。与其他脚本语言不同，Shell脚本所需的解释器一般是内置在操作系统的，而像Node.js、PHP等脚本语言需要手动安装解释器程序才可以。</p><p>接下来将和大家一起来学习Shell脚本编程。</p><h2 id="Shell解释器"><a href="#Shell解释器" class="headerlink" title="Shell解释器"></a>Shell解释器</h2><p>Shell解释器种类众多，笔者的电脑上内置以下Shell:</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-regexp">/bin/</span>bash</span><br><span class="line"><span class="hljs-regexp">/bin/</span>csh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>ksh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>sh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>tcsh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure><p>其中bash和sh是最常见的Shell解释器，一般情况下，这两种Shell没有区别，本文以bash为例。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>打开文本编辑器(vim或者vscode)，新建文件 <strong>hello.sh</strong>，扩展名为sh(常用)。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello World!"</span></span><br></pre></td></tr></table></figure><p>第1行用来指明本脚本需要使用什么解释器来执行。<code>#!</code>是一个约定的语法。</p><p><code>echo</code>用来输出文本。</p><h2 id="执行Shell脚本"><a href="#执行Shell脚本" class="headerlink" title="执行Shell脚本"></a>执行Shell脚本</h2><p>有两种方法可以执行Shell脚本：</p><ol><li>作为可执行程序。给脚本添加可执行权限之后执行即可。</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./hello.sh <span class="hljs-comment"># 添加可执行权限</span></span><br><span class="line">./hello.sh <span class="hljs-comment"># 执行脚本</span></span><br></pre></td></tr></table></figure><ol start="2"><li>作为解释器脚本。直接运行指定的解释器程序，并将脚本路径传入，本方式不要求脚本有可执行权限。</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash hello.sh <span class="hljs-comment"># 使用/bin/bash来执行hello.sh</span></span><br></pre></td></tr></table></figure><h2 id="Shell语法"><a href="#Shell语法" class="headerlink" title="Shell语法"></a>Shell语法</h2><p>和其他编程语言一样，Shell脚本也有自己的一套语法规则，我们现在来系统学习一下。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p>定义变量时，变量名不加美元符号$，如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br></pre></td></tr></table></figure><p>和其他编程语言不同的时，Shell脚本中<code>变量名和等号之间不能有空格</code>。Shell变量名的命名规则如下：</p><ul><li>只能包含英文字母、数字和下划线，且不能以数字开头</li><li>不能包含空格</li><li>不能使用关键字命名(通过下划线连接关键字是允许的)</li><li>不能使用标点符号</li></ul><p>以下是合法的示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1</span><br><span class="line">var_2</span><br><span class="line">_var3</span><br><span class="line">MAX_PAGE</span><br></pre></td></tr></table></figure><p>以下是不合法的示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">$var</span></span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>Shell有以下两种复制方式。</p><ol><li>直接赋值。直接在等号后面指定变量值。</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei</span></span><br><span class="line"><span class="hljs-string">admin=1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用命名执行结果。可以将其他命令的执行结果赋值给变量。（以下两种方式是等效的）</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file=`ls /etc` <span class="hljs-comment"># 反引号(键盘Tab上面的键)</span></span><br><span class="line">file1=$(ls /etc)</span><br></pre></td></tr></table></figure><p>已经存在的变量，可以被重新赋值。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"hello"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br><span class="line"></span><br><span class="line">name=<span class="hljs-string">"world"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><blockquote><p>使用变量时在变量名前添加$符号，定义时不加。</p></blockquote><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure><p>变量名两边的花括号是可选的，一般情况下不用加，但是如果涉及到边界识别问题，则需要手动添加花括号。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"I'm <span class="hljs-variable">$&#123;name&#125;</span>studio."</span> <span class="hljs-comment"># 正确示例</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"I'm <span class="hljs-variable">$namestudio</span>."</span> <span class="hljs-comment"># 错误示例</span></span><br></pre></td></tr></table></figure><p>如果不添加花括号，Shell会将<code>namestudio</code>作为变量，该变量是不存在的，因此代码执行逻辑就不是我们想要的了。</p><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>如果某些变量在定义后就无法更改该变量的值，可以设置使用<code>readonly</code>设置为只读变量，对只读变量赋值会跑出错误。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">readonly</span> name</span><br><span class="line">name=<span class="hljs-string">"zhangsan"</span></span><br></pre></td></tr></table></figure><p>上述例子执行结果如下</p><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.<span class="hljs-string">sh:</span> line <span class="hljs-number">5</span>: <span class="hljs-string">name:</span> readonly variable</span><br></pre></td></tr></table></figure><h4 id="释放变量"><a href="#释放变量" class="headerlink" title="释放变量"></a>释放变量</h4><p>使用<code>unset</code>可以释放变量。变量被释放后不能使用(使用不会报错,shell中使用未定义变量当做空值处理)，此外unset命令无法释放只读变量。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">unset</span> name <span class="hljs-comment"># 不要$</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><p>Shell脚本运行时，存在以下三种变量：</p><ul><li>局部变量。在脚本中定义的变量，只对当前脚本有效</li><li>环境变量。所有程序都能访问到环境变量，此外Shell脚本也可以在运行时定义环境变量</li><li>Shell变量。Shell变量是由Shell解释器设置的变量。Shell变量中有一部分是局部变量，有一部分是环境变量。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Shell支持数字、字符串和数组三种数据类型。下面我们分别进行学习。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以使用单引号、双引号，也可以不使用引号。</p><p>单引号</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br></pre></td></tr></table></figure><ul><li>单引号内的任何字符都会原样使用，不解析变量，也不解析转义字符。这一点和PHP有点类似</li></ul><p>双引号</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br><span class="line">msg=<span class="hljs-string">"Hello, <span class="hljs-variable">$&#123;name&#125;</span>"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span><br></pre></td></tr></table></figure><ul><li>双引号内的字符串会进行变量解析和转义字符解析</li></ul><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p>字符串拼接有以下两种方式。</p><p>引号拼接(支持双引号和单引号)</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br><span class="line">msg=<span class="hljs-string">'Hello '</span><span class="hljs-variable">$name</span><span class="hljs-string">', welcome!'</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span><br></pre></td></tr></table></figure><p>内部嵌套(只支持双引号，因为单引号不解析变量)</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br><span class="line">msg=<span class="hljs-string">"Hello <span class="hljs-variable">$&#123;name&#125;</span>, welcome!"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>Shell只支持一维数组，不限定数组大小。</p><p>数组的索引由0开始，读取元素的索引可以使用整数或表达式。</p><h5 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h5><p>数组元素使用<code>小括号</code>括起来，每个元素之间用<code>空格</code>分割。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br></pre></td></tr></table></figure><h5 id="读取数组元素"><a href="#读取数组元素" class="headerlink" title="读取数组元素"></a>读取数组元素</h5><p>语法如下:</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">$&#123;数组名称[下标]&#125;</span></span><br></pre></td></tr></table></figure><p>比如上例中读取第2个人</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;users[1]&#125;</span> <span class="hljs-comment"># 输出zhangsan</span></span><br></pre></td></tr></table></figure><p>使用<code>@</code>作为下标可以获取数组的所有元素。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;users[@]&#125;</span> <span class="hljs-comment"># 输出 xialei zhangsan lisi</span></span><br></pre></td></tr></table></figure><h5 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h5><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length=<span class="hljs-variable">$&#123;#数组名[@]&#125;</span></span><br></pre></td></tr></table></figure><p>比如输出users数组的长度</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#users[@]&#125;</span></span><br></pre></td></tr></table></figure><p>今天的内容主要是让大家对Shell有一个宏观的认识，介绍了Shell的变量以及数据类型，下一篇将重点介绍Shell的运算符和流程控制。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p><p>(未完待续)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Shell 是一个用 C 语言编写的程序，用户可以通过Shell脚本语言来进行程序开发。与其他脚本语言不同，Shell脚本所需的解释器一般是内置在操作系统的，而像Node.js、PHP等脚本语言需要手动安装解释器程序才可以。&lt;/p&gt;
&lt;p&gt;接下来将和大家一起来学习Shell
      
    
    </summary>
    
      <category term="devtools" scheme="https//www.ddhigh.com/categories/devtools/"/>
    
    
      <category term="shell" scheme="https//www.ddhigh.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Java中加载文件的几种方式</title>
    <link href="https//www.ddhigh.com/2020/02/01/java-resource-load.html"/>
    <id>https//www.ddhigh.com/2020/02/01/java-resource-load.html</id>
    <published>2020-02-01T04:00:00.000Z</published>
    <updated>2020-02-01T08:04:48.254Z</updated>
    
    <content type="html"><![CDATA[<p>在Java程序中加载外部文件有多中方式，每种方式也存在区别，本文将理清这些加载方式之间的区别。</p><h2 id="文件IO方式"><a href="#文件IO方式" class="headerlink" title="文件IO方式"></a>文件IO方式</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.xialei.example.resource;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.File;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"app.properties"</span>);</span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的读取方式，使用该方式读取文件时规则如下：</p><blockquote><p>如果传入的是绝对路径，则以系统根目录作为绝对路径的起点。</p><p>如果传入的是相对路径，则以当前工作目录作为起点。</p></blockquote><p>本例中，运行<code>java</code>命令的目录即为工作目录，app.properties从工作目录开始查找。</p><h2 id="Class-getResourceAsStream"><a href="#Class-getResourceAsStream" class="headerlink" title="Class.getResourceAsStream"></a>Class.getResourceAsStream</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.xialei.example.resource;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> (InputStream is = Main.class.getResourceAsStream(<span class="hljs-string">"app.properties"</span>)) &#123;</span><br><span class="line">            Properties properties = <span class="hljs-keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            System.out.println(properties.getProperty(<span class="hljs-string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方式读取文件时规则如下：</p><blockquote><p>如果传入的是相对路径，则以当前class所在的包作为起点。</p><p>如果传入的是绝对路径，则以classpath的根目录为起点。</p></blockquote><ul><li><code>Main.class.getResourceAsStream(&quot;app.properties&quot;)</code> 会读取<code>/org/xialei/example/resource/app.properties</code>文件。</li><li><code>Main.class.getResourceAsStream(&quot;/app.properties&quot;)</code>会读取”classpath:/app.properties”文件</li></ul><h2 id="ClassLoader-getResourceAsStream"><a href="#ClassLoader-getResourceAsStream" class="headerlink" title="ClassLoader.getResourceAsStream"></a>ClassLoader.getResourceAsStream</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.xialei.example.resource;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> (InputStream is = Main.class.getClassLoader().getResourceAsStream(<span class="hljs-string">"org/xialei/example/resource/app.properties"</span>)) &#123;</span><br><span class="line">            Properties properties = <span class="hljs-keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            System.out.println(properties.getProperty(<span class="hljs-string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方式时规则如下:</p><blockquote><p>使用classpath根目录作为起点。</p></blockquote><p>本例中，<code>org/xialei/example/resource/app.properties</code>就是从classpath根目录进行查找的。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java程序中加载外部文件有多中方式，每种方式也存在区别，本文将理清这些加载方式之间的区别。&lt;/p&gt;
&lt;h2 id=&quot;文件IO方式&quot;&gt;&lt;a href=&quot;#文件IO方式&quot; class=&quot;headerlink&quot; title=&quot;文件IO方式&quot;&gt;&lt;/a&gt;文件IO方式&lt;/h2&gt;&lt;f
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="java" scheme="https//www.ddhigh.com/categories/backend/java/"/>
    
    
  </entry>
  
  <entry>
    <title>kafka二进制协议简要分析</title>
    <link href="https//www.ddhigh.com/2020/01/17/php-binary-io.html"/>
    <id>https//www.ddhigh.com/2020/01/17/php-binary-io.html</id>
    <published>2020-01-17T04:00:00.000Z</published>
    <updated>2020-01-17T10:02:27.465Z</updated>
    
    <content type="html"><![CDATA[<p>最近分享了《应用层私有协议的设计和实战》，对应用层私有协议设计做了一些介绍，同时也对协议设计中常用的数据类型做了比较形象的讲解，今天我们来研究一下kafka的二进制协议。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>kafka二进制协议定义了许多的数据类型，包含常用的数字、字符串，也包含了数组等类型。</p><p>本文主要讨论不可变长数据类型，可变长度（如Google Protocol Buffers）不在讨论范围内。</p><table><thead><tr><th>数据类型</th><th>字节长度</th><th>说明</th></tr></thead><tbody><tr><td>BOOLEAN</td><td>1</td><td>布尔值</td></tr><tr><td>INT8</td><td>1</td><td>单字节整型，-2^7 ~ 2^7-1</td></tr><tr><td>INT16</td><td>2</td><td>双字节整型，大端序，范围 -2^15 ~ 2^15 - 1</td></tr><tr><td>INT32</td><td>4</td><td>四字节整型、大端序，范围 -2^31 ~ 2^31 - 1</td></tr><tr><td>INT64</td><td>8</td><td>八字节整型、大端序，范围 -2^63 ~ 2^63 -1</td></tr><tr><td>UINT32</td><td>4</td><td>十字街</td></tr><tr><td>UUID</td><td>16</td><td>16字节，Java UUID类型</td></tr><tr><td>STRING</td><td>2+N</td><td>头部由2字节标识字符串长度N，后续N字节为字符串内容</td></tr><tr><td>NULLABLE_STRING</td><td>2+N</td><td>头部由2字节标识字符串长度N，后续N字节为字符串内容，N为-1时无后续内容</td></tr><tr><td>BYTES</td><td>4+N</td><td>头部4字节标识字节数组长度，后续N字节为字节数组内容</td></tr><tr><td>NULLABLE_BYTES</td><td>4+N</td><td>头部4字节标识字节数组长度，后续N字节为字节数组内容，N为-1时无后续内容</td></tr><tr><td>ARRAY</td><td>4+N*M</td><td>头部4字节标识数组长度N，M为单个数组元素的长度，N为-1时为空数组</td></tr></tbody></table><h2 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h2><ul><li>-1 未知错误</li><li>0 未出错</li><li>大于0， 具体错误</li></ul><p>kafka内置的操作类型有点多，有兴趣的可以参阅<a href="https://kafka.apache.org/protocol#protocol_error_codes" target="_blank" rel="noopener">kafka错误码</a></p><h2 id="Api-Keys"><a href="#Api-Keys" class="headerlink" title="Api Keys"></a>Api Keys</h2><p>可以理解为操作码，服务端根据该字段区分当前请求操作。</p><p>这里不做展开，有兴趣的可以参阅<a href="https://kafka.apache.org/protocol#protocol_api_keys" target="_blank" rel="noopener">kafka Api Keys</a></p><h2 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h2><p>接下来我们重点分析一下kafka的报文结构。</p><blockquote><p>本文基于kafka V1版本协议写作，其他版本的研究原理时一致的。</p></blockquote><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>kafka的协议结构比较简单，请求和响应使用同样的整体结构。</p><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestOrResponse =&gt; Size (RequestMessage | <span class="hljs-type">ResponseMessage</span>)</span><br><span class="line">  Size =&gt; int32</span><br></pre></td></tr></table></figure><p>我们转化为表格来看看</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093002.png" alt="image-20200117172959642"></p><ul><li>Size为INT32类型，正文长度</li><li>Message 为请求或响应正文的内容，变长字段，长度由Size给出</li></ul><h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><p>请求数据包有固定的请求包头，我们来看看。</p><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request Header v1 =&gt; request_api_key request_api_version correlation_id client_id </span><br><span class="line">  request_api_key =&gt; INT16</span><br><span class="line">  request_api_version =&gt; INT16</span><br><span class="line">  correlation_id =&gt; INT32</span><br><span class="line">  client_id =&gt; NULLABLE_STRING</span><br></pre></td></tr></table></figure><p>上面给出的是请求头的内容，结合整体结构得出的协议表格如下：</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093119.png" alt="image-20200117173117965"></p><ul><li>Size 4字节正文长度（包含请求头）</li><li>request_api_key 2字节 api key，用来区分操作</li><li>request_api_version 2字节api 版本号</li><li>correlation_id 4字节请求ID，服务端会原样响应该请求ID</li><li>client_id 可空字符串，根据kafka数据类型定义，需要2字节client_id length字段标识client_id长度，如果client_id length为-1，则不需要传具体的client_id，否则需要传递client_id</li><li>request message* 请求正文，不同的api key请求正文不同</li></ul><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response Header v1 =&gt; correlation_id TAG_BUFFER </span><br><span class="line">  correlation_id =&gt; INT32</span><br></pre></td></tr></table></figure><p>响应头的结构比较简单，返回了请求ID</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093701.png" alt="image-20200117173658934"></p><ul><li>Size 4字节响应正文长度（包含请求ID）</li><li>correlation_id 4字节请求ID</li><li>response message* 响应正文</li></ul><h3 id="Metadata-示例"><a href="#Metadata-示例" class="headerlink" title="Metadata 示例"></a>Metadata 示例</h3><h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>Kafka Metadata对应的协议格式如下</p><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Metadata Request (Version: <span class="hljs-number">1</span>) =&gt; [topics] </span><br><span class="line">  topics =&gt; name </span><br><span class="line">    name =&gt; STRING</span><br></pre></td></tr></table></figure><p>我们转化为表格看看</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093858.png" alt="image-20200117173855988"></p><ul><li>Size 4字节请求正文长度</li><li>Request_api_key，根据协议文档， 此处为3</li><li>Request_api_version，本文基于v1版本写作，因此版本号为1</li><li>correlation_id 请求ID</li><li>client_id length 2字节客户端长度，我们使用test作为客户端标识，此处传入4</li><li>client_id 客户端名称，传入test字符串</li><li>topic name length 需要查询的topic数组，我们查询test1这个topic，此处传入1</li><li>topic name 字符串类型，因此先写入字符串长度5(test1字符串长度为5)，再写入test1字符串（总共写入2+5 = 7个字节）</li></ul><h4 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h4><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Metadata Response (Version: 1) =&gt; [brokers] controller_id [topics] </span><br><span class="line">  brokers =&gt; node_id host<span class="hljs-built_in"> port </span>rack </span><br><span class="line">    node_id =&gt; INT32</span><br><span class="line">    host =&gt; STRING</span><br><span class="line">   <span class="hljs-built_in"> port </span>=&gt; INT32</span><br><span class="line">    rack =&gt; NULLABLE_STRING</span><br><span class="line">  controller_id =&gt; INT32</span><br><span class="line">  topics =&gt; error_code name is_internal [partitions] </span><br><span class="line">    error_code =&gt; INT16</span><br><span class="line">    name =&gt; STRING</span><br><span class="line">    is_internal =&gt; BOOLEAN</span><br><span class="line">    partitions =&gt; error_code partition_index leader_id [replica_nodes] [isr_nodes] </span><br><span class="line">      error_code =&gt; INT16</span><br><span class="line">      partition_index =&gt; INT32</span><br><span class="line">      leader_id =&gt; INT32</span><br><span class="line">      replica_nodes =&gt; INT32</span><br><span class="line">      isr_nodes =&gt; INT32</span><br></pre></td></tr></table></figure><p><img src="https://static.ddhigh.com/blog/2020-01-17-094212.png" alt="image-20200117174211271"></p><ul><li>Size 4字节响应长度</li><li>Correlation_id 4字节请求ID</li><li>Broker Count，数组类型，4字节整型标识数组长度<ul><li>node_id 4字节整型，broker的节点ID</li><li>host 字符串类型，主机名称</li><li>port 4字节整型，端口号</li><li>rack 可空字符串，如果broker是rack，则需要2+N字节，否则只需要2字节</li></ul></li><li>Controller_id 4字节整型</li><li>Topics 数组类型，topic数组<ul><li>error_code 2字节整型，错误码</li><li>name 字符串类型，topic名称</li><li>is_internal 布尔类型，是否内部topic</li><li>partions 数组类型，topic所在partition<ul><li>error_code 2字节整型，错误码</li><li>partition_index 4字节整型，partition index</li><li>leader_id 4字节整型，leader id</li><li>Replica_nodes 数组类型<ul><li>Replica_node 4字节整型</li></ul></li><li>isr_nodes 数组类型<ul><li>Isr_node 4字节整型</li></ul></li></ul></li></ul></li></ul><blockquote><p>其他类型的请求也可以使用同样的方式去分析</p></blockquote><h2 id="PHP客户端实现"><a href="#PHP客户端实现" class="headerlink" title="PHP客户端实现"></a>PHP客户端实现</h2><p>PHP自带了pack/unpack函数帮助我们操作二进制数据，不过pack/unpack易用性比较低。</p><blockquote><p>对于二进制数据，java有byte[]，golang有[]byte，PHP没有专门的类型，而是使用字符串存储的，不过PHP字符串是二进制安全的。</p></blockquote><p>针对pack/unpack函数易用性问题，这两天参考Java的IO系统开发了一个简单版本的io库来简化二进制数据流的操作（文末有仓库地址）。</p><p>接下来使用该库来编写一个kafka的客户端。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 读取kafka broker列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">BinaryStringInputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">BinaryStringOutputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">DataInputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">DataOutputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">FileInputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">FileOutputStream</span>;</span><br><span class="line"></span><br><span class="line">$client = stream_socket_client(<span class="hljs-string">'tcp://127.0.0.1:9092'</span>, $errno, $errstr, <span class="hljs-number">5</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> ($errno) &#123;</span><br><span class="line">    <span class="hljs-keyword">die</span>($errstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$binaryOutputStream = <span class="hljs-keyword">new</span> BinaryStringOutputStream();</span><br><span class="line">$binaryPacketOutput = <span class="hljs-keyword">new</span> DataOutputStream($binaryOutputStream);</span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(<span class="hljs-number">0x03</span>); <span class="hljs-comment">// METADATA_REQUEST</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(<span class="hljs-number">1</span>); <span class="hljs-comment">// API_VERSION</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedIntBE(<span class="hljs-number">0x01</span>); <span class="hljs-comment">// 请求ID</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(strlen(<span class="hljs-string">'test'</span>)); <span class="hljs-comment">// 客户端标识长度</span></span><br><span class="line">$binaryPacketOutput-&gt;writeString(<span class="hljs-string">'test'</span>); <span class="hljs-comment">// 客户端标识</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedIntBE(<span class="hljs-number">1</span>); <span class="hljs-comment">// topic列表数组长度</span></span><br><span class="line"><span class="hljs-comment">// topic数组元素</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(strlen(<span class="hljs-string">'test1'</span>)); <span class="hljs-comment">// 写入2字节topic名称长度</span></span><br><span class="line">$binaryPacketOutput-&gt;writeString(<span class="hljs-string">'test1'</span>); <span class="hljs-comment">// topic名称</span></span><br><span class="line">$binaryPacketOutput-&gt;flush(); <span class="hljs-comment">// 输出缓冲</span></span><br><span class="line">$packet = $binaryOutputStream-&gt;toBinaryString(); <span class="hljs-comment">// 获得构造好的正文数据包</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 包装socket链接，获得多数据类型操作能力</span></span><br><span class="line">$out = <span class="hljs-keyword">new</span> DataOutputStream(<span class="hljs-keyword">new</span> FileOutputStream($client));</span><br><span class="line">$out-&gt;writeUnSignedIntBE(strlen($packet)); <span class="hljs-comment">// 4字节包长度</span></span><br><span class="line">$out-&gt;write($packet); <span class="hljs-comment">// 包体</span></span><br><span class="line">$out-&gt;flush(); <span class="hljs-comment">// 输出到Socket</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 实例化输入流，从socket读取数据</span></span><br><span class="line">$in = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream($client));</span><br><span class="line">$size = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// 4字节包长度</span></span><br><span class="line"><span class="hljs-comment">// 一次性读取完socket数据后关闭，然后将读取到的响应数据填充到二进制字符串输入流中，释放socket</span></span><br><span class="line">$in = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> BinaryStringInputStream(fread($client, $size)));</span><br><span class="line">fclose($client);</span><br><span class="line"></span><br><span class="line">$requestId = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// 4字节请求ID</span></span><br><span class="line">printf(<span class="hljs-string">"packet length: %d requestId: %d\n"</span>, $size, $requestId);</span><br><span class="line"></span><br><span class="line">$brokerCount = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// broker数量</span></span><br><span class="line"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $brokerCount; $i++) &#123; <span class="hljs-comment">// 循环读取broker</span></span><br><span class="line">    $nodeId = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// nodeId</span></span><br><span class="line">    $hostLength = $in-&gt;readUnSignedShortBE(); <span class="hljs-comment">// host长度</span></span><br><span class="line">    $host = $in-&gt;readString($hostLength); <span class="hljs-comment">// 主机名</span></span><br><span class="line">    $port = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// port</span></span><br><span class="line">    $rackLength = $in-&gt;readShortBE(); <span class="hljs-comment">// rack</span></span><br><span class="line">    $rack = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> ($rackLength != <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">        $rack = $in-&gt;readString($rackLength);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="hljs-string">"nodeId:%d host:%s port:%d rack: %s\n"</span>, $nodeId, $host, $port, $rack);</span><br><span class="line">&#125;</span><br><span class="line">$controllerId = $in-&gt;readUnSignedIntBE();</span><br><span class="line">printf(<span class="hljs-string">"controllerId: %d\n"</span>, $controllerId);</span><br><span class="line">$topicCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">printf(<span class="hljs-string">"topic count %d\n"</span>, $topicCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $topicCount; $i++) &#123;</span><br><span class="line">    printf(<span class="hljs-string">"----topic list----\n"</span>);</span><br><span class="line">    $errCode = $in-&gt;readUnSignedShortBE();</span><br><span class="line">    $nameLength = $in-&gt;readUnSignedShortBE();</span><br><span class="line">    $name = $in-&gt;readString($nameLength);</span><br><span class="line">    $isInternal = $in-&gt;readUnSignedChar();</span><br><span class="line">    printf(<span class="hljs-string">"errcode: %d name: %s interval: %d\n"</span>, $errCode, $name, $isInternal);</span><br><span class="line"></span><br><span class="line">    $partitionCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">    printf(<span class="hljs-string">"----topic [%s] partition list count %d---\n"</span>, $name, $partitionCount);</span><br><span class="line">    <span class="hljs-keyword">for</span> ($j = <span class="hljs-number">0</span>; $j &lt; $partitionCount; $j++) &#123;</span><br><span class="line">        $errCode = $in-&gt;readUnSignedShortBE();</span><br><span class="line">        $partitionIndex = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $leaderId = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $replicaNodesCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $replicaNodes = [];</span><br><span class="line">        <span class="hljs-keyword">for</span> ($k = <span class="hljs-number">0</span>; $k &lt; $replicaNodesCount; $k++) &#123;</span><br><span class="line">            $replicaNodes[] = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        &#125;</span><br><span class="line">        $isrNodeCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $isrNodes = [];</span><br><span class="line">        <span class="hljs-keyword">for</span> ($k = <span class="hljs-number">0</span>; $k &lt; $isrNodeCount; $k++) &#123;</span><br><span class="line">            $isrNodes[] = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        &#125;</span><br><span class="line">        printf(</span><br><span class="line">            <span class="hljs-string">"errcode: %d partitionIndex: %d leaderId: %d replicaNodes: [%s] isrNodes: [%s]\n"</span>,</span><br><span class="line">            $errCode,</span><br><span class="line">            $partitionIndex,</span><br><span class="line">            $leaderId,</span><br><span class="line">            join(<span class="hljs-string">','</span>, $replicaNodes),</span><br><span class="line">            join(<span class="hljs-string">','</span>, $isrNodes)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">packet</span> <span class="hljs-attr">length:</span> <span class="hljs-number">73</span> <span class="hljs-attr">requestId:</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">nodeId:</span><span class="hljs-number">0</span> <span class="hljs-attr">host:bogon</span> <span class="hljs-attr">port:9092</span> <span class="hljs-attr">rack:</span> </span><br><span class="line"><span class="hljs-attr">controllerId:</span> <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-string">topic</span> <span class="hljs-string">count</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-bullet">-</span><span class="hljs-bullet">---topic</span> <span class="hljs-string">list----</span></span><br><span class="line"><span class="hljs-attr">errcode:</span> <span class="hljs-number">0</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test1</span> <span class="hljs-attr">interval:</span> <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-bullet">-</span><span class="hljs-bullet">---topic</span> <span class="hljs-string">[test1]</span> <span class="hljs-string">partition</span> <span class="hljs-string">list</span> <span class="hljs-string">count</span> <span class="hljs-number">1</span><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">errcode:</span> <span class="hljs-number">0</span> <span class="hljs-attr">partitionIndex:</span> <span class="hljs-number">0</span> <span class="hljs-attr">leaderId:</span> <span class="hljs-number">0</span> <span class="hljs-attr">replicaNodes:</span> <span class="hljs-string">[0]</span> <span class="hljs-attr">isrNodes:</span> <span class="hljs-string">[0]</span></span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p> <a href="https://github.com/xialeistudio/php-io" target="_blank" rel="noopener">php-io</a></p><p>(完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近分享了《应用层私有协议的设计和实战》，对应用层私有协议设计做了一些介绍，同时也对协议设计中常用的数据类型做了比较形象的讲解，今天我们来研究一下kafka的二进制协议。&lt;/p&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript事件系统</title>
    <link href="https//www.ddhigh.com/2019/12/30/javascript-event.html"/>
    <id>https//www.ddhigh.com/2019/12/30/javascript-event.html</id>
    <published>2019-12-30T04:00:00.000Z</published>
    <updated>2019-12-31T02:53:41.623Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容</p><ul><li>事件基础</li><li>事件监听方式</li><li>事件默认行为</li><li>事件冒泡与事件捕获</li><li>事件绑定与事件委托</li></ul><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><blockquote><p>注意：本文不会深入探究Javascript的事件循环。</p></blockquote><p>提到事件，相信每位Javascript开发者都不会陌生，由于Javascript是先有实现，后有规范，因此，对于大部分人来说，事件模块可以说是比较模糊的，本文将从不同角度帮助你理清楚事件模块。</p><p>事件的本质可以说是一个回调函数，当事件触发时会调用你的监听函数。</p><blockquote><p>事件是一定会触发的，如果没有对应的监听函数，就不会执行回调。</p></blockquote><p>比如下面就是用户点击指定元素打印日志的例子：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#button'</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>事件基础相信大家都没什么问题，重点在后面的内容。</p><h2 id="事件监听方式"><a href="#事件监听方式" class="headerlink" title="事件监听方式"></a>事件监听方式</h2><p>由于历史原因，Javascript目前存在三种事件监听方式：</p><ol><li>HTML代码中监听</li><li>DOM0级监听</li><li>DOM2级监听</li></ol><p>Q: 为啥从DOM0级开始？</p><blockquote><p>1998年，W3C综合各浏览器厂商的现有API，指定了DOM1标准。在DOM1标准出现之前浏览器已有的事件监听方式叫做DOM0级。</p></blockquote><p>Q：DOM1级监听到哪里去了？</p><blockquote><p>由于DOM1标准只是对DOM0标准的整理+规范化，并没有增加新的内容，因此DOM0级可以看做DOM1级。</p></blockquote><h3 id="HTML代码监听"><a href="#HTML代码监听" class="headerlink" title="HTML代码监听"></a>HTML代码监听</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('Hello World!')"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接将事件处理函数或事件处理代码写到HTML元素对应的属性上的方式就是<strong>HTML代码监听方式</strong>。</p><p>该方式有一个明显的缺点，如果事件逻辑比较复杂时，将大段代码直接写在HTML元素上不利于维护。因此一般会提取到一个专一的函数进行处理。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"callback()"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该方式也有一个问题，那就是如果<code>callback()</code>函数还未加载好时点击按钮将报错。而且直接将事件耦合到HTML元素上也不符合单一职责，HTML元素应该只负责展示，不负责事件。</p><blockquote><p>不建议在开发中使用该方式处理事件。</p></blockquote><h3 id="DOM0级事件监听"><a href="#DOM0级事件监听" class="headerlink" title="DOM0级事件监听"></a>DOM0级事件监听</h3><p>在DOM1级规范出来之前，各浏览器厂商已经提供了一套事件API，也就是DOM0级API，它的写法如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个相信大家在刚开始入行时写的比较多，比如我们的ajax相关API就是DOM0级的。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</span><br><span class="line">xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>DOM0级事件基本上都是以”on”开头的</p></blockquote><p>DOM0级事件也存在一个问题，那就是不支持添加多个事件处理函数，因此只有在不支持DOM2级事件的情况下才会使用DOM0级来绑定事件。</p><h3 id="DOM2级事件监听"><a href="#DOM2级事件监听" class="headerlink" title="DOM2级事件监听"></a>DOM2级事件监听</h3><p>DOM2级事件是最新的事件处理程序规范（有许多年未更新了）。DOM2级事件通过<code>addEventListener</code>方式给元素添加事件处理程序。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多次调用addEventListener可以绑定多个事件处理程序，但是需要注意：</p><blockquote><p>同样的事件名、同样的事件处理函数和同样的事件流机制(冒泡和捕获，下面会讲到)，<strong>只会触发一次</strong>。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 下面的代码只会触发一次</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"request"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onClick</span><span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#request'</span>).addEventListener(<span class="hljs-string">'click'</span>, onClick, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#request'</span>).addEventListener(<span class="hljs-string">'click'</span>, onClick, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>onClick是同一个事件处理程序，所以只触发一次</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 下面的代码只会触发两次</span></span><br><span class="line">&lt;button id=<span class="hljs-string">"request"</span>&gt;登录&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">document.querySelector('#request').addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">console.log('clicked');</span></span><br><span class="line"><span class="hljs-regexp">&#125;, false);</span></span><br><span class="line"><span class="hljs-regexp">document.querySelector('#request').addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">console.log('clicked');</span></span><br><span class="line"><span class="hljs-regexp">&#125;, false);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>两个匿名函数，所以会触发两次</p><h2 id="事件默认行为"><a href="#事件默认行为" class="headerlink" title="事件默认行为"></a>事件默认行为</h2><p>很多网页元素会有默认行为，比如下面这些：</p><ul><li>点击a标签的时候，会有跳转行为</li><li>点击右键时会弹出菜单</li><li>在表单中点击提交按钮会提交表单</li></ul><p>如果我们需要阻止默认行为，比如我们在阻止表单的默认提交事件，进行数据校验，通过校验后再调用表单submit方法提交。</p><blockquote><p>不同的监听方式阻止默认行为的方式也不同。</p></blockquote><h3 id="HTML代码方式"><a href="#HTML代码方式" class="headerlink" title="HTML代码方式"></a>HTML代码方式</h3><blockquote><p>HTML代码方式支持return false和event.preventDefault()</p></blockquote><h4 id="return-false方式"><a href="#return-false方式" class="headerlink" title="return false方式"></a>return false方式</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">"return handleSubmit()"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleSubmit</span><span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上例中我们监听了表单的<code>onsubmit</code>事件，当点击按钮或者按下回车时，将会触发<code>handleSubmit</code>方法，同时会阻止表单的提交。</p><blockquote><p>表单内如果有type=”submit”的按钮存在，按下回车时就会自动提交。</p></blockquote><p>HTML监听方式阻止默认事件需要满足以下两点：</p><ol><li>HTML事件监听代码<code>return handler()</code>，<code>return不能少</code>，少了就无法阻止默认行为</li><li><code>handler()</code>函数需要返回<code>false</code></li></ol><h4 id="event-preventDefault"><a href="#event-preventDefault" class="headerlink" title="event.preventDefault()"></a>event.preventDefault()</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"handleClick(event)"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span><span class="hljs-params">(e)</span> </span>&#123;</span></span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM0级事件方式"><a href="#DOM0级事件方式" class="headerlink" title="DOM0级事件方式"></a>DOM0级事件方式</h3><blockquote><p>DOM0级事件支持return false和event.preventDefault()两种方式。</p></blockquote><h4 id="event-preventDefault-1"><a href="#event-preventDefault-1" class="headerlink" title="event.preventDefault()"></a>event.preventDefault()</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// event.preventDefault()</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).onclick= <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span></span><br><span class="line">  event.preventDefault();</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// return false</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).onclick= <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-actionscript">  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两种方式都能工作，不过建议使用<code>event.preventDefault()</code>，原因在下面DOM2级会讲到</p><h3 id="DOM2级事件"><a href="#DOM2级事件" class="headerlink" title="DOM2级事件"></a>DOM2级事件</h3><blockquote><p>DOM2级事件事件<strong>只支持event.preventDefault()</strong>方式，这也是事件的标准处理方法。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span></span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件冒泡与事件捕获"><a href="#事件冒泡与事件捕获" class="headerlink" title="事件冒泡与事件捕获"></a>事件冒泡与事件捕获</h2><p>先来看一个HTML结构</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们知道，一旦绑定了事件处理程序，在事件触发时，事件处理函数都会触发。</p><p>如果我们给father/child/son都绑定了事件处理函数，点击了son时，谁被触发呢？</p><p>事实上，三个函数都会被触发，因为son时child的子元素，child又是father的子元素，点击son，同时也点击了father和child。</p><p>由此带来一个问题，三个函数谁先触发，谁后触发呢？这就是我们常说的事件流，father-&gt;child-&gt;son这种路径是可以的，但是son-&gt;child-&gt;father这种路径也是可以的。</p><p>针对这两种方式，W3C给了我们一个答案，两种方式都支持，即可以从父元素到子元素，又可以从子元素到父元素，前者叫<strong>事件捕获</strong>，后者叫<strong>事件冒泡</strong>。</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件发生时采取<code>自上而下</code>的方式进行触发，最先触发的是<code>window</code>，其次是<code>document</code>，然后根据DOM层级依次触发，最终进入到真正的事件元素。</p><blockquote><p>addEventListener第三个参数传入true就是捕获方式的标志。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击son之后的输出顺序为</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">father</span></span><br><span class="line"><span class="hljs-attribute">child</span></span><br><span class="line"><span class="hljs-attribute">son</span></span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件发生时采取<code>自下而上</code>的方式进行触发，最先触发的是发生事件的元素，其次是父元素，依次向上，最终触发到<code>document</code>和<code>window</code>。</p><blockquote><p>addEventListener第三个参数传入false就是捕获冒泡的标志。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击son之后的输出顺序为</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">son</span></span><br><span class="line"><span class="hljs-attribute">child</span></span><br><span class="line"><span class="hljs-attribute">father</span></span><br></pre></td></tr></table></figure><blockquote><p>由于事件捕获和事件冒泡机制，我们需要一个标记来标识真正触发事件的元素，这个元素就是event.target，而另外一个相似的属性叫event.currentTarget，这是当前元素。</p></blockquote><h3 id="事件捕获和时间冒泡的顺序"><a href="#事件捕获和时间冒泡的顺序" class="headerlink" title="事件捕获和时间冒泡的顺序"></a>事件捕获和时间冒泡的顺序</h3><blockquote><p>根据浏览器规范，事件捕获会先于事件冒泡发生。因此，总的事件顺序如下</p></blockquote><ol><li>window 捕获阶段</li><li>document 捕获阶段</li><li>… 依次到真正触发事件的元素 捕获阶段</li><li>真正触发事件的元素 冒泡阶段</li><li>依次向上的父元素 冒泡阶段</li><li>document  冒泡阶段</li><li>window 冒泡阶段</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father捕获'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child捕获'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son捕获'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father冒泡'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child冒泡'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son冒泡'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击son之后的输出为</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">father捕获</span><br><span class="line">child捕获</span><br><span class="line">son捕获</span><br><span class="line">son冒泡</span><br><span class="line">child冒泡</span><br><span class="line">father冒泡</span><br></pre></td></tr></table></figure><h2 id="事件绑定和事件委托"><a href="#事件绑定和事件委托" class="headerlink" title="事件绑定和事件委托"></a>事件绑定和事件委托</h2><p>弄明白浏览器的事件流机制之后，来讨论事件绑定和事件委托其实是很简单的事情。</p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>就是在事件监听方式中直接对具体元素进行事件监听的方式。有个明显的缺点，对于新增加的DOM节点是无法监听到事件的。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.a'</span>).forEach(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked '</span> + <span class="hljs-keyword">this</span>.innerHTML);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-actionscript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">const</span> div3 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)</span></span><br><span class="line"><span class="hljs-actionscript">        div3.className = <span class="hljs-string">"a"</span>;</span></span><br><span class="line"><span class="hljs-actionscript">        div3.innerHTML = <span class="hljs-string">"click3"</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.body.appendChild(div3)</span></span><br><span class="line">    &#125;, 500);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的click3点击是没有任何反应的，因为在创建该元素时没有绑定事件处理函数。</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>我们利用事件流机制来实现上面的需求。</p><blockquote><p>事件委托就是利用事件流机制，在父元素进行监听，由于事件冒泡机制，父元素可以接受新添加元素的事件。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">console</span>.log(e.target.innerHTML)</span></span><br><span class="line"><span class="hljs-actionscript">    &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-actionscript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">const</span> div3 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)</span></span><br><span class="line"><span class="hljs-actionscript">        div3.className = <span class="hljs-string">"a"</span>;</span></span><br><span class="line"><span class="hljs-actionscript">        div3.innerHTML = <span class="hljs-string">"click3"</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.body.appendChild(div3)</span></span><br><span class="line">    &#125;, 500);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于事件冒泡机制，click3元素点击之后会将事件冒泡给父元素，也就是我们的document.body，通过event.target可以拿到真正触发事件的元素。</p><p>（完）</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件基础&lt;/li&gt;
&lt;li&gt;事件监听方式&lt;/li&gt;
&lt;li&gt;事件默认行为&lt;/li&gt;
&lt;li&gt;事件冒泡与事件捕获&lt;/li&gt;
&lt;li&gt;事件绑定与事件委托&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事件基础&quot;&gt;&lt;a href=&quot;#事件基础&quot; cla
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Webpack4不求人系列(1)</title>
    <link href="https//www.ddhigh.com/2019/12/19/webpack-get-started.html"/>
    <id>https//www.ddhigh.com/2019/12/19/webpack-get-started.html</id>
    <published>2019-12-19T04:00:00.000Z</published>
    <updated>2019-12-19T06:59:10.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Webpack是一个现在Javascript应用程序的模块化打包器，在Webpack中JS/CSS/图片等资源都被视为JS模块，简化了编程。当Webpack构建时，会递归形成一个模块依赖关系图，然后将所有的模块打包为一个或多个bundle。</p></blockquote><p><img src="https://static.ddhigh.com/blog/2019-12-19-024407.jpg" alt="img"></p><p>本文内容</p><ol><li>简介</li><li>常用loader &amp;&amp; plugin</li><li>传统网站的webpack配置</li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>要系统地学习Webpack，需要先了解Webpack的四个<strong>核心概念</strong>:</p><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>plugin</li></ul><p>webpack使用Node.js运行，因此所有的Node.js模块都可以使用，比如文件系统、路径等模块。</p><p>对Node.js基础不太了解的读者，可以参考我的<a href="https://www.ddhigh.com/2019/07/25/nodejs-guide-next-step.html" target="_blank" rel="noopener">Node.js系列</a></p><p>配置文件<code>webpack.config.js</code>的一般格式为:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>); <span class="hljs-comment">// 导入Node.js的path模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="hljs-string">'development'</span>, <span class="hljs-comment">// 工作模式</span></span><br><span class="line">  entry: <span class="hljs-string">'./src/index'</span>, <span class="hljs-comment">// 入口点</span></span><br><span class="line">  output: &#123; <span class="hljs-comment">// 输出配置</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出文件的目录</span></span><br><span class="line">    filename: <span class="hljs-string">'scripts/[name].[hash:8].js'</span>, <span class="hljs-comment">// 输出JS模块的配置</span></span><br><span class="line">    chunkFilename:<span class="hljs-string">'scripts/[name].[chunkhash:8].js'</span>, <span class="hljs-comment">// 公共JS配置</span></span><br><span class="line">    publicPath:<span class="hljs-string">'/'</span> <span class="hljs-comment">// 资源路径前缀，一般会使用CDN地址，这样图片和CSS就会使用CDN的绝对URL</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.(png|gif|jpg)$/</span>, <span class="hljs-comment">// 图片文件</span></span><br><span class="line">        use:[</span><br><span class="line">          &#123;</span><br><span class="line">            loader:<span class="hljs-string">'file-loader'</span>, <span class="hljs-comment">// 使用file-loader加载</span></span><br><span class="line">            options:&#123; <span class="hljs-comment">// file-loader使用的加载选项</span></span><br><span class="line">              name:<span class="hljs-string">'images/[name].[hash:8].[ext]'</span> <span class="hljs-comment">// 图片文件打包后的输出路径配置</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[ <span class="hljs-comment">// 插件配置</span></span><br><span class="line">    <span class="hljs-keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Webpack自己只管JS模块的输出，也就是output.filename是JS的配置，CSS、图片这些是通过loader来处理输出的</p></blockquote><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口指明了Webpack从哪个模块开始进行构建，Webpack会分析入口模块依赖到的模块(直接或间接)，最终输出到一个被称为<em>bundle</em>的文件中。</p><blockquote><p>使用<strong>entry</strong>来配置项目入口。</p></blockquote><p><strong>单一入口</strong></p><p>最终只会生成1个js文件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>多个入口</strong></p><p>最终会根据入口数量生成对应的js文件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">  home:<span class="hljs-string">'./src/home/index'</span>, <span class="hljs-comment">// 首页JS</span></span><br><span class="line">    about:<span class="hljs-string">'./src/about/index'</span> <span class="hljs-comment">// 关于页JS</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>多个入口一般会在多页面应用中使用，比如传统的新闻网站。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出指明了Webpack将bundle输出到哪个目录，以及这些bundle如何命名等，默认的目录为<code>./dist</code>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出路径</span></span><br><span class="line">    filename:<span class="hljs-string">'scripts/[name].[hash:8].js'</span>, <span class="hljs-comment">// 输出JS模块的文件名规范</span></span><br><span class="line">    chunkFilename:<span class="hljs-string">'scripts/[name].[chunkhash:8].js'</span>, <span class="hljs-comment">// 公共JS的配置</span></span><br><span class="line">    publicPath:<span class="hljs-string">'/'</span>, <span class="hljs-comment">// 资源路径前缀，一般会使用CDN地址，这样图片和CSS就会使用CDN的绝对URL</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>path</strong></p><p>path是打包后bundle的输出目录，<strong>必须使用绝对路径</strong>。所有类型的模块(js/css/图片等)都会输出到该目录中，当然，我们可以通过配置输出模块的名称规则来输出到path下的子目录。比如上例中最终输出的JS目录如下：</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">|----dist</span></span><br><span class="line"> <span class="hljs-string">|---- scripts</span></span><br><span class="line">  <span class="hljs-string">|---- home.aaaaaaaa.js</span></span><br></pre></td></tr></table></figure><p><strong>filename</strong></p><p><strong>入口模块</strong>输出的命名规则，在Webpack中，只有js是亲儿子，可以直接被Webpack处理，其他类型的文件(css/images等)需要通过loader来进行转换。</p><p>filename的常用的命名如下:</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-attr">[name]</span>.<span class="hljs-selector-attr">[hash]</span><span class="hljs-selector-class">.js</span></span><br></pre></td></tr></table></figure><ul><li>[name] 为定义入口模块的名称，比如定义了home的入口点，这里的name最终就是home</li><li>[hash] 是模块内容的MD5值，一次打包过程中所有模块的hash值是相同的，由于浏览器会按照文件名缓存，因此每次打包都需要指定hash来改变文件名，从而清除缓存。</li></ul><p><strong>chunkFilename</strong></p><p><strong>非入口模块</strong>输出的命名规则，一般是代码中引入其他依赖，同时使用了optimization.splitChunks配置会抽取该类型的chunk</p><p><strong>hash</strong></p><p>Webpack中常见的hash有<code>hash</code>,<code>contenthash</code>,<code>chunkhash</code>，很容易弄混淆，这里说明一下。</p><ul><li>hash 整个项目公用的hash值，不管修改项目的什么文件，该值都会变化</li><li>chunkhash 公共代码模块的hash值，只要不改该chunk下的代码，该值不会变化</li><li>contenthash 基于文件内容生成的hash，只要改了文件，对应的hash都会变化</li></ul><p><strong>publicPath</strong></p><p>资源的路径前缀，打包之后的资源默认情况下都是相对路径，当更改了部署路径或者需要使用CDN地址时，该选项比较常用。</p><p>比如我们把本地编译过程中产生的所有资源都放到一个CDN路径中，可以这么定义：</p><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">publicPath:</span> <span class="hljs-string">'https://static.ddhigh.com/blog/'</span></span><br></pre></td></tr></table></figure><p>那么最终编译的js,css,image等路径都是绝对链接。</p><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader用来在import时预处理文件，一般用来将非JS模块转换为JS能支持的模块，比如我们直接import一个css文件会提示错误，此时就需要loader做转换了。</p><p>比如我们使用loader来加载css文件。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="hljs-regexp">/\.(css)$/</span>,</span><br><span class="line">use: [<span class="hljs-string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><p>Webpack中有<strong>3</strong>种使用loader的方式：</p><ol><li>配置式：在webpack.config.js根据文件类型进行配置，这是推荐的配置</li><li>内联：在代码中import时指明loader</li><li>命令行：通过cli命令行配置</li></ol><h4 id="配置式"><a href="#配置式" class="headerlink" title="配置式"></a>配置式</h4><p><strong>module.rules</strong>用来配置loader。<strong>test</strong>用来对加载的<strong>文件名(包括目录)</strong>进行正则匹配，只有当匹配时才会应用对应loader。</p><blockquote><p>多个loader配置时从右向左进行应用</p></blockquote><p>配置式Webpack的loader也有好几种形式，有些是为了兼容而添加的，主要使用的方式有以下3种。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">        loader:<span class="hljs-string">'css-loader!less-loader'</span>, <span class="hljs-comment">// 多个loader中用感叹号分隔</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.css/</span>,</span><br><span class="line">        use:[<span class="hljs-string">'css-loader'</span>],<span class="hljs-comment">//数组形式</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.(png|gif|jpg)$/</span>,</span><br><span class="line">        use:[ <span class="hljs-comment">// loader传递参数时建议该方法</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="hljs-string">'file-loader'</span>,</span><br><span class="line">            options:&#123; <span class="hljs-comment">// file-loader自己的参数，跟webpack无关</span></span><br><span class="line">              name: <span class="hljs-string">'images/[name].[hash:8].js'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>每个loader的options参数不一定相同，这个需要查看对应loader的官方文档。</p></blockquote><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>loader一般用来做模块转换，而插件可以执行更多的任务，包括打包优化、压缩、文件拷贝等等。插件的功能非常强大，可以进行各种各样的任务。</p><p>下面是打包之前清空dist目录的插件配置示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">      ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>插件也可以传入选项，一般在实例化时进行传入。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">  chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h2><p>Webpack4中提取公共代码只需要配置optimization.splitChunks即可。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">splitChunks: &#123;</span><br><span class="line">  cacheGroups: &#123;</span><br><span class="line">    vendor: &#123; <span class="hljs-comment">// 名为vendor的chunk</span></span><br><span class="line">      name: <span class="hljs-string">"vendor"</span>,</span><br><span class="line">        test: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">        chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">        priority: <span class="hljs-number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      styles: &#123; <span class="hljs-comment">// 名为styles的chunk</span></span><br><span class="line">        name: <span class="hljs-string">'styles'</span>,</span><br><span class="line">        test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">        chunks: <span class="hljs-string">'all'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>cacheGroups 缓存组</li><li>name chunk的名称</li><li>test 加载的模块符合该正则时被打包到该chunk</li><li>chunks 模块的范围，有initial(初始模块),async(按需加载模块),all(全部模块)</li></ul><p>上面的例子中将node_modules中的js打包为vendor，以css结尾的打包为styles</p><h2 id="常用的loader和plugin"><a href="#常用的loader和plugin" class="headerlink" title="常用的loader和plugin"></a>常用的loader和plugin</h2><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><blockquote><p> 加载css文件</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.css$/</span></span><br><span class="line">  loader:[<span class="hljs-string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><blockquote><p>加载less文件，一般需要配合css-loader</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">  loader:[<span class="hljs-string">'css-loader'</span>,<span class="hljs-string">'less-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><blockquote><p>将文件拷贝到输出文件夹，并返回相对路径。一般常用在加载图片</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.(png|gif|jpg)/</span>,</span><br><span class="line">  use:[</span><br><span class="line">  &#123;</span><br><span class="line">      loader:<span class="hljs-string">'file-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        name:<span class="hljs-string">'images/[name].[hash:8].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><blockquote><p>转换ES2015+代码到ES5</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="hljs-regexp">/(node_modules|bower_components)/</span>, <span class="hljs-comment">// 排除指定的模块</span></span><br><span class="line">  use:[</span><br><span class="line">    &#123;</span><br><span class="line">      loader:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        presets:[<span class="hljs-string">'@babel/preset-env'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ts-loader"><a href="#ts-loader" class="headerlink" title="ts-loader"></a>ts-loader</h3><blockquote><p>转换Typescript到Javascript</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.ts/</span>,</span><br><span class="line">  loader:<span class="hljs-string">'ts-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><blockquote><p>简化HTML的创建，该插件会自动将当前打包的资源(如JS、CSS)自动引用到HTML文件</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports =  &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> HtmlWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><blockquote><p>打包之前清理dist目录</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports =  &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h3><blockquote><p>提取、压缩CSS，需要同时配置loader和plugin</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> MiniCssPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports =  &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'less-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">      chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下面使用Webpack来配置一个传统多页面网站开发的示例。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── about关于页</span><br><span class="line">│   │   ├── index.html</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   └── style.less</span><br><span class="line">│   ├── common</span><br><span class="line">│   │   └── style.less</span><br><span class="line">│   └── home首页</span><br><span class="line">│       ├── images</span><br><span class="line">│       │   └── logo.png</span><br><span class="line">│       ├── index.html</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── style.less</span><br><span class="line">├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span></span><br></pre></td></tr></table></figure><h3 id="使用到的npm包"><a href="#使用到的npm包" class="headerlink" title="使用到的npm包"></a>使用到的npm包</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">"<span class="hljs-selector-tag">clean-webpack-plugin</span>": "^3<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">css-loader</span>": "^3<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.1</span>",</span><br><span class="line">"<span class="hljs-selector-tag">exports-loader</span>": "^0<span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">extract-text-webpack-plugin</span>": "^4<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0-beta</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">file-loader</span>": "^5<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.2</span>",</span><br><span class="line">"<span class="hljs-selector-tag">html-webpack-plugin</span>": "^3<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">html-withimg-loader</span>": "^0<span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.16</span>",</span><br><span class="line">"<span class="hljs-selector-tag">less</span>": "^3<span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.3</span>",</span><br><span class="line">"<span class="hljs-selector-tag">less-loader</span>": "^5<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">mini-css-extract-plugin</span>": "^0<span class="hljs-selector-class">.8</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">normalize</span><span class="hljs-selector-class">.css</span>": "^8<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>",</span><br><span class="line">"<span class="hljs-selector-tag">script-loader</span>": "^0<span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.2</span>",</span><br><span class="line">"<span class="hljs-selector-tag">style-loader</span>": "^1<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>",</span><br><span class="line">"<span class="hljs-selector-tag">url-loader</span>": "^3<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">webpack</span>": "^4<span class="hljs-selector-class">.41</span><span class="hljs-selector-class">.2</span>",</span><br><span class="line">"<span class="hljs-selector-tag">webpack-cli</span>": "^3<span class="hljs-selector-class">.3</span><span class="hljs-selector-class">.10</span>",</span><br><span class="line">"<span class="hljs-selector-tag">webpack-dev-server</span>": "^3<span class="hljs-selector-class">.9</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">zepto</span>": "^1<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.0</span>"</span><br></pre></td></tr></table></figure><h3 id="配置入口点"><a href="#配置入口点" class="headerlink" title="配置入口点"></a>配置入口点</h3><p>由于是传统多页网站，每个页面都需要单独打包一份JS，因此<strong>每个页面需要一个入口</strong>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123; <span class="hljs-comment">// 入口配置，每个页面一个入口JS</span></span><br><span class="line">        home: <span class="hljs-string">'./src/home/index'</span>, <span class="hljs-comment">// 首页</span></span><br><span class="line">        about: <span class="hljs-string">'./src/about/index'</span> <span class="hljs-comment">// 关于页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置输出"><a href="#配置输出" class="headerlink" title="配置输出"></a>配置输出</h3><p>本例我们不进行CDN部署，因此输出点配置比较简单。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123; <span class="hljs-comment">// 输出配置</span></span><br><span class="line">  path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出资源目录</span></span><br><span class="line">  filename: <span class="hljs-string">'scripts/[name].[hash:8].js'</span>, <span class="hljs-comment">// 入口点JS命名规则</span></span><br><span class="line">  chunkFilename: <span class="hljs-string">'scripts/[name]:[chunkhash:8].js'</span>, <span class="hljs-comment">// 公共模块命名规则 </span></span><br><span class="line">  publicPath: <span class="hljs-string">'/'</span> <span class="hljs-comment">// 资源路径前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置开发服务器"><a href="#配置开发服务器" class="headerlink" title="配置开发服务器"></a>配置开发服务器</h3><p>本地开发时不需要每次都编译完Webpack再访问，通过webpack-dev-server，我们可以边开发变查看效果，文件会实时编译。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">        contentBase: <span class="hljs-string">'./dist'</span>, <span class="hljs-comment">// 开发服务器配置</span></span><br><span class="line">        hot: <span class="hljs-literal">true</span> <span class="hljs-comment">// 热加载</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="配置loader"><a href="#配置loader" class="headerlink" title="配置loader"></a>配置loader</h3><p>本例中没有使用ES6进行编程，但是引用了一个非CommonJS的js模块<code>Zepto</code>，传统用法中在HTML页面引入Zepto就会在window下挂载全局对象Zepto。但是在Webpack开发中不建议使用全局变量，否则模块化的优势将受到影响。</p><p>通过使用exports-loader和script-loader，我们可以将Zepto包装为CommonJS模块进入导入。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-built_in">require</span>.resolve(<span class="hljs-string">'zepto'</span>),</span><br><span class="line">                loader: <span class="hljs-string">'exports-loader?window.Zepto!script-loader'</span> <span class="hljs-comment">// 将window.Zepto包装为CommonJS模块</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'less-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="hljs-string">'file-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: <span class="hljs-string">'images/[name].[hash:8].[ext]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.(htm|html)$/i</span>,</span><br><span class="line">                loader: <span class="hljs-string">'html-withimg-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="配置optimization"><a href="#配置optimization" class="headerlink" title="配置optimization"></a>配置optimization</h3><p>主要进行公共模块的打包配置。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    name: <span class="hljs-string">"vendor"</span>,</span><br><span class="line">                    test: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                    chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">                    priority: <span class="hljs-number">10</span>, <span class="hljs-comment">// 优先级</span></span><br><span class="line">                &#125;,</span><br><span class="line">                styles: &#123;</span><br><span class="line">                    name: <span class="hljs-string">'styles'</span>,</span><br><span class="line">                    test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                    chunks: <span class="hljs-string">'all'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="配置plugin"><a href="#配置plugin" class="headerlink" title="配置plugin"></a>配置plugin</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> CleanWebpackPlugin(), <span class="hljs-comment">// 清理发布目录</span></span><br><span class="line">        <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            chunks: [<span class="hljs-string">'home'</span>, <span class="hljs-string">'vendor'</span>, <span class="hljs-string">'styles'</span>], <span class="hljs-comment">// 声明本页面使用到的模块，有主页，公共JS以及公共CSS</span></span><br><span class="line">            filename: <span class="hljs-string">'index.html'</span>, <span class="hljs-comment">// 输出路径，这里直接输出到dist的根目录，也就是dist/index.html</span></span><br><span class="line">            template: <span class="hljs-string">'./src/home/index.html'</span>, <span class="hljs-comment">// HTML模板文件路径</span></span><br><span class="line">            minify: &#123; </span><br><span class="line">                removeComments: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 移除注释</span></span><br><span class="line">                collapseWhitespace: <span class="hljs-literal">true</span> <span class="hljs-comment">// 合并空格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            chunks: [<span class="hljs-string">'about'</span>, <span class="hljs-string">'vendor'</span>, <span class="hljs-string">'styles'</span>],</span><br><span class="line">            filename: <span class="hljs-string">'about/index.html'</span>, <span class="hljs-comment">// 输出到dist/about/index.html</span></span><br><span class="line">            template: <span class="hljs-string">'./src/about/index.html'</span>,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeComments: <span class="hljs-literal">true</span>,</span><br><span class="line">                collapseWhitespace: <span class="hljs-literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">            filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> webpack.NamedModulesPlugin(), <span class="hljs-comment">// 热加载使用</span></span><br><span class="line">        <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="hljs-comment">// 热加载使用</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>部分示例代码如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/about/index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'zepto'</span>);</span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">'normalize.css'</span>);</span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">'../common/style.less'</span>);</span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">'./style.less'</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="hljs-string">'#about'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="hljs-string">'点击了about按钮'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>和传统的JS有点不太一样，多了一些css的require，前面说过，webpack把所有资源当做JS模块，因此这是推荐的做法。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!--首页--&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/about"</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"logo"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"home"</span>&gt;</span>首页按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面中不再需要编写JS。</p><blockquote><p>注意：html中使用<img>标签导入图片的编译，目前还没有好的解决办法，可以通过css background的形式进行处理</p></blockquote><h3 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h3><p>开发模式下直接启用webpack-dev-server即可，会自动加载工作目录下的webpack.config.js</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package.json</span></span><br><span class="line"><span class="hljs-string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-string">"build"</span>: <span class="hljs-string">"webpack"</span>,</span><br><span class="line">    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"webpack-dev-server"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h3><p>生产模式下使用webpack编译，编译完成后输出最终文件。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="输出效果"><a href="#输出效果" class="headerlink" title="输出效果"></a>输出效果</h3><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── about</span><br><span class="line">│   └── index.html</span><br><span class="line">├── images</span><br><span class="line">│   └── logo<span class="hljs-selector-class">.b15c113a</span><span class="hljs-selector-class">.png</span></span><br><span class="line">├── index.html</span><br><span class="line">├── scripts</span><br><span class="line">│   ├── about.<span class="hljs-number">3</span>fb4aa0f.js</span><br><span class="line">│   ├── home.<span class="hljs-number">3</span>fb4aa0f.js</span><br><span class="line">│   └── vendor:ed5b7d31.js</span><br><span class="line">└── styles</span><br><span class="line">    ├── about.<span class="hljs-number">71</span>eb65e9.css</span><br><span class="line">    ├── home<span class="hljs-selector-class">.cd2738e6</span><span class="hljs-selector-class">.css</span></span><br><span class="line">    └── vendor.<span class="hljs-number">9</span>df34e21.css</span><br></pre></td></tr></table></figure><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>项目已经托管到github，有需要的读者可以自取。</p><p><a href="https://github.com/xialeistudio/webpack-multipage-example" target="_blank" rel="noopener">https://github.com/xialeistudio/webpack-multipage-example</a></p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Webpack是一个现在Javascript应用程序的模块化打包器，在Webpack中JS/CSS/图片等资源都被视为JS模块，简化了编程。当Webpack构建时，会递归形成一个模块依赖关系图，然后将所有的模块打包为一个或多个bundle。&lt;/p&gt;
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中的CHAR和VARCHAR到底支持多长?</title>
    <link href="https//www.ddhigh.com/2019/11/14/mysql-char-varchar-max-length.html"/>
    <id>https//www.ddhigh.com/2019/11/14/mysql-char-varchar-max-length.html</id>
    <published>2019-11-14T09:00:00.000Z</published>
    <updated>2019-11-14T09:45:37.827Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究MySQL的数据类型，我们知道，选择合适的数据类型和数据长度对MySQL的性能影响是不可忽视的，小字段意味着可以MySQL可以读取更多的记录，从而加快查询速度。</p><p>网上该问题的答案有很多版本，还是通过实践得出的结论比较靠谱。</p><p>先说结论(MySQL版本5.7.27)</p><ul><li>CHAR最大255<strong>字符</strong>，字符集对CHAR没有影响，CHAR()括号内填写最大字符数255</li><li>VARCHAR最大65535<strong>字节</strong>，字符集对VARCHAR有影响<ul><li>UTF8字符集，每个字符大小3字节，所以65535/3 = 21845，最大支持21845字符，因此VARCHAR()括号中最大填写21845字符</li><li>GBK字符集，每个字符大小2字节，所以65535/2 = 32767.5，最大支持32767<strong>字符</strong>，因此VARCHAR()括号中最大填写32767字符</li></ul></li></ul><h2 id="验证过程"><a href="#验证过程" class="headerlink" title="验证过程"></a>验证过程</h2><h3 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h3><p>UTF8字符集(1个字符占用3个字节)</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`test`</span>.<span class="hljs-string">`demo`</span>  (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`title`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">256</span>) <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8 <span class="hljs-keyword">COLLATE</span> = utf8_general_ci;</span><br></pre></td></tr></table></figure><p>MySQL提示错误</p><figure class="highlight basic hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">1074 </span>- Column length too big <span class="hljs-keyword">for</span> column <span class="hljs-comment">'title' (max = 255); use BLOB or TEXT instead</span></span><br></pre></td></tr></table></figure><p>GBK字符集(1个字符占用2个字节)</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`test`</span>.<span class="hljs-string">`demo`</span>  (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`title`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">256</span>) <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = gbk <span class="hljs-keyword">COLLATE</span> = gbk_chinese_ci;</span><br></pre></td></tr></table></figure><p>MySQL提示错误</p><figure class="highlight basic hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">1074 </span>- Column length too big <span class="hljs-keyword">for</span> column <span class="hljs-comment">'title' (max = 255); use BLOB or TEXT instead</span></span><br></pre></td></tr></table></figure><blockquote><p>结论：CHAR最大长度和字符集没有关系，因此CHAR()括号内填写字符大小，最终数据的字节大小随着字符集不同而不同</p></blockquote><h3 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h3><p>UTF8字符集(1个字符占用3个字节)</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`test`</span>.<span class="hljs-string">`demo`</span>  (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`title`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">65535</span>) <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8 <span class="hljs-keyword">COLLATE</span> = utf8_general_ci;</span><br></pre></td></tr></table></figure><p>MySQL提示错误</p><figure class="highlight basic hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">1074 </span>- Column length too big <span class="hljs-keyword">for</span> column <span class="hljs-comment">'title' (max = 21845); use BLOB or TEXT instead</span></span><br></pre></td></tr></table></figure><p>MySQL提示的最大长度为21845，通过UTF8字符集的大小可知VARCHAR()括号中指的是字符大小。</p><p>UTF8MB4字符集(1个字符占用4个字节)</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`test`</span>.<span class="hljs-string">`demo`</span>  (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">UNSIGNED</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`title`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">65535</span>) <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>MySQL提示错误</p><figure class="highlight basic hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">1074 </span>- Column length too big <span class="hljs-keyword">for</span> column <span class="hljs-comment">'title' (max = 16383); use BLOB or TEXT instead</span></span><br></pre></td></tr></table></figure><p>MySQL提示的最大长度为16383，通过UTF8MB4字符集大小可知VARCHAR()括号中指的是字符大小。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在研究MySQL的数据类型，我们知道，选择合适的数据类型和数据长度对MySQL的性能影响是不可忽视的，小字段意味着可以MySQL可以读取更多的记录，从而加快查询速度。&lt;/p&gt;
&lt;p&gt;网上该问题的答案有很多版本，还是通过实践得出的结论比较靠谱。&lt;/p&gt;
&lt;p&gt;先说结论(M
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="mysql" scheme="https//www.ddhigh.com/categories/backend/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>深入浅出ES6的迭代器</title>
    <link href="https//www.ddhigh.com/2019/11/14/es6-iterator.html"/>
    <id>https//www.ddhigh.com/2019/11/14/es6-iterator.html</id>
    <published>2019-11-14T03:00:00.000Z</published>
    <updated>2019-11-14T09:45:08.045Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器是ES2015中新增的规范，与之相关的for…of也是ES2015新增的。</p><p>本文来深入研究一下迭代器是什么，以及迭代器能够干什么？</p><p>或许你对for … of的执行还不了解，比如什么情况下可以使用for … of去遍历对象，什么情况下会报错等等，这篇文章应该能帮到你。</p><h2 id="迭代器协议"><a href="#迭代器协议" class="headerlink" title="迭代器协议"></a>迭代器协议</h2><blockquote><p> for … of只能迭代满足【迭代器协议】的对象</p></blockquote><p>可迭代对象的必须存在[Symbol.iterator]方法，该方法一个无参函数，返回迭代器协议的对象。</p><p>迭代器对象包含一个<code>next()</code>函数，该函数返回值有两种:</p><ul><li><p>如果迭代未结束，返回如下</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> &#123;</span><br><span class="line">  value: <span class="hljs-string">'item'</span>, <span class="hljs-comment">// item是本次迭代值，可以为任意对象</span></span><br><span class="line">  done: <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果迭代已结束，返回如下</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> &#123;</span><br><span class="line">  done: <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>下面是未提供迭代器的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">  id: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> obj) &#123; <span class="hljs-comment">// TypeError: obj is not iterable</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是提供迭代器的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">    id: <span class="hljs-number">1</span>,</span><br><span class="line">    [<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 迭代器属性</span></span><br><span class="line">        <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">Object</span>.keys(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 读取对象键列表</span></span><br><span class="line">        <span class="hljs-keyword">let</span> keyIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 遍历未知</span></span><br><span class="line">        <span class="hljs-keyword">const</span> self = <span class="hljs-keyword">this</span>; <span class="hljs-comment">// 保存this，next中的function会有自己的this</span></span><br><span class="line">        <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 返回带有next()的对象</span></span><br><span class="line">            next: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (keyIndex &lt; keys.length) &#123; <span class="hljs-comment">// 防止越界</span></span><br><span class="line">                    <span class="hljs-keyword">const</span> key = keys[keyIndex];</span><br><span class="line">                    keyIndex++; <span class="hljs-comment">// 移动到下一个位置</span></span><br><span class="line">                    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                        value: [key, self[key]], <span class="hljs-comment">// 键值对数组</span></span><br><span class="line">                        done: <span class="hljs-literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 遍历结束</span></span><br><span class="line">                    done: <span class="hljs-literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过给obj提供迭代器方法让obj也可以使用for…of遍历。</p><p>直接去理解迭代器概念比较困难，用一个简单的例子去简化理解是一件很容易的事情。</p><h2 id="其他可迭代对象"><a href="#其他可迭代对象" class="headerlink" title="其他可迭代对象"></a>其他可迭代对象</h2><p><code>String</code>,<code>Array</code>,<code>Map</code>,<code>Set</code>,<code>TypedArray</code>是所有内置的可迭代对象，他们的原型对象都有一个[Symbol.iterator]方法。</p><p>下面是两种方法迭代String对象的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// for ... of</span></span><br><span class="line"><span class="hljs-keyword">const</span> str = <span class="hljs-string">'xialei'</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> char <span class="hljs-keyword">of</span> str) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// iterator</span></span><br><span class="line"><span class="hljs-keyword">const</span> str = <span class="hljs-string">'xialei'</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> iterator = str[<span class="hljs-built_in">Symbol</span>.iterator](); <span class="hljs-comment">// 返回一个&#123;next:方法&#125;对象</span></span><br><span class="line"><span class="hljs-keyword">let</span> obj = <span class="hljs-literal">null</span>;</span><br><span class="line"><span class="hljs-keyword">do</span> &#123;</span><br><span class="line">    obj = iterator.next(); <span class="hljs-comment">// 返回的是对象，&#123;value:任意对象,done:布尔型&#125;</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(obj.value);</span><br><span class="line">&#125;<span class="hljs-keyword">while</span>(!obj.done);</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>迭代器协议虽然一般用的比较少，但是了解其原理是非常有必要的，这样才可以才需要的实现定义自己的迭代器来遍历对象。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迭代器是ES2015中新增的规范，与之相关的for…of也是ES2015新增的。&lt;/p&gt;
&lt;p&gt;本文来深入研究一下迭代器是什么，以及迭代器能够干什么？&lt;/p&gt;
&lt;p&gt;或许你对for … of的执行还不了解，比如什么情况下可以使用for … of去遍历对象，什么情况下会报错等
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="es6" scheme="https//www.ddhigh.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出ES6的标准内置对象Proxy</title>
    <link href="https//www.ddhigh.com/2019/11/04/es6-proxy.html"/>
    <id>https//www.ddhigh.com/2019/11/04/es6-proxy.html</id>
    <published>2019-11-04T04:00:00.000Z</published>
    <updated>2019-11-04T09:23:44.299Z</updated>
    
    <content type="html"><![CDATA[<p>Proxy是ES6规范定义的标准内置对象，可以对目标对象的读取、函数调用等操作进行拦截。一般来说，通过Proxy可以让目标对象“可控”，比如是否能调用对象的某个方法，能否往对象添加属性等等。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> originalObj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> publicObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(originalObj, &#123;</span><br><span class="line">    <span class="hljs-keyword">set</span>(target, prop, value) &#123;</span><br><span class="line">        <span class="hljs-comment">// 将属性值转化为大写</span></span><br><span class="line">        target[prop] = value.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">publicObj.name = <span class="hljs-string">'xialei'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(publicObj.name); <span class="hljs-comment">// XIALEI</span></span><br></pre></td></tr></table></figure><blockquote><p>从上例可以看出Proxy不需要更改目标对象(也就是originalObj)，就可以对originalObj的行为进行拦截。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>let obj = new Proxy(target, handler);</p></blockquote><ul><li>target <code>Object</code> 目标对象。可以是任何类型的对象，甚至包括原生对象（比如数组，函数，另一个Proxy对象）</li><li>handler <code>Object</code> 代理行为对象。访问目标对象时会自动触发该handler的对应属性。</li></ul><p>和大多数开发者一样，刚开始学习Proxy的时候，这个handler不知道是个什么东西，什么时候能触发。</p><p>先看一个简单的例子，看看handler到底是什么东西。假设我们开发一个游戏脚本，由于内存修改器的盛行，我们需要对内存中的数据进行安全处理，但是不能影响外部使用，我们使用Proxy完成这个功能。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> gameObj = &#123;</span><br><span class="line">    hp: <span class="hljs-number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">const</span> publicGameObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(gameObj, &#123;</span><br><span class="line">    <span class="hljs-keyword">get</span>(target, prop) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> target[prop]/<span class="hljs-number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">set</span>(target, prop, value) &#123;</span><br><span class="line">      target[prop] = value*<span class="hljs-number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  publicGameObj.hp = <span class="hljs-number">10000</span>;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(publicGameObj.hp, gameObj); <span class="hljs-comment">// 10000 &#123;hp: 20000&#125;</span></span><br></pre></td></tr></table></figure><p>gameObj是我们在内存中真实存储数据的地方，可以看到HP是20000，但是publicGameObj.hp是10000，外部使用publicGameObj.hp即可(比如UI层展示HP为10000);</p><h3 id="例程handler使用到的属性"><a href="#例程handler使用到的属性" class="headerlink" title="例程handler使用到的属性"></a>例程handler使用到的属性</h3><ul><li>get <code>publicGameObj.hp</code>进行了读取操作，因此会自动触发handler的get方法</li><li>set <code>publicGameObj.hp=10000</code>进行了赋值操作，因此为自动触发handler的set方法</li></ul><h2 id="handler对象"><a href="#handler对象" class="headerlink" title="handler对象"></a>handler对象</h2><p>handler对象是Proxy的核心基础，所有对目标对象的操作都需要通过handler来处理，虽然内容有点多，但是常用的不多。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>目标对象 被代理的对象。外部不能直接访问(当然语法上是可以访问的，你都用上Proxy了，还访问他干嘛?)</li><li>代理对象 new Proxy的返回值。外部直接访问。目标对象会作为handler对应函数的参数传入</li><li>带*号的是常用属性</li></ul><blockquote><p>所有访问都是对代理对象访问才会触发，直接访问目标对象不会触发(代理对象压根没参与进来，如果触发那一定是出bug了)</p></blockquote><h3 id="handler-getPrototypeOf-target"><a href="#handler-getPrototypeOf-target" class="headerlink" title="handler.getPrototypeOf(target)"></a>handler.getPrototypeOf(target)</h3><p>说明：获取目标对象的原型</p><p>触发时机：Object.getPrototypeOf(代理对象)</p><p>参数：</p><ul><li>target <code>Object</code> 目标对象</li></ul><p>返回值：</p><ul><li><code>Object</code> 对象的原型</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array = [];</span><br><span class="line"><span class="hljs-keyword">const</span> myArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(array, &#123;</span><br><span class="line">  getPrototypeOf(target) &#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取对象原型'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.getPrototypeOf(array);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(myArray));</span><br><span class="line"><span class="hljs-comment">// 输出</span></span><br><span class="line"><span class="hljs-comment">// 读取对象原型</span></span><br><span class="line"><span class="hljs-comment">// []</span></span><br></pre></td></tr></table></figure><h3 id="handler-setPrototypeOf-target-prototype"><a href="#handler-setPrototypeOf-target-prototype" class="headerlink" title="handler.setPrototypeOf(target, prototype)"></a>handler.setPrototypeOf(target, prototype)</h3><p>说明：设置对象的原型</p><p>触发时机：Object.setPrototypeOf(代理对象, 原型)<br>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prototype <code>Object</code> 原型对象或null</li></ul><p>返回值：</p><ul><li><code>boolean</code> 设置成功返回true，否则返回false(比如不让设置)</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array = [];</span><br><span class="line"><span class="hljs-keyword">const</span> myArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(array, &#123;</span><br><span class="line">    setPrototypeOf(target, prototype) &#123;</span><br><span class="line">        <span class="hljs-built_in">Object</span>.setPrototypeOf(target, prototype);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-built_in">Object</span>.setPrototypeOf(myArray, <span class="hljs-built_in">Object</span>.prototype);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(myArray)); <span class="hljs-comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="handler-isExtensible-target"><a href="#handler-isExtensible-target" class="headerlink" title="handler.isExtensible(target)"></a>handler.isExtensible(target)</h3><p>说明：检测对象是否可扩展(个人理解：也就是能否添加属性、函数)<br>触发时机：Object.isExtensible(代理对象)<br>参数：</p><ul><li>target <code>Object</code> 目标对象</li></ul><p>返回参数：</p><ul><li><code>boolean</code></li></ul><h3 id="handler-preventExtensions-target"><a href="#handler-preventExtensions-target" class="headerlink" title="handler.preventExtensions(target)"></a>handler.preventExtensions(target)</h3><p>说明：设置目标对象为不可扩展<br>触发时机：Object.preventExtensions(代理对象)<br>参数：</p><ul><li>target <code>Object</code> 目标对象</li></ul><p>返回值：</p><ul><li><code>boolean</code> 设置目标对象不可扩展后返回true，不管是否设置目标对象不可扩展，返回false都会报错</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    preventExtensions(target) &#123;</span><br><span class="line">        <span class="hljs-built_in">Object</span>.preventExtensions(target);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Object</span>.preventExtensions(p);</span><br><span class="line"></span><br><span class="line">p.a = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(p); <span class="hljs-comment">// &#123;&#125; 目标对象不可扩展，所以a属性设置不进去</span></span><br></pre></td></tr></table></figure><h3 id="handler-getOwnPropertyDescriptor-target-prop"><a href="#handler-getOwnPropertyDescriptor-target-prop" class="headerlink" title="*handler.getOwnPropertyDescriptor(target, prop)"></a>*handler.getOwnPropertyDescriptor(target, prop)</h3><p>说明：获取目标对象属性的描述符</p><p>触发时机：Object.getOwnPropertyDescriptor(代理对象)</p><p>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prop <code>&lt;string|Symbol|number&gt;</code> 属性名</li></ul><p>返回参数：</p><ul><li><code>Object</code> 属性描述符</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    getOwnPropertyDescriptor(target, prop) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> target[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="hljs-string">'a'</span>)); <span class="hljs-comment">// &#123; value: 1, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure><h3 id="handler-defineProperty-target-prop-properties"><a href="#handler-defineProperty-target-prop-properties" class="headerlink" title="*handler.defineProperty(target,prop,properties)"></a>*handler.defineProperty(target,prop,properties)</h3><p>说明：在对象上定义属性(添加新属性或修改现有属性)<br>触发时机：Object.defineProperty(代理对象，属性名，属性描述对象)<br>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prop <code>string|number|Symbol</code> 属性名</li><li>properties <code>Object</code> 属性描述对象</li></ul><p>返回值：</p><ul><li><code>boolean</code> 定义成功返回true，定义失败或不允许定义返回false</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">    name2: <span class="hljs-string">'xx'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    defineProperty(target, prop, properties) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'name'</span>) &#123;</span><br><span class="line">            <span class="hljs-built_in">Object</span>.defineProperty(target, prop, properties);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Object</span>.defineProperty(p, <span class="hljs-string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="hljs-string">'aaa'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Object</span>.defineProperty(p, <span class="hljs-string">'name2'</span>, &#123; <span class="hljs-comment">// TypeError</span></span><br><span class="line">    value: <span class="hljs-string">'aaa'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="handler-has-target-prop"><a href="#handler-has-target-prop" class="headerlink" title="*handler.has(target, prop)"></a>*handler.has(target, prop)</h3><p>说明：判断对象是否有指定属性<br>触发时机：prop in 代理对象<br>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prop <code>string|number|Symbol</code> 属性名</li></ul><p>返回值：</p><ul><li><code>boolean</code></li></ul><h3 id="handler-get-target-prop-receiver"><a href="#handler-get-target-prop-receiver" class="headerlink" title="*handler.get(target, prop, receiver)"></a>*handler.get(target, prop, receiver)</h3><p>说明: 属性读取器<br>触发时机：读取代理对象的属性时触发</p><p>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prop <code>string|number|Symbol</code> 属性名</li><li>receiver <code>Proxy</code> 代理对象或者原型链上的代理对象</li></ul><p>返回值：</p><ul><li>任何值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="hljs-keyword">get</span>(target, prop) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(prop <span class="hljs-keyword">in</span> target) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> target[prop].toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(p.name); <span class="hljs-comment">// XIALEI</span></span><br></pre></td></tr></table></figure><h3 id="handler-set-target-prop-value-receiver"><a href="#handler-set-target-prop-value-receiver" class="headerlink" title="*handler.set(target, prop, value, receiver)"></a>*handler.set(target, prop, value, receiver)</h3><p>说明：属性写入访问器<br>触发时机：对代理对象的属性进行赋值时触发</p><p>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prop <code>string|number|Symbol</code> 属性名</li><li>value <code>any</code> 属性值</li><li>receiver <code>Proxy</code> 代理对象或原型链上的代理对象</li></ul><p>返回值：</p><ul><li><code>boolean</code> 赋值成功返回true，否则返回false。严格模式下返回false会抛出TypeError</li></ul><h3 id="handler-deleteProperty-target-prop"><a href="#handler-deleteProperty-target-prop" class="headerlink" title="*handler.deleteProperty(target, prop)"></a>*handler.deleteProperty(target, prop)</h3><p>说明：删除对象属性<br>触发时机：对代理对象的属性进行delete时触发</p><p>参数：</p><ul><li>target <code>Object</code> 目标对象</li><li>prop <code>string|number|Symbol</code> 属性名</li></ul><p>返回值：</p><ul><li><code>boolean</code> 删除成功返回true，否则返回false。严格模式下返回false会抛出TypeError</li></ul><h3 id="handler-apply-target-thisArg-args"><a href="#handler-apply-target-thisArg-args" class="headerlink" title="*handler.apply(target, thisArg, args)"></a>*handler.apply(target, thisArg, args)</h3><p>说明：拦截函数调用，被代理对象必须是函数<br>触发时机：</p><ul><li>直接调用函数 obj.xxx()或xxx()</li><li>apply/call</li></ul><p>参数：</p><ul><li>target <code>Object</code> 目标函数</li><li>thisArg <code>Object</code> this对象</li><li>args <code>Array</code> 参数列表</li></ul><p>返回值：</p><ul><li><code>any</code> 任何值</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> absSum = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(sum, &#123;</span><br><span class="line">    apply(target, thisArg, args) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> value = target.apply(thisArg, args);</span><br><span class="line">        <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">0</span> ? -value : value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(absSum(<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>)); <span class="hljs-comment">// 3，因为被拦截了</span></span><br></pre></td></tr></table></figure><h3 id="handler-construct-target-args"><a href="#handler-construct-target-args" class="headerlink" title="*handler.construct(target,args)"></a>*handler.construct(target,args)</h3><p>说明：拦截构造过程<br>触发时机：new 目标构造函数(…args)</p><p>参数：</p><ul><li>target <code>Function</code> 构造函数</li><li>args <code>Array</code> 构造函数的参数</li></ul><p>返回值：</p><ul><li><code>Object</code> 对象</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> P = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(Person, &#123;</span><br><span class="line">    construct(target, args, newTarget) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(newTarget, newTarget === P, newTarget === Person); <span class="hljs-comment">// [Function: Person] true false</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> target(args[<span class="hljs-number">0</span>].toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> P(<span class="hljs-string">'xialei'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(p); <span class="hljs-comment">// Person &#123; name: 'XIALEI' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><p>保护目标对象(通过钩子方法进行拦截)</p></li><li><p>数据转换(上文有一个内存保护的例子)</p></li><li><p>数据验证(不符合规则的值不允许设置)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> privateUser = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">    phone: <span class="hljs-string">'13888888888'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(privateUser, &#123;</span><br><span class="line">    <span class="hljs-keyword">set</span>(target, prop, value) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'phone'</span> &amp;&amp; !<span class="hljs-regexp">/^(\+86)?1[\d]&#123;10&#125;$/</span>.test(value)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        target[prop] = value;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.phone = <span class="hljs-string">'13666666666'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(user.phone); <span class="hljs-comment">// 13666666666</span></span><br><span class="line">user.phone = <span class="hljs-string">'+8613777777777'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(user.phone); <span class="hljs-comment">// +8613777777777</span></span><br><span class="line">user.phone = <span class="hljs-string">'1'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(user.phone); <span class="hljs-comment">// +8613777777777</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数据修正(也做数据标准化)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> privateUser = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">    phone: <span class="hljs-string">'13888888888'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(privateUser, &#123;</span><br><span class="line">    <span class="hljs-keyword">set</span>(target, prop, value) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'phone'</span> &amp;&amp; !<span class="hljs-regexp">/^(\+86)?1[\d]&#123;10&#125;$/</span>.test(value)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        target[prop] = value.replace(<span class="hljs-string">'+86'</span>,<span class="hljs-string">''</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.phone = <span class="hljs-string">'+8613666666666'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(user.phone); <span class="hljs-comment">// 13666666666</span></span><br></pre></td></tr></table></figure></li><li><p>添加实用方法</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> list = [</span><br><span class="line">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'xialei'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'13888888888'</span> &#125;,</span><br><span class="line">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'xialei1'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'13899999999'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> mList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(list, &#123;</span><br><span class="line">    <span class="hljs-keyword">get</span>(target, prop) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (prop <span class="hljs-keyword">in</span> target) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> target[prop];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> target) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (item.name === prop) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> firstItem = mList[<span class="hljs-number">0</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> itemXialei = mList[<span class="hljs-string">"xialei"</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(firstItem); <span class="hljs-comment">// &#123; name: 'xialei', phone: '13888888888' &#125;</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(itemXialei);<span class="hljs-comment">// &#123; name: 'xialei', phone: '13888888888' &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>提供易用API</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 本例对localStorage做了封装，可以像普通对象一样操作localStorage,而不需要调用方法</span></span><br><span class="line"><span class="hljs-keyword">const</span> storage = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(localStorage, &#123;</span><br><span class="line">    <span class="hljs-keyword">get</span>(target, prop) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> localStorage.getItem(prop);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">set</span>(target, prop, value) &#123;</span><br><span class="line">        localStorage.setItem(prop, value);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteProperty(target, prop) &#123;</span><br><span class="line">        localStorage.removeItem(prop);</span><br><span class="line">    &#125;,</span><br><span class="line">    has(target, prop) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> localStorage.getItem(prop) !== <span class="hljs-literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">storage.aaa = <span class="hljs-string">'1'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(storage.aaa); <span class="hljs-comment">// '1'</span></span><br><span class="line"><span class="hljs-keyword">delete</span> storage.aaa;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(storage.aaa); <span class="hljs-comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Proxy的语法虽然简单，但是可谓前途无量，比如开了一个Virtual Dom框架也是可以的。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Proxy是ES6规范定义的标准内置对象，可以对目标对象的读取、函数调用等操作进行拦截。一般来说，通过Proxy可以让目标对象“可控”，比如是否能调用对象的某个方法，能否往对象添加属性等等。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript h
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="es6" scheme="https//www.ddhigh.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ES6的Set类型</title>
    <link href="https//www.ddhigh.com/2019/10/31/es6-set.html"/>
    <id>https//www.ddhigh.com/2019/10/31/es6-set.html</id>
    <published>2019-10-31T04:00:00.000Z</published>
    <updated>2019-10-31T03:52:29.960Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容</p><ul><li>Set的基本使用</li><li>常用用法</li></ul><blockquote><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([iterator])</span><br></pre></td></tr></table></figure><ul><li>iterator <iterator> 与Map类似，Set接收一个可选的Iterator对象，所有元素将按照顺序不重复地添加到Set中。传递null或者undefined将返回一个空Set</iterator></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set();</span><br><span class="line">// 添加元素</span><br><span class="line"><span class="hljs-keyword">set</span>.add(1);</span><br><span class="line">// 移除元素</span><br><span class="line"><span class="hljs-keyword">set</span>.delete(1);</span><br><span class="line">// 检测元素是否存在</span><br><span class="line"><span class="hljs-keyword">set</span>.has(1);</span><br><span class="line">// 清空Set</span><br><span class="line"><span class="hljs-keyword">set</span>.clear();</span><br></pre></td></tr></table></figure><h2 id="数据类型的唯一性判定"><a href="#数据类型的唯一性判定" class="headerlink" title="数据类型的唯一性判定"></a>数据类型的唯一性判定</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set(undefined);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>.</span><br><span class="line">    add("string").add("string").</span><br><span class="line">    add(1).add(1).</span><br><span class="line">    add(true).add(true).</span><br><span class="line">    add(null).add(null).</span><br><span class="line">    add(undefined).add(undefined)</span><br><span class="line">    .add(NaN).add(NaN)</span><br><span class="line">    .add(&#123;&#125;).add(&#123;&#125;)</span><br><span class="line">    .add([]).add([])</span><br><span class="line">    .add(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;).add(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">set</span>);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Set</span> &#123;</span><br><span class="line">  <span class="hljs-string">'string'</span>,</span><br><span class="line">  <span class="hljs-number">1</span>,</span><br><span class="line">  <span class="hljs-literal">true</span>,</span><br><span class="line">  <span class="hljs-literal">null</span>,</span><br><span class="line">  <span class="hljs-literal">undefined</span>,</span><br><span class="line">  <span class="hljs-literal">NaN</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  [],</span><br><span class="line">  [],</span><br><span class="line">  [<span class="hljs-built_in">Function</span>],</span><br><span class="line">  [<span class="hljs-built_in">Function</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>string/number/boolean/null/undefined/NaN是使用值判重<ul><li>NaN!==NaN，但是Set也只会存一份，所以值判定应该不完全是用===做的</li></ul></li><li>object/array/function等object类型使用引用判重</li></ul><h2 id="Set的迭代"><a href="#Set的迭代" class="headerlink" title="Set的迭代"></a>Set的迭代</h2><p>for…of</p><blockquote><p>由于Set实现了Symol.iteator方法，所以可以使用for…of迭代</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set(undefined);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>.add("string").add("string");</span><br><span class="line"></span><br><span class="line">for (const v of <span class="hljs-keyword">set</span>.entries()) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forEach</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set(undefined);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>.add("string").add("string");</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">set</span>.forEach(function(value) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>Set和数组相互转化</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set(array); // 数组转化为<span class="hljs-keyword">set</span></span><br><span class="line">const newArray = [...<span class="hljs-keyword">set</span>]; // <span class="hljs-keyword">set</span>转化为数组</span><br></pre></td></tr></table></figure><p>去除字符串重复字符</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-string">'aabbcc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set(s);</span><br><span class="line">const newString = [...<span class="hljs-keyword">set</span>].join('');</span><br><span class="line">console.log(newString); // abc</span><br></pre></td></tr></table></figure><p>数组去重</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set(list);</span><br><span class="line">console.log([...<span class="hljs-keyword">set</span>]); // [1,2,3]</span><br></pre></td></tr></table></figure><p>并集</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set([1,2,3]);</span><br><span class="line">const set2 = new Set([1,2,3,4]);</span><br><span class="line">const set3 = new Set([...<span class="hljs-keyword">set</span>], [...set2]); // [1, 2, 3]</span><br></pre></td></tr></table></figure><p>交集</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set([1,2,3]);</span><br><span class="line">const set2 = new Set([1,2,3,4]);</span><br><span class="line">const set3 = new Set([...<span class="hljs-keyword">set</span>].filter(item =&gt; set2.has(item))); // [1, 2, 3]</span><br></pre></td></tr></table></figure><p>差集</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">set</span> = new Set([1,2,3]);</span><br><span class="line">const set2 = new Set([1,2,3,4]);</span><br><span class="line">const set3 = new Set([...set2].filter(item =&gt; !<span class="hljs-keyword">set</span>.has(item))); // [4], 注意set2和<span class="hljs-keyword">set</span>的顺序</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在需要唯一性的场景中，Set使用起来比数组要方便许多，比如添加标签，这个肯定是不重复的，用Set去实现就可以省去重复判断之类的操作，可以专注业务逻辑。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set的基本使用&lt;/li&gt;
&lt;li&gt;常用用法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="es6" scheme="https//www.ddhigh.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>我是如何发现我的文章被侵权以及如何得到侵权网站的联系方式的?</title>
    <link href="https//www.ddhigh.com/2019/10/30/twblog.html"/>
    <id>https//www.ddhigh.com/2019/10/30/twblog.html</id>
    <published>2019-10-30T04:00:00.000Z</published>
    <updated>2019-10-30T03:41:33.215Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容</p><ul><li>如何发现自己的文章被侵权</li><li>如何结合whois信息查询侵权网站的联系方式</li></ul><blockquote><p>声明：本文只做技术研究，请勿用于非法目的，如果恶意使用造成任何法律责任本人概不负责！</p></blockquote><h2 id="发现侵权"><a href="#发现侵权" class="headerlink" title="发现侵权"></a>发现侵权</h2><p>我的文章除了发布在博客之外，还会同步到思否平台。自己没事的时候会去看看百度统计，比较关注来源网站(也就是referer)，一般来说通过搜索引擎过来的流量我不太关注，私人网站过来的就比较关注了，昨天查看来源的时候看到了一个新网站。</p><p><img src="https://static.ddhigh.com/blog/2019-10-30-034117.png" alt="image-20191030111724873"></p><p>可以看到这个 <a href="http://www.twblogs.net是一个普通网站，点进去发现这样一篇文章。" target="_blank" rel="noopener">www.twblogs.net是一个普通网站，点进去发现这样一篇文章。</a></p><p><img src="https://static.ddhigh.com/blog/2019-10-30-031835.png" alt="image-20191030111833685"></p><p>可以看到这篇文章的作者是xialeistudio(也就是我常用的网络用户名)，可我压根就没听说过这个网站，我意识到可能被爬虫爬取了。</p><p>点击作者进入到作者的文章页，发现我昨天下午刚发布没多久的文章就被爬了。</p><p><img src="https://static.ddhigh.com/blog/2019-10-30-032027.png" alt="image-20191030112018569"></p><p>然后我去查看nginx的访问日志，没有发现异常访问，有个IP虽然是美国的，但是是Google的爬虫。这意味着文章不是直接爬取我的博客来的。</p><blockquote><p>nginx的访问日志过滤使用shell命令即可做到，不过这不是本文的重点，此处略过</p></blockquote><p>那就只剩下思否和掘金，通过文章中的公众号图片二维码，我发现了爬取的文章来源。</p><p><img src="https://static.ddhigh.com/blog/2019-10-30-032208.png" alt="image-20191030112207253"></p><p>可以看到是通过思否爬取到的。</p><h3 id="侵权结论"><a href="#侵权结论" class="headerlink" title="侵权结论"></a>侵权结论</h3><ul><li>伪造用户名爬取了思否大量的文章，截止发文时大概爬了三四十篇文章</li><li>思否应该并不知道这件事，应该早期的文章都爬过来了（包括我在思否已经删除的文章）</li></ul><h2 id="获取侵权网站联系方式"><a href="#获取侵权网站联系方式" class="headerlink" title="获取侵权网站联系方式"></a>获取侵权网站联系方式</h2><p>目前手头只有一个域名<a href="https://www.twblogs.net/" target="_blank" rel="noopener">https://www.twblogs.net</a>，先去站长工具的whois查询工具<a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a>查询一下。</p><blockquote><p>whois：用来查询域名注册信息的一种技术</p></blockquote><p>通过查询并没有得到什么有效的信息。看来是whois做了保护处理。</p><p><img src="https://static.ddhigh.com/blog/2019-10-30-032650.png" alt="image-20191030112649319"></p><p>不过没关系，目前得到了twblogs.net的域名提供商是Goddy，我们可以到域名提供商的网站看一下Whois信息</p><p><img src="https://static.ddhigh.com/blog/2019-10-30-032808.png" alt="image-20191030112807217"></p><p>浏览器打开whois.godaddy.com输入<a href="http://www.twblogs.net就可以了，查询到的Whois信息如下：" target="_blank" rel="noopener">www.twblogs.net就可以了，查询到的Whois信息如下：</a></p><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">WHOIS 搜索结果</span><br><span class="line">Domain <span class="hljs-string">Name:</span> twblogs.net</span><br><span class="line">Registry Domain <span class="hljs-string">ID:</span> <span class="hljs-number">2330628228</span>_DOMAIN_NET-VRSN</span><br><span class="line">Registrar WHOIS <span class="hljs-string">Server:</span> whois.godaddy.com</span><br><span class="line">Registrar <span class="hljs-string">URL:</span> <span class="hljs-string">http:</span><span class="hljs-comment">//www.godaddy.com</span></span><br><span class="line">Updated <span class="hljs-string">Date:</span> <span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-09</span><span class="hljs-string">T11:</span><span class="hljs-number">09</span>:<span class="hljs-number">43</span>Z</span><br><span class="line">Creation <span class="hljs-string">Date:</span> <span class="hljs-number">2018</span><span class="hljs-number">-11</span><span class="hljs-number">-08</span><span class="hljs-string">T16:</span><span class="hljs-number">30</span>:<span class="hljs-number">46</span>Z</span><br><span class="line">Registrar Registration Expiration <span class="hljs-string">Date:</span> <span class="hljs-number">2021</span><span class="hljs-number">-11</span><span class="hljs-number">-08</span><span class="hljs-string">T16:</span><span class="hljs-number">30</span>:<span class="hljs-number">46</span>Z</span><br><span class="line"><span class="hljs-string">Registrar:</span> GoDaddy.com, LLC</span><br><span class="line">Registrar IANA <span class="hljs-string">ID:</span> <span class="hljs-number">146</span></span><br><span class="line">Registrar Abuse Contact <span class="hljs-string">Email:</span> abuse<span class="hljs-meta">@godaddy</span>.com</span><br><span class="line">Registrar Abuse Contact <span class="hljs-string">Phone:</span> +<span class="hljs-number">1.4806242505</span></span><br><span class="line">Domain <span class="hljs-string">Status:</span> clientTransferProhibited <span class="hljs-string">http:</span><span class="hljs-comment">//www.icann.org/epp#clientTransferProhibited</span></span><br><span class="line">Domain <span class="hljs-string">Status:</span> clientUpdateProhibited <span class="hljs-string">http:</span><span class="hljs-comment">//www.icann.org/epp#clientUpdateProhibited</span></span><br><span class="line">Domain <span class="hljs-string">Status:</span> clientRenewProhibited <span class="hljs-string">http:</span><span class="hljs-comment">//www.icann.org/epp#clientRenewProhibited</span></span><br><span class="line">Domain <span class="hljs-string">Status:</span> clientDeleteProhibited <span class="hljs-string">http:</span><span class="hljs-comment">//www.icann.org/epp#clientDeleteProhibited</span></span><br><span class="line">Registry Registrant <span class="hljs-string">ID:</span> Not Available From Registry</span><br><span class="line">Registrant <span class="hljs-string">Name:</span> kiwi robert</span><br><span class="line">Registrant <span class="hljs-string">Organization:</span></span><br><span class="line">Registrant <span class="hljs-string">Street:</span> american</span><br><span class="line">Registrant <span class="hljs-string">City:</span> austin</span><br><span class="line">Registrant State/<span class="hljs-string">Province:</span> Anhui</span><br><span class="line">Registrant Postal <span class="hljs-string">Code:</span> <span class="hljs-number">73344</span></span><br><span class="line">Registrant <span class="hljs-string">Country:</span> CN</span><br><span class="line">Registrant <span class="hljs-string">Phone:</span> +<span class="hljs-number">86.15220288017</span></span><br><span class="line">Registrant Phone <span class="hljs-string">Ext:</span></span><br><span class="line">Registrant <span class="hljs-string">Fax:</span></span><br><span class="line">Registrant Fax <span class="hljs-string">Ext:</span></span><br><span class="line">Registrant <span class="hljs-string">Email:</span> <span class="hljs-number">898611548</span><span class="hljs-meta">@qq</span>.com</span><br><span class="line">Registry Admin <span class="hljs-string">ID:</span> Not Available From Registry</span><br><span class="line">Admin <span class="hljs-string">Name:</span> kiwi robert</span><br><span class="line">Admin <span class="hljs-string">Organization:</span></span><br><span class="line">Admin <span class="hljs-string">Street:</span> american</span><br><span class="line">Admin <span class="hljs-string">City:</span> austin</span><br><span class="line">Admin State/<span class="hljs-string">Province:</span> Anhui</span><br><span class="line">Admin Postal <span class="hljs-string">Code:</span> <span class="hljs-number">73344</span></span><br><span class="line">Admin <span class="hljs-string">Country:</span> CN</span><br><span class="line">Admin <span class="hljs-string">Phone:</span> +<span class="hljs-number">86.15220288017</span></span><br><span class="line">Admin Phone <span class="hljs-string">Ext:</span></span><br><span class="line">Admin <span class="hljs-string">Fax:</span></span><br><span class="line">Admin Fax <span class="hljs-string">Ext:</span></span><br><span class="line">Admin <span class="hljs-string">Email:</span> <span class="hljs-number">898611548</span><span class="hljs-meta">@qq</span>.com</span><br><span class="line">Registry Tech <span class="hljs-string">ID:</span> Not Available From Registry</span><br><span class="line">Tech <span class="hljs-string">Name:</span> kiwi robert</span><br><span class="line">Tech <span class="hljs-string">Organization:</span></span><br><span class="line">Tech <span class="hljs-string">Street:</span> american</span><br><span class="line">Tech <span class="hljs-string">City:</span> austin</span><br><span class="line">Tech State/<span class="hljs-string">Province:</span> Anhui</span><br><span class="line">Tech Postal <span class="hljs-string">Code:</span> <span class="hljs-number">73344</span></span><br><span class="line">Tech <span class="hljs-string">Country:</span> CN</span><br><span class="line">Tech <span class="hljs-string">Phone:</span> +<span class="hljs-number">86.15220288017</span></span><br><span class="line">Tech Phone <span class="hljs-string">Ext:</span></span><br><span class="line">Tech <span class="hljs-string">Fax:</span></span><br><span class="line">Tech Fax <span class="hljs-string">Ext:</span></span><br><span class="line">Tech <span class="hljs-string">Email:</span> <span class="hljs-number">898611548</span><span class="hljs-meta">@qq</span>.com</span><br><span class="line">Name <span class="hljs-string">Server:</span> JOBS.NS.CLOUDFLARE.COM</span><br><span class="line">Name <span class="hljs-string">Server:</span> LANA.NS.CLOUDFLARE.COM</span><br><span class="line"><span class="hljs-string">DNSSEC:</span> unsigned</span><br><span class="line">URL of the ICANN WHOIS Data Problem Reporting <span class="hljs-string">System:</span> <span class="hljs-string">http:</span><span class="hljs-comment">//wdprs.internic.net/</span></span><br><span class="line">&gt;&gt;&gt; Last update of WHOIS <span class="hljs-string">database:</span> <span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-30</span><span class="hljs-string">T03:</span><span class="hljs-number">00</span>:<span class="hljs-number">00</span>Z &lt;&lt;&lt;</span><br></pre></td></tr></table></figure><p>可以看到域名注册者有点意思，<code>手机号是深圳的</code>,<code>省份是安徽的</code>，估计是<code>安徽人到深圳上班</code>。</p><p>拿到联系信息之后就通知思否小姐姐去发律师函了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>通过百度统计发现来源网站</li><li>通过访问来源网站发现内容侵权</li><li>check博客服务器的nginx访问日志，看看有无明显异常的访问</li><li>通过文章中的图片发现文章是通过思否爬取的</li><li>检测侵权网站的whois信息，如果做了保护就去域名提供商获取whois</li><li>获取到联系方式之后可以联系思否小姐姐帮你处理，给思否点个赞，内容这块的响应速度很快</li></ol><p>大家发现侵权不要不作为，可以处理的方法如下：</p><ol><li>向国家新闻出版广电总局举报<a href="http://www.sapprft.gov.cn/sapprft/channels/6979.shtml" target="_blank" rel="noopener">http://www.sapprft.gov.cn/sapprft/channels/6979.shtml</a></li><li>联系平台（思否，知乎，掘金等等），平台会帮你发律师函啥的，毕竟内容使他们的根基</li></ol><blockquote><p>《中华人民共和国刑法》节选如下：</p><p>第二百一十七条　【侵犯著作权罪】以营利为目的，有下列侵犯著作权情形之一，违法所得数额较大或者有其他严重情节的，处三年以下有期徒刑或者拘役，并处或者单处罚金;违法所得数额巨大或者有其他特别严重情节的，<code>处三年以上七年以下有期徒刑，并处罚金</code>：</p><p>(一)未经著作权人许可，复制发行其文字作品、音乐、电影、电视、录像作品、计算机软件及其他作品的;</p><p>(二)出版他人享有专有出版权的图书的;</p><p>(三)未经录音录像制作者许可，复制发行其制作的录音录像的;</p><p>(四)制作、出售假冒他人署名的美术作品的。</p></blockquote><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何发现自己的文章被侵权&lt;/li&gt;
&lt;li&gt;如何结合whois信息查询侵权网站的联系方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：本文只做技术研究，请勿用于非法目的，如果恶意使用造成任何法律责任本人概不负责！&lt;/p&gt;

      
    
    </summary>
    
      <category term="other" scheme="https//www.ddhigh.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6的Map类型</title>
    <link href="https//www.ddhigh.com/2019/10/30/es6-map.html"/>
    <id>https//www.ddhigh.com/2019/10/30/es6-map.html</id>
    <published>2019-10-30T04:00:00.000Z</published>
    <updated>2019-10-30T09:45:12.860Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容</p><ul><li>Map的基本使用</li><li>Map支持的数据类型</li><li>Map的迭代</li><li>Map与其他对象的转化</li></ul><p>在Map出现之前，要实现类似需求，只能使用Object，但是Object还是存在一些问题的。</p><ul><li>如果使用Object作为key存储在{}中，key最终是当做<code>[object Object]</code>来使用的</li><li>Object的keys是无序的</li><li>无法安全遍历Object</li><li>无法直接获取Object大小</li></ul><blockquote><p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p></blockquote><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([iterator])</span><br></pre></td></tr></table></figure><ul><li>iterator <iterator> 可以是一个数组或者其他iterator对象，其元素为键值对(如<code>[&#39;key&#39;, &#39;value&#39;]</code>)。</iterator></li><li>null或undefined不会生效，返回一个空的Map</li><li>非iterator会抛出错误 <code>TypeError: object is not iterable</code></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line"><span class="hljs-comment">// Create</span></span><br><span class="line">map.set(<span class="hljs-string">'name'</span>,<span class="hljs-string">'xialei'</span>);</span><br><span class="line">map.set(<span class="hljs-string">'site'</span>, <span class="hljs-string">'https://www.ddhigh.com'</span>);</span><br><span class="line"><span class="hljs-comment">// Update</span></span><br><span class="line">map.set(<span class="hljs-string">'name'</span>, <span class="hljs-string">'xialeistudio'</span>);</span><br><span class="line"><span class="hljs-comment">// Read</span></span><br><span class="line">map.get(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-comment">// Delete</span></span><br><span class="line">map.delete(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-comment">// 清空</span></span><br><span class="line">map.clear();</span><br><span class="line"><span class="hljs-comment">// map大小</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.size);</span><br></pre></td></tr></table></figure><h2 id="数据类型测试"><a href="#数据类型测试" class="headerlink" title="数据类型测试"></a>数据类型测试</h2><p>JS中基本数据类型有string、number、boolean、null、undefined、symbol，复杂数据类型有object(包括object,array,function等)，还有个特殊的NaN(typeof结果是number)，分别对这些类型进行测试</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line"><span class="hljs-keyword">const</span> sKey = <span class="hljs-string">'key'</span>,</span><br><span class="line">    nKey = <span class="hljs-number">1</span>,</span><br><span class="line">    bKey = <span class="hljs-literal">true</span>,</span><br><span class="line">    nullKey = <span class="hljs-literal">null</span>,</span><br><span class="line">    uKey = <span class="hljs-literal">undefined</span>,</span><br><span class="line">    symbolKey = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"key"</span>),</span><br><span class="line">    oKey = &#123;&#125;,</span><br><span class="line">    ooKey = oKey,</span><br><span class="line">    aKey = [],</span><br><span class="line">    fKey = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;,</span><br><span class="line">    nanKey = <span class="hljs-literal">NaN</span>;</span><br><span class="line"></span><br><span class="line">map.set(sKey, <span class="hljs-string">"string"</span>)</span><br><span class="line">    .set(nKey, <span class="hljs-string">"number"</span>)</span><br><span class="line">    .set(bKey, <span class="hljs-string">"boolean"</span>)</span><br><span class="line">    .set(nullKey, <span class="hljs-string">"null"</span>)</span><br><span class="line">    .set(uKey, <span class="hljs-string">"undefined"</span>)</span><br><span class="line">    .set(symbolKey, <span class="hljs-string">"symbol"</span>)</span><br><span class="line">    .set(oKey, <span class="hljs-string">"object"</span>)</span><br><span class="line">    .set(aKey, <span class="hljs-string">"array"</span>)</span><br><span class="line">    .set(fKey, <span class="hljs-string">"function"</span>)</span><br><span class="line">    .set(nanKey, <span class="hljs-string">"NaN"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(sKey) === <span class="hljs-string">"string"</span>, map.get(<span class="hljs-string">"key"</span>) === <span class="hljs-string">"string"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(nKey) === <span class="hljs-string">"number"</span>, map.get(<span class="hljs-number">1</span>) === <span class="hljs-string">"number"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(bKey) === <span class="hljs-string">"boolean"</span>, map.get(<span class="hljs-literal">true</span>) === <span class="hljs-string">"boolean"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(nullKey) === <span class="hljs-string">"null"</span>, map.get(<span class="hljs-literal">null</span>) === <span class="hljs-string">"null"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(uKey) === <span class="hljs-string">"undefined"</span>, map.get(<span class="hljs-literal">undefined</span>) === <span class="hljs-string">"undefined"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(symbolKey) === <span class="hljs-string">"symbol"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(oKey) === <span class="hljs-string">"object"</span>, map.get(&#123;&#125;) === <span class="hljs-string">"object"</span>, map.get(oKey) === map.get(ooKey));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(aKey) === <span class="hljs-string">"array"</span>, map.get([]) === <span class="hljs-string">"array"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(fKey) === <span class="hljs-string">"function"</span>, map.get(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;) === <span class="hljs-string">"function"</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(nanKey) === <span class="hljs-string">"NaN"</span>, map.get(<span class="hljs-literal">NaN</span>) === <span class="hljs-string">"NaN"</span>);</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight dart hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Map</span> &#123;</span><br><span class="line">  <span class="hljs-string">'key'</span> =&gt; <span class="hljs-string">'string'</span>,</span><br><span class="line">  <span class="hljs-number">1</span> =&gt; <span class="hljs-string">'number'</span>,</span><br><span class="line">  <span class="hljs-keyword">true</span> =&gt; <span class="hljs-string">'boolean'</span>,</span><br><span class="line">  <span class="hljs-keyword">null</span> =&gt; <span class="hljs-string">'null'</span>,</span><br><span class="line">  undefined =&gt; <span class="hljs-string">'undefined'</span>,</span><br><span class="line">  <span class="hljs-built_in">Symbol</span>(key) =&gt; <span class="hljs-string">'symbol'</span>,</span><br><span class="line">  &#123;&#125; =&gt; <span class="hljs-string">'object'</span>,</span><br><span class="line">  [] =&gt; <span class="hljs-string">'array'</span>,</span><br><span class="line">  [<span class="hljs-built_in">Function</span>: fKey] =&gt; <span class="hljs-string">'function'</span>,</span><br><span class="line">  NaN =&gt; <span class="hljs-string">'NaN'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">true</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">false</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">false</span></span><br><span class="line"><span class="hljs-keyword">true</span> <span class="hljs-keyword">true</span></span><br></pre></td></tr></table></figure><p>结论</p><ul><li>string/number/boolean/null/undefined/NaN 按值存储，值一致即可访问</li><li>symbol必须是同一个Symbol才能访问，详见<a href="https://www.ddhigh.com/2019/10/28/symbol.html" target="_blank" rel="noopener">深入浅出ES6的Symbol类型</a></li><li>object/array/function等Object类型按照引用访问，必须是同一个引用才可以访问</li><li>Map是<code>有序</code>的，按照插入顺序</li><li>Map.set方法支持链式操作</li></ul><h2 id="Map的迭代"><a href="#Map的迭代" class="headerlink" title="Map的迭代"></a>Map的迭代</h2><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><p>同时迭代键值</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 普通版本</span></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k, v] <span class="hljs-keyword">of</span> map) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 迭代器版本</span></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k, v] <span class="hljs-keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代键</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 普通版本</span></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">of</span> map.keys()) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(k, map.get(k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 迭代器版本</span></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k] <span class="hljs-keyword">of</span> map.entries()) &#123; <span class="hljs-comment">// 解构赋值</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(k, map.get(k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代值</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 普通版本</span></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> v <span class="hljs-keyword">of</span> map.values()) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 迭代器版本</span></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [,v] <span class="hljs-keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forEach()</p><blockquote><p>forEach方法的顺序是value, key，不是key, value!</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">map.set(<span class="hljs-string">"1"</span>, <span class="hljs-number">1</span>);</span><br><span class="line">map.set(<span class="hljs-string">"2"</span>, <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line">map.forEach(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(value, key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Map与其他类型的转换"><a href="#Map与其他类型的转换" class="headerlink" title="Map与其他类型的转换"></a>Map与其他类型的转换</h2><h3 id="Map与Object"><a href="#Map与Object" class="headerlink" title="Map与Object"></a>Map与Object</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">    site: <span class="hljs-string">'https://www.ddhigh.com'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(obj);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map);</span><br></pre></td></tr></table></figure><p>执行报错<code>TypeError: object is not iterable</code>，因为Object不是可迭代对象。</p><blockquote><p>可迭代对象：ES6新出的语法，对象或对象的原型链实现了Symbol.iterator方法，关于迭代器的内容将在下一篇文章中详细介绍</p></blockquote><p>我们给Object.prototype添加属性方法来支持迭代：</p><blockquote><p>warning: 正式代码请谨慎修改原型链!</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">    site: <span class="hljs-string">'https://www.ddhigh.com'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype[<span class="hljs-built_in">Symbol</span>.iterator] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// Symbol.iterator可以理解为全局唯一的标识</span></span><br><span class="line">    <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">Object</span>.keys(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> keyIndex = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">        next() &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (keyIndex &lt; keys.length) &#123;</span><br><span class="line">                <span class="hljs-keyword">const</span> key = keys[keyIndex++];</span><br><span class="line">                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: [key, obj[key]] &#125;; <span class="hljs-comment">// 迭代值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;; <span class="hljs-comment">// 迭代结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(obj);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map);</span><br></pre></td></tr></table></figure><h3 id="Map与数组"><a href="#Map与数组" class="headerlink" title="Map与数组"></a>Map与数组</h3><blockquote><p>只支持[[key, value]]这种二维数组。二维数组的每一个元素包含key和value两个子元素</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">'name'</span>, <span class="hljs-string">'xialeistudio'</span>], [<span class="hljs-string">'site'</span>, <span class="hljs-string">'https://www.ddhigh.com'</span>]]);</span><br></pre></td></tr></table></figure><h3 id="Map与Map"><a href="#Map与Map" class="headerlink" title="Map与Map"></a>Map与Map</h3><blockquote><p>由于Map是可迭代对象，因此可以作为参数传给Map构造函数</p><p>两个Map的元素是一样的，不是Map不相等，因为不是同一个对象</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">'name'</span>, <span class="hljs-string">'xialeistudio'</span>], [<span class="hljs-string">'site'</span>, <span class="hljs-string">'https://www.ddhigh.com'</span>]]);</span><br><span class="line"><span class="hljs-keyword">const</span> map2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(map);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map === map2); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Map的合并"><a href="#Map的合并" class="headerlink" title="Map的合并"></a>Map的合并</h3><blockquote><p>多个Map可以合并，相同key会被覆盖，规则为后面的覆盖前面的</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([</span><br><span class="line">    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">    [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="hljs-keyword">const</span> map2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([</span><br><span class="line">    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> map3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([...map, ...map2]);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(map3); <span class="hljs-comment">// Map &#123; 1 =&gt; 2, 2 =&gt; 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Map的出现解决了传统object无法直接解决的问题，更好地向标准编程语言靠近(标准编程语言一般会提供Map集合)，使用的坑也比较少（比如没有object作为key时转换为[object Object]的问题）。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map的基本使用&lt;/li&gt;
&lt;li&gt;Map支持的数据类型&lt;/li&gt;
&lt;li&gt;Map的迭代&lt;/li&gt;
&lt;li&gt;Map与其他对象的转化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Map出现之前，要实现类似需求，只能使用Object，但是Object还是存
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="es6" scheme="https//www.ddhigh.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Redis优化高并发下的秒杀性能</title>
    <link href="https//www.ddhigh.com/2019/10/29/redis-high-concurrent.html"/>
    <id>https//www.ddhigh.com/2019/10/29/redis-high-concurrent.html</id>
    <published>2019-10-29T04:00:00.000Z</published>
    <updated>2019-10-29T09:19:51.657Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容</p><ul><li>使用Redis优化高并发场景下的接口性能</li><li>数据库乐观锁</li></ul><p>随着双11的临近，各种促销活动开始变得热门起来，比较主流的有秒杀、抢优惠券、拼团等等。</p><p>涉及到高并发争抢同一个资源的主要场景有秒杀和抢优惠券。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>活动规则</p><ul><li>奖品数量有限，比如100个</li><li>不限制参与用户数</li><li>每个用户只能参与1次秒杀</li></ul><p>活动要求</p><ul><li>不能多发，也不能少发，100个奖品要全部发出去</li><li>1个用户最多抢1个奖品</li><li>遵循先到先得原则，先来的用户有奖品</li></ul><h2 id="数据库实现"><a href="#数据库实现" class="headerlink" title="数据库实现"></a>数据库实现</h2><p>悲观锁性能太差，本文不予讨论，讨论一下使用乐观锁解决高并发问题的优缺点。</p><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><table><thead><tr><th>ID</th><th>Code</th><th>UserId</th><th>CreatedAt</th><th>RewardAt</th></tr></thead><tbody><tr><td>奖品ID</td><td>奖品码</td><td>用户ID</td><td>创建时间</td><td>中奖时间</td></tr></tbody></table><ul><li>未中奖时UserId为0，RewardAt为NULL</li><li>中奖时UserId为中奖用户ID，RewardAt为中奖时间</li></ul><h3 id="乐观锁实现"><a href="#乐观锁实现" class="headerlink" title="乐观锁实现"></a>乐观锁实现</h3><p>乐观锁实际上并不存在真正的锁，乐观锁是利用数据的某个字段来做的，比如本文的例子就是以UserId来实现的。</p><p>实现流程如下：</p><ol><li><p>查询UserId为0的奖品，如果未找到则提示无奖品</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> envelope <span class="hljs-keyword">WHERE</span> user_id=<span class="hljs-number">0</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure></li><li><p>更新奖品的用户ID和中奖时间(假设奖品ID为1，中奖用户ID为100，当前时间为2019-10-29 12:00:00)，这里的user_id=0就是我们的乐观锁了。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">UPDATE</span> envelope <span class="hljs-keyword">SET</span> user_id=<span class="hljs-number">100</span>, reward_at=<span class="hljs-string">'2019-10-29 12:00:00'</span> <span class="hljs-keyword">WHERE</span> user_id=<span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span></span><br></pre></td></tr></table></figure></li><li><p>检测UPDATE语句的执行返回值，如果返回1证明中奖成功，否则证明该奖品被其他人抢了</p></li></ol><h4 id="为什么要添加乐观锁"><a href="#为什么要添加乐观锁" class="headerlink" title="为什么要添加乐观锁"></a>为什么要添加乐观锁</h4><p>正常情况下获取奖品、然后把奖品更新给指定用户是没问题的。如果不添加user_id=0时，高并发场景下会出现下面的问题：</p><ol><li>两个用户同时查询到了1个未中奖的奖品(发生并发问题)</li><li>将奖品的中奖用户更新为用户1，更新条件只有ID=奖品ID</li><li>上述SQL执行是成功的，影响行数也是1，此时接口会返回用户1中奖</li><li>接下来将中奖用户更新为用户2，更新条件也只有ID=奖品ID</li><li>由于是同一个奖品，已经发给用户1的奖品会重新发放给用户2，此时影响行数为1，接口返回用户2也中奖</li><li>所以该奖品的最终结果是发放给用户2</li><li><code>用户1就会过来投诉活动方了，因为抽奖接口返回用户1中奖，但他的奖品被抢了，此时活动方只能赔钱了</code></li></ol><h4 id="添加乐观锁之后的抽奖流程"><a href="#添加乐观锁之后的抽奖流程" class="headerlink" title="添加乐观锁之后的抽奖流程"></a>添加乐观锁之后的抽奖流程</h4><ol><li>更新用户1时的条件为<code>id=红包ID AND user_id=0</code> ,由于此时红包未分配给任何人，用户1更新成功，接口返回用户1中奖</li><li>当更新用户2时更新条件为<code>id=红包ID AND user_id=0</code>，由于此时该红包已经分配给用户1了，所以该条件不会更新任何记录，接口返回用户2中奖</li></ol><h4 id="乐观锁优缺点"><a href="#乐观锁优缺点" class="headerlink" title="乐观锁优缺点"></a>乐观锁优缺点</h4><p>优点</p><ul><li>性能尚可，因为无锁</li><li>不会超发</li></ul><p>缺点</p><ul><li>通常不满足“先到先得”的活动规则，一旦发生并发，就会发生未中奖的情况，此时奖品库还有奖品</li></ul><h3 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h3><p>在MacBook Pro 2018上的压测表现如下(Golang实现的HTTP服务器,MySQL连接池大小100，Jmeter压测)：</p><ul><li>500并发 500总请求数 平均响应时间331ms 发放成功数为31 吞吐量458.7/s</li></ul><h2 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h2><p>可以看到乐观锁的实现下争抢比太高，不是推荐的实现方法，下面通过Redis来优化这个秒杀业务。</p><h3 id="Redis高性能的原因"><a href="#Redis高性能的原因" class="headerlink" title="Redis高性能的原因"></a>Redis高性能的原因</h3><ul><li>单线程 省去了线程切换开销</li><li>基于内存的操作 虽然持久化操作涉及到硬盘访问，但是那是异步的，不会影响Redis的业务</li><li>使用了IO多路复用</li></ul><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><ol><li><p>活动开始前将数据库中奖品的code写入Redis队列中</p></li><li><p>活动进行时使用lpop弹出队列中的元素</p></li><li><p>如果获取成功，则使用UPDATE语法发放奖品</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">UPDATE</span> reward <span class="hljs-keyword">SET</span> user_id=用户<span class="hljs-keyword">ID</span>,reward_at=当前时间 <span class="hljs-keyword">WHERE</span> code=<span class="hljs-string">'奖品码'</span></span><br></pre></td></tr></table></figure></li><li><p>如果获取失败，则当前无可用奖品，提示未中奖即可</p></li></ol><p>使用Redis的情况下并发访问是通过Redis的<code>lpop()</code>来保证的，该方法是原子方法，可以保证并发情况下也是一个个弹出的。</p><h3 id="压测-1"><a href="#压测-1" class="headerlink" title="压测"></a>压测</h3><p>在MacBook Pro 2018上的压测表现如下(Golang实现的HTTP服务器,MySQL连接池大小100，Redis连接池代销100，Jmeter压测)：</p><ul><li>500并发 500总请求数 平均响应时间48ms 发放成功数100 吞吐量497.0/s</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到Redis的表现是稳定的，不会出现超发，且访问延迟少了8倍左右，吞吐量还没达到瓶颈，可以看出Redis对于高并发系统的性能提升是非常大的！接入成本也不算高，值得学习！</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// main.go</span></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"github.com/go-redis/redis"</span></span><br><span class="line">_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="hljs-string">"github.com/jinzhu/gorm"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line"><span class="hljs-string">"strconv"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Envelope <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Id        <span class="hljs-keyword">int</span> <span class="hljs-string">`gorm:"primary_key"`</span></span><br><span class="line">Code      <span class="hljs-keyword">string</span></span><br><span class="line">UserId    <span class="hljs-keyword">int</span></span><br><span class="line">CreatedAt time.Time</span><br><span class="line">RewardAt  *time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(Envelope)</span> <span class="hljs-title">TableName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"envelope"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Envelope)</span> <span class="hljs-title">BeforeCreate</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">p.CreatedAt = time.Now()</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">QueueEnvelope = <span class="hljs-string">"envelope"</span></span><br><span class="line">QueueUser     = <span class="hljs-string">"user"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">db          *gorm.DB</span><br><span class="line">redisClient *redis.Client</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> err error</span><br><span class="line">db, err = gorm.Open(<span class="hljs-string">"mysql"</span>, <span class="hljs-string">"root:root@tcp(localhost:3306)/test?charset=utf8&amp;parseTime=True&amp;loc=Local"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err = db.DB().Ping(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">db.DB().SetMaxOpenConns(<span class="hljs-number">100</span>)</span><br><span class="line">fmt.Println(<span class="hljs-string">"database connected. pool size 10"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">redisClient = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="hljs-string">"localhost:6379"</span>,</span><br><span class="line">DB:       <span class="hljs-number">0</span>,</span><br><span class="line">PoolSize: <span class="hljs-number">100</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> _, err := redisClient.Ping().Result(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="hljs-string">"redis connected. pool size 100"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 读取Code写入Queue</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">envelopes := <span class="hljs-built_in">make</span>([]Envelope, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err := db.Debug().Where(<span class="hljs-string">"user_id=0"</span>).Limit(<span class="hljs-number">100</span>).Find(&amp;envelopes).Error; err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(envelopes) != <span class="hljs-number">100</span> &#123;</span><br><span class="line">log.Fatal(<span class="hljs-string">"不足100个奖品"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> envelopes &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := redisClient.LPush(QueueEnvelope, envelopes[i].Code).Err(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="hljs-string">"load 100 envelopes"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/envelope"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">uid := r.Header.Get(<span class="hljs-string">"x-user-id"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> uid == <span class="hljs-string">""</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">401</span>)</span><br><span class="line">_, _ = fmt.Fprint(w, <span class="hljs-string">"UnAuthorized"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">uidValue, err := strconv.Atoi(uid)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">400</span>)</span><br><span class="line">_, _ = fmt.Fprint(w, <span class="hljs-string">"Bad Request"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 检测用户是否抢过了</span></span><br><span class="line"><span class="hljs-keyword">if</span> result, err := redisClient.HIncrBy(QueueUser, uid, <span class="hljs-number">1</span>).Result(); err != <span class="hljs-literal">nil</span> || result != <span class="hljs-number">1</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">429</span>)</span><br><span class="line">_, _ = fmt.Fprint(w, <span class="hljs-string">"Too Many Request"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 检测是否在队列中</span></span><br><span class="line">code, err := redisClient.LPop(QueueEnvelope).Result()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">200</span>)</span><br><span class="line">_, _ = fmt.Fprint(w, <span class="hljs-string">"No Envelope"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 发放红包</span></span><br><span class="line">envelope := &amp;Envelope&#123;&#125;</span><br><span class="line">err = db.Where(<span class="hljs-string">"code=?"</span>, code).Take(&amp;envelope).Error</span><br><span class="line"><span class="hljs-keyword">if</span> err == gorm.ErrRecordNotFound &#123;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">200</span>)</span><br><span class="line">_, _ = fmt.Fprint(w, <span class="hljs-string">"No Envelope"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">500</span>)</span><br><span class="line">_, _ = fmt.Fprint(w, err)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">now := time.Now()</span><br><span class="line">envelope.UserId = uidValue</span><br><span class="line">envelope.RewardAt = &amp;now</span><br><span class="line">rowsAffected := db.Where(<span class="hljs-string">"user_id=0"</span>).Save(&amp;envelope).RowsAffected <span class="hljs-comment">// 添加user_id=0来验证Redis是否真的解决争抢问题</span></span><br><span class="line"><span class="hljs-keyword">if</span> rowsAffected == <span class="hljs-number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"发生争抢. id=%d\n"</span>, envelope.Id)</span><br><span class="line">w.WriteHeader(<span class="hljs-number">500</span>)</span><br><span class="line">_, _ = fmt.Fprintf(w, <span class="hljs-string">"发生争抢. id=%d\n"</span>, envelope.Id)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, _ = fmt.Fprint(w, envelope.Code)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="hljs-string">"listen on 8080"</span>)</span><br><span class="line">fmt.Println(http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Redis优化高并发场景下的接口性能&lt;/li&gt;
&lt;li&gt;数据库乐观锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着双11的临近，各种促销活动开始变得热门起来，比较主流的有秒杀、抢优惠券、拼团等等。&lt;/p&gt;
&lt;p&gt;涉及到高并发争抢同一个资源的主要场
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
    
      <category term="redis" scheme="https//www.ddhigh.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出ES6的Symbol类型</title>
    <link href="https//www.ddhigh.com/2019/10/28/symbol.html"/>
    <id>https//www.ddhigh.com/2019/10/28/symbol.html</id>
    <published>2019-10-28T04:00:00.000Z</published>
    <updated>2019-10-28T07:06:25.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><ul><li>JS基本数据类型种类</li><li>Symbol的主要用法, 全局Symbol的使用与检测</li><li>Symbol与其他基本类型转换时的规则</li></ul><p>ES6引入了一种新的原始数据类型，表示独一无二的值，最大的用处是作为对象属性的唯一标识符。</p><p>至此，Javascript拥有6种基本数据类型和一种复杂数据类型。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本类型</p><ul><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li><li>symbol</li></ul><p>复杂类型</p><ul><li>object</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Symbol</span>([description])</span><br></pre></td></tr></table></figure><ul><li>description 可选的描述，一般用在调试的时候作为区分，但是 <strong>不能用来访问Symbol</strong>。</li><li>该方法返回一个symbol值</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'test'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'test'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> s3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'test'</span>); <span class="hljs-comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(s === s2); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> s); <span class="hljs-comment">// symbol</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(s.description); <span class="hljs-comment">// test</span></span><br></pre></td></tr></table></figure><ul><li>每次调用Symbol()返回的值都是独一无二的，不管描述是否一致。</li><li><code>Symbol</code>不支持<code>new</code>调用</li><li>通过description属性可以获取到传入Symbol的描述性字符串</li></ul><h3 id="全局单例的Symbol"><a href="#全局单例的Symbol" class="headerlink" title="全局单例的Symbol"></a>全局单例的Symbol</h3><p>使用Symbol.for()可以创建全局单例的symbol值，语法如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Symbol</span>.for([name])</span><br></pre></td></tr></table></figure><ul><li>name 可选的描述，建议传入，否则name会作为undefined传入</li></ul><ol><li>类似于单例模式，执行环境(一般是浏览器)内部维护了一个全局Symbol注册表，记录name和Symbol(name)关系</li><li>尝试通过name在该注册表查找对应symbol值，如果找到，则返回这个symbol值</li><li>如果没找到，则使用Symbol(name)创建一个symbol值，并记录该symbol值与name的关联关系，之后返回该symbol</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> name2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> name3 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(name === name2); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(name2 === name3); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><p>全局Symbol映射关系中name是作为字符串来使用的，结构类似下面的代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> globalSymbols = &#123;</span><br><span class="line">  name: <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用同样的字符串描述调用Symbol()和Symbol.for()获取到的symbol值不相等</p></li></ul><h3 id="查找是否为全局的单例Symbol"><a href="#查找是否为全局的单例Symbol" class="headerlink" title="查找是否为全局的单例Symbol"></a>查找是否为全局的单例Symbol</h3><p>使用Symbol.keyFor()可以检测给定的symbol值是否是全局单例的symbol(简单来说就是检测是否是Symbol.for()创建的)，语法如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Symbol</span>.keyFor(symbol)</span><br></pre></td></tr></table></figure><ul><li>symbol 必传， 待检测的symbol值</li><li>如果给定的symbol值是通过Symbol.for()得到的，该方法返回传入symbol的字符串描述</li><li>如果给定的symbol值不是通过Symbol.for()得到的，该方法返回undefined</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'s1'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> s2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'s2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Symbol</span>.keyFor(s)); <span class="hljs-comment">// undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Symbol</span>.keyFor(s2)); <span class="hljs-comment">// s2</span></span><br></pre></td></tr></table></figure><h3 id="Symbol与JSON-stringify"><a href="#Symbol与JSON-stringify" class="headerlink" title="Symbol与JSON.stringify"></a>Symbol与JSON.stringify</h3><blockquote><p>Symbol类型的属性不会参与JSON的序列化</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">  [name]: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">  data: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(obj)); <span class="hljs-comment">// &#123;"data": 1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Symbol与for-…-in和for-…-of"><a href="#Symbol与for-…-in和for-…-of" class="headerlink" title="Symbol与for … in和for … of"></a>Symbol与for … in和for … of</h3><blockquote><p>Symbol类型的属性不会出现在for … in和for … of循环中</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> user = &#123;</span><br><span class="line">  [name]: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">  data: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> user) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(i, user[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 上述循环输出 data 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> user) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(i, user[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// TypeError: user不是可迭代对象</span></span><br></pre></td></tr></table></figure><h3 id="Symbol与Object-keys-和Object-getOwnPropertyNames"><a href="#Symbol与Object-keys-和Object-getOwnPropertyNames" class="headerlink" title="Symbol与Object.keys()和Object.getOwnPropertyNames()"></a>Symbol与Object.keys()和Object.getOwnPropertyNames()</h3><blockquote><p>Symbol类型的属性不会出现在Object.keys()和Object.getOwnPropertyNames()返回结果中</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> user = &#123;</span><br><span class="line">  [name]: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">  data: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(user)); <span class="hljs-comment">// ["data"]</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyNames(user)); <span class="hljs-comment">// ["data"]</span></span><br></pre></td></tr></table></figure><h3 id="Symbol与Object-getOwnPropertySymbols"><a href="#Symbol与Object-getOwnPropertySymbols" class="headerlink" title="Symbol与Object.getOwnPropertySymbols()"></a>Symbol与Object.getOwnPropertySymbols()</h3><blockquote><p>Symbol类型的属性会出现在Object.Object.getOwnPropertySymbols()</p></blockquote><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'name'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> user = &#123;</span><br><span class="line">  [name]: <span class="hljs-string">'xialei'</span>,</span><br><span class="line">  data: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.Object.getOwnPropertySymbols(user)); <span class="hljs-comment">// [Symbol(name)]</span></span><br></pre></td></tr></table></figure><h3 id="Symbol数据类型转换"><a href="#Symbol数据类型转换" class="headerlink" title="Symbol数据类型转换"></a>Symbol数据类型转换</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> name = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'1'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(name + <span class="hljs-number">1</span>); <span class="hljs-comment">// TypeError</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(name)); <span class="hljs-comment">// 创建包装对象</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(name + <span class="hljs-string">'1'</span>); <span class="hljs-comment">// TypeError</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(name)); <span class="hljs-comment">// Symbol(1)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(!!name); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(name)); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>symbol值不能转换为数字</li><li>symbol不能直接转换为字符串，需要通过String包装才能转化</li><li>symbol可以直接转换为boolean，转化后为true</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><ul><li>使用Symbol最大的注意事项应该是使用方括号语法去访问对应的属性，而不是字符串。</li><li>Symbol数据类型转换规范比较简单，大部分场景下也没用拿Symbol去做数据转换</li></ul><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本文内容&quot;&gt;&lt;a href=&quot;#本文内容&quot; class=&quot;headerlink&quot; title=&quot;本文内容&quot;&gt;&lt;/a&gt;本文内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS基本数据类型种类&lt;/li&gt;
&lt;li&gt;Symbol的主要用法, 全局Symbol的使用与检测&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="es6" scheme="https//www.ddhigh.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>不只是块级作用域，你不知道的let和const</title>
    <link href="https//www.ddhigh.com/2019/10/22/let-and-const.html"/>
    <id>https//www.ddhigh.com/2019/10/22/let-and-const.html</id>
    <published>2019-10-22T04:00:00.000Z</published>
    <updated>2019-10-22T10:45:45.735Z</updated>
    
    <content type="html"><![CDATA[<p>ES6新增了两个重要的关键字<code>let</code>和<code>const</code>，相信大家都不陌生，但是包括我在内，在系统学习ES6之前也只使用到了【不存在变量提升】这个特性。</p><ul><li><strong>let</strong>声明一个块级作用域的本地变量</li><li><strong>const</strong>语句声明一个块级作用域的本地常量，不可以重新赋值</li></ul><h2 id="支持块级作用域"><a href="#支持块级作用域" class="headerlink" title="支持块级作用域"></a>支持块级作用域</h2><p><code>var</code>定义的变量会提升到整个函数作用域内，<code>let/const</code>则支持块级作用域。</p><blockquote><p>块级作用域: 由<code>{}</code>包裹的作用域（函数那种{}不算）</p></blockquote><p>来看一个<code>var</code>的例子:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>此时输出1，因为<code>var</code>没有块级作用域。</p><p>来看一个<code>let</code>的例子(<code>const</code>效果一样):</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>此时会报错<code>ReferenceError</code>，因为<code>let/const</code>支持块级作用域，所以<code>let</code>定义的<code>a</code>只在<code>{}</code>可以访问</p><h2 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h2><p>与<code>var</code>不同的是，<code>let/const</code>声明的变量不存在变量提升，也就是说<code>{}</code>对于<code>let/const</code>是有效的。</p><p>来看一个<code>var</code>的例子:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p>此时会输出undefined，因为var声明的变量会提升到作用域顶部（只提升声明，不提升赋值）</p><p>来看一个<code>let</code>的例子(<code>const</code>效果也一样):</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p>此时会报错<code>ReferenceError</code>，因为<code>let</code>不存在变量提升</p><h2 id="同一作用域内不可以重复声明"><a href="#同一作用域内不可以重复声明" class="headerlink" title="同一作用域内不可以重复声明"></a>同一作用域内不可以重复声明</h2><p>同一作用域内<code>let/const</code>不可以重复声明,<code>var</code>可以。</p><p>来看一个<code>var</code>的例子:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>此时会输出2，var是支持重复声明的，后面声明的值会覆盖前面声明的值。</p><p>来看一个<code>let</code>的例子(<code>const</code>效果也一样):</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>此时会报错<code>SyntaxError</code>，因为同一作用域内<code>let/const</code>不可以重复声明。</p><p>再来看一个不同作用域的例子：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>此时输出1，因为两者作用域不同</p><h2 id="暂存死区"><a href="#暂存死区" class="headerlink" title="暂存死区"></a>暂存死区</h2><p><strong>暂存死区TDZ(Temporal Dead Zone)</strong>是ES6中对作用域新的语义。</p><p>通过<code>let/const</code>定义的变量直到执行他们的初始化代码时才被初始化。在初始化之前访问<code>该变量</code>会导致<code>ReferenceError</code>。该变量处于<code>一个自作用域顶部到初始化代码</code>之间的“暂存死区”中。</p><p>来看以下例子：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">do_something</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(bar); <span class="hljs-comment">// undefined</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// ReferenceError</span></span><br><span class="line">  <span class="hljs-keyword">var</span> bar = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> foo = <span class="hljs-number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">do_something();</span><br></pre></td></tr></table></figure><p><code>var</code>定义的变量声明会提升到作用域顶部，所以<code>bar</code>是undefined，而<code>let</code>定义的变量<code>从作用域开始到let foo=2</code>这中间都无法访问，访问会报错<code>ReferenceError</code></p><h2 id="暂存死区与typeof"><a href="#暂存死区与typeof" class="headerlink" title="暂存死区与typeof"></a>暂存死区与typeof</h2><p>typeof检测var定义的变量或者检测不存在的变量时会返回undefined，如果检测暂存死区内的变量，会报错<code>ReferenceError</code>.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo); <span class="hljs-comment">// undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> bar); <span class="hljs-comment">// ReferenceError</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> bar2); <span class="hljs-comment">// undefined</span></span><br><span class="line"><span class="hljs-keyword">let</span> bar = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> bar2 = <span class="hljs-number">2</span>;</span><br></pre></td></tr></table></figure><p>也就是说typeof去检测未初始化的<code>let</code>变量时会报错，<code>var</code>或者未声明的变量不会报错</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">   <span class="hljs-keyword">var</span> foo = <span class="hljs-number">33</span>;</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> foo = (foo + <span class="hljs-number">55</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>以上函数执行结果是什么?为什么?</p><blockquote><p>报错</p><p><code>{}</code>内有<code>let</code>定义的<code>foo</code>，所以存在暂存死区，<code>(foo + 55)</code>这个表达式是在<code>let foo</code>之前执行的(赋值时先执行等号右边的，执行完毕把结果赋给等号左边)，表达式执行的时候还没有初始化foo，所以报错<code>ReferenceError</code></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>let/const支持函数作用域和块级作用域,var只有函数作用域</li><li>let/const不存在变量提升，var存在变量提升</li><li>let/const同一作用域内不可以重复声明，var可以重复声明</li><li>let/const存在暂存死区，var不存在</li></ol><h2 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test4</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(b);</span><br><span class="line">    <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">test4()</span><br></pre></td></tr></table></figure><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6新增了两个重要的关键字&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;，相信大家都不陌生，但是包括我在内，在系统学习ES6之前也只使用到了【不存在变量提升】这个特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;let&lt;/strong&gt;声明一个块级
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="es6" scheme="https//www.ddhigh.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊valueOf和toString</title>
    <link href="https//www.ddhigh.com/2019/10/15/valueof-and-tostring.html"/>
    <id>https//www.ddhigh.com/2019/10/15/valueof-and-tostring.html</id>
    <published>2019-10-15T04:00:00.000Z</published>
    <updated>2019-10-15T09:36:41.576Z</updated>
    
    <content type="html"><![CDATA[<p>valueOf和toString是Object.prototype的方法。一般很少直接调用，但是在使用对象参与运算的时候就会调用这两个方法了。我想大部分人都存在以下疑问：</p><ul><li>valueOf和toString哪个优先级较高?</li><li>是不是所有场景都会调用valueOf和toString</li></ul><h2 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h2><ul><li>valueOf: 返回对象的原始值表示</li><li>toString: 返回对象的字符串表示</li></ul><p>在介绍下面的内容之前先了解一下转换规则，下面的内容解释都是基于这个规则表来的：</p><h3 id="valueOf转换规则"><a href="#valueOf转换规则" class="headerlink" title="valueOf转换规则"></a>valueOf转换规则</h3><p>valueOf是Object.prototype的方法，由Object来的对象都会有该方法，但是很多内置对象会重写这个方法，以适合实际需要。</p><p>说到原始值就必须说到原始类型，JS规范中 <strong>原始类型</strong> 如下：</p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li></ul><p>非原始值(也就是对象)重写规则如下：</p><table><thead><tr><th>对象</th><th>valueOf返回值</th></tr></thead><tbody><tr><td>Array</td><td>数组本身</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Date</td><td>返回毫秒形式的时间戳</td></tr><tr><td>Function</td><td>函数本身</td></tr><tr><td>Number</td><td>数字值</td></tr><tr><td>Object</td><td>对象本身</td></tr><tr><td>String</td><td>字符串值</td></tr></tbody></table><blockquote><p>以下规则是经过验证的，如果对验证过程不关心，可以只看转换规则。</p><p>建议看一下验证过程，这样可以加深理解</p></blockquote><h4 id="对象转换为布尔值"><a href="#对象转换为布尔值" class="headerlink" title="对象转换为布尔值"></a>对象转换为布尔值</h4><ol><li>直接转换为true（包装类型也一样），不调用valueOf和toString</li></ol><h4 id="对象转换为数字"><a href="#对象转换为数字" class="headerlink" title="对象转换为数字"></a>对象转换为数字</h4><p>在预期会将对象用作数字使用时，比如参与算术运算等等操作，对象转换为数字会依次调用valueOf和toString方法，具体规则如下：</p><ol><li>如果对象具有<code>valueOf</code>方法且返回原始值(string、number、boolean、undefined、null)，则将该原始值转换为数字(转换失败会返回NaN)，并返回这个数字</li><li>如果对象具有<code>toString</code>方法且返回原始值(string、number、boolean、undefined、null)，则将该原始值转换为数字(转换失败会返回NaN)，并返回这个数字</li><li>转换失败，抛出TypeError</li></ol><h4 id="对象转换为字符串"><a href="#对象转换为字符串" class="headerlink" title="对象转换为字符串"></a>对象转换为字符串</h4><ol><li>如果对象具有<code>toString</code>方法且返回原始值(string、number、boolean、undefined、null)，则将该原始值转换为字符串，并返回该字符串</li><li>如果对象具有<code>valueOf</code>方法且返回原始值(string、number、boolean、undefined、null)，则将该原始值转换为字符串，并返回该字符串</li><li>转换失败，抛出TypeError</li></ol><h3 id="toString转换规则"><a href="#toString转换规则" class="headerlink" title="toString转换规则"></a>toString转换规则</h3><table><thead><tr><th>对象</th><th>toString返回值</th></tr></thead><tbody><tr><td>Array</td><td>以逗号分割的字符串，如[1,2]的toString返回值为”1,2”</td></tr><tr><td>Boolean</td><td>“True”</td></tr><tr><td>Date</td><td>可读的时间字符串，如”Tue Oct 15 2019 12:20:56 GMT+0800 (中国标准时间)”</td></tr><tr><td>Function</td><td>声明函数的JS源代码字符串</td></tr><tr><td>Number</td><td>“数字值”</td></tr><tr><td>Object</td><td>“[object Object]”</td></tr><tr><td>String</td><td>“字符串”</td></tr></tbody></table><h2 id="验证对象到原始值的转换"><a href="#验证对象到原始值的转换" class="headerlink" title="验证对象到原始值的转换"></a>验证对象到原始值的转换</h2><p>光看valueOf和toString没啥东西可说，日常开发中也很少直接调用，但是当我们将对象当做原始值来使用时会发生转换，而且转换过程还略微有点迷糊。</p><h3 id="对象转换为Boolean"><a href="#对象转换为Boolean" class="headerlink" title="对象转换为Boolean"></a>对象转换为Boolean</h3><p>为了能够直观的看到JS内部的转换过程，我把valueOf和toString都简单重写了，加了日志。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 保存原始的valueOf</span></span><br><span class="line"><span class="hljs-keyword">var</span> valueOf = <span class="hljs-built_in">Object</span>.prototype.valueOf;</span><br><span class="line"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加valueOf日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.valueOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'valueOf'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> valueOf.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 添加toString日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'toString'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> toString.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(b) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上例子的输出如下：</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>未调用valueOf和toString，符合[对象到布尔值]的转换规则</p></blockquote><h3 id="对象转换为Number"><a href="#对象转换为Number" class="headerlink" title="对象转换为Number"></a>对象转换为Number</h3><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 保存原始的valueOf</span></span><br><span class="line"><span class="hljs-keyword">var</span> valueOf = <span class="hljs-built_in">Object</span>.prototype.valueOf;</span><br><span class="line"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加valueOf日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.valueOf = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'valueOf'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> valueOf.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 添加toString日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'toString'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> toString.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(++a);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">valueOf</span></span><br><span class="line"><span class="hljs-attribute">toString</span></span><br><span class="line"><span class="hljs-attribute">NaN</span></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li>valueOf方法返回的是对象本身，不是原始值，继续执行</li><li>toString方法返回的是”[object Object]”，是原始值(字符串)，将字符串转换为数字NaN</li></ol><h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 保存原始的valueOf</span></span><br><span class="line"><span class="hljs-keyword">var</span> valueOf = <span class="hljs-built_in">Object</span>.prototype.valueOf;</span><br><span class="line"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加valueOf日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.valueOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'valueOf'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"1"</span>; <span class="hljs-comment">// 强制返回原始值</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 添加toString日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'toString'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> toString.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(++a);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">valueOf</span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ol><li>valueOf返回原始值(字符串)，直接将该字符串转换为数字，得到1</li></ol><h3 id="对象转换为字符串-1"><a href="#对象转换为字符串-1" class="headerlink" title="对象转换为字符串"></a>对象转换为字符串</h3><p>在预期会将对象用作字符串时，比如一个字符串拼接了字符串，传入了一个对象，此时会发生转换。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 保存原始的valueOf</span></span><br><span class="line"><span class="hljs-keyword">var</span> valueOf = <span class="hljs-built_in">Object</span>.prototype.valueOf;</span><br><span class="line"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加valueOf日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.valueOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'valueOf'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> valueOf.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 添加toString日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'toString'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> toString.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = &#123;&#125;;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight sqf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">toString</span></span><br><span class="line"><span class="hljs-comment">// 弹出[object Object]</span></span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ol><li>调用toString方法，返回了字符串”[object Object]”，对象最终转换为该字符串</li></ol><h4 id="例子2-1"><a href="#例子2-1" class="headerlink" title="例子2"></a>例子2</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 保存原始的valueOf</span></span><br><span class="line"><span class="hljs-keyword">var</span> valueOf = <span class="hljs-built_in">Object</span>.prototype.valueOf;</span><br><span class="line"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加valueOf日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.valueOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'valueOf'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> valueOf.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 添加toString日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'toString'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> a = &#123;&#125;;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight crmsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toString</span><br><span class="line">valueOf</span><br><span class="line">Uncaught TypeError: Cannot convert object to <span class="hljs-keyword">primitive</span><span class="hljs-title"> value</span></span><br><span class="line">    at <span class="hljs-number">1</span>.js:<span class="hljs-number">16</span></span><br></pre></td></tr></table></figure><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><ol><li>调用toString方法，返回的不是原始值，继续执行</li><li>调用valueOf方法，返回的不是原始值，继续执行</li><li>抛出TypeError</li></ol><p>##【番外】使用加号运算符连接字符串和对象时的处理</p><p>在测试对象到字符串转换时发现如下代码的表现和预期并不一致：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 保存原始的valueOf</span></span><br><span class="line"><span class="hljs-keyword">var</span> valueOf = <span class="hljs-built_in">Object</span>.prototype.valueOf;</span><br><span class="line"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加valueOf日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.valueOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'valueOf'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> valueOf.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// 添加toString日志</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'toString'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> toString.call(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"a"</span> + &#123;&#125;);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">valueOf</span><br><span class="line">toString</span><br><span class="line"><span class="hljs-selector-tag">a</span>[<span class="hljs-selector-tag">object</span> Object]</span><br></pre></td></tr></table></figure><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p><code>&quot;a&quot;+ {}</code> 应该是预期把<code>{}</code>当做字符串使用，应该先调用toString方法的，实际情况却不是这样。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过查找资料得到的结论如下：</p><ol><li>如果有一个是对象，则遵循对象对原始值的转换过程(Date对象直接调用toString完成转换，其他对象通过valueOf转化，如果转换不成功则调用toString)</li><li>如果两个都是对象，两个对象都遵循步骤1转换到字符串</li><li>两个数字，进行算数运算</li><li>两个字符串，直接拼接</li><li>一个字符串一个数字，直接拼接为字符串</li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> c = &#123;&#125;;</span><br><span class="line">c[a] = <span class="hljs-number">1</span>;</span><br><span class="line">c[b] = <span class="hljs-number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(c[a]);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(c[b]);</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由于对象的key是字符串，所以<code>c[a]</code>和<code>c[b]</code>中的<code>a</code>和<code>b</code>会执行[对象到字符串]的转换。</p><p>根据转换规则, <code>a</code>和<code>b</code>都转换为了<code>[object Object]</code>，所以<code>c[a]</code>和<code>c[b]</code>操作的是同一个键。</p><p>答案是<code>输出两个2</code>，c对象的最终结构如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">'[object Object]'</span>:<span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://static.ddhigh.com/blog/2019-10-15-093620.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;valueOf和toString是Object.prototype的方法。一般很少直接调用，但是在使用对象参与运算的时候就会调用这两个方法了。我想大部分人都存在以下疑问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;valueOf和toString哪个优先级较高?&lt;/li&gt;
&lt;li&gt;是不是所
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
  </entry>
  
</feed>
