<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2018-04-08T09:56:30.353Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang使用travis进行持续集成</title>
    <link href="https//www.ddhigh.com/2018/04/08/golang-travis-ci.html"/>
    <id>https//www.ddhigh.com/2018/04/08/golang-travis-ci.html</id>
    <published>2018-04-08T09:40:37.000Z</published>
    <updated>2018-04-08T09:56:30.353Z</updated>
    
    <content type="html"><![CDATA[<p>虽然golang的工程工具已经非常完善了，比如测试、代码格式化等等。但是如果开发library开源到github的话，这些东西是可以使用自动化工具完成的，那就是 <a href="https://www.travis-ci.org/" target="_blank" rel="external">travis</a></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>开发好需要集成的library以及测试用例</li><li><p>在项目根目录新建<code>.travis.yml</code>文件</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">go</span></div><div class="line"><span class="attr">go:</span></div><div class="line"><span class="bullet">-</span> <span class="number">1.</span><span class="string">x</span></div><div class="line"><span class="bullet">-</span> <span class="string">'1.8'</span></div><div class="line"><span class="bullet">-</span> <span class="string">'1.9'</span></div><div class="line"><span class="bullet">-</span> <span class="number">1.10</span><span class="string">.x</span></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">-</span> <span class="string">go</span> <span class="string">test</span> <span class="bullet">-v</span> <span class="string">./...</span></div></pre></td></tr></table></figure></li><li><p>提交到github</p></li><li>打开<a href="https://www.travis-ci.org/" target="_blank" rel="external">https://www.travis-ci.org/</a>并使用github账号登录</li><li>登录之后点击左边 <strong>“My Repositories”</strong> 旁边的 <strong>“+”</strong> 号添加项目（点击项目前面的滑块即可）</li><li>更改项目文件，push一次到github，此时travis会自动运行测试脚本</li></ol><h2 id="敏感数据加密"><a href="#敏感数据加密" class="headerlink" title="敏感数据加密"></a>敏感数据加密</h2><p>如果你的测试用例需要使用到敏感数据（如一些密钥等等），那需要用travis将你的敏感数据加密(以Mac为例)</p><ol><li>终端执行<code>sudo gem install travis</code></li><li>在项目根目录打开终端执行<code>travis encrypt AMAP_KEY=&quot;xxxx&quot; --add</code> <strong>AMAP_KEY</strong>是环境变量名称，程序读取环境变量可以得到真实的key，<strong>xxxx</strong>是敏感数据</li><li><p>执行完毕后，<strong>.travis.yml</strong> 会发生更改, 会添加如下内容(secure可能不一致)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">env:</span></div><div class="line"><span class="attr">global:</span></div><div class="line"><span class="attr">    secure:</span> <span class="string">kr5JHNTYsh/jezvk88qP91arb+UD/op/5CyOFY7uNYpJ6ZSsJY5fDKyZHjf0VSFmaYqJFMPl6uCASE9baiepeGvBFcy8aI9CNsbLzj2uBNjqqYPmvYGnBjpzp8yknVJKRTitF/kkWtzZcWImHnpvNGHuzXxp/EIBeJtNwjcCRoP/qfGhlZKbLsYFvlWkmRYb0dr8RM5mlmGXPZi8q7m+soVRO8Zjr4QQccybgmhonxlcUrHr6ro+yjjQefoJXRufqoRX0sGyecGYucC4nUpWl5hkDPkQE+Mekhz+rF657SwNsn8nXOFnnUuwsPXE26ak5xF1roEcFk2CpwGZuT7smJZPtw1inXFdIaW+4qllbyxMJkylvFZa5IcvLT3+/eKaQc8Fg6PoxJH0PF3RdtoQVB31cQiPWNm1SecQ6wC64WA/5qN4T5OoRfpt60BFDAITdS62dQGu5LSepcXMWXhxCdQPeDm5Qce6wjJXURubJMpBm0mPWwCNZhJyRw1G5TTyO25NckXQRlObrjltvwAd+7OEUcsYXqhdPtUTIVy6w3XOwT2eC/hP0Yi7qqUMMlJTHUW7Lb9zsEc4UB5BVwgeZ5Y9bVbknJfpt3ygcXAJeeDYxwV9g16KoS7HMFPzwrqlHbiBytIahqarBd4enwqR5RYQPEyetiIDLaJA4SyQ0cE=</span></div></pre></td></tr></table></figure></li><li><p>上传到github</p></li></ol><h2 id="接收测试结果通知"><a href="#接收测试结果通知" class="headerlink" title="接收测试结果通知"></a>接收测试结果通知</h2><p>如果你需要获取travis执行结果通知的话，可以添加邮箱配置，travis执行完毕后会通知到该邮箱。</p><ol><li>打开 <strong>.travis.yml</strong></li><li><p>添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">notifications:</span></div><div class="line"><span class="attr">  email:</span></div><div class="line"><span class="attr">    recipients:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">邮箱地址</span></div><div class="line"><span class="attr">    on_success:</span> <span class="string">change</span></div><div class="line"><span class="attr">    on_failure:</span> <span class="string">always</span></div></pre></td></tr></table></figure></li><li><p>提交到github</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然golang的工程工具已经非常完善了，比如测试、代码格式化等等。但是如果开发library开源到github的话，这些东西是可以使用自动化工具完成的，那就是 &lt;a href=&quot;https://www.travis-ci.org/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="travis" scheme="https//www.ddhigh.com/tags/travis/"/>
    
      <category term="ci" scheme="https//www.ddhigh.com/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>golang for遍历channel时需要注意的问题</title>
    <link href="https//www.ddhigh.com/2018/04/05/golang-for-over-channels.html"/>
    <id>https//www.ddhigh.com/2018/04/05/golang-for-over-channels.html</id>
    <published>2018-04-05T10:45:31.000Z</published>
    <updated>2018-04-08T09:44:44.774Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个基于RabbitMQ的应用，由于官方的qos没有golang的版本，所以出了一点问题。问题代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_, ch, err := component.NewRabbitMQ()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err := ch.Qos(<span class="number">10</span>, <span class="number">0</span>, <span class="literal">true</span>); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">msgs, err := ch.Consume(<span class="string">"push"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">nil</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> m := <span class="keyword">range</span> msgs &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(d *amqp.Delivery)</span></span> &#123;</div><div class="line">           <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; d.Ack(<span class="literal">false</span>) &#125;</div><div class="line">           <span class="comment">// 处理消息</span></div><div class="line">       &#125;(&amp;m)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>发现消费到10条消息，进程就退出了，但是exit code为0，表示系统是正常退出，由于做了日志记录可以确定消费了10条，所以初步确定是qos相关问题。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol><li>首先是把<code>d</code>的tag打印出来，发现全部是一样的，可以确定是重复的一条消息</li><li>一开始想到可能是经典的<code>go协程执行在for循环结束以后</code>导致的，但是看我的代码不属于这种情况，有使用<code>&amp;m</code>保证每一条消息都是不同循环传入的。所以判断可能是for循环的传递问题。</li><li>确定方向之后开始写了一个测试项目用来验证我的想法是否正确。</li></ol><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">ch &lt;- i</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(ch)</div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</div><div class="line">fmt.Println(&amp;v)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div></pre></td></tr></table></figure><p><strong>到这里才焕然大悟，for循环中，如果循环变量不是指针，那么每次的变量是同一个，不过值变了。</strong>，所以上例中的RabbitMQ go协程消费消息那里，需要直接传递值而不是指针，经过测试之后发现，问题确实解决了。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>测试代码那里，如果不close掉channel是会发生死锁的，原因是 <strong>当for循环读完channel的10个值之后会继续尝试读取下一个，而由于channel为空又没关闭，会一直阻塞形成死锁</strong></p><h2 id="TOOD"><a href="#TOOD" class="headerlink" title="TOOD"></a>TOOD</h2><p>研究RabbitMQ Consumer部分的源码来看看消费channel被关闭的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个基于RabbitMQ的应用，由于官方的qos没有golang的版本，所以出了一点问题。问题代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>golang解决TCP粘包问题</title>
    <link href="https//www.ddhigh.com/2018/03/02/golang-tcp-stick-package.html"/>
    <id>https//www.ddhigh.com/2018/03/02/golang-tcp-stick-package.html</id>
    <published>2018-03-02T09:50:31.000Z</published>
    <updated>2018-03-02T10:09:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>什么是TCP粘包问题以及为什么会产生TCP粘包，本文不加讨论。本文使用golang的<code>bufio.Scanner</code>来实现自定义协议解包。</p><h2 id="协议数据包定义"><a href="#协议数据包定义" class="headerlink" title="协议数据包定义"></a>协议数据包定义</h2><p>本文模拟一个日志服务器，该服务器接收客户端传到的数据包并显示出来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">Version        [<span class="number">2</span>]<span class="keyword">byte</span> <span class="comment">// 协议版本，暂定V1</span></div><div class="line">Length         <span class="keyword">int16</span>   <span class="comment">// 数据部分长度</span></div><div class="line">Timestamp      <span class="keyword">int64</span>   <span class="comment">// 时间戳</span></div><div class="line">HostnameLength <span class="keyword">int16</span>   <span class="comment">// 主机名长度</span></div><div class="line">Hostname       []<span class="keyword">byte</span>  <span class="comment">// 主机名</span></div><div class="line">TagLength      <span class="keyword">int16</span>   <span class="comment">// 标签长度</span></div><div class="line">Tag            []<span class="keyword">byte</span>  <span class="comment">// 标签</span></div><div class="line">Msg            []<span class="keyword">byte</span>  <span class="comment">// 日志数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>协议定义部分没有什么好讲的，根据具体的业务逻辑定义即可。</p><h2 id="数据打包"><a href="#数据打包" class="headerlink" title="数据打包"></a>数据打包</h2><p>由于TCP协议是语言无关的协议，所以直接把协议数据包结构体发送到TCP连接中也是不可能的，只能发送字节流数据，所以需要自己实现数据编码。所幸golang提供了<code>binary</code>来帮助我们实现网络字节编码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Pack</span><span class="params">(writer io.Writer)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.TagLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Tag)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Pack方法的输出目标为<code>io.Writer</code>，有利于接口扩展，只要实现了该接口即可编码数据写入。<code>binary.BigEndian</code>是字节序，本文暂时不讨论，有需要的读者可以自行查找资料研究。</p><h2 id="数据解包"><a href="#数据解包" class="headerlink" title="数据解包"></a>数据解包</h2><p>解包需要将TCP数据包解析到结构体中，接下来会讲为什么需要添加几个<code>数据无关</code>的长度字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Unpack</span><span class="params">(reader io.Reader)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">p.Hostname = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.HostnameLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.TagLength)</div><div class="line">p.Tag = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Tag)</div><div class="line">p.Msg = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.Length<span class="number">-8</span><span class="number">-2</span>-p.HostnameLength<span class="number">-2</span>-p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于主机名、标签这种数据是不固定长度的，所以需要两个字节来标识数据长度，否则读取的时候只知道一个总的数据长度是无法区分主机名、标签名、日志数据的。</p><h2 id="数据包的粘包问题解决"><a href="#数据包的粘包问题解决" class="headerlink" title="数据包的粘包问题解决"></a>数据包的粘包问题解决</h2><p>上文只是解决了<code>编码/解码</code>问题，前提是收到的数据包没有产生粘包问题，解决粘包就是要正确分割字节流中的数据。一般有以下做法：</p><ol><li>定长分隔(每个数据包最大为该长度) 缺点是数据不足时会浪费传输资源</li><li>特定字符分隔(如\r\n) 缺点是如果正文中有\r\n就会导致问题</li><li>在数据包中添加长度字段(本文采用的)</li></ol><p>golang提供了<code>bufio.Scanner</code>来解决粘包问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scanner := bufio.NewScanner(reader) <span class="comment">// reader为实现了io.Reader接口的对象，如net.Conn</span></div><div class="line">scanner.Split(<span class="function"><span class="keyword">func</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> !atEOF &amp;&amp; data[<span class="number">0</span>] == <span class="string">'V'</span> &#123; <span class="comment">// 由于我们定义的数据包头最开始为两个字节的版本号，所以只有以V开头的数据包才处理</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">4</span> &#123; <span class="comment">// 如果收到的数据&gt;4个字节(2字节版本号+2字节数据包长度)</span></div><div class="line">length := <span class="keyword">int16</span>(<span class="number">0</span>)</div><div class="line">binary.Read(bytes.NewReader(data[<span class="number">2</span>:<span class="number">4</span>]), binary.BigEndian, &amp;length) <span class="comment">// 读取数据包第3-4字节(int16)=&gt;数据部分长度</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">int</span>(length)+<span class="number">4</span> &lt;= <span class="built_in">len</span>(data) &#123; <span class="comment">// 如果读取到的数据正文长度+2字节版本号+2字节数据长度不超过读到的数据(实际上就是成功完整的解析出了一个包)</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">int</span>(length) + <span class="number">4</span>, data[:<span class="keyword">int</span>(length)+<span class="number">4</span>], <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 打印接收到的数据包</span></div><div class="line"><span class="keyword">for</span> scanner.Scan() &#123;</div><div class="line">scannedPack := <span class="built_in">new</span>(Package)</div><div class="line">scannedPack.Unpack(bytes.NewReader(scanner.Bytes()))</div><div class="line">log.Println(scannedPack)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本文的核心就在于<code>scanner.Split</code>方法，该方法用来解析TCP数据包</p><h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"encoding/binary"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">Version        [<span class="number">2</span>]<span class="keyword">byte</span> <span class="comment">// 协议版本</span></div><div class="line">Length         <span class="keyword">int16</span>   <span class="comment">// 数据部分长度</span></div><div class="line">Timestamp      <span class="keyword">int64</span>   <span class="comment">// 时间戳</span></div><div class="line">HostnameLength <span class="keyword">int16</span>   <span class="comment">// 主机名长度</span></div><div class="line">Hostname       []<span class="keyword">byte</span>  <span class="comment">// 主机名</span></div><div class="line">TagLength      <span class="keyword">int16</span>   <span class="comment">// Tag长度</span></div><div class="line">Tag            []<span class="keyword">byte</span>  <span class="comment">// Tag</span></div><div class="line">Msg            []<span class="keyword">byte</span>  <span class="comment">// 数据部分长度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Pack</span><span class="params">(writer io.Writer)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.TagLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Tag)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Unpack</span><span class="params">(reader io.Reader)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">p.Hostname = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.HostnameLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.TagLength)</div><div class="line">p.Tag = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Tag)</div><div class="line">p.Msg = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.Length<span class="number">-8</span><span class="number">-2</span>-p.HostnameLength<span class="number">-2</span>-p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"version:%s length:%d timestamp:%d hostname:%s tag:%s msg:%s"</span>,</div><div class="line">p.Version,</div><div class="line">p.Length,</div><div class="line">p.Timestamp,</div><div class="line">p.Hostname,</div><div class="line">p.Tag,</div><div class="line">p.Msg,</div><div class="line">)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">hostname, err := os.Hostname()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log.Fatal(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line">pack := &amp;Package&#123;</div><div class="line">Version:        [<span class="number">2</span>]<span class="keyword">byte</span>&#123;<span class="string">'V'</span>, <span class="string">'1'</span>&#125;,</div><div class="line">Timestamp:      time.Now().Unix(),</div><div class="line">HostnameLength: <span class="keyword">int16</span>(<span class="built_in">len</span>(hostname)),</div><div class="line">Hostname:       []<span class="keyword">byte</span>(hostname),</div><div class="line">TagLength:      <span class="number">4</span>,</div><div class="line">Tag:            []<span class="keyword">byte</span>(<span class="string">"demo"</span>),</div><div class="line">Msg:            []<span class="keyword">byte</span>((<span class="string">"现在时间是:"</span> + time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))),</div><div class="line">&#125;</div><div class="line">pack.Length = <span class="number">8</span> + <span class="number">2</span> + pack.HostnameLength + <span class="number">2</span> + pack.TagLength + <span class="keyword">int16</span>(<span class="built_in">len</span>(pack.Msg))</div><div class="line"></div><div class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</div><div class="line"><span class="comment">// 写入四次，模拟TCP粘包效果</span></div><div class="line">pack.Pack(buf)</div><div class="line">pack.Pack(buf)</div><div class="line">pack.Pack(buf)</div><div class="line">pack.Pack(buf)</div><div class="line"><span class="comment">// scanner</span></div><div class="line">scanner := bufio.NewScanner(buf)</div><div class="line">scanner.Split(<span class="function"><span class="keyword">func</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> !atEOF &amp;&amp; data[<span class="number">0</span>] == <span class="string">'V'</span> &#123;</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">4</span> &#123;</div><div class="line">length := <span class="keyword">int16</span>(<span class="number">0</span>)</div><div class="line">binary.Read(bytes.NewReader(data[<span class="number">2</span>:<span class="number">4</span>]), binary.BigEndian, &amp;length)</div><div class="line"><span class="keyword">if</span> <span class="keyword">int</span>(length)+<span class="number">4</span> &lt;= <span class="built_in">len</span>(data) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">int</span>(length) + <span class="number">4</span>, data[:<span class="keyword">int</span>(length)+<span class="number">4</span>], <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">for</span> scanner.Scan() &#123;</div><div class="line">scannedPack := <span class="built_in">new</span>(Package)</div><div class="line">scannedPack.Unpack(bytes.NewReader(scanner.Bytes()))</div><div class="line">log.Println(scannedPack)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</div><div class="line">log.Fatal(<span class="string">"无效数据包"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>golang作为一门强大的网络编程语言，实现自定义协议是非常重要的，实际上实现自定义协议也不是很难，以下几个步骤：</p><ol><li>数据包编码</li><li>数据包解码</li><li>处理TCP粘包问题</li><li>断线重连(可以使用心跳实现)(非必须)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是TCP粘包问题以及为什么会产生TCP粘包，本文不加讨论。本文使用golang的&lt;code&gt;bufio.Scanner&lt;/code&gt;来实现自定义协议解包。&lt;/p&gt;
&lt;h2 id=&quot;协议数据包定义&quot;&gt;&lt;a href=&quot;#协议数据包定义&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="tcp" scheme="https//www.ddhigh.com/tags/tcp/"/>
    
      <category term="protocol" scheme="https//www.ddhigh.com/tags/protocol/"/>
    
  </entry>
  
  <entry>
    <title>golang multipart上传文件到远端（如上传微信临时素材）</title>
    <link href="https//www.ddhigh.com/2018/03/01/golang-upload.html"/>
    <id>https//www.ddhigh.com/2018/03/01/golang-upload.html</id>
    <published>2018-03-01T07:51:02.000Z</published>
    <updated>2018-03-01T09:13:42.853Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发一个关注之后通过客服消息推送一张海报给用户的功能，海报图片是本地生成好的，需要上传到微信临时素材之后通过客服消息推送给用户。<br>上传文件需要<code>multipart/form-data</code>格式的表单，所以golang默认的http.POST方法是实现不了的。需要自行实现body参数逻辑。</p><h2 id="上传请求初始化"><a href="#上传请求初始化" class="headerlink" title="上传请求初始化"></a>上传请求初始化</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新建上传请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUploadRequest</span><span class="params">(link <span class="keyword">string</span>, params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, name, path <span class="keyword">string</span>)</span> <span class="params">(*http.Request, error)</span></span> &#123;</div><div class="line">fp, err := os.Open(path) <span class="comment">// 打开文件句柄</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> fp.Close()</div><div class="line">body := &amp;bytes.Buffer&#123;&#125; <span class="comment">// 初始化body参数</span></div><div class="line">writer := multipart.NewWriter(body) <span class="comment">// 实例化multipart</span></div><div class="line">part, err := writer.CreateFormFile(name, filepath.Base(path)) <span class="comment">// 创建multipart 文件字段</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">_, err = io.Copy(part, fp) <span class="comment">// 写入文件数据到multipart</span></div><div class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> params &#123;</div><div class="line">_ = writer.WriteField(key, val) <span class="comment">// 写入body中额外参数，比如七牛上传时需要提供token</span></div><div class="line">&#125;</div><div class="line">err = writer.Close()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">req, err := http.NewRequest(<span class="string">"POST"</span>, link, body) <span class="comment">// 新建请求</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"multipart/form-data"</span>) <span class="comment">// 设置请求头,!!!非常重要，否则远端无法识别请求</span></div><div class="line"><span class="keyword">return</span> req, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Task)</span> <span class="title">upload</span><span class="params">(appid <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">filename, err := m.download() <span class="comment">// 下载远端海报文件到本地路径</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取accessToken</span></div><div class="line">accessToken, err := m.passport.GetAccessToken(appid)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line">params := &amp;url.Values&#123;</div><div class="line"><span class="string">"access_token"</span>: []<span class="keyword">string</span>&#123;accessToken&#125;,</div><div class="line"><span class="string">"type"</span>:         []<span class="keyword">string</span>&#123;<span class="string">"image"</span>&#125;,</div><div class="line">&#125;</div><div class="line">req, err := util.NewUploadRequest(<span class="string">"https://api.weixin.qq.com/cgi-bin/media/upload?"</span>+params.Encode(), <span class="literal">nil</span>, <span class="string">"media"</span>, filename) <span class="comment">// 上传到微信</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line">resp, err := http.DefaultClient.Do(req)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> resp.Body.Close()</div><div class="line">ret := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line"><span class="keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;ret); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> mediaId, ok := ret[<span class="string">"media_id"</span>]; ok &#123;</div><div class="line"><span class="keyword">return</span> mediaId.(<span class="keyword">string</span>), <span class="literal">nil</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> errmsg, ok := ret[<span class="string">"errmsg"</span>]; ok &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(errmsg.(<span class="keyword">string</span>))</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"上传失败"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发一个关注之后通过客服消息推送一张海报给用户的功能，海报图片是本地生成好的，需要上传到微信临时素材之后通过客服消息推送给用户。&lt;br&gt;上传文件需要&lt;code&gt;multipart/form-data&lt;/code&gt;格式的表单，所以golang默认的http.POST方法
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="multipart" scheme="https//www.ddhigh.com/tags/multipart/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署golang应用时时区问题</title>
    <link href="https//www.ddhigh.com/2018/03/01/golang-docker-timezone.html"/>
    <id>https//www.ddhigh.com/2018/03/01/golang-docker-timezone.html</id>
    <published>2018-03-01T03:49:24.000Z</published>
    <updated>2018-03-01T03:54:37.007Z</updated>
    
    <content type="html"><![CDATA[<p>目前golang用的基础镜像是<code>busybox</code>，由于golang交叉编译之后只有一个二进制文件，可以直接部署到容器中运行，容器镜像大小几乎等于二进制文件大小。</p><h2 id="带来的问题"><a href="#带来的问题" class="headerlink" title="带来的问题"></a>带来的问题</h2><p>由于基础镜像太过精简，目前遇到的问题是将时间戳格式化为时间字符串时发现差了8个小时。</p><h2 id="尝试过的解决办法"><a href="#尝试过的解决办法" class="headerlink" title="尝试过的解决办法"></a>尝试过的解决办法</h2><p>刚开始使用了Location时区相关API，但是部署到容器中发现直接报错了，因为容器中缺少相关的系统调用函数。代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">loc, _ := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</div><div class="line">time.Now().In(loc).Format(<span class="string">"2006-01-02 15:04:05"</span>)</div></pre></td></tr></table></figure><p>目前应用会部署到docker容器中，故处理办法比较原始，直接在Time对象上添加8个小时来解决时差问题。代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time.Now().Add(time.Hour * <span class="number">8</span>).Format(<span class="string">"2006年01月02日 15:04"</span>),</div></pre></td></tr></table></figure><p>暂时解决了这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前golang用的基础镜像是&lt;code&gt;busybox&lt;/code&gt;，由于golang交叉编译之后只有一个二进制文件，可以直接部署到容器中运行，容器镜像大小几乎等于二进制文件大小。&lt;/p&gt;
&lt;h2 id=&quot;带来的问题&quot;&gt;&lt;a href=&quot;#带来的问题&quot; class=&quot;he
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="docker" scheme="https//www.ddhigh.com/tags/docker/"/>
    
      <category term="timezone" scheme="https//www.ddhigh.com/tags/timezone/"/>
    
  </entry>
  
  <entry>
    <title>golang JSON编码时保留HTML标签</title>
    <link href="https//www.ddhigh.com/2018/03/01/golang-json-no-escape-html.html"/>
    <id>https//www.ddhigh.com/2018/03/01/golang-json-no-escape-html.html</id>
    <published>2018-03-01T03:40:51.000Z</published>
    <updated>2018-03-01T03:49:12.318Z</updated>
    
    <content type="html"><![CDATA[<p>golang默认编码JSON时会将HTML标签中的尖括号编码为<code>\u003c</code>这种unicode字符。而最近在开发的微信客服消息推送就会出现以下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\u003ca href=&apos;https://www.example.com&apos;\u003e点击进入\u003c/a\u003e</div></pre></td></tr></table></figure><p>查看golang的json包发现json编码器有个方法<code>SetEscapeHTML</code>方法，接收一个bool值来设置是否保留HTML标签。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>json的Encoder只能编码到实现了<code>io.Writer</code>接口的对象中去，而本例中需要编码到一个<code>[]byte</code>切片中。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查找资料发现<code>bytes.Buffer</code>对象实现了<code>io.Writer</code>接口。所以最终代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BuildJson</span><span class="params">(data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">    buf := bytes.NewBufferString(<span class="string">""</span>)</div><div class="line">    encoder := json.NewEncoder(buf)</div><div class="line">encoder.SetEscapeHTML(<span class="literal">false</span>)</div><div class="line"><span class="keyword">if</span> err := encoder.Encode(&amp;data); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> buf.Bytes(), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>经过测试，输出接口符合要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang默认编码JSON时会将HTML标签中的尖括号编码为&lt;code&gt;\u003c&lt;/code&gt;这种unicode字符。而最近在开发的微信客服消息推送就会出现以下结果&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="json" scheme="https//www.ddhigh.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>golang使用CSV导出大量数据</title>
    <link href="https//www.ddhigh.com/2018/02/28/golang-export-csv.html"/>
    <id>https//www.ddhigh.com/2018/02/28/golang-export-csv.html</id>
    <published>2018-02-28T08:43:13.000Z</published>
    <updated>2018-02-28T08:52:08.203Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个导出功能，最初是使用<a href="https://github.com/tealeg/xlsx" target="_blank" rel="external">https://github.com/tealeg/xlsx</a>做的，但是发现导出有个30W行的excel时，这玩意内存彪到700M+，后来发现只是导出数据为表格，并没有其他东西，于是打算使用CSV导出。</p><h2 id="CSV格式简介"><a href="#CSV格式简介" class="headerlink" title="CSV格式简介"></a>CSV格式简介</h2><p>CSV本质上是个文本文件，该文件有以下要求：</p><ol><li>列之间用逗号分隔，行之间用换行分隔</li><li>单元格如果有逗号，引号之类的字符，该单元格需要使用双引号括起来</li><li>如果包含中文，需要使用GBK编码，否则会乱码</li></ol><h2 id="golang实现"><a href="#golang实现" class="headerlink" title="golang实现"></a>golang实现</h2><ol><li><p>UTF8转GBK函数(需要 <code>go get golang.org/x/text/</code>)</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">UTF82GBK</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line"> reader := transform.NewReader(strings.NewReader(src), simplifiedchinese.GBK.NewEncoder())</div><div class="line"> <span class="keyword">if</span> buf, err := ioutil.ReadAll(reader); err != <span class="literal">nil</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(buf), <span class="literal">nil</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>导出代码</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">filename := <span class="string">"test.csv"</span></div><div class="line">fp, err := os.Create(filename) <span class="comment">// 创建文件句柄</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> fp.Close()</div><div class="line">columns := []<span class="keyword">string</span>&#123;<span class="string">"姓名"</span>, <span class="string">"电话"</span>, <span class="string">"公司"</span>, <span class="string">"职位"</span>, <span class="string">"加入时间"</span>&#125;</div><div class="line"><span class="keyword">if</span> line, err := util.UTF82GBK(strings.Join(columns, <span class="string">","</span>)); err == <span class="literal">nil</span> &#123; <span class="comment">// 写入一行</span></div><div class="line">    fp.WriteString(line + <span class="string">"\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>其他语言也可以使用类似方法导出数据，只要满足CSV的几个条件即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个导出功能，最初是使用&lt;a href=&quot;https://github.com/tealeg/xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tealeg/xlsx&lt;/a&gt;做的，但是发现导出有个30W行
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="excel" scheme="https//www.ddhigh.com/tags/excel/"/>
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="csv" scheme="https//www.ddhigh.com/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>nodejs thrift多路复用客户端</title>
    <link href="https//www.ddhigh.com/2018/02/08/nodejs-thrift-multiple-client.html"/>
    <id>https//www.ddhigh.com/2018/02/08/nodejs-thrift-multiple-client.html</id>
    <published>2018-02-08T07:35:48.000Z</published>
    <updated>2018-03-02T02:43:23.903Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://thrift.apache.org/tutorial/nodejs" target="_blank" rel="external">官网nodejs示例</a>中只实现了服务端是单一service的情形，而对于服务端属于<code>多个服务复用一个连接地址</code>的例子却未实现。</p><p>查看thrift的nodejs库源码发现实际上还是支持的。以下来展示调用单一服务和多个服务的区别。</p><h2 id="单一服务"><a href="#单一服务" class="headerlink" title="单一服务"></a>单一服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thrift = <span class="built_in">require</span>(<span class="string">'thrift'</span>);</div><div class="line"><span class="keyword">var</span> Calculator = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/Calculator'</span>);</div><div class="line"><span class="keyword">var</span> ttypes = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/tutorial_types'</span>);</div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> transport = thrift.TBufferedTransport;</div><div class="line"><span class="keyword">var</span> protocol = thrift.TBinaryProtocol;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connection = thrift.createConnection(<span class="string">"localhost"</span>, <span class="number">9090</span>, &#123;</div><div class="line">  transport : transport,</div><div class="line">  protocol : protocol</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> client = thrift.createClient(Calculator, connection);</div><div class="line"><span class="comment">// 已经可以调用client方法</span></div></pre></td></tr></table></figure><h2 id="复用服务"><a href="#复用服务" class="headerlink" title="复用服务"></a>复用服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thrift = <span class="built_in">require</span>(<span class="string">'thrift'</span>);</div><div class="line"><span class="keyword">var</span> Calculator = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/Calculator'</span>);</div><div class="line"><span class="keyword">var</span> ttypes = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/tutorial_types'</span>);</div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> transport = thrift.TBufferedTransport;</div><div class="line"><span class="keyword">var</span> protocol = thrift.TBinaryProtocol;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connection = thrift.createConnection(<span class="string">"localhost"</span>, <span class="number">9090</span>, &#123;</div><div class="line">  transport : transport,</div><div class="line">  protocol : protocol</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> thrift.Multiplexer(); <span class="comment">// 关键</span></div><div class="line"><span class="keyword">const</span> client = m.createClient(<span class="string">'calculator'</span>, Calculator, connection); <span class="comment">// calculator为服务端声明的服务名称</span></div><div class="line"><span class="comment">// 已经可以调用client方法</span></div></pre></td></tr></table></figure><p>经过测试，以上代码能与golang实现的服务端正常通信。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://thrift.apache.org/tutorial/nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网nodejs示例&lt;/a&gt;中只实现了服务端是单一service的情形，而对于服务端属于&lt;code&gt;多个服务复
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="thrift" scheme="https//www.ddhigh.com/tags/thrift/"/>
    
  </entry>
  
  <entry>
    <title>golang通用连接池的实现</title>
    <link href="https//www.ddhigh.com/2018/02/01/golang-generic-pool.html"/>
    <id>https//www.ddhigh.com/2018/02/01/golang-generic-pool.html</id>
    <published>2018-02-01T12:04:00.000Z</published>
    <updated>2018-02-01T12:10:50.491Z</updated>
    
    <content type="html"><![CDATA[<p>golang的channel除了goroutine通信之外还有很多其他的功能，本文将实现一种基于channel的通用连接池。</p><h2 id="何为通用？"><a href="#何为通用？" class="headerlink" title="何为通用？"></a>何为通用？</h2><p>连接池的实现不依赖具体的实例，而依赖某个接口，本文的连接池选用的是<code>io.Closer</code>接口，只要是实现了该接口的对象都可以被池管理。<br>当然，你可以实现基于<code>interface{}</code>的连接池，这样任何对象都可以被管理。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>将连接句柄存入channel中，由于缓存channel的特性，获取连接时如果池中有连接，将直接返回，如果池中没有连接，将阻塞或者新建连接（没超过最大限制的情况下）。<br>由于面向接口编程，所有创建连接的逻辑是不清楚的，这里需要传入一个函数，该函数返回一个<code>io.Closer</code>对象。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>由于并发问题，在需要操作池中互斥数据的时候需要加锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pool</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"errors"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">ErrInvalidConfig = errors.New(<span class="string">"invalid pool config"</span>)</div><div class="line">ErrPoolClosed    = errors.New(<span class="string">"pool closed"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> factory <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">type</span> <span class="title">Pool</span> <span class="title">interface</span></span> &#123;</div><div class="line">Acquire() (io.Closer, error) <span class="comment">// 获取资源</span></div><div class="line">Release(io.Closer) error     <span class="comment">// 释放资源</span></div><div class="line">Close(io.Closer) error       <span class="comment">// 关闭资源</span></div><div class="line">Shutdown() error             <span class="comment">// 关闭池</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> GenericPool <span class="keyword">struct</span> &#123;</div><div class="line">sync.Mutex</div><div class="line">pool        <span class="keyword">chan</span> io.Closer</div><div class="line">maxOpen     <span class="keyword">int</span>  <span class="comment">// 池中最大资源数</span></div><div class="line">numOpen     <span class="keyword">int</span>  <span class="comment">// 当前池中资源数</span></div><div class="line">minOpen     <span class="keyword">int</span>  <span class="comment">// 池中最少资源数</span></div><div class="line">closed      <span class="keyword">bool</span> <span class="comment">// 池是否已关闭</span></div><div class="line">maxLifetime time.Duration</div><div class="line">factory     factory <span class="comment">// 创建连接的方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenericPool</span><span class="params">(minOpen, maxOpen <span class="keyword">int</span>, maxLifetime time.Duration, factory factory)</span> <span class="params">(*GenericPool, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> maxOpen &lt;= <span class="number">0</span> || minOpen &gt; maxOpen &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidConfig</div><div class="line">&#125;</div><div class="line">p := &amp;GenericPool&#123;</div><div class="line">maxOpen:     maxOpen,</div><div class="line">minOpen:     minOpen,</div><div class="line">maxLifetime: maxLifetime,</div><div class="line">factory:     factory,</div><div class="line">pool:        <span class="built_in">make</span>(<span class="keyword">chan</span> io.Closer, maxOpen),</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; minOpen; i++ &#123;</div><div class="line">closer, err := factory()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line">p.numOpen++</div><div class="line">p.pool &lt;- closer</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> p, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Acquire</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> p.closed &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrPoolClosed</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">closer, err := p.getOrCreate()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// todo maxLifttime处理</span></div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">getOrCreate</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span> &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> closer := &lt;-p.pool:</div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">&#125;</div><div class="line">p.Lock()</div><div class="line"><span class="keyword">if</span> p.numOpen &gt;= p.maxOpen &#123;</div><div class="line">closer := &lt;-p.pool</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 新建连接</span></div><div class="line">closer, err := p.factory()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">p.numOpen++</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 释放单个资源到连接池</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Release</span><span class="params">(closer io.Closer)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> p.closed &#123;</div><div class="line"><span class="keyword">return</span> ErrPoolClosed</div><div class="line">&#125;</div><div class="line">p.Lock()</div><div class="line">p.pool &lt;- closer</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 关闭单个资源</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Close</span><span class="params">(closer io.Closer)</span> <span class="title">error</span></span> &#123;</div><div class="line">p.Lock()</div><div class="line">closer.Close()</div><div class="line">p.numOpen--</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 关闭连接池，释放所有资源</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Shutdown</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> p.closed &#123;</div><div class="line"><span class="keyword">return</span> ErrPoolClosed</div><div class="line">&#125;</div><div class="line">p.Lock()</div><div class="line"><span class="built_in">close</span>(p.pool)</div><div class="line"><span class="keyword">for</span> closer := <span class="keyword">range</span> p.pool &#123;</div><div class="line">closer.Close()</div><div class="line">p.numOpen--</div><div class="line">&#125;</div><div class="line">p.closed = <span class="literal">true</span></div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>基于该连接池，可以管理所有<code>io.Closer</code>对象。比如<code>memcached</code>,<code>redis</code>等等，非常方便！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang的channel除了goroutine通信之外还有很多其他的功能，本文将实现一种基于channel的通用连接池。&lt;/p&gt;
&lt;h2 id=&quot;何为通用？&quot;&gt;&lt;a href=&quot;#何为通用？&quot; class=&quot;headerlink&quot; title=&quot;何为通用？&quot;&gt;&lt;/a&gt;何
      
    
    </summary>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/go/"/>
    
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang限制协程数量</title>
    <link href="https//www.ddhigh.com/2018/01/31/goroutine-limit-demo.html"/>
    <id>https//www.ddhigh.com/2018/01/31/goroutine-limit-demo.html</id>
    <published>2018-01-31T14:23:09.000Z</published>
    <updated>2018-02-01T12:03:40.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要限制协程数量"><a href="#为什么要限制协程数量" class="headerlink" title="为什么要限制协程数量"></a>为什么要限制协程数量</h2><p>golang的go关键字并发实在是太简单，但是带来的问题是由于硬件和网络状况的限制，不受控制的增加协程是非常危险的做法，甚至有可能搞垮数据库之类的应用! 而并发控制在go中是非常常用的技巧，以此文来记录一下学习历程。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于channel的阻塞机制，通过设置缓冲channel的缓冲大小来控制同时执行的协程数量。</p><h2 id="demo代码"><a href="#demo代码" class="headerlink" title="demo代码"></a>demo代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">start := time.Now()</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</div><div class="line">ch &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">go</span> worker(i, ch)</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(ch)</div><div class="line">log.Println(<span class="string">"complete"</span>, time.Since(start).Seconds())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 模拟耗时操作</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(i <span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">log.Println(<span class="string">"worker"</span>, i)</div><div class="line">time.Sleep(time.Second)</div><div class="line">&lt;-ch</div></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go run demo.ho</div></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2018/01/31 22:24:49 worker 1</div><div class="line">2018/01/31 22:24:49 worker 0</div><div class="line">2018/01/31 22:24:50 worker 2</div><div class="line">2018/01/31 22:24:50 worker 3</div><div class="line">2018/01/31 22:24:51 worker 4</div><div class="line">2018/01/31 22:24:51 worker 5</div><div class="line">2018/01/31 22:24:52 worker 6</div><div class="line">2018/01/31 22:24:52 worker 7</div><div class="line">2018/01/31 22:24:53 worker 8</div><div class="line">2018/01/31 22:24:53 worker 9</div><div class="line">2018/01/31 22:24:54 worker 10</div><div class="line">2018/01/31 22:24:54 complete 5.01140112</div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到日志的输出时间，每秒出现两个，正好等于我们<code>make</code>函数的大小，而总时间也是为<code>10/2</code>左右，证明限制起到了作用。</p><p>虽然本文写起来很简单，但是包含的技巧可以说大型程序仍然会用到。正所谓“万丈高楼平地起”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要限制协程数量&quot;&gt;&lt;a href=&quot;#为什么要限制协程数量&quot; class=&quot;headerlink&quot; title=&quot;为什么要限制协程数量&quot;&gt;&lt;/a&gt;为什么要限制协程数量&lt;/h2&gt;&lt;p&gt;golang的go关键字并发实在是太简单，但是带来的问题是由于硬件和网络状况
      
    
    </summary>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>头脑王者辅助</title>
    <link href="https//www.ddhigh.com/2018/01/30/tnwz.html"/>
    <id>https//www.ddhigh.com/2018/01/30/tnwz.html</id>
    <published>2018-01-30T08:44:23.000Z</published>
    <updated>2018-01-30T08:50:14.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="头脑王者"><a href="#头脑王者" class="headerlink" title="头脑王者"></a>头脑王者</h1><p>本项目仅作为学习<code>anyproxy</code>之用，请勿用于非法用途，否则后果自负</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>[x] 题目爬取</li><li>[x] 答题匹配(如果题库不存在，请自行答题，系统会在答题后把正确答案自动录入数据库)</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li><p>安装mysql，新建数据库<code>tnwz</code>，建表语句</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tnwz.question</div><div class="line">(</div><div class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">    question <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">    a <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    b <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    c <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    d <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    answer <span class="built_in">int</span>(<span class="number">11</span>),</div><div class="line">    createdAt datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    updatedAt datetime <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">);</div></pre></td></tr></table></figure></li><li><p>config.json为数据库配置 </p></li><li>安装<code>anyproxy</code> =&gt; <code>npm install anyproxy -g</code></li><li>生成证书<code>anyproxy -i</code></li><li>手机接入代理，代理地址<code>电脑IP:8001</code></li></ol><h2 id="题库获取"><a href="#题库获取" class="headerlink" title="题库获取"></a>题库获取</h2><ol><li>登录两个微信号获取到uid和token之后填入auth.json</li><li><code>node question-fetcher.js</code>,如果出现401，请重新登录</li></ol><h2 id="排位系统"><a href="#排位系统" class="headerlink" title="排位系统"></a>排位系统</h2><ol><li><code>npm run fight</code>开启代理</li><li>手机接入代理</li><li>开始排位，终端会提示<code>开始匹配</code>，系统会将正确答案添加上<code>###</code></li></ol><h2 id="适用系统"><a href="#适用系统" class="headerlink" title="适用系统"></a>适用系统</h2><ul><li>Android &amp;&amp; iOS</li><li>iOS11.3 已通过测试</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/tnwz" target="_blank" rel="external">https://github.com/xialeistudio/tnwz</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;头脑王者&quot;&gt;&lt;a href=&quot;#头脑王者&quot; class=&quot;headerlink&quot; title=&quot;头脑王者&quot;&gt;&lt;/a&gt;头脑王者&lt;/h1&gt;&lt;p&gt;本项目仅作为学习&lt;code&gt;anyproxy&lt;/code&gt;之用，请勿用于非法用途，否则后果自负&lt;/p&gt;
&lt;h2 id=&quot;功能
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https//www.ddhigh.com/tags/nodejs/"/>
    
      <category term="anyproxy" scheme="https//www.ddhigh.com/tags/anyproxy/"/>
    
  </entry>
  
  <entry>
    <title>golang可能导致内存泄漏的地方</title>
    <link href="https//www.ddhigh.com/2018/01/20/golang-memory-leak.html"/>
    <id>https//www.ddhigh.com/2018/01/20/golang-memory-leak.html</id>
    <published>2018-01-20T05:44:15.000Z</published>
    <updated>2018-01-20T05:54:24.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>golang能够GC是程序声明的变量，而一些外部资源是不可以GC掉的，比如<code>os.OpenFile</code>打开的文件句柄，<code>sql.Open</code>打开的数据库连接句柄等资源。</p><h2 id="开发中常用场景"><a href="#开发中常用场景" class="headerlink" title="开发中常用场景"></a>开发中常用场景</h2><ol><li><p>http请求时<code>resp.Body</code>，刚开始写golang的时候，如果会用<code>ioutil.readAll</code>去读取<code>resp.Body</code>时会加上<code>defer resp.Body.Close()</code>,后来有<code>json.NewDecoder().decode()</code>时没有加，以为会自动关闭，没想到还是太天真了。不管什么情况都需要<code>defer resp.Body.Close()</code></p></li><li><p>sql查询时<code>DB.Prepare</code>，数据库查询操作会得到一个<code>rows</code>的资源，这个一般都关闭了，但是运行一段时间之后发现有内存泄漏，因为只用到了sql查询，所以只有数据库操作代码可以排查，尽快调试发现<code>stmt</code>也有<code>Close</code>方法，加上<code>defer stmt.Close</code>之后，内存稳定了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;核心&quot;&gt;&lt;a href=&quot;#核心&quot; class=&quot;headerlink&quot; title=&quot;核心&quot;&gt;&lt;/a&gt;核心&lt;/h2&gt;&lt;p&gt;golang能够GC是程序声明的变量，而一些外部资源是不可以GC掉的，比如&lt;code&gt;os.OpenFile&lt;/code&gt;打开的文件句柄，&lt;
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="memory-leak" scheme="https//www.ddhigh.com/tags/memory-leak/"/>
    
  </entry>
  
  <entry>
    <title>PHP实现“异步”</title>
    <link href="https//www.ddhigh.com/2018/01/20/php-async.html"/>
    <id>https//www.ddhigh.com/2018/01/20/php-async.html</id>
    <published>2018-01-19T16:07:04.000Z</published>
    <updated>2018-01-20T05:42:52.405Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，PHP不使用多线程扩展的情况下是不支持异步的(不算curl之类)。今天无意中看到一个函数<code>fastcgi_finish_request</code>;<br>这个方法是PHP5.3+开始提供。<br>注释写的很清楚，有耗时操作的时候使用该函数可以尽早结束fastcgi处理过程，提高页面响应速度。</p><h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1</span>;</div><div class="line">fastcgi_finish_request();</div><div class="line">sleep(<span class="number">3</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>此时打开浏览器发现响应速度并没有受到<code>sleep</code>函数的影响，基于此点，可以在适当的时候使用该函数以提升用户体验!</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>PHP需要运行在fpm模式下才可以使用本函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知，PHP不使用多线程扩展的情况下是不支持异步的(不算curl之类)。今天无意中看到一个函数&lt;code&gt;fastcgi_finish_request&lt;/code&gt;;&lt;br&gt;这个方法是PHP5.3+开始提供。&lt;br&gt;注释写的很清楚，有耗时操作的时候使用该函数可以尽早结束
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="async" scheme="https//www.ddhigh.com/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>微信H5点击跳转到关注页</title>
    <link href="https//www.ddhigh.com/2017/11/25/wechat-web-subscribe.html"/>
    <id>https//www.ddhigh.com/2017/11/25/wechat-web-subscribe.html</id>
    <published>2017-11-25T07:19:59.000Z</published>
    <updated>2018-01-20T05:42:52.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>微信诱导关注接口在早两年已经被微信关停，但是一般的H5目的都是要关注公众号。<br>目前用的多的方法是用公众号发表一篇文章，文章里面一般是一个GIF的箭头图片指向公众号关注。<br>这种方法有点取巧。</p><p>今天要介绍的是另一种方法，感觉应该不会被微信封号。</p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>有个朋友在segmentfault上发了一个链接出来，微信打开可以直接到关注页<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//m</span>p.weixin.qq.com<span class="regexp">/mp/</span>profile_ext?action=home&amp;__biz=MzUzMDM3MjMyNQ==<span class="comment">#wechat_redirect</span></div></pre></td></tr></table></figure></p><p>条件反射发现<code>MzUzMDM3MjMyNQ==</code>是Base64编码后的参数，解码后是一段数字，然后我改了下数字，重新编码，再发送到微信，发现可以打开另外一个公众号的关注页<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//m</span>p.weixin.qq.com<span class="regexp">/mp/</span>profile_ext?action=home&amp;__biz=MzUzMDM3MjMyNA==<span class="comment">#wechat_redirect</span></div></pre></td></tr></table></figure></p><p>所以只要知道那个公众号数字就可以构造链接进行关注，想着这种ID一般在公众平台有，果然被我找到了。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>登录公众平台后台</li><li>点击右上角的公众号，来到公众号信息页面</li><li><p>查看公众号信息页面的源代码，在顶上找到以下代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.wx=&#123;</div><div class="line">uin:<span class="string">"xxxx"</span>||<span class="string">"0"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><code>xxxx</code> 就是你的公众号数字ID</p></li><li>将第4步找到的ID进行base64编码</li><li><p>构造如下链接</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//m</span>p.weixin.qq.com<span class="regexp">/mp/</span>profile_ext?action=home&amp;__biz=第<span class="number">5</span>步的结果<span class="comment">#wechat_redirect</span></div></pre></td></tr></table></figure></li><li><p>发送到微信之后即可。</p></li></ol><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>从打开的链接看页面还是蛮正式的，可能不是私有接口，但是微信文档中没说过这种方式，故使用本方式带来的后果请自行负责！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;微信诱导关注接口在早两年已经被微信关停，但是一般的H5目的都是要关注公众号。&lt;br&gt;目前用的多的方法是用公众号发表一篇文章，文章里面一般是一
      
    
    </summary>
    
    
      <category term="微信" scheme="https//www.ddhigh.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>从零开始打造自己的直播服务器-golang开发HTTP推流服务</title>
    <link href="https//www.ddhigh.com/2017/11/23/go-rtmp-http-publisher.html"/>
    <id>https//www.ddhigh.com/2017/11/23/go-rtmp-http-publisher.html</id>
    <published>2017-11-23T07:19:58.000Z</published>
    <updated>2018-01-20T05:42:52.404Z</updated>
    
    <content type="html"><![CDATA[<p>目前笔者只知道ffmpeg命令行推流到RTMP服务器，是没有HTTP接口的，像iOS和Android这种Native应用应该有RTMP SDK封装推流逻辑。但是像微信小程序这种录制音频只有原始<strong>ArrayBuffer</strong>的数据，则必须在服务端提供接口来进行推流。</p><p>本文将基于golang标准库以及ffmpeg命令来实现。</p><h2 id="服务端原理"><a href="#服务端原理" class="headerlink" title="服务端原理"></a>服务端原理</h2><ol><li>客户端上传base64编码后的音频数据</li><li>服务端接收后解码为<strong>[]byte</strong></li><li>将<strong>[]byte</strong>写入本地文件</li><li>golang调用ffmpeg命令将第3步写入的文件推流到RTMP服务端(<a href="/2017/11/23/nginx-rtmp-server.html" title="从零开始打造自己的直播服务器-Nginx安装">从零开始打造自己的直播服务器-Nginx安装</a>)</li><li>golang输出JSON响应，如果出错则返回错误JSON响应 <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"errmsg"</span>:<span class="string">"ok"</span>,</div><div class="line">  <span class="attr">"errcode"</span>:<span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><p>由于采用了log4go日志库<a href="https://github.com/alecthomas/log4go" target="_blank" rel="external">https://github.com/alecthomas/log4go</a>，故需要先安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/alecthomas/log4go</div></pre></td></tr></table></figure></p><p>完整服务端源代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"github.com/alecthomas/log4go"</span></div><div class="line"><span class="string">"flag"</span></div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"time"</span></div><div class="line"><span class="string">"encoding/json"</span></div><div class="line"><span class="string">"io/ioutil"</span></div><div class="line"><span class="string">"encoding/base64"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"os/exec"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">rtmp            <span class="keyword">string</span> <span class="comment">// rtmp 服务端地址</span></div><div class="line">ffmpeg          <span class="keyword">string</span> <span class="comment">// ffmpeg命令地址</span></div><div class="line">listen          <span class="keyword">string</span> <span class="comment">// 监听地址</span></div><div class="line">uploadKey       <span class="keyword">string</span> <span class="comment">// 上传key</span></div><div class="line">uploadDirectory <span class="keyword">string</span> <span class="comment">// 本地上传目录</span></div><div class="line">start           = time.Now()</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">VERSION = <span class="string">"1.0.0"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">flag.StringVar(&amp;rtmp, <span class="string">"rtmp"</span>, <span class="string">"rtmp://localhost:1935/hls"</span>, <span class="string">"rtmp upstream address"</span>)</div><div class="line">flag.StringVar(&amp;ffmpeg, <span class="string">"ffmpeg"</span>, <span class="string">"ffmpeg"</span>, <span class="string">"ffmpeg executable"</span>)</div><div class="line">flag.StringVar(&amp;listen, <span class="string">"listen"</span>, <span class="string">":8081"</span>, <span class="string">"http server address"</span>)</div><div class="line">flag.StringVar(&amp;uploadKey, <span class="string">"key"</span>, <span class="string">"testkey"</span>, <span class="string">"http upload key"</span>)</div><div class="line">flag.StringVar(&amp;uploadDirectory, <span class="string">"upload-directory"</span>, <span class="string">"upload"</span>, <span class="string">"local upload directory"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">flag.Parse()</div><div class="line">log4go.LoadConfiguration(<span class="string">"log4go.xml"</span>)</div><div class="line"><span class="keyword">if</span> rtmp == <span class="string">""</span> &#123;</div><div class="line"><span class="built_in">panic</span>(<span class="string">"rtmp upstream not set!"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建目录</span></div><div class="line">os.Mkdir(uploadDirectory, os.ModePerm)</div><div class="line">log4go.Info(<span class="string">"start ffmpeg-publisher, version %s"</span>, VERSION)</div><div class="line">log4go.Info(<span class="string">"RTMP UpStream %s"</span>, rtmp)</div><div class="line">log4go.Info(<span class="string">"HTTP Upload Directory %s"</span>, uploadDirectory)</div><div class="line">log4go.Info(<span class="string">"HTTP Listen ON %s"</span>, listen)</div><div class="line">log4go.Info(<span class="string">"HTTP Upload Key %s"</span>, uploadKey)</div><div class="line"></div><div class="line">http.HandleFunc(<span class="string">"/"</span>, handleIndex)</div><div class="line">http.HandleFunc(<span class="string">"/base64"</span>, handleBase64Publish)</div><div class="line"><span class="built_in">panic</span>(http.ListenAndServe(listen, <span class="literal">nil</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendResponse</span><span class="params">(errmsg <span class="keyword">string</span>, statusCode <span class="keyword">int</span>, w http.ResponseWriter)</span></span> &#123;</div><div class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>)</div><div class="line"><span class="keyword">if</span> statusCode == <span class="number">0</span> &#123;</div><div class="line">statusCode = <span class="number">200</span></div><div class="line">&#125;</div><div class="line">w.WriteHeader(statusCode)</div><div class="line">ret := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</div><div class="line"><span class="string">"errmsg"</span>:  errmsg,</div><div class="line"><span class="string">"errcode"</span>: statusCode,</div><div class="line">&#125;</div><div class="line">json.NewEncoder(w).Encode(&amp;ret)</div><div class="line"><span class="keyword">if</span> statusCode == <span class="number">500</span> &#123;</div><div class="line">log4go.Error(errmsg)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleIndex</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</div><div class="line">ret := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</div><div class="line"><span class="string">"name"</span>:    <span class="string">"ffpmeg-publisher"</span>,</div><div class="line"><span class="string">"version"</span>: VERSION,</div><div class="line"><span class="string">"uptime"</span>:  time.Since(start).String(),</div><div class="line">&#125;</div><div class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>)</div><div class="line">json.NewEncoder(w).Encode(&amp;ret)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleBase64Publish</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</div><div class="line">sendResponse(<span class="string">"Method Not Allowed"</span>, <span class="number">405</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取直播ID和key</span></div><div class="line"><span class="keyword">if</span> err := r.ParseForm(); err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 检测直播Key</span></div><div class="line"><span class="keyword">if</span> key := r.Form.Get(<span class="string">"key"</span>); key != uploadKey &#123;</div><div class="line">sendResponse(<span class="string">"Forbidden"</span>, <span class="number">403</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 检测直播ID</span></div><div class="line">id := r.Form.Get(<span class="string">"id"</span>)</div><div class="line"><span class="keyword">if</span> id == <span class="string">""</span> &#123;</div><div class="line">sendResponse(<span class="string">"Bad Request"</span>, <span class="number">400</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 读取base64</span></div><div class="line">base64Buf, err := ioutil.ReadAll(r.Body)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">buf, err := base64.StdEncoding.DecodeString(<span class="keyword">string</span>(base64Buf))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">log4go.Trace(<span class="string">"live %s receive %d bytes"</span>, id, <span class="built_in">len</span>(buf))</div><div class="line"><span class="keyword">if</span> err := publishVoice(buf, id); err != <span class="literal">nil</span> &#123;</div><div class="line">sendResponse(err.Error(), <span class="number">500</span>, w)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">sendResponse(<span class="string">"ok"</span>, <span class="number">0</span>, w)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 保存音频到临时文件目录,1个直播一个目录</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveVoice</span><span class="params">(buf []<span class="keyword">byte</span>, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">directory := uploadDirectory + <span class="string">"/"</span> + id</div><div class="line">os.Mkdir(directory, os.ModePerm)</div><div class="line">name := time.Now().Format(<span class="string">"2006-01-02-15-04-05"</span>) + <span class="string">".mp3"</span></div><div class="line">filename := directory + <span class="string">"/"</span> + name</div><div class="line">log4go.Trace(<span class="string">"live %s save chunk %s"</span>, id, filename)</div><div class="line">err := ioutil.WriteFile(filename, buf, os.ModePerm)</div><div class="line"><span class="keyword">return</span> filename, err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 发布音频至rtmp</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">publishVoice</span><span class="params">(buf []<span class="keyword">byte</span>, id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">mp3filename, err := saveVoice(buf, id)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log4go.Error(<span class="string">"live %s %q"</span>, id, err)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 执行系统命令</span></div><div class="line">cmd := exec.Command(ffmpeg, <span class="string">"-i"</span>, mp3filename, <span class="string">"-acodec"</span>, <span class="string">"aac"</span>, <span class="string">"-f"</span>, <span class="string">"flv"</span>, rtmp+<span class="string">"/"</span>+id)</div><div class="line">log4go.Trace(<span class="string">"live %s execute %s"</span>, id, strings.Join(cmd.Args, <span class="string">" "</span>))</div><div class="line">cmd.Stderr = os.Stderr</div><div class="line">cmd.Stdout = os.Stdout</div><div class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</div><div class="line">log4go.Error(<span class="string">"live %s execute %q"</span>, id, err)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/xialeistudio/go-rtmp-http-publisher" target="_blank" rel="external">https://github.com/xialeistudio/go-rtmp-http-publisher</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前笔者只知道ffmpeg命令行推流到RTMP服务器，是没有HTTP接口的，像iOS和Android这种Native应用应该有RTMP SDK封装推流逻辑。但是像微信小程序这种录制音频只有原始&lt;strong&gt;ArrayBuffer&lt;/strong&gt;的数据，则必须在服务端提供
      
    
    </summary>
    
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
      <category term="rtmp" scheme="https//www.ddhigh.com/tags/rtmp/"/>
    
      <category term="直播" scheme="https//www.ddhigh.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>从零开始打造自己的直播服务器-Nginx安装</title>
    <link href="https//www.ddhigh.com/2017/11/23/nginx-rtmp-server.html"/>
    <id>https//www.ddhigh.com/2017/11/23/nginx-rtmp-server.html</id>
    <published>2017-11-23T06:54:08.000Z</published>
    <updated>2018-01-20T05:42:52.405Z</updated>
    
    <content type="html"><![CDATA[<p>直播行业火了很长一段时间了，抛开那些复杂的实现，本系列将从零开始实现一个直播服务器。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>RTMP拉流(基于HLS)</li><li>RTMP推流(基于ffmpeg)</li><li>RTMP推流(基于HTTP)</li></ol><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>本文使用docker的ubuntu镜像作为种子机，非常干净!</p><p>文章最后会放出我写的Dockerfile，不想折腾的朋友可以直接拿过去build一个自己的镜像</p><p>以下操作在物理机ubuntu也可以进行。</p><ol><li><p>更新软件仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get update</div></pre></td></tr></table></figure></li><li><p>安装必要软件    </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install git gcc make wget libpcre3 libpcre3-dev openssl libssl-dev -y -q</div></pre></td></tr></table></figure></li><li><p>下载并解压nginx源码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</div><div class="line">tar xf nginx-1.12.2.tar.gz</div></pre></td></tr></table></figure></li><li><p>下载nginx-rtmp-module源码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/arut/nginx-rtmp-module.git</div></pre></td></tr></table></figure></li><li><p>开始编译安装(其他参数不是必须的，故本文略去，只添加以下参数对于一个RTMP服务器已足够)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.12.2</div><div class="line">./configure --add-module=../nginx-rtmp-module --with-http_flv_module --with-http_mp4_module</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></li><li><p>修改配置文件 <strong>/usr/local/nginx/nginx.conf</strong></p> <figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">worker_processes  auto;</div><div class="line">daemon off;</div><div class="line">error_log  logs/error.log;</div><div class="line">pid        logs/nginx.pid;</div><div class="line"></div><div class="line"><span class="keyword">events</span> &#123;</div><div class="line">    multi_accept on;</div><div class="line">    worker_connections  <span class="number">65535</span>;</div><div class="line">    <span class="literal">use</span> epoll;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">http</span> &#123;</div><div class="line">    <span class="literal">include</span>       mime.types;</div><div class="line"></div><div class="line">    log_format  <span class="keyword">main</span>  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line"></div><div class="line">    access_log  logs/access.log  <span class="keyword">main</span>;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    <span class="comment">#tcp_nopush     on;</span></div><div class="line"></div><div class="line">    <span class="comment">#keepalive_timeout  0;</span></div><div class="line">    keepalive_timeout  <span class="number">30</span>;</div><div class="line"></div><div class="line">    gzip  on;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       <span class="number">80</span>;</div><div class="line">        server_name  localhost;</div><div class="line">      </div><div class="line">        location /stat &#123;</div><div class="line">          rtmp_stat all;</div><div class="line">          rtmp_stat_stylesheet stat.xsl;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">location</span> /stat.<span class="keyword">xsl</span> &#123;</div><div class="line">           <span class="literal">root</span> /usr/local/src/nginx-rtmp-module;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">location</span> /<span class="keyword">control</span> &#123;</div><div class="line">          rtmp_control all;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">location</span> /<span class="keyword">hls</span> &#123;</div><div class="line">          types &#123;</div><div class="line">            application/vnd.apple.mpegurl m3u8;</div><div class="line">            video/mp2t ts;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">root</span> <span class="keyword">html</span>;</div><div class="line">          expires -1;</div><div class="line">        &#125;</div><div class="line">        location ~\.<span class="keyword">flv</span> &#123;</div><div class="line">          flv;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">location</span> ~\.<span class="keyword">mp4</span> &#123;</div><div class="line">          mp4;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">rtmp</span> &#123;</div><div class="line">  server &#123;</div><div class="line">    listen <span class="number">1935</span>;</div><div class="line">    chunk_size <span class="number">4096</span>;</div><div class="line">    application hls &#123;</div><div class="line">      allow publish <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>;</div><div class="line">      live on;</div><div class="line">      hls on;</div><div class="line">      hls_path /usr/local/nginx/html/hls;</div><div class="line">      hls_fragment <span class="number">5</span>s;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> nginx在docker运行需要关闭daemon选项.<br> <strong>rtmp-&gt;server-&gt;application</strong>为具体的直播应用,<strong>hls</strong>是我的直播应用名称，可以根据实际情况修改。</p></li><li>启动服务器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></li></ol><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install ffmpeg</div></pre></td></tr></table></figure><h2 id="推流测试"><a href="#推流测试" class="headerlink" title="推流测试"></a>推流测试</h2><h3 id="推流地址"><a href="#推流地址" class="headerlink" title="推流地址"></a>推流地址</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rtmp:<span class="regexp">//</span>localhost:<span class="number">1935</span><span class="regexp">/hls/</span>demo</div></pre></td></tr></table></figure><p><strong>hls</strong>为上面配置的<strong>application</strong>名称，<strong>demo</strong>是直播名称，客户端使用<strong><a href="http://localhost/hls/demo.m3u8" target="_blank" rel="external">http://localhost/hls/demo.m3u8</a></strong>进行播放</p><h3 id="视频推流"><a href="#视频推流" class="headerlink" title="视频推流"></a>视频推流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -i a.mp4 -vcodec copy -f flv rtmp://localhost:1935/hls/demo</div></pre></td></tr></table></figure><p>web中播放<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://localhost/hls/demo.m3u8"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="音频推流"><a href="#音频推流" class="headerlink" title="音频推流"></a>音频推流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -i a.mp3 -acodec aac -f flv rtmp://localhost:1935/hls/demo</div></pre></td></tr></table></figure><p>web中播放<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://localhost/hls/demo.m3u8"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="推流与播放地址说明"><a href="#推流与播放地址说明" class="headerlink" title="推流与播放地址说明"></a>推流与播放地址说明</h3><ol><li>假设nginx配置<strong>http端口</strong>为<strong>80</strong>,<strong>http目录为hls</strong>,<strong>rtmp端口</strong>为<strong>1935</strong>,<strong>application</strong>名称为<strong>hls</strong>,需要播放的直播名称为<strong>demo</strong></li><li>推流地址<strong>rtmp://localhost:1935/hls/demo</strong></li><li>播放地址<strong><a href="http://localhost/hls/demo.m3u8" target="_blank" rel="external">http://localhost/hls/demo.m3u8</a></strong></li></ol><h3 id="重要说明"><a href="#重要说明" class="headerlink" title="重要说明"></a>重要说明</h3><p>如果没有直播推流，nginx是不会产生m3u8文件的，这点需要注意!</p><h3 id="Docker镜像地址"><a href="#Docker镜像地址" class="headerlink" title="Docker镜像地址"></a>Docker镜像地址</h3><p><a href="https://github.com/xialeistudio/docker-nginx-rtmp" target="_blank" rel="external">https://github.com/xialeistudio/docker-nginx-rtmp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直播行业火了很长一段时间了，抛开那些复杂的实现，本系列将从零开始实现一个直播服务器。&lt;/p&gt;
&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;RTMP拉流(基于HLS)&lt;
      
    
    </summary>
    
    
      <category term="nginx" scheme="https//www.ddhigh.com/tags/nginx/"/>
    
      <category term="rtmp" scheme="https//www.ddhigh.com/tags/rtmp/"/>
    
      <category term="直播" scheme="https//www.ddhigh.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>log4go尝鲜</title>
    <link href="https//www.ddhigh.com/2017/11/21/log4go-get-started.html"/>
    <id>https//www.ddhigh.com/2017/11/21/log4go-get-started.html</id>
    <published>2017-11-21T09:06:16.000Z</published>
    <updated>2018-01-20T05:42:52.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>日志系统对于软件是必不可少的，可以帮助我们记录关键信息，后期处理问题的时候会很方便。业界有很多出名的日志库，log4日志库相信每个人都不陌生，像log4j之于Java，log4php之于PHP等等。其实golang也有很多的log4实现，本文要使用的是<strong>alecthomas</strong>实现的版本。</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/alecthomas/log4go" target="_blank" rel="external">https://github.com/alecthomas/log4go</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/alecthomas/log4go</div></pre></td></tr></table></figure><h1 id="使用代码配置"><a href="#使用代码配置" class="headerlink" title="使用代码配置"></a>使用代码配置</h1><ol><li>新建golang项目</li><li><p>在项目根目录下新建<em>main.go</em>文件，代码如下</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"github.com/alecthomas/log4go"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> log4go.Close()</div><div class="line">    log4go.AddFilter(<span class="string">"stdout"</span>, log4go.DEBUG, log4go.NewConsoleLogWriter()) <span class="comment">// DEBUG级别+打印到控制台</span></div><div class="line">    log4go.AddFilter(<span class="string">"file"</span>, log4go.INFO, log4go.NewFileLogWriter(<span class="string">"test.log"</span>, <span class="literal">true</span>)) <span class="comment">// INFO级别+输出到文件，并开启rotate</span></div><div class="line">    log4go.Debug(<span class="string">"这是DEBUG日志"</span>) <span class="comment">// 输出测试</span></div><div class="line">    log4go.Info(<span class="string">"这是INFO日志"</span>) <span class="comment">// 输出测试</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <em>如果程序是守护进程，此处不用调用log4go.Close，因为log4go使用协程异步写入日志，此处可以调用log4go.Close也可以Sleep来实现写入，下文会有Sleep测试</em></p></li><li><code>go run main.go</code></li><li><p>此时可以看到终端输出，还可以发现项目目录下生成了<em>test.log</em>文件</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[17:11:35 CST 2017/11/21]</span> <span class="selector-attr">[DEBG]</span> (<span class="selector-tag">main</span><span class="selector-class">.main</span><span class="selector-pseudo">:9)</span> 这是<span class="selector-tag">DEBUG</span>日志</div><div class="line"><span class="selector-attr">[17:11:35 CST 2017/11/21]</span> <span class="selector-attr">[INFO]</span> (<span class="selector-tag">main</span><span class="selector-class">.main</span><span class="selector-pseudo">:10)</span> 这是<span class="selector-tag">INFO</span>日志</div></pre></td></tr></table></figure></li><li><p>重新执行时可以发现<strong>test.log</strong>被rotate到了<strong>test.log.1</strong></p></li></ol><h1 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h1><p>log4go支持使用xml来作为配置文件</p><ol><li><p>在项目根目录新建<strong>log4go.xml</strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>stdout<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>console<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>file<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>file<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span>test.log<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rotate"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxlines"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daily"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">logging</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>添加了<strong>console</strong>和<strong>file</strong>两个filter，跟代码添加其实是一样的，不同的是xml的可配置性更高。具体配置参数需要查看log4go对应的go源文件</p></li><li><p>修改<strong>main.go</strong></p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"github.com/alecthomas/log4go"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    log4go.LoadConfiguration(<span class="string">"log4go.xml"</span>)</div><div class="line">    log4go.Debug(<span class="string">"这是DEBUG日志"</span>)</div><div class="line">    log4go.Info(<span class="string">"这是INFO日志"</span>)</div><div class="line">    time.Sleep(time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行程序，终端依旧正确输出，同时也会生成<em>test.log</em></p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>log4go良好的设计带来了简洁又强大的使用体验，更多的使用细节以及更多的logger类型等待读者去发掘与实现，本文只做一个简单的介绍，即便如此也应该能够应付大部分场景了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;日志系统对于软件是必不可少的，可以帮助我们记录关键信息，后期处理问题的时候会很方便。业界有很多出名的日志库，log4日志库相信每个人都不陌生
      
    
    </summary>
    
    
      <category term="log" scheme="https//www.ddhigh.com/tags/log/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang实现TLV编码</title>
    <link href="https//www.ddhigh.com/2017/11/17/go-tlv.html"/>
    <id>https//www.ddhigh.com/2017/11/17/go-tlv.html</id>
    <published>2017-11-17T09:05:04.000Z</published>
    <updated>2018-01-20T05:42:52.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TLV编码基础"><a href="#TLV编码基础" class="headerlink" title="TLV编码基础"></a>TLV编码基础</h2><a href="/2017/11/17/node-tlv.html" title="Tlv编码在NodeJs中的应用">Tlv编码在NodeJs中的应用</a><h2 id="golang实现"><a href="#golang实现" class="headerlink" title="golang实现"></a>golang实现</h2><p>主要使用bytes和binary包中的相关函数</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(tag <span class="keyword">int32</span>, data <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</div><div class="line"><span class="comment">// 写入TAG</span></div><div class="line"><span class="keyword">if</span> err := binary.Write(buf, binary.BigEndian, tag); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">dataBuf := []<span class="keyword">byte</span>(data)</div><div class="line"><span class="comment">// 写入length</span></div><div class="line"><span class="keyword">if</span> err := binary.Write(buf, binary.BigEndian, <span class="keyword">int32</span>(<span class="built_in">len</span>(dataBuf))); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 写入数据</span></div><div class="line"><span class="keyword">if</span> err := binary.Write(buf, binary.BigEndian, dataBuf); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> buf.Bytes(), <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decode</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int32</span>, <span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">buf := bytes.NewBuffer(b)</div><div class="line"><span class="keyword">var</span> tag, length <span class="keyword">int32</span></div><div class="line"><span class="comment">// 读取tag</span></div><div class="line"><span class="keyword">if</span> err := binary.Read(buf, binary.BigEndian, &amp;tag); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 读取length</span></div><div class="line"><span class="keyword">if</span> err := binary.Read(buf, binary.BigEndian, &amp;length); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 读取数据</span></div><div class="line">dataBuf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, length)</div><div class="line"><span class="keyword">if</span> err := binary.Read(buf, binary.BigEndian, &amp;dataBuf); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> tag, <span class="keyword">string</span>(dataBuf), <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于TLV编码容易上手加上golang完善的API，实现TLV编码也不算太曲折。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TLV编码基础&quot;&gt;&lt;a href=&quot;#TLV编码基础&quot; class=&quot;headerlink&quot; title=&quot;TLV编码基础&quot;&gt;&lt;/a&gt;TLV编码基础&lt;/h2&gt;&lt;a href=&quot;/2017/11/17/node-tlv.html&quot; title=&quot;Tlv编码在Node
      
    
    </summary>
    
    
      <category term="tlv" scheme="https//www.ddhigh.com/tags/tlv/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Tlv编码在NodeJs中的应用</title>
    <link href="https//www.ddhigh.com/2017/11/17/node-tlv.html"/>
    <id>https//www.ddhigh.com/2017/11/17/node-tlv.html</id>
    <published>2017-11-17T07:36:27.000Z</published>
    <updated>2018-01-20T05:42:52.404Z</updated>
    
    <content type="html"><![CDATA[<p>最近在接入腾讯云的天御业务安全系统时接触到了TLV编码协议，好在TLV协议理解起来比较简单。故简要介绍一下该编码。</p><h2 id="TLV编码是什么？"><a href="#TLV编码是什么？" class="headerlink" title="TLV编码是什么？"></a>TLV编码是什么？</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TLV是一种编码格式，编码如下：</div><div class="line">[1-4字节] TYPE</div><div class="line">[5-8字节] Value的Length</div><div class="line">[9字节+] Value数据</div></pre></td></tr></table></figure><p>本文只探讨无嵌套数据的情况。NodeJs操作二进制数据主要依赖于<strong>Buffer</strong></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ol><li><p>编码Ascii数据，由于ascii编码的数据，一个字节就是一个字符，所以比较简单</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">TYPE:</span> <span class="number">1</span></div><div class="line"><span class="symbol">Value:</span> test</div></pre></td></tr></table></figure></li><li><p>根据编码规则，可以得出以下数据组装格式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span><span class="number">-4</span>字节] <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span></div><div class="line">[<span class="number">5</span><span class="number">-8</span>字节] <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span></div><div class="line">[<span class="number">9</span><span class="number">-12</span>字节] <span class="number">74</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> </div><div class="line"><span class="comment">// 74 对应字符*t*ascii编码*116*的16进制形式，其他以此类推</span></div></pre></td></tr></table></figure></li><li><p>javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// buf总长度为4字节TYPE+4字节VALUE长度+test的字节数为12</span></div><div class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">12</span>);</div><div class="line"><span class="comment">// 写入TYPE</span></div><div class="line">buf.writeIntBE(<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line"><span class="comment">// 写入LENGTH</span></div><div class="line">buf.writeIntBE(<span class="string">'test'</span>.length, <span class="number">4</span>, <span class="number">4</span>);</div><div class="line"><span class="comment">// 写入test</span></div><div class="line">buf.write(<span class="string">'test'</span>, <span class="number">8</span>, <span class="string">'test'</span>.length);</div><div class="line"><span class="comment">// 此时buf就是编码结果，由于是二进制的，如果走TCP协议的话已经可以了，但是腾讯云要求base64编码。所以最终结果为</span></div><div class="line">buf.toString(<span class="string">'base64'</span>);</div></pre></td></tr></table></figure></li><li><p>使用NodeJs交互式环境测试</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">➜  ~ node</div><div class="line">&gt; const buf = Buffer.alloc(<span class="number">12</span>);</div><div class="line">undefined</div><div class="line">&gt; buf</div><div class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</div><div class="line">&gt; buf.writeIntBE(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>)</div><div class="line"><span class="number">4</span></div><div class="line">&gt; buf.writeIntBE(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>)</div><div class="line"><span class="number">8</span></div><div class="line">&gt; buf.write('test',<span class="number">8</span>,<span class="number">4</span>)</div><div class="line"><span class="number">4</span></div><div class="line">&gt; buf</div><div class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">74</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span>&gt;</div><div class="line">&gt; buf.toString()</div><div class="line">'\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004test'</div><div class="line">&gt; buf.toString('base64')</div><div class="line">'AAAAAQAAAAR0ZXN0'</div><div class="line">&gt;</div></pre></td></tr></table></figure></li></ol><h2 id="非Ascii编码问题"><a href="#非Ascii编码问题" class="headerlink" title="非Ascii编码问题"></a>非Ascii编码问题</h2><p>如果发送的数据是Ascii编码表之外的数据，就会用到多字节编码，此时以上方法会有问题。<br>得意与Buffer完善的API，<em>Buffer.from</em>方法可以接收一个字符串和一个编码得到一个Buffer数组。</p><p>上例可以改为使用<em>Buffer.from</em>的版本:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> valueBuf = Buffer.from(value, <span class="string">'utf8'</span>);</div><div class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">8</span> + valueBuf.length);</div><div class="line">buf.writeIntBE(type, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">buf.writeIntBE(valueBuf.length, <span class="number">4</span>, <span class="number">4</span>);</div><div class="line">buf.write(value, <span class="number">8</span>, valueBuf.length);</div><div class="line">buf.toString(<span class="string">'base64'</span>);</div></pre></td></tr></table></figure><p>由于value使用的utf8编码，所以utf8编码表中的数据该方法都可以成功编码，经过腾讯云接口调用测试也是OK的。</p><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>说到编码就会有解码。解码是编码的逆运算，根据一样的规则还原数据而已。</p><ol><li><p>javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设str为base64编码之后Tlv数据</span></div><div class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> Buffer(str, <span class="string">'base64'</span>); <span class="comment">// 还原为Buffer</span></div><div class="line"><span class="comment">// 读取TYPE</span></div><div class="line"><span class="keyword">const</span> type = buf.readIntBE(<span class="number">0</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">// 读取VALUE长度</span></div><div class="line"><span class="keyword">const</span> length = buf.readIntBE(<span class="number">4</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">// 读取VALUE</span></div><div class="line"><span class="keyword">const</span> valueBuf = Buffer.alloc(length);</div><div class="line"><span class="comment">// 写入VALUE</span></div><div class="line">buf.copy(valueBuf, <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span> + length);</div><div class="line"><span class="comment">// 得到原始数据</span></div><div class="line">valueBuf.toString(<span class="string">'utf8'</span>);</div></pre></td></tr></table></figure></li><li><p>使用NodeJs交互式环境测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">➜  ~ node</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const str = <span class="string">'AAAAAQAAAAR0ZXN0'</span>;</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const buf = new Buffer(str, <span class="string">'base64'</span>);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const <span class="built_in">type</span> = buf.readIntBE(0,4);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const length = buf.readIntBE(4,4);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> const value = Buffer.alloc(length);</span></div><div class="line">undefined</div><div class="line"><span class="meta">&gt;</span><span class="bash"> valueOf</span></div><div class="line">[Function: valueOf]</div><div class="line"><span class="meta">&gt;</span><span class="bash"> value</span></div><div class="line">&lt;Buffer 00 00 00 00&gt;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> buf.co</span></div><div class="line">buf.constructor  </div><div class="line"></div><div class="line">buf.copyWithin   </div><div class="line"></div><div class="line">buf.compare      buf.copy         </div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> buf.copy(value,0,8,8+length);</span></div><div class="line">4</div><div class="line"><span class="meta">&gt;</span><span class="bash"> value.to</span></div><div class="line">value.toLocaleString  value.toString        </div><div class="line"></div><div class="line">value.toJSON          </div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> value.toString()</span></div><div class="line">'test'</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></li></ol><h2 id="腾讯云天御业务安全系统"><a href="#腾讯云天御业务安全系统" class="headerlink" title="腾讯云天御业务安全系统"></a>腾讯云天御业务安全系统</h2><p>socket.io中如果需要接入该系统进行垃圾发言的过滤时，可以使用我开发的SDK<br><a href="https://www.npmjs.com/package/tencent-cloud-defend" target="_blank" rel="external">tencent-cloud-defend</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在接入腾讯云的天御业务安全系统时接触到了TLV编码协议，好在TLV协议理解起来比较简单。故简要介绍一下该编码。&lt;/p&gt;
&lt;h2 id=&quot;TLV编码是什么？&quot;&gt;&lt;a href=&quot;#TLV编码是什么？&quot; class=&quot;headerlink&quot; title=&quot;TLV编码是什么？
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https//www.ddhigh.com/tags/nodejs/"/>
    
      <category term="tlv" scheme="https//www.ddhigh.com/tags/tlv/"/>
    
  </entry>
  
  <entry>
    <title>使用docker-composer部署nodejs应用</title>
    <link href="https//www.ddhigh.com/2017/11/01/docker-composer-nodejs.html"/>
    <id>https//www.ddhigh.com/2017/11/01/docker-composer-nodejs.html</id>
    <published>2017-11-01T08:28:23.000Z</published>
    <updated>2018-01-20T05:42:52.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建Dockerfile"><a href="#新建Dockerfile" class="headerlink" title="新建Dockerfile"></a>新建Dockerfile</h2><p>在应用目录下新建<strong>Dockerfile</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> node:<span class="number">8</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"><span class="bash">ADD . /usr/src/app</span></div><div class="line"><span class="bash">RUN npm install --registry=https://registry.npm.taobao.org</span></div><div class="line"><span class="bash">USER node</span></div><div class="line"><span class="bash">EXPOSE 8080</span></div></pre></td></tr></table></figure></p><p>8080 端口请根据实际情况调整。建议大于1024，否则使用<strong>node</strong>用户启动应用时可能权限不足</p><h2 id="新建docker-compose-yml"><a href="#新建docker-compose-yml" class="headerlink" title="新建docker-compose.yml"></a>新建docker-compose.yml</h2><p>在应用目录下新建<strong>docker-compose.yml</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"2"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  jsconsole:</span></div><div class="line"><span class="attr">    build:</span> <span class="string">.</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">.:/usr/src/app</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/usr/src/app/node_modules</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"127.0.0.1:8081:8080"</span></div><div class="line"><span class="attr">    command:</span> <span class="string">"npm start"</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">always</span></div></pre></td></tr></table></figure></p><p><strong>127.0.0.1:8081</strong>是<strong>宿主机IP和端口</strong>，我前端采用了<strong>nginx</strong>做反向代理。如果是直接提供公网服务的话把<strong>127.0.0.1</strong>去掉</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>在应用根目录下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose build</div></pre></td></tr></table></figure></p><h2 id="构建并运行"><a href="#构建并运行" class="headerlink" title="构建并运行"></a>构建并运行</h2><p>在应用根目录下执行<strong>-d</strong>是后台执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up -d</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新建Dockerfile&quot;&gt;&lt;a href=&quot;#新建Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;新建Dockerfile&quot;&gt;&lt;/a&gt;新建Dockerfile&lt;/h2&gt;&lt;p&gt;在应用目录下新建&lt;strong&gt;Dockerfile&lt;/st
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https//www.ddhigh.com/tags/nodejs/"/>
    
      <category term="docker" scheme="https//www.ddhigh.com/tags/docker/"/>
    
      <category term="docker-composer" scheme="https//www.ddhigh.com/tags/docker-composer/"/>
    
  </entry>
  
</feed>
