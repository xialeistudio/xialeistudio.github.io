<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2018-10-17T14:00:48.341Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一起学context（一）——上下文值传递</title>
    <link href="https//www.ddhigh.com/2018/10/17/golang-context-with-value.html"/>
    <id>https//www.ddhigh.com/2018/10/17/golang-context-with-value.html</id>
    <published>2018-10-17T13:50:20.000Z</published>
    <updated>2018-10-17T14:00:48.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列开篇"><a href="#系列开篇" class="headerlink" title="系列开篇"></a>系列开篇</h1><p>本文开始将针对context的用法进行系统化讨论，在这里你将能够在工作中合理使用context解决一些比较棘手的问题。</p><p>context处理超时处理之外还可以用来保存数据，当你需要在多个上下文传递时传递数据，那么本文提到的知识可以排上用场。</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>示例代码为一个简单的http服务，流程是登录之后会跳转首页，首页通过guard中间件进行鉴权。当然，示例代码未做其他诸如连接数据库之类的处理，这不是本文的重点。<br>守卫函数读取cookie之后将cookie值写入context并向下传递，在整个请求中可以说是“透明”的。当访问到需要保护的接口时检测到没有提供cookie，则直接终端请求，否则通过r.WithContext将username的值存入cookie，避免的业务接口直接读取cookie的弊端。因为如果后期更改鉴权算法的话，业务代码可以不用更改，直接更改中间件即可。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"context"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">mux := http.NewServeMux()</div><div class="line">mux.HandleFunc(<span class="string">"/"</span>, guard(home))</div><div class="line">mux.HandleFunc(<span class="string">"/login"</span>, login)</div><div class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, mux))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 登录</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> r.URL.Query().Get(<span class="string">"username"</span>) != <span class="string">"root"</span> &#123;</div><div class="line">http.Error(w, http.StatusText(<span class="number">401</span>), <span class="number">401</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">cookie := &amp;http.Cookie&#123;Name: <span class="string">"username"</span>, Value: <span class="string">"root"</span>, Expires: time.Now().Add(time.Hour)&#125;</div><div class="line">http.SetCookie(w, cookie)</div><div class="line">http.Redirect(w, r, <span class="string">"/"</span>, <span class="number">302</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">home</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">username := r.Context().Value(<span class="string">"username"</span>)</div><div class="line">fmt.Fprintf(w, <span class="string">"welcome login: %s"</span>, username.(<span class="keyword">string</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 守卫</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">guard</span><span class="params">(handleFunc http.HandlerFunc)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"><span class="comment">// check username</span></div><div class="line">log.Printf(<span class="string">"%s - %s\n"</span>, r.Method, r.RequestURI)</div><div class="line">cookie, err := r.Cookie(<span class="string">"username"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || cookie == <span class="literal">nil</span> &#123; <span class="comment">// 如果username为空直接拦截</span></div><div class="line">http.Error(w, http.StatusText(<span class="number">401</span>), <span class="number">401</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">handleFunc(w, r.WithContext(context.WithValue(r.Context(), <span class="string">"username"</span>, cookie.Value)))</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本文的代码就这么多，内容也很少，希望大家能好好用上这个利器。<br>关于context与协程超时控制将在下一篇文章中讲到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系列开篇&quot;&gt;&lt;a href=&quot;#系列开篇&quot; class=&quot;headerlink&quot; title=&quot;系列开篇&quot;&gt;&lt;/a&gt;系列开篇&lt;/h1&gt;&lt;p&gt;本文开始将针对context的用法进行系统化讨论，在这里你将能够在工作中合理使用context解决一些比较棘手的问题。&lt;/p
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="context" scheme="https//www.ddhigh.com/tags/context/"/>
    
  </entry>
  
  <entry>
    <title>io.Reader游标引发的血案</title>
    <link href="https//www.ddhigh.com/2018/10/17/go-io-reader-panic.html"/>
    <id>https//www.ddhigh.com/2018/10/17/go-io-reader-panic.html</id>
    <published>2018-10-17T13:32:03.000Z</published>
    <updated>2018-10-17T13:33:15.853Z</updated>
    
    <content type="html"><![CDATA[<p>#背景<br>线上运行了一个图片合成程序，默认的小程序二维码中奖是小程序LOGO，不满足需求，所以将微信小程序二维码和用户头像合成在一张图片。<br>由于微信图片有时候返回的Content-Type不对应（比如内容是PNG的，头确是image/jpeg）所以使用jpeg/png/gif的顺序进行图片数据解析，哪个成功就返回解析结果。</p><p>#问题<br>总是出现诸如<code>invalid JPEG format: missing SOI marker</code></p><p>#解决过程<br>我去查看jpeg.Decode的源码，如下：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *decoder)</span> <span class="title">decode</span><span class="params">(r io.Reader, configOnly <span class="keyword">bool</span>)</span> <span class="params">(image.Image, error)</span></span> &#123;</div><div class="line">d.r = r</div><div class="line"></div><div class="line"><span class="comment">// Check for the Start Of Image marker.</span></div><div class="line"><span class="keyword">if</span> err := d.readFull(d.tmp[:<span class="number">2</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> d.tmp[<span class="number">0</span>] != <span class="number">0xff</span> || d.tmp[<span class="number">1</span>] != soiMarker &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, FormatError(<span class="string">"missing SOI marker"</span>)</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>soiMarker常量<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">soiMarker</span>  = <span class="number">0</span>xd8 // Start Of Image.</div></pre></td></tr></table></figure></p><p>可以看到判断了第1个字节如果不是<code>0xff</code>或者第2个字节不是<code>0xd8</code>就报错。打印图片的bytes前几个字节如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]byte&#123;<span class="number">0xff</span>, <span class="number">0xd8</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x0</span>, <span class="number">0x10</span>&#125;</div></pre></td></tr></table></figure></p><p>可以看到第1个字节和第2个字节满足要求，按理说不会出现这个问题，无奈只能求助于Google,搜索了<br><code>invalid JPEG format: missing SOI marker</code>关键字出现一篇<a href="https://stackoverflow.com/questions/46022262/covert-base64-string-to-jpg" target="_blank" rel="external">Covert base64 string to JPG</a>引起了我的注意。<br>打开看到答案</p><blockquote><p>You need to create a new reader for each decoder:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pngI, errPng := png.Decode(bytes.NewReader(unbased))</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">jpgI, errJpg := jpeg.Decode(bytes.NewReader(unbased))</div></pre></td></tr></table></figure></p></blockquote><p>原来需要重新创建读取器，重新创建读取器后问题解决。</p><p>#后续<br>抱着打破砂锅问到底的心态，查看了一下<code>bytes.Reader</code>的源码，发现游标读取完后并未重置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Read implements the io.Reader interface.</span></div><div class="line">func (r *Reader) Read(<span class="selector-tag">b</span> []byte) (n int, err error) &#123;</div><div class="line"><span class="keyword">if</span> r<span class="selector-class">.i</span> &gt;= int64(len(r.s)) &#123;</div><div class="line">return <span class="number">0</span>, io.EOF</div><div class="line">&#125;</div><div class="line">r<span class="selector-class">.prevRune</span> = -<span class="number">1</span></div><div class="line">n = copy(<span class="selector-tag">b</span>, r<span class="selector-class">.s</span>[r<span class="selector-class">.i</span>:])</div><div class="line">r<span class="selector-class">.i</span> += int64(n)</div><div class="line">return</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Reader定义<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</div><div class="line">s        []<span class="keyword">byte</span></div><div class="line">i        <span class="keyword">int64</span> <span class="comment">// current reading index</span></div><div class="line">prevRune <span class="keyword">int</span>   <span class="comment">// index of previous rune; or &lt; 0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到<code>r.i</code>就是游标了。问题圆满解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#背景&lt;br&gt;线上运行了一个图片合成程序，默认的小程序二维码中奖是小程序LOGO，不满足需求，所以将微信小程序二维码和用户头像合成在一张图片。&lt;br&gt;由于微信图片有时候返回的Content-Type不对应（比如内容是PNG的，头确是image/jpeg）所以使用jpeg/p
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="io.Reader" scheme="https//www.ddhigh.com/tags/io-Reader/"/>
    
  </entry>
  
  <entry>
    <title>golang40行代码实现通用协程池</title>
    <link href="https//www.ddhigh.com/2018/08/08/golang-general-goroutine-pool.html"/>
    <id>https//www.ddhigh.com/2018/08/08/golang-general-goroutine-pool.html</id>
    <published>2018-08-08T03:07:25.000Z</published>
    <updated>2018-10-17T13:30:52.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h2><p><a href="https://github.com/xialeistudio/goroutine-pool" target="_blank" rel="external">goroutine-pool</a></p><h2 id="golang-的协程管理"><a href="#golang-的协程管理" class="headerlink" title="golang 的协程管理"></a>golang 的协程管理</h2><p>golang 协程机制很方便的解决了并发编程的问题，但是协程并不是没有开销的，所以也需要适当限制一下数量。</p><h3 id="不使用协程池的代码-示例代码使用-chan-实现，代码略啰嗦"><a href="#不使用协程池的代码-示例代码使用-chan-实现，代码略啰嗦" class="headerlink" title="不使用协程池的代码(示例代码使用 chan 实现，代码略啰嗦)"></a>不使用协程池的代码(示例代码使用 chan 实现，代码略啰嗦)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *converter)</span> <span class="title">upload</span><span class="params">(bytes [][]<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">4</span>)</div><div class="line">wg := &amp;sync.WaitGroup&#123;&#125;</div><div class="line">wg.Add(<span class="built_in">len</span>(bytes))</div><div class="line">ret := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(bytes))</div><div class="line"></div><div class="line"><span class="comment">// 上传</span></div><div class="line"><span class="keyword">for</span> index, item := <span class="keyword">range</span> bytes &#123;</div><div class="line">ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, imageData []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">wg.Done()</div><div class="line">&lt;-ch</div><div class="line">&#125;()</div><div class="line"></div><div class="line">link, err := qiniu.UploadBinary(imageData, fmt.Sprintf(<span class="string">"%d.png"</span>, time.Now().UnixNano()))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log.Println(<span class="string">"上传图片失败"</span>, err.Error())</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">ret[index] = link</div><div class="line">&#125;(index, item)</div><div class="line">&#125;</div><div class="line"></div><div class="line">wg.Wait()</div><div class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要实现的需求有两个:</p><ol><li>限制最大协程数，本例为 4</li><li>等待所有协程完成，本例为<code>bytes切片长度</code></li></ol><h3 id="使用协程池的代码"><a href="#使用协程池的代码" class="headerlink" title="使用协程池的代码"></a>使用协程池的代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *converter)</span> <span class="title">upload</span><span class="params">(bytes [][]<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">ret := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(bytes))</div><div class="line">pool := goroutine_pool.New(<span class="number">4</span>, <span class="built_in">len</span>(bytes))</div><div class="line"></div><div class="line"><span class="keyword">for</span> index, item := <span class="keyword">range</span> bytes &#123;</div><div class="line">index := index</div><div class="line">item := item</div><div class="line">pool.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">link, err := qiniu.UploadBinary(item, fmt.Sprintf(<span class="string">"%d.png"</span>, time.Now().UnixNano()))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log.Println(<span class="string">"上传图片失败"</span>, err.Error())</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ret[index] = link</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line">pool.Wait()</div><div class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到最大的区别是只需要关注业务逻辑即可，并发控制和等待都已经被协程池接管</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>希望本文能减轻你控制协程的负担</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码仓库&quot;&gt;&lt;a href=&quot;#代码仓库&quot; class=&quot;headerlink&quot; title=&quot;代码仓库&quot;&gt;&lt;/a&gt;代码仓库&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/goroutine-pool&quot; targe
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="goroutine" scheme="https//www.ddhigh.com/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>golang不到30行代码实现依赖注入</title>
    <link href="https//www.ddhigh.com/2018/07/24/golang-dependency-inject-container.html"/>
    <id>https//www.ddhigh.com/2018/07/24/golang-dependency-inject-container.html</id>
    <published>2018-07-24T10:32:51.000Z</published>
    <updated>2018-10-17T13:30:52.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/di-demo" target="_blank" rel="external">go-di-demo</a></p><h2 id="本项目依赖"><a href="#本项目依赖" class="headerlink" title="本项目依赖"></a>本项目依赖</h2><p>使用标准库实现，无额外依赖</p><h2 id="依赖注入的优势"><a href="#依赖注入的优势" class="headerlink" title="依赖注入的优势"></a>依赖注入的优势</h2><p>用java的人对于spring框架一定不会陌生，spring核心就是一个IoC(控制反转/依赖注入)容器，带来一个很大的优势是解耦。一般只依赖容器，而不依赖具体的类，当你的类有修改时，最多需要改动一下容器相关代码，业务代码并不受影响。</p><h2 id="golang的依赖注入原理"><a href="#golang的依赖注入原理" class="headerlink" title="golang的依赖注入原理"></a>golang的依赖注入原理</h2><p>总的来说和java的差不多，步骤如下：(golang不支持动态创建对象，所以需要先手动创建对象然后注入，java可以直接动态创建对象)</p><ol><li>通过反射读取对象的依赖(golang是通过tag实现)</li><li>在容器中查找有无该对象实例</li><li>如果有该对象实例或者创建对象的工厂方法，则注入对象或使用工厂创建对象并注入</li><li>如果无该对象实例，则报错</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一个典型的容器实现如下，依赖类型参考了spring的singleton/prototype，分别对象单例对象和实例对象:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> di</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"reflect"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line"><span class="string">"errors"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">ErrFactoryNotFound = errors.New(<span class="string">"factory not found"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> factory = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span></div><div class="line"><span class="function">// 容器</span></div><div class="line"><span class="function"><span class="title">type</span> <span class="title">Container</span> <span class="title">struct</span></span> &#123;</div><div class="line">sync.Mutex</div><div class="line">singletons <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">factories  <span class="keyword">map</span>[<span class="keyword">string</span>]factory</div><div class="line">&#125;</div><div class="line"><span class="comment">// 容器实例化</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewContainer</span><span class="params">()</span> *<span class="title">Container</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;Container&#123;</div><div class="line">singletons: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;),</div><div class="line">factories:  <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]factory),</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 注册单例对象</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">SetSingleton</span><span class="params">(name <span class="keyword">string</span>, singleton <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">p.Lock()</div><div class="line">p.singletons[name] = singleton</div><div class="line">p.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取单例对象</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">GetSingleton</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line"><span class="keyword">return</span> p.singletons[name]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取实例对象</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">GetPrototype</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line">factory, ok := p.factories[name]</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrFactoryNotFound</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> factory()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置实例对象工厂</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">SetPrototype</span><span class="params">(name <span class="keyword">string</span>, factory factory)</span></span> &#123;</div><div class="line">p.Lock()</div><div class="line">p.factories[name] = factory</div><div class="line">p.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 注入依赖</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">Ensure</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</div><div class="line">elemType := reflect.TypeOf(instance).Elem()</div><div class="line">ele := reflect.ValueOf(instance).Elem()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; elemType.NumField(); i++ &#123; <span class="comment">// 遍历字段</span></div><div class="line">fieldType := elemType.Field(i)</div><div class="line">tag := fieldType.Tag.Get(<span class="string">"di"</span>) <span class="comment">// 获取tag</span></div><div class="line">diName := p.injectName(tag)</div><div class="line"><span class="keyword">if</span> diName == <span class="string">""</span> &#123;</div><div class="line"><span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> (</div><div class="line">diInstance <span class="keyword">interface</span>&#123;&#125;</div><div class="line">err        error</div><div class="line">)</div><div class="line"><span class="keyword">if</span> p.isSingleton(tag) &#123;</div><div class="line">diInstance = p.GetSingleton(diName)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> p.isPrototype(tag) &#123;</div><div class="line">diInstance, err = p.GetPrototype(diName)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> diInstance == <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> errors.New(diName + <span class="string">" dependency not found"</span>)</div><div class="line">&#125;</div><div class="line">ele.Field(i).Set(reflect.ValueOf(diInstance))</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取需要注入的依赖名称</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">injectName</span><span class="params">(tag <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">tags := strings.Split(tag, <span class="string">","</span>)</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tags) == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> tags[<span class="number">0</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 检测是否单例依赖</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">isSingleton</span><span class="params">(tag <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">tags := strings.Split(tag, <span class="string">","</span>)</div><div class="line"><span class="keyword">for</span> _, name := <span class="keyword">range</span> tags &#123;</div><div class="line"><span class="keyword">if</span> name == <span class="string">"prototype"</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 检测是否实例依赖</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">isPrototype</span><span class="params">(tag <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">tags := strings.Split(tag, <span class="string">","</span>)</div><div class="line"><span class="keyword">for</span> _, name := <span class="keyword">range</span> tags &#123;</div><div class="line"><span class="keyword">if</span> name == <span class="string">"prototype"</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 打印容器内部实例</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">lines := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(p.singletons)+<span class="built_in">len</span>(p.factories)+<span class="number">2</span>)</div><div class="line">lines = <span class="built_in">append</span>(lines, <span class="string">"singletons:"</span>)</div><div class="line"><span class="keyword">for</span> name, item := <span class="keyword">range</span> p.singletons &#123;</div><div class="line">line := fmt.Sprintf(<span class="string">"  %s: %x %s"</span>, name, &amp;item, reflect.TypeOf(item).String())</div><div class="line">lines = <span class="built_in">append</span>(lines, line)</div><div class="line">&#125;</div><div class="line">lines = <span class="built_in">append</span>(lines, <span class="string">"factories:"</span>)</div><div class="line"><span class="keyword">for</span> name, item := <span class="keyword">range</span> p.factories &#123;</div><div class="line">line := fmt.Sprintf(<span class="string">"  %s: %x %s"</span>, name, &amp;item, reflect.TypeOf(item).String())</div><div class="line">lines = <span class="built_in">append</span>(lines, line)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> strings.Join(lines, <span class="string">"\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>最重要的是<code>Ensure</code>方法，该方法扫描实例的所有export字段，并读取di标签，如果有该标签则启动注入。</li><li>判断di标签的类型来确定注入singleton或者prototype对象</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>单例对象在整个容器中只有一个实例，所以不管在何处注入，获取到的指针一定是一样的。</li><li>实例对象是通过同一个工厂方法创建的，所以每个实例的指针不可以相同。</li></ol><p>下面是测试入口代码，完整代码在github仓库，有兴趣的可以翻阅：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"di"</span></div><div class="line"><span class="string">"database/sql"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line"><span class="string">"demo"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">container := di.NewContainer()</div><div class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:root@tcp(localhost)/sampledb"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"error: %s\n"</span>, err.Error())</div><div class="line">os.Exit(<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line">container.SetSingleton(<span class="string">"db"</span>, db)</div><div class="line">container.SetPrototype(<span class="string">"b"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line"><span class="keyword">return</span> demo.NewB(), <span class="literal">nil</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">a := demo.NewA()</div><div class="line"><span class="keyword">if</span> err := container.Ensure(a); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 打印指针，确保单例和实例的指针地址</span></div><div class="line">fmt.Printf(<span class="string">"db: %p\ndb1: %p\nb: %p\nb1: %p\n"</span>, a.Db, a.Db1, &amp;a.B, &amp;a.B1)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行之后打印出来的结果为：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">db:</span> <span class="number">0xc4200b6140</span></div><div class="line"><span class="symbol">db1:</span> <span class="number">0xc4200b6140</span></div><div class="line"><span class="symbol">b:</span> <span class="number">0xc4200a0330</span></div><div class="line"><span class="symbol">b1:</span> <span class="number">0xc4200a0338</span></div></pre></td></tr></table></figure><p>可以看到两个db实例的指针一样，说明是同一个实例，而两个b的指针不同，说明不是一个实例。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>通过依赖注入可以很好的管理多个对象之间的实例化以及依赖关系，配合配置文件在应用初始化阶段将需要注入的实例注册到容器中，在应用的任何地方只需要在实例化时注入容器即可。没有额外依赖。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/di-demo&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="di" scheme="https//www.ddhigh.com/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>不到20行代码实现golang路由调度</title>
    <link href="https//www.ddhigh.com/2018/07/23/golang-route-dispatcher.html"/>
    <id>https//www.ddhigh.com/2018/07/23/golang-route-dispatcher.html</id>
    <published>2018-07-23T13:44:05.000Z</published>
    <updated>2018-10-17T13:30:52.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/go-dispatcher" target="_blank" rel="external">go-dispatcher</a></p><h2 id="本项目依赖"><a href="#本项目依赖" class="headerlink" title="本项目依赖"></a>本项目依赖</h2><p>使用标准库实现，无额外依赖</p><h2 id="为什么需要路由调度层"><a href="#为什么需要路由调度层" class="headerlink" title="为什么需要路由调度层"></a>为什么需要路由调度层</h2><blockquote><p>golang http标准库只能精确匹配请求的URI，然后执行handler。现在一般web项目都至少有个Controller层，以struct实现，根据不同的请求路径派发到不同的方法中去。</p></blockquote><h2 id="路由调度器定义"><a href="#路由调度器定义" class="headerlink" title="路由调度器定义"></a>路由调度器定义</h2><p>由于golang暂时还不可以动态创建对象(比如java的<code>Class.forName(&quot;xxx&quot;).newInstance()</code>,xxx是任意存在的class名称)。所以需要手动注册一下controller关系。</p><ol><li>定义<code>routes</code>保存controller指针</li><li>解析请求过来的URL查询参数，暂定<code>a</code>为<code>action名称</code>,<code>c</code>为<code>controller名称</code>，本文偷了下懒，没对PATH_INFO做处理，也没有对actionName的首字母自动大写，这个不影响本文要传达的核心内容，有兴趣的读者可以自行实现。</li><li>根据URL中的<code>controllerName</code>找到对应的controller</li><li>使用反射将当前请求对象的<code>*http.Request</code>和<code>http.ResponseWriter</code>设置到该Controller</li><li>使用反射以及actionName对应该controller的方法</li></ol><blockquote><p>由于golang的继承不是一般的OOP，所以也没有父子类这种说法，路由注册那里只能使用interface{}</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="app-app-go"><a href="#app-app-go" class="headerlink" title="app/app.go"></a>app/app.go</h3><p>该文件为核心调度文件</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> app</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"reflect"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> application <span class="keyword">struct</span> &#123;</div><div class="line">routes <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">application</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;application&#123;</div><div class="line">routes: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;),</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">controllerName := r.URL.Query().Get(<span class="string">"c"</span>)</div><div class="line">actionName := r.URL.Query().Get(<span class="string">"a"</span>)</div><div class="line"><span class="keyword">if</span> controllerName == <span class="string">""</span> || actionName == <span class="string">""</span> &#123;</div><div class="line">http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">route, ok := p.routes[controllerName]</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line">http.Error(w, <span class="string">"Controller Not Found"</span>, http.StatusNotFound)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">ele := reflect.ValueOf(route).Elem()</div><div class="line">ele.FieldByName(<span class="string">"Request"</span>).Set(reflect.ValueOf(r))</div><div class="line">ele.FieldByName(<span class="string">"Response"</span>).Set(reflect.ValueOf(w))</div><div class="line">ele.MethodByName(actionName).Call([]reflect.Value&#123;&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">printRoutes</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> route, controller := <span class="keyword">range</span> p.routes &#123;</div><div class="line">ele := reflect.ValueOf(controller).Type().String()</div><div class="line">fmt.Printf(<span class="string">"%s %s\n"</span>, route, ele)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">Get</span><span class="params">(route <span class="keyword">string</span>, controller <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">p.routes[route] = controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">Run</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">p.printRoutes()</div><div class="line">fmt.Printf(<span class="string">"listen on %s\n"</span>, addr)</div><div class="line"><span class="keyword">return</span> http.ListenAndServe(addr, p)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="app-controller-go"><a href="#app-controller-go" class="headerlink" title="app/controller.go"></a>app/controller.go</h3><p>控制器”基类”</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> app</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Controller <span class="keyword">struct</span> &#123;</div><div class="line">Response http.ResponseWriter</div><div class="line">Request  *http.Request</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="controller-site-go"><a href="#controller-site-go" class="headerlink" title="controller/site.go"></a>controller/site.go</h3><p>具体业务逻辑类</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controllers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"app"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> SiteController <span class="keyword">struct</span> &#123;</div><div class="line">app.Controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p SiteController)</span> <span class="title">Index</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Fprint(p.Response, p.Request.RequestURI)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h3><p>入口文件</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line"><span class="string">"app"</span></div><div class="line"><span class="string">"controllers"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">application := app.New()</div><div class="line">application.Get(<span class="string">"site"</span>, &amp;controllers.SiteController&#123;&#125;)</div><div class="line">application.Run(<span class="string">":8080"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ol><li>启动进程</li><li>访问<code>http://localhost:8080?c=site&amp;a=Index</code>会输出<code>/?c=site&amp;a=Index</code></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>希望这个小小的项目能启发到各位读者，早日开发出适合自己的Web框架!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/go-dispatcher&quot; target
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="http" scheme="https//www.ddhigh.com/tags/http/"/>
    
      <category term="router" scheme="https//www.ddhigh.com/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>redis常用实践</title>
    <link href="https//www.ddhigh.com/2018/06/14/redis-common-practice.html"/>
    <id>https//www.ddhigh.com/2018/06/14/redis-common-practice.html</id>
    <published>2018-06-14T13:49:52.000Z</published>
    <updated>2018-10-17T13:30:52.383Z</updated>
    
    <content type="html"><![CDATA[<p>Redis相信大家都不陌生，而如果只是用来取代memcached做缓存的话，实在是大材小用了。一起来看看生产环境下的常用用法。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$canLock = $redis-&gt;set(<span class="string">'k'</span>, <span class="number">1</span>, <span class="string">'NX'</span>, <span class="string">'EX'</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">if</span>($canLock) &#123;</div><div class="line">    <span class="comment">// 获得锁成功</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>锁定键名为k的数据两秒钟，两秒后该方法才能重新获取锁</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;del(<span class="string">'k'</span>);</div></pre></td></tr></table></figure><p>删除键名为k的数据，其他方法可以重新获取锁</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>这是redis特有的数据结构，memcached没有。使用场景很多，列举一种常用的，假设有一个需求</p><blockquote><p>加密后的用户id和真实用户id的映射关系保存</p></blockquote><p>这种情况我们可以使用hash，而不是使用多个kv缓存, 需要清空所有的时候比较难处理。代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$realId = $redis-&gt;hget(<span class="string">'user_id_map'</span>, <span class="string">'userId1'</span>);</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($realId)) &#123;</div><div class="line">    <span class="keyword">return</span> $realId;</div><div class="line">&#125;</div><div class="line">$realId = getFromDatabase(<span class="string">'userId1'</span>); <span class="comment">// 从数据库读取</span></div><div class="line">$redis-&gt;hset(<span class="string">'user_id_map'</span>,<span class="string">'userId1'</span>,$realId);</div></pre></td></tr></table></figure><p>如果需要清空，则直接删除hash即可。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set就是数据项不重复的集合，使用场景也很多。例子要说的是使用set存储一个聊天室中的所有用户id:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;sadd(<span class="string">'chat_room'</span>, <span class="string">'user1'</span>, <span class="string">'user2'</span>); <span class="comment">// 添加成员到集合</span></div><div class="line">$redis-&gt;srem(<span class="string">'chat_room'</span>, <span class="string">'user1'</span>); <span class="comment">// 删除指定成员</span></div><div class="line">$redis-&gt;smembers(<span class="string">'chat_room'</span>); <span class="comment">// 获取集合所有元素</span></div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p> 大致就是这样了，基于这些简单数据结构可以根据业务需求构造更合理的数据结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Redis相信大家都不陌生，而如果只是用来取代memcached做缓存的话，实在是大材小用了。一起来看看生产环境下的常用用法。&lt;/p&gt;
&lt;h2 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="redis" scheme="https//www.ddhigh.com/tags/redis/"/>
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PermissionScope Swift4 兼容问题</title>
    <link href="https//www.ddhigh.com/2018/06/14/PermissionScope-With-Swift-4.html"/>
    <id>https//www.ddhigh.com/2018/06/14/PermissionScope-With-Swift-4.html</id>
    <published>2018-06-14T13:41:15.000Z</published>
    <updated>2018-10-17T13:30:52.383Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nickoneill/PermissionScope" target="_blank" rel="external">PermissionScope</a>是iOS非常好用的权限处理库，界面效果也非常精美。不幸的是作者已经停止维护。</p><blockquote><p>PermissionScope is no longer supported. Please use an alternative if you need updates for newer iOS 10 and 11 APIs!</p></blockquote><h2 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h2><p>因为作者是基于Swift3开发的，而4.0的<code>@selector</code>语法有一点调整，所以是不能通过编译的，处理办法是根据Xcode的提示一个个修正。</p><p>可是事情真的这么简单吗？Xcode处理过后虽然编译通过了，但是会触发运行时错误。错误内容大致是<code>调用了不存在的方法</code>。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由于我们根据Xcode的提示给相关代码加了<code>@objc</code>，但是有些方法是没有加的，而这些方法类似下面的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestCamera</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于没有<code>@objc</code>修饰，<code>@selector</code>指令找不到方法，所以就报错了。解决方案如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestCamera</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/nickoneill/PermissionScope&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PermissionScope&lt;/a&gt;是iOS非常好用的权限处理库，界面效果也非常精美。不幸的是作者
      
    
    </summary>
    
      <category term="ios" scheme="https//www.ddhigh.com/categories/ios/"/>
    
    
      <category term="ios" scheme="https//www.ddhigh.com/tags/ios/"/>
    
      <category term="permission" scheme="https//www.ddhigh.com/tags/permission/"/>
    
      <category term="swift" scheme="https//www.ddhigh.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>使用yii2依赖注入规范业务开发</title>
    <link href="https//www.ddhigh.com/2018/04/24/yii2-dependency-inject.html"/>
    <id>https//www.ddhigh.com/2018/04/24/yii2-dependency-inject.html</id>
    <published>2018-04-24T14:18:04.000Z</published>
    <updated>2018-04-24T15:20:29.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文代码"><a href="#本文代码" class="headerlink" title="本文代码"></a>本文代码</h2><p><a href="https://github.com/xialeistudio/yii2-di-demo" target="_blank" rel="external">https://github.com/xialeistudio/yii2-di-demo</a></p><h2 id="什么是依赖注入-DI"><a href="#什么是依赖注入-DI" class="headerlink" title="什么是依赖注入(DI)?"></a>什么是依赖注入(DI)?</h2><p>对象由框架来创建而不是程序员通过 <strong>new</strong> 创建。跟IoC差不多一个意思。</p><h2 id="为什么要有依赖注入"><a href="#为什么要有依赖注入" class="headerlink" title="为什么要有依赖注入?"></a>为什么要有依赖注入?</h2><ol><li>解耦。调用方不再通过 <strong>new</strong> 运算符实例化被调用对象，而通过框架(IoC容器)创建之后注入进来。解除了调用者与被调用者之间的依赖。</li><li>有利于面向接口编程。个人认为OOP程序设计最重要的就是面向接口(面向抽象)编程。因为有了第1步的关系，调用者只需要依赖接口类型而不用依赖实现类型，提高了程序的扩展性。</li></ol><h2 id="Yii2的依赖注入"><a href="#Yii2的依赖注入" class="headerlink" title="Yii2的依赖注入"></a>Yii2的依赖注入</h2><p>Yii2通过 <a href="http://www.yiichina.com/doc/api/2.0/yii-di-container" target="_blank" rel="external">yii\di\Container</a> 提供DI容器特性。目前支持一下4种方式注入：</p><ol><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">构造方法注入</a></li><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">方法注入</a></li><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">Setter和属性注入</a></li><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">PHP回调注入</a></li></ol><h2 id="注册依赖关系"><a href="#注册依赖关系" class="headerlink" title="注册依赖关系"></a>注册依赖关系</h2><ol><li>通过容器的 <strong>set</strong> 方法注入</li><li>通过配置文件注入(推荐)</li></ol><h2 id="依赖注入实战"><a href="#依赖注入实战" class="headerlink" title="依赖注入实战"></a>依赖注入实战</h2><ol><li><p>打开终端，执行以下命令初始化项目：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic basic</div></pre></td></tr></table></figure></li><li><p>声明接口业务类 <strong>app\services\UserService</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by PhpStorm.</span></div><div class="line"><span class="comment">* User: xialei</span></div><div class="line"><span class="comment">* Date: 2018/4/24</span></div><div class="line"><span class="comment">* Time: 下午10:55</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">services</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 用户业务类</span></div><div class="line"><span class="comment">* Interface UserService</span></div><div class="line"><span class="comment">* <span class="doctag">@package</span> app\services</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 根据ID查询用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> integer $id</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array|null</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看所有用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>接口实现文件 <strong>app\services\impl\UserServiceImpl</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by PhpStorm.</span></div><div class="line"><span class="comment">* User: xialei</span></div><div class="line"><span class="comment">* Date: 2018/4/24</span></div><div class="line"><span class="comment">* Time: 下午10:56</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">impl</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">UserService</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $users = [</div><div class="line">        [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'xialei'</span>],</div><div class="line">        [<span class="string">'id'</span> =&gt; <span class="number">2</span>, <span class="string">'name'</span> =&gt; <span class="string">'zhangsan'</span>],</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 根据ID查询用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> integer $id</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;users <span class="keyword">as</span> $user) &#123;</div><div class="line">            <span class="keyword">if</span> ($user[<span class="string">'id'</span>] == $id) &#123;</div><div class="line">                <span class="keyword">return</span> $user;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看所有用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>注册依赖关系 <strong>config/web.php</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">UserService</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">impl</span>\<span class="title">UserServiceImpl</span>;</div><div class="line"></div><div class="line">$params = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/params.php'</span>;</div><div class="line">$db = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/db.php'</span>;</div><div class="line"></div><div class="line">$config = [</div><div class="line">    <span class="string">'id'</span> =&gt; <span class="string">'basic'</span>,</div><div class="line">    <span class="string">'basePath'</span> =&gt; dirname(<span class="keyword">__DIR__</span>),</div><div class="line">    <span class="string">'bootstrap'</span> =&gt; [<span class="string">'log'</span>],</div><div class="line">    <span class="string">'aliases'</span> =&gt; [</div><div class="line">        <span class="string">'@bower'</span> =&gt; <span class="string">'@vendor/bower-asset'</span>,</div><div class="line">        <span class="string">'@npm'</span> =&gt; <span class="string">'@vendor/npm-asset'</span>,</div><div class="line">    ],</div><div class="line">    <span class="string">'container'</span> =&gt; [</div><div class="line">        <span class="string">'definitions'</span> =&gt; [</div><div class="line">            UserService::class =&gt; UserServiceImpl::class</div><div class="line">        ]</div><div class="line">    ],</div><div class="line">    <span class="string">'components'</span> =&gt; [</div><div class="line">        <span class="string">'request'</span> =&gt; [</div><div class="line">            <span class="comment">// !!! insert a secret key in the following (if it is empty) - this is required by cookie validation</span></div><div class="line">            <span class="string">'cookieValidationKey'</span> =&gt; <span class="string">'0xGrStOOZE2oXxNNiu-o2eYovJ_Ia1Dk'</span>,</div><div class="line">        ],</div><div class="line">        <span class="string">'response'</span> =&gt; [</div><div class="line">            <span class="string">'format'</span> =&gt; <span class="string">'json'</span></div><div class="line">        ],</div><div class="line">        <span class="string">'errorHandler'</span> =&gt; [</div><div class="line">            <span class="string">'errorAction'</span> =&gt; <span class="string">'site/error'</span>,</div><div class="line">        ],</div><div class="line">        <span class="string">'urlManager'</span> =&gt; [</div><div class="line">            <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">            <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</div><div class="line">            <span class="string">'rules'</span> =&gt; [</div><div class="line">            ],</div><div class="line">        ],</div><div class="line">    ],</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</div><div class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></div><div class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'debug'</span>;</div><div class="line">    $config[<span class="string">'modules'</span>][<span class="string">'debug'</span>] = [</div><div class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\debug\Module'</span>,</div><div class="line">        <span class="comment">// uncomment the following to add your IP if you are not connecting from localhost.</span></div><div class="line">        <span class="comment">//'allowedIPs' =&gt; ['127.0.0.1', '::1'],</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</div><div class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</div><div class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</div><div class="line">        <span class="comment">// uncomment the following to add your IP if you are not connecting from localhost.</span></div><div class="line">        <span class="comment">//'allowedIPs' =&gt; ['127.0.0.1', '::1'],</span></div><div class="line">    ];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> $config;</div></pre></td></tr></table></figure></li><li><p>添加控制器 <strong>app\controllers\UserController</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by PhpStorm.</span></div><div class="line"><span class="comment">* User: xialei</span></div><div class="line"><span class="comment">* Date: 2018/4/24</span></div><div class="line"><span class="comment">* Time: 下午10:57</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">UserService</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Module</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">NotFoundHttpException</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $userService;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $id, Module $module, UserService $userService, array $config = [])</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;userService = $userService;</div><div class="line">        <span class="keyword">parent</span>::__construct($id, $module, $config);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> $id</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array|null</span></div><div class="line"><span class="comment">    * <span class="doctag">@throws</span> NotFoundHttpException</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionShow</span><span class="params">($id)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $user = <span class="keyword">$this</span>-&gt;userService-&gt;show($id);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($user)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException(<span class="string">'用户不存在'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看所有用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionAll</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userService-&gt;all();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行测试服务器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./yii serve/index</div></pre></td></tr></table></figure></li><li><p>访问用户列表接口 <a href="http://localhost:8080/user/all" target="_blank" rel="external">http://localhost:8080/user/all</a></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"xialei"</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></li><li><p>访问查看用户接口 <a href="http://localhost:8080/user/show?id=1" target="_blank" rel="external">http://localhost:8080/user/show?id=1</a></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"xialei"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如你所见，Yii2自带的IoC容器使用起来还是挺方便的，观测了Yii <strong>配置优于编码</strong> 的思想，Yii的组件基本上都可以在配置文件中进行配置而不需要手动编码。</p><p>灵活使用DI可以使我们从依赖关系中解脱出来，专注于业务逻辑。</p><p>当然，业务逻辑的组织也是一个很大的研究课题，有兴趣的可以去看看 <strong>DDD(领域驱动设计)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本文代码&quot;&gt;&lt;a href=&quot;#本文代码&quot; class=&quot;headerlink&quot; title=&quot;本文代码&quot;&gt;&lt;/a&gt;本文代码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/yii2-di-demo&quot; target=
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="yii2" scheme="https//www.ddhigh.com/tags/yii2/"/>
    
      <category term="di" scheme="https//www.ddhigh.com/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>golang使用travis进行持续集成</title>
    <link href="https//www.ddhigh.com/2018/04/08/golang-travis-ci.html"/>
    <id>https//www.ddhigh.com/2018/04/08/golang-travis-ci.html</id>
    <published>2018-04-08T09:40:37.000Z</published>
    <updated>2018-04-24T14:17:12.679Z</updated>
    
    <content type="html"><![CDATA[<p>虽然golang的工程工具已经非常完善了，比如测试、代码格式化等等。但是如果开发library开源到github的话，这些东西是可以使用自动化工具完成的，那就是 <a href="https://www.travis-ci.org/" target="_blank" rel="external">travis</a></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>开发好需要集成的library以及测试用例</li><li><p>在项目根目录新建<code>.travis.yml</code>文件</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">go</span></div><div class="line"><span class="attr">go:</span></div><div class="line"><span class="bullet">-</span> <span class="number">1.</span><span class="string">x</span></div><div class="line"><span class="bullet">-</span> <span class="string">'1.8'</span></div><div class="line"><span class="bullet">-</span> <span class="string">'1.9'</span></div><div class="line"><span class="bullet">-</span> <span class="number">1.10</span><span class="string">.x</span></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">-</span> <span class="string">go</span> <span class="string">test</span> <span class="bullet">-v</span> <span class="string">./...</span></div></pre></td></tr></table></figure></li><li><p>提交到github</p></li><li>打开<a href="https://www.travis-ci.org/" target="_blank" rel="external">https://www.travis-ci.org/</a>并使用github账号登录</li><li>登录之后点击左边 <strong>“My Repositories”</strong> 旁边的 <strong>“+”</strong> 号添加项目（点击项目前面的滑块即可）</li><li>更改项目文件，push一次到github，此时travis会自动运行测试脚本</li></ol><h2 id="敏感数据加密"><a href="#敏感数据加密" class="headerlink" title="敏感数据加密"></a>敏感数据加密</h2><p>如果你的测试用例需要使用到敏感数据（如一些密钥等等），那需要用travis将你的敏感数据加密(以Mac为例)</p><ol><li>终端执行<code>sudo gem install travis</code></li><li>在项目根目录打开终端执行<code>travis encrypt AMAP_KEY=&quot;xxxx&quot; --add</code> <strong>AMAP_KEY</strong>是环境变量名称，程序读取环境变量可以得到真实的key，<strong>xxxx</strong>是敏感数据</li><li><p>执行完毕后，<strong>.travis.yml</strong> 会发生更改, 会添加如下内容(secure可能不一致)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">env:</span></div><div class="line"><span class="attr">global:</span></div><div class="line"><span class="attr">    secure:</span> <span class="string">kr5JHNTYsh/jezvk88qP91arb+UD/op/5CyOFY7uNYpJ6ZSsJY5fDKyZHjf0VSFmaYqJFMPl6uCASE9baiepeGvBFcy8aI9CNsbLzj2uBNjqqYPmvYGnBjpzp8yknVJKRTitF/kkWtzZcWImHnpvNGHuzXxp/EIBeJtNwjcCRoP/qfGhlZKbLsYFvlWkmRYb0dr8RM5mlmGXPZi8q7m+soVRO8Zjr4QQccybgmhonxlcUrHr6ro+yjjQefoJXRufqoRX0sGyecGYucC4nUpWl5hkDPkQE+Mekhz+rF657SwNsn8nXOFnnUuwsPXE26ak5xF1roEcFk2CpwGZuT7smJZPtw1inXFdIaW+4qllbyxMJkylvFZa5IcvLT3+/eKaQc8Fg6PoxJH0PF3RdtoQVB31cQiPWNm1SecQ6wC64WA/5qN4T5OoRfpt60BFDAITdS62dQGu5LSepcXMWXhxCdQPeDm5Qce6wjJXURubJMpBm0mPWwCNZhJyRw1G5TTyO25NckXQRlObrjltvwAd+7OEUcsYXqhdPtUTIVy6w3XOwT2eC/hP0Yi7qqUMMlJTHUW7Lb9zsEc4UB5BVwgeZ5Y9bVbknJfpt3ygcXAJeeDYxwV9g16KoS7HMFPzwrqlHbiBytIahqarBd4enwqR5RYQPEyetiIDLaJA4SyQ0cE=</span></div></pre></td></tr></table></figure></li><li><p>上传到github</p></li></ol><h2 id="接收测试结果通知"><a href="#接收测试结果通知" class="headerlink" title="接收测试结果通知"></a>接收测试结果通知</h2><p>如果你需要获取travis执行结果通知的话，可以添加邮箱配置，travis执行完毕后会通知到该邮箱。</p><ol><li>打开 <strong>.travis.yml</strong></li><li><p>添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">notifications:</span></div><div class="line"><span class="attr">  email:</span></div><div class="line"><span class="attr">    recipients:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">邮箱地址</span></div><div class="line"><span class="attr">    on_success:</span> <span class="string">change</span></div><div class="line"><span class="attr">    on_failure:</span> <span class="string">always</span></div></pre></td></tr></table></figure></li><li><p>提交到github</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然golang的工程工具已经非常完善了，比如测试、代码格式化等等。但是如果开发library开源到github的话，这些东西是可以使用自动化工具完成的，那就是 &lt;a href=&quot;https://www.travis-ci.org/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="travis" scheme="https//www.ddhigh.com/tags/travis/"/>
    
      <category term="ci" scheme="https//www.ddhigh.com/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>golang for遍历channel时需要注意的问题</title>
    <link href="https//www.ddhigh.com/2018/04/05/golang-for-over-channels.html"/>
    <id>https//www.ddhigh.com/2018/04/05/golang-for-over-channels.html</id>
    <published>2018-04-05T10:45:31.000Z</published>
    <updated>2018-04-24T14:17:12.679Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个基于RabbitMQ的应用，由于官方的qos没有golang的版本，所以出了一点问题。问题代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_, ch, err := component.NewRabbitMQ()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err := ch.Qos(<span class="number">10</span>, <span class="number">0</span>, <span class="literal">true</span>); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">msgs, err := ch.Consume(<span class="string">"push"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">nil</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> m := <span class="keyword">range</span> msgs &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(d *amqp.Delivery)</span></span> &#123;</div><div class="line">           <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; d.Ack(<span class="literal">false</span>) &#125;</div><div class="line">           <span class="comment">// 处理消息</span></div><div class="line">       &#125;(&amp;m)</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>发现消费到10条消息，进程就退出了，但是exit code为0，表示系统是正常退出，由于做了日志记录可以确定消费了10条，所以初步确定是qos相关问题。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol><li>首先是把<code>d</code>的tag打印出来，发现全部是一样的，可以确定是重复的一条消息</li><li>一开始想到可能是经典的<code>go协程执行在for循环结束以后</code>导致的，但是看我的代码不属于这种情况，有使用<code>&amp;m</code>保证每一条消息都是不同循环传入的。所以判断可能是for循环的传递问题。</li><li>确定方向之后开始写了一个测试项目用来验证我的想法是否正确。</li></ol><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">ch &lt;- i</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(ch)</div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</div><div class="line">fmt.Println(&amp;v)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div><div class="line">0xc420086008</div></pre></td></tr></table></figure><p><strong>到这里才焕然大悟，for循环中，如果循环变量不是指针，那么每次的变量是同一个，不过值变了。</strong>，所以上例中的RabbitMQ go协程消费消息那里，需要直接传递值而不是指针，经过测试之后发现，问题确实解决了。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>测试代码那里，如果不close掉channel是会发生死锁的，原因是 <strong>当for循环读完channel的10个值之后会继续尝试读取下一个，而由于channel为空又没关闭，会一直阻塞形成死锁</strong></p><h2 id="TOOD"><a href="#TOOD" class="headerlink" title="TOOD"></a>TOOD</h2><p>研究RabbitMQ Consumer部分的源码来看看消费channel被关闭的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个基于RabbitMQ的应用，由于官方的qos没有golang的版本，所以出了一点问题。问题代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>golang解决TCP粘包问题</title>
    <link href="https//www.ddhigh.com/2018/03/02/golang-tcp-stick-package.html"/>
    <id>https//www.ddhigh.com/2018/03/02/golang-tcp-stick-package.html</id>
    <published>2018-03-02T09:50:31.000Z</published>
    <updated>2018-04-24T14:17:12.679Z</updated>
    
    <content type="html"><![CDATA[<p>什么是TCP粘包问题以及为什么会产生TCP粘包，本文不加讨论。本文使用golang的<code>bufio.Scanner</code>来实现自定义协议解包。</p><h2 id="协议数据包定义"><a href="#协议数据包定义" class="headerlink" title="协议数据包定义"></a>协议数据包定义</h2><p>本文模拟一个日志服务器，该服务器接收客户端传到的数据包并显示出来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">Version        [<span class="number">2</span>]<span class="keyword">byte</span> <span class="comment">// 协议版本，暂定V1</span></div><div class="line">Length         <span class="keyword">int16</span>   <span class="comment">// 数据部分长度</span></div><div class="line">Timestamp      <span class="keyword">int64</span>   <span class="comment">// 时间戳</span></div><div class="line">HostnameLength <span class="keyword">int16</span>   <span class="comment">// 主机名长度</span></div><div class="line">Hostname       []<span class="keyword">byte</span>  <span class="comment">// 主机名</span></div><div class="line">TagLength      <span class="keyword">int16</span>   <span class="comment">// 标签长度</span></div><div class="line">Tag            []<span class="keyword">byte</span>  <span class="comment">// 标签</span></div><div class="line">Msg            []<span class="keyword">byte</span>  <span class="comment">// 日志数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>协议定义部分没有什么好讲的，根据具体的业务逻辑定义即可。</p><h2 id="数据打包"><a href="#数据打包" class="headerlink" title="数据打包"></a>数据打包</h2><p>由于TCP协议是语言无关的协议，所以直接把协议数据包结构体发送到TCP连接中也是不可能的，只能发送字节流数据，所以需要自己实现数据编码。所幸golang提供了<code>binary</code>来帮助我们实现网络字节编码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Pack</span><span class="params">(writer io.Writer)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.TagLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Tag)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Pack方法的输出目标为<code>io.Writer</code>，有利于接口扩展，只要实现了该接口即可编码数据写入。<code>binary.BigEndian</code>是字节序，本文暂时不讨论，有需要的读者可以自行查找资料研究。</p><h2 id="数据解包"><a href="#数据解包" class="headerlink" title="数据解包"></a>数据解包</h2><p>解包需要将TCP数据包解析到结构体中，接下来会讲为什么需要添加几个<code>数据无关</code>的长度字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Unpack</span><span class="params">(reader io.Reader)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">p.Hostname = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.HostnameLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.TagLength)</div><div class="line">p.Tag = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Tag)</div><div class="line">p.Msg = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.Length<span class="number">-8</span><span class="number">-2</span>-p.HostnameLength<span class="number">-2</span>-p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于主机名、标签这种数据是不固定长度的，所以需要两个字节来标识数据长度，否则读取的时候只知道一个总的数据长度是无法区分主机名、标签名、日志数据的。</p><h2 id="数据包的粘包问题解决"><a href="#数据包的粘包问题解决" class="headerlink" title="数据包的粘包问题解决"></a>数据包的粘包问题解决</h2><p>上文只是解决了<code>编码/解码</code>问题，前提是收到的数据包没有产生粘包问题，解决粘包就是要正确分割字节流中的数据。一般有以下做法：</p><ol><li>定长分隔(每个数据包最大为该长度) 缺点是数据不足时会浪费传输资源</li><li>特定字符分隔(如\r\n) 缺点是如果正文中有\r\n就会导致问题</li><li>在数据包中添加长度字段(本文采用的)</li></ol><p>golang提供了<code>bufio.Scanner</code>来解决粘包问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scanner := bufio.NewScanner(reader) <span class="comment">// reader为实现了io.Reader接口的对象，如net.Conn</span></div><div class="line">scanner.Split(<span class="function"><span class="keyword">func</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> !atEOF &amp;&amp; data[<span class="number">0</span>] == <span class="string">'V'</span> &#123; <span class="comment">// 由于我们定义的数据包头最开始为两个字节的版本号，所以只有以V开头的数据包才处理</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">4</span> &#123; <span class="comment">// 如果收到的数据&gt;4个字节(2字节版本号+2字节数据包长度)</span></div><div class="line">length := <span class="keyword">int16</span>(<span class="number">0</span>)</div><div class="line">binary.Read(bytes.NewReader(data[<span class="number">2</span>:<span class="number">4</span>]), binary.BigEndian, &amp;length) <span class="comment">// 读取数据包第3-4字节(int16)=&gt;数据部分长度</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">int</span>(length)+<span class="number">4</span> &lt;= <span class="built_in">len</span>(data) &#123; <span class="comment">// 如果读取到的数据正文长度+2字节版本号+2字节数据长度不超过读到的数据(实际上就是成功完整的解析出了一个包)</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">int</span>(length) + <span class="number">4</span>, data[:<span class="keyword">int</span>(length)+<span class="number">4</span>], <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 打印接收到的数据包</span></div><div class="line"><span class="keyword">for</span> scanner.Scan() &#123;</div><div class="line">scannedPack := <span class="built_in">new</span>(Package)</div><div class="line">scannedPack.Unpack(bytes.NewReader(scanner.Bytes()))</div><div class="line">log.Println(scannedPack)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本文的核心就在于<code>scanner.Split</code>方法，该方法用来解析TCP数据包</p><h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"encoding/binary"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">Version        [<span class="number">2</span>]<span class="keyword">byte</span> <span class="comment">// 协议版本</span></div><div class="line">Length         <span class="keyword">int16</span>   <span class="comment">// 数据部分长度</span></div><div class="line">Timestamp      <span class="keyword">int64</span>   <span class="comment">// 时间戳</span></div><div class="line">HostnameLength <span class="keyword">int16</span>   <span class="comment">// 主机名长度</span></div><div class="line">Hostname       []<span class="keyword">byte</span>  <span class="comment">// 主机名</span></div><div class="line">TagLength      <span class="keyword">int16</span>   <span class="comment">// Tag长度</span></div><div class="line">Tag            []<span class="keyword">byte</span>  <span class="comment">// Tag</span></div><div class="line">Msg            []<span class="keyword">byte</span>  <span class="comment">// 数据部分长度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Pack</span><span class="params">(writer io.Writer)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.TagLength)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Tag)</div><div class="line">err = binary.Write(writer, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">Unpack</span><span class="params">(reader io.Reader)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> err error</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Version)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Length)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Timestamp)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.HostnameLength)</div><div class="line">p.Hostname = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.HostnameLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Hostname)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.TagLength)</div><div class="line">p.Tag = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Tag)</div><div class="line">p.Msg = <span class="built_in">make</span>([]<span class="keyword">byte</span>, p.Length<span class="number">-8</span><span class="number">-2</span>-p.HostnameLength<span class="number">-2</span>-p.TagLength)</div><div class="line">err = binary.Read(reader, binary.BigEndian, &amp;p.Msg)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Package)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"version:%s length:%d timestamp:%d hostname:%s tag:%s msg:%s"</span>,</div><div class="line">p.Version,</div><div class="line">p.Length,</div><div class="line">p.Timestamp,</div><div class="line">p.Hostname,</div><div class="line">p.Tag,</div><div class="line">p.Msg,</div><div class="line">)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">hostname, err := os.Hostname()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log.Fatal(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line">pack := &amp;Package&#123;</div><div class="line">Version:        [<span class="number">2</span>]<span class="keyword">byte</span>&#123;<span class="string">'V'</span>, <span class="string">'1'</span>&#125;,</div><div class="line">Timestamp:      time.Now().Unix(),</div><div class="line">HostnameLength: <span class="keyword">int16</span>(<span class="built_in">len</span>(hostname)),</div><div class="line">Hostname:       []<span class="keyword">byte</span>(hostname),</div><div class="line">TagLength:      <span class="number">4</span>,</div><div class="line">Tag:            []<span class="keyword">byte</span>(<span class="string">"demo"</span>),</div><div class="line">Msg:            []<span class="keyword">byte</span>((<span class="string">"现在时间是:"</span> + time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))),</div><div class="line">&#125;</div><div class="line">pack.Length = <span class="number">8</span> + <span class="number">2</span> + pack.HostnameLength + <span class="number">2</span> + pack.TagLength + <span class="keyword">int16</span>(<span class="built_in">len</span>(pack.Msg))</div><div class="line"></div><div class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</div><div class="line"><span class="comment">// 写入四次，模拟TCP粘包效果</span></div><div class="line">pack.Pack(buf)</div><div class="line">pack.Pack(buf)</div><div class="line">pack.Pack(buf)</div><div class="line">pack.Pack(buf)</div><div class="line"><span class="comment">// scanner</span></div><div class="line">scanner := bufio.NewScanner(buf)</div><div class="line">scanner.Split(<span class="function"><span class="keyword">func</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> !atEOF &amp;&amp; data[<span class="number">0</span>] == <span class="string">'V'</span> &#123;</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">4</span> &#123;</div><div class="line">length := <span class="keyword">int16</span>(<span class="number">0</span>)</div><div class="line">binary.Read(bytes.NewReader(data[<span class="number">2</span>:<span class="number">4</span>]), binary.BigEndian, &amp;length)</div><div class="line"><span class="keyword">if</span> <span class="keyword">int</span>(length)+<span class="number">4</span> &lt;= <span class="built_in">len</span>(data) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">int</span>(length) + <span class="number">4</span>, data[:<span class="keyword">int</span>(length)+<span class="number">4</span>], <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">for</span> scanner.Scan() &#123;</div><div class="line">scannedPack := <span class="built_in">new</span>(Package)</div><div class="line">scannedPack.Unpack(bytes.NewReader(scanner.Bytes()))</div><div class="line">log.Println(scannedPack)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</div><div class="line">log.Fatal(<span class="string">"无效数据包"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>golang作为一门强大的网络编程语言，实现自定义协议是非常重要的，实际上实现自定义协议也不是很难，以下几个步骤：</p><ol><li>数据包编码</li><li>数据包解码</li><li>处理TCP粘包问题</li><li>断线重连(可以使用心跳实现)(非必须)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是TCP粘包问题以及为什么会产生TCP粘包，本文不加讨论。本文使用golang的&lt;code&gt;bufio.Scanner&lt;/code&gt;来实现自定义协议解包。&lt;/p&gt;
&lt;h2 id=&quot;协议数据包定义&quot;&gt;&lt;a href=&quot;#协议数据包定义&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="tcp" scheme="https//www.ddhigh.com/tags/tcp/"/>
    
      <category term="protocol" scheme="https//www.ddhigh.com/tags/protocol/"/>
    
  </entry>
  
  <entry>
    <title>golang multipart上传文件到远端（如上传微信临时素材）</title>
    <link href="https//www.ddhigh.com/2018/03/01/golang-upload.html"/>
    <id>https//www.ddhigh.com/2018/03/01/golang-upload.html</id>
    <published>2018-03-01T07:51:02.000Z</published>
    <updated>2018-04-24T14:17:12.679Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发一个关注之后通过客服消息推送一张海报给用户的功能，海报图片是本地生成好的，需要上传到微信临时素材之后通过客服消息推送给用户。<br>上传文件需要<code>multipart/form-data</code>格式的表单，所以golang默认的http.POST方法是实现不了的。需要自行实现body参数逻辑。</p><h2 id="上传请求初始化"><a href="#上传请求初始化" class="headerlink" title="上传请求初始化"></a>上传请求初始化</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新建上传请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUploadRequest</span><span class="params">(link <span class="keyword">string</span>, params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, name, path <span class="keyword">string</span>)</span> <span class="params">(*http.Request, error)</span></span> &#123;</div><div class="line">fp, err := os.Open(path) <span class="comment">// 打开文件句柄</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> fp.Close()</div><div class="line">body := &amp;bytes.Buffer&#123;&#125; <span class="comment">// 初始化body参数</span></div><div class="line">writer := multipart.NewWriter(body) <span class="comment">// 实例化multipart</span></div><div class="line">part, err := writer.CreateFormFile(name, filepath.Base(path)) <span class="comment">// 创建multipart 文件字段</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">_, err = io.Copy(part, fp) <span class="comment">// 写入文件数据到multipart</span></div><div class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> params &#123;</div><div class="line">_ = writer.WriteField(key, val) <span class="comment">// 写入body中额外参数，比如七牛上传时需要提供token</span></div><div class="line">&#125;</div><div class="line">err = writer.Close()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">req, err := http.NewRequest(<span class="string">"POST"</span>, link, body) <span class="comment">// 新建请求</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"multipart/form-data"</span>) <span class="comment">// 设置请求头,!!!非常重要，否则远端无法识别请求</span></div><div class="line"><span class="keyword">return</span> req, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Task)</span> <span class="title">upload</span><span class="params">(appid <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">filename, err := m.download() <span class="comment">// 下载远端海报文件到本地路径</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取accessToken</span></div><div class="line">accessToken, err := m.passport.GetAccessToken(appid)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line">params := &amp;url.Values&#123;</div><div class="line"><span class="string">"access_token"</span>: []<span class="keyword">string</span>&#123;accessToken&#125;,</div><div class="line"><span class="string">"type"</span>:         []<span class="keyword">string</span>&#123;<span class="string">"image"</span>&#125;,</div><div class="line">&#125;</div><div class="line">req, err := util.NewUploadRequest(<span class="string">"https://api.weixin.qq.com/cgi-bin/media/upload?"</span>+params.Encode(), <span class="literal">nil</span>, <span class="string">"media"</span>, filename) <span class="comment">// 上传到微信</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line">resp, err := http.DefaultClient.Do(req)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> resp.Body.Close()</div><div class="line">ret := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line"><span class="keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;ret); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> mediaId, ok := ret[<span class="string">"media_id"</span>]; ok &#123;</div><div class="line"><span class="keyword">return</span> mediaId.(<span class="keyword">string</span>), <span class="literal">nil</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> errmsg, ok := ret[<span class="string">"errmsg"</span>]; ok &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(errmsg.(<span class="keyword">string</span>))</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"上传失败"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发一个关注之后通过客服消息推送一张海报给用户的功能，海报图片是本地生成好的，需要上传到微信临时素材之后通过客服消息推送给用户。&lt;br&gt;上传文件需要&lt;code&gt;multipart/form-data&lt;/code&gt;格式的表单，所以golang默认的http.POST方法
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="multipart" scheme="https//www.ddhigh.com/tags/multipart/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署golang应用时时区问题</title>
    <link href="https//www.ddhigh.com/2018/03/01/golang-docker-timezone.html"/>
    <id>https//www.ddhigh.com/2018/03/01/golang-docker-timezone.html</id>
    <published>2018-03-01T03:49:24.000Z</published>
    <updated>2018-04-24T14:17:12.678Z</updated>
    
    <content type="html"><![CDATA[<p>目前golang用的基础镜像是<code>busybox</code>，由于golang交叉编译之后只有一个二进制文件，可以直接部署到容器中运行，容器镜像大小几乎等于二进制文件大小。</p><h2 id="带来的问题"><a href="#带来的问题" class="headerlink" title="带来的问题"></a>带来的问题</h2><p>由于基础镜像太过精简，目前遇到的问题是将时间戳格式化为时间字符串时发现差了8个小时。</p><h2 id="尝试过的解决办法"><a href="#尝试过的解决办法" class="headerlink" title="尝试过的解决办法"></a>尝试过的解决办法</h2><p>刚开始使用了Location时区相关API，但是部署到容器中发现直接报错了，因为容器中缺少相关的系统调用函数。代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">loc, _ := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</div><div class="line">time.Now().In(loc).Format(<span class="string">"2006-01-02 15:04:05"</span>)</div></pre></td></tr></table></figure><p>目前应用会部署到docker容器中，故处理办法比较原始，直接在Time对象上添加8个小时来解决时差问题。代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time.Now().Add(time.Hour * <span class="number">8</span>).Format(<span class="string">"2006年01月02日 15:04"</span>),</div></pre></td></tr></table></figure><p>暂时解决了这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前golang用的基础镜像是&lt;code&gt;busybox&lt;/code&gt;，由于golang交叉编译之后只有一个二进制文件，可以直接部署到容器中运行，容器镜像大小几乎等于二进制文件大小。&lt;/p&gt;
&lt;h2 id=&quot;带来的问题&quot;&gt;&lt;a href=&quot;#带来的问题&quot; class=&quot;he
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="docker" scheme="https//www.ddhigh.com/tags/docker/"/>
    
      <category term="timezone" scheme="https//www.ddhigh.com/tags/timezone/"/>
    
  </entry>
  
  <entry>
    <title>golang JSON编码时保留HTML标签</title>
    <link href="https//www.ddhigh.com/2018/03/01/golang-json-no-escape-html.html"/>
    <id>https//www.ddhigh.com/2018/03/01/golang-json-no-escape-html.html</id>
    <published>2018-03-01T03:40:51.000Z</published>
    <updated>2018-04-24T14:17:12.679Z</updated>
    
    <content type="html"><![CDATA[<p>golang默认编码JSON时会将HTML标签中的尖括号编码为<code>\u003c</code>这种unicode字符。而最近在开发的微信客服消息推送就会出现以下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\u003ca href=&apos;https://www.example.com&apos;\u003e点击进入\u003c/a\u003e</div></pre></td></tr></table></figure><p>查看golang的json包发现json编码器有个方法<code>SetEscapeHTML</code>方法，接收一个bool值来设置是否保留HTML标签。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>json的Encoder只能编码到实现了<code>io.Writer</code>接口的对象中去，而本例中需要编码到一个<code>[]byte</code>切片中。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查找资料发现<code>bytes.Buffer</code>对象实现了<code>io.Writer</code>接口。所以最终代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BuildJson</span><span class="params">(data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">    buf := bytes.NewBufferString(<span class="string">""</span>)</div><div class="line">    encoder := json.NewEncoder(buf)</div><div class="line">encoder.SetEscapeHTML(<span class="literal">false</span>)</div><div class="line"><span class="keyword">if</span> err := encoder.Encode(&amp;data); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> buf.Bytes(), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>经过测试，输出接口符合要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang默认编码JSON时会将HTML标签中的尖括号编码为&lt;code&gt;\u003c&lt;/code&gt;这种unicode字符。而最近在开发的微信客服消息推送就会出现以下结果&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="json" scheme="https//www.ddhigh.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>golang使用CSV导出大量数据</title>
    <link href="https//www.ddhigh.com/2018/02/28/golang-export-csv.html"/>
    <id>https//www.ddhigh.com/2018/02/28/golang-export-csv.html</id>
    <published>2018-02-28T08:43:13.000Z</published>
    <updated>2018-04-24T14:17:12.678Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个导出功能，最初是使用<a href="https://github.com/tealeg/xlsx" target="_blank" rel="external">https://github.com/tealeg/xlsx</a>做的，但是发现导出有个30W行的excel时，这玩意内存彪到700M+，后来发现只是导出数据为表格，并没有其他东西，于是打算使用CSV导出。</p><h2 id="CSV格式简介"><a href="#CSV格式简介" class="headerlink" title="CSV格式简介"></a>CSV格式简介</h2><p>CSV本质上是个文本文件，该文件有以下要求：</p><ol><li>列之间用逗号分隔，行之间用换行分隔</li><li>单元格如果有逗号，引号之类的字符，该单元格需要使用双引号括起来</li><li>如果包含中文，需要使用GBK编码，否则会乱码</li></ol><h2 id="golang实现"><a href="#golang实现" class="headerlink" title="golang实现"></a>golang实现</h2><ol><li><p>UTF8转GBK函数(需要 <code>go get golang.org/x/text/</code>)</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">UTF82GBK</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line"> reader := transform.NewReader(strings.NewReader(src), simplifiedchinese.GBK.NewEncoder())</div><div class="line"> <span class="keyword">if</span> buf, err := ioutil.ReadAll(reader); err != <span class="literal">nil</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(buf), <span class="literal">nil</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>导出代码</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">filename := <span class="string">"test.csv"</span></div><div class="line">fp, err := os.Create(filename) <span class="comment">// 创建文件句柄</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> fp.Close()</div><div class="line">columns := []<span class="keyword">string</span>&#123;<span class="string">"姓名"</span>, <span class="string">"电话"</span>, <span class="string">"公司"</span>, <span class="string">"职位"</span>, <span class="string">"加入时间"</span>&#125;</div><div class="line"><span class="keyword">if</span> line, err := util.UTF82GBK(strings.Join(columns, <span class="string">","</span>)); err == <span class="literal">nil</span> &#123; <span class="comment">// 写入一行</span></div><div class="line">    fp.WriteString(line + <span class="string">"\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>其他语言也可以使用类似方法导出数据，只要满足CSV的几个条件即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个导出功能，最初是使用&lt;a href=&quot;https://github.com/tealeg/xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tealeg/xlsx&lt;/a&gt;做的，但是发现导出有个30W行
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="excel" scheme="https//www.ddhigh.com/tags/excel/"/>
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="csv" scheme="https//www.ddhigh.com/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>nodejs thrift多路复用客户端</title>
    <link href="https//www.ddhigh.com/2018/02/08/nodejs-thrift-multiple-client.html"/>
    <id>https//www.ddhigh.com/2018/02/08/nodejs-thrift-multiple-client.html</id>
    <published>2018-02-08T07:35:48.000Z</published>
    <updated>2018-04-24T14:17:12.678Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://thrift.apache.org/tutorial/nodejs" target="_blank" rel="external">官网nodejs示例</a>中只实现了服务端是单一service的情形，而对于服务端属于<code>多个服务复用一个连接地址</code>的例子却未实现。</p><p>查看thrift的nodejs库源码发现实际上还是支持的。以下来展示调用单一服务和多个服务的区别。</p><h2 id="单一服务"><a href="#单一服务" class="headerlink" title="单一服务"></a>单一服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thrift = <span class="built_in">require</span>(<span class="string">'thrift'</span>);</div><div class="line"><span class="keyword">var</span> Calculator = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/Calculator'</span>);</div><div class="line"><span class="keyword">var</span> ttypes = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/tutorial_types'</span>);</div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> transport = thrift.TBufferedTransport;</div><div class="line"><span class="keyword">var</span> protocol = thrift.TBinaryProtocol;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connection = thrift.createConnection(<span class="string">"localhost"</span>, <span class="number">9090</span>, &#123;</div><div class="line">  transport : transport,</div><div class="line">  protocol : protocol</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> client = thrift.createClient(Calculator, connection);</div><div class="line"><span class="comment">// 已经可以调用client方法</span></div></pre></td></tr></table></figure><h2 id="复用服务"><a href="#复用服务" class="headerlink" title="复用服务"></a>复用服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thrift = <span class="built_in">require</span>(<span class="string">'thrift'</span>);</div><div class="line"><span class="keyword">var</span> Calculator = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/Calculator'</span>);</div><div class="line"><span class="keyword">var</span> ttypes = <span class="built_in">require</span>(<span class="string">'./gen-nodejs/tutorial_types'</span>);</div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> transport = thrift.TBufferedTransport;</div><div class="line"><span class="keyword">var</span> protocol = thrift.TBinaryProtocol;</div><div class="line"></div><div class="line"><span class="keyword">var</span> connection = thrift.createConnection(<span class="string">"localhost"</span>, <span class="number">9090</span>, &#123;</div><div class="line">  transport : transport,</div><div class="line">  protocol : protocol</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> thrift.Multiplexer(); <span class="comment">// 关键</span></div><div class="line"><span class="keyword">const</span> client = m.createClient(<span class="string">'calculator'</span>, Calculator, connection); <span class="comment">// calculator为服务端声明的服务名称</span></div><div class="line"><span class="comment">// 已经可以调用client方法</span></div></pre></td></tr></table></figure><p>经过测试，以上代码能与golang实现的服务端正常通信。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://thrift.apache.org/tutorial/nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网nodejs示例&lt;/a&gt;中只实现了服务端是单一service的情形，而对于服务端属于&lt;code&gt;多个服务复
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="thrift" scheme="https//www.ddhigh.com/tags/thrift/"/>
    
  </entry>
  
  <entry>
    <title>golang通用连接池的实现</title>
    <link href="https//www.ddhigh.com/2018/02/01/golang-generic-pool.html"/>
    <id>https//www.ddhigh.com/2018/02/01/golang-generic-pool.html</id>
    <published>2018-02-01T12:04:00.000Z</published>
    <updated>2018-04-24T14:17:12.678Z</updated>
    
    <content type="html"><![CDATA[<p>golang的channel除了goroutine通信之外还有很多其他的功能，本文将实现一种基于channel的通用连接池。</p><h2 id="何为通用？"><a href="#何为通用？" class="headerlink" title="何为通用？"></a>何为通用？</h2><p>连接池的实现不依赖具体的实例，而依赖某个接口，本文的连接池选用的是<code>io.Closer</code>接口，只要是实现了该接口的对象都可以被池管理。<br>当然，你可以实现基于<code>interface{}</code>的连接池，这样任何对象都可以被管理。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>将连接句柄存入channel中，由于缓存channel的特性，获取连接时如果池中有连接，将直接返回，如果池中没有连接，将阻塞或者新建连接（没超过最大限制的情况下）。<br>由于面向接口编程，所有创建连接的逻辑是不清楚的，这里需要传入一个函数，该函数返回一个<code>io.Closer</code>对象。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>由于并发问题，在需要操作池中互斥数据的时候需要加锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pool</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"errors"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">ErrInvalidConfig = errors.New(<span class="string">"invalid pool config"</span>)</div><div class="line">ErrPoolClosed    = errors.New(<span class="string">"pool closed"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> factory <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">type</span> <span class="title">Pool</span> <span class="title">interface</span></span> &#123;</div><div class="line">Acquire() (io.Closer, error) <span class="comment">// 获取资源</span></div><div class="line">Release(io.Closer) error     <span class="comment">// 释放资源</span></div><div class="line">Close(io.Closer) error       <span class="comment">// 关闭资源</span></div><div class="line">Shutdown() error             <span class="comment">// 关闭池</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> GenericPool <span class="keyword">struct</span> &#123;</div><div class="line">sync.Mutex</div><div class="line">pool        <span class="keyword">chan</span> io.Closer</div><div class="line">maxOpen     <span class="keyword">int</span>  <span class="comment">// 池中最大资源数</span></div><div class="line">numOpen     <span class="keyword">int</span>  <span class="comment">// 当前池中资源数</span></div><div class="line">minOpen     <span class="keyword">int</span>  <span class="comment">// 池中最少资源数</span></div><div class="line">closed      <span class="keyword">bool</span> <span class="comment">// 池是否已关闭</span></div><div class="line">maxLifetime time.Duration</div><div class="line">factory     factory <span class="comment">// 创建连接的方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenericPool</span><span class="params">(minOpen, maxOpen <span class="keyword">int</span>, maxLifetime time.Duration, factory factory)</span> <span class="params">(*GenericPool, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> maxOpen &lt;= <span class="number">0</span> || minOpen &gt; maxOpen &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidConfig</div><div class="line">&#125;</div><div class="line">p := &amp;GenericPool&#123;</div><div class="line">maxOpen:     maxOpen,</div><div class="line">minOpen:     minOpen,</div><div class="line">maxLifetime: maxLifetime,</div><div class="line">factory:     factory,</div><div class="line">pool:        <span class="built_in">make</span>(<span class="keyword">chan</span> io.Closer, maxOpen),</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; minOpen; i++ &#123;</div><div class="line">closer, err := factory()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line">p.numOpen++</div><div class="line">p.pool &lt;- closer</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> p, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Acquire</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> p.closed &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrPoolClosed</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">closer, err := p.getOrCreate()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="comment">// todo maxLifttime处理</span></div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">getOrCreate</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span> &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> closer := &lt;-p.pool:</div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">&#125;</div><div class="line">p.Lock()</div><div class="line"><span class="keyword">if</span> p.numOpen &gt;= p.maxOpen &#123;</div><div class="line">closer := &lt;-p.pool</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 新建连接</span></div><div class="line">closer, err := p.factory()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">p.numOpen++</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> closer, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 释放单个资源到连接池</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Release</span><span class="params">(closer io.Closer)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> p.closed &#123;</div><div class="line"><span class="keyword">return</span> ErrPoolClosed</div><div class="line">&#125;</div><div class="line">p.Lock()</div><div class="line">p.pool &lt;- closer</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 关闭单个资源</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Close</span><span class="params">(closer io.Closer)</span> <span class="title">error</span></span> &#123;</div><div class="line">p.Lock()</div><div class="line">closer.Close()</div><div class="line">p.numOpen--</div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 关闭连接池，释放所有资源</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *GenericPool)</span> <span class="title">Shutdown</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> p.closed &#123;</div><div class="line"><span class="keyword">return</span> ErrPoolClosed</div><div class="line">&#125;</div><div class="line">p.Lock()</div><div class="line"><span class="built_in">close</span>(p.pool)</div><div class="line"><span class="keyword">for</span> closer := <span class="keyword">range</span> p.pool &#123;</div><div class="line">closer.Close()</div><div class="line">p.numOpen--</div><div class="line">&#125;</div><div class="line">p.closed = <span class="literal">true</span></div><div class="line">p.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>基于该连接池，可以管理所有<code>io.Closer</code>对象。比如<code>memcached</code>,<code>redis</code>等等，非常方便！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang的channel除了goroutine通信之外还有很多其他的功能，本文将实现一种基于channel的通用连接池。&lt;/p&gt;
&lt;h2 id=&quot;何为通用？&quot;&gt;&lt;a href=&quot;#何为通用？&quot; class=&quot;headerlink&quot; title=&quot;何为通用？&quot;&gt;&lt;/a&gt;何
      
    
    </summary>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/go/"/>
    
    
      <category term="go" scheme="https//www.ddhigh.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang限制协程数量</title>
    <link href="https//www.ddhigh.com/2018/01/31/goroutine-limit-demo.html"/>
    <id>https//www.ddhigh.com/2018/01/31/goroutine-limit-demo.html</id>
    <published>2018-01-31T14:23:09.000Z</published>
    <updated>2018-04-24T14:17:10.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要限制协程数量"><a href="#为什么要限制协程数量" class="headerlink" title="为什么要限制协程数量"></a>为什么要限制协程数量</h2><p>golang的go关键字并发实在是太简单，但是带来的问题是由于硬件和网络状况的限制，不受控制的增加协程是非常危险的做法，甚至有可能搞垮数据库之类的应用! 而并发控制在go中是非常常用的技巧，以此文来记录一下学习历程。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于channel的阻塞机制，通过设置缓冲channel的缓冲大小来控制同时执行的协程数量。</p><h2 id="demo代码"><a href="#demo代码" class="headerlink" title="demo代码"></a>demo代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">start := time.Now()</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</div><div class="line">ch &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">go</span> worker(i, ch)</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(ch)</div><div class="line">log.Println(<span class="string">"complete"</span>, time.Since(start).Seconds())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 模拟耗时操作</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(i <span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">log.Println(<span class="string">"worker"</span>, i)</div><div class="line">time.Sleep(time.Second)</div><div class="line">&lt;-ch</div></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go run demo.ho</div></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2018/01/31 22:24:49 worker 1</div><div class="line">2018/01/31 22:24:49 worker 0</div><div class="line">2018/01/31 22:24:50 worker 2</div><div class="line">2018/01/31 22:24:50 worker 3</div><div class="line">2018/01/31 22:24:51 worker 4</div><div class="line">2018/01/31 22:24:51 worker 5</div><div class="line">2018/01/31 22:24:52 worker 6</div><div class="line">2018/01/31 22:24:52 worker 7</div><div class="line">2018/01/31 22:24:53 worker 8</div><div class="line">2018/01/31 22:24:53 worker 9</div><div class="line">2018/01/31 22:24:54 worker 10</div><div class="line">2018/01/31 22:24:54 complete 5.01140112</div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到日志的输出时间，每秒出现两个，正好等于我们<code>make</code>函数的大小，而总时间也是为<code>10/2</code>左右，证明限制起到了作用。</p><p>虽然本文写起来很简单，但是包含的技巧可以说大型程序仍然会用到。正所谓“万丈高楼平地起”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要限制协程数量&quot;&gt;&lt;a href=&quot;#为什么要限制协程数量&quot; class=&quot;headerlink&quot; title=&quot;为什么要限制协程数量&quot;&gt;&lt;/a&gt;为什么要限制协程数量&lt;/h2&gt;&lt;p&gt;golang的go关键字并发实在是太简单，但是带来的问题是由于硬件和网络状况
      
    
    </summary>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>头脑王者辅助</title>
    <link href="https//www.ddhigh.com/2018/01/30/tnwz.html"/>
    <id>https//www.ddhigh.com/2018/01/30/tnwz.html</id>
    <published>2018-01-30T08:44:23.000Z</published>
    <updated>2018-01-31T14:18:04.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="头脑王者"><a href="#头脑王者" class="headerlink" title="头脑王者"></a>头脑王者</h1><p>本项目仅作为学习<code>anyproxy</code>之用，请勿用于非法用途，否则后果自负</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>[x] 题目爬取</li><li>[x] 答题匹配(如果题库不存在，请自行答题，系统会在答题后把正确答案自动录入数据库)</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li><p>安装mysql，新建数据库<code>tnwz</code>，建表语句</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tnwz.question</div><div class="line">(</div><div class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">    question <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">    a <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    b <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    c <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    d <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">    answer <span class="built_in">int</span>(<span class="number">11</span>),</div><div class="line">    createdAt datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    updatedAt datetime <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">);</div></pre></td></tr></table></figure></li><li><p>config.json为数据库配置 </p></li><li>安装<code>anyproxy</code> =&gt; <code>npm install anyproxy -g</code></li><li>生成证书<code>anyproxy -i</code></li><li>手机接入代理，代理地址<code>电脑IP:8001</code></li></ol><h2 id="题库获取"><a href="#题库获取" class="headerlink" title="题库获取"></a>题库获取</h2><ol><li>登录两个微信号获取到uid和token之后填入auth.json</li><li><code>node question-fetcher.js</code>,如果出现401，请重新登录</li></ol><h2 id="排位系统"><a href="#排位系统" class="headerlink" title="排位系统"></a>排位系统</h2><ol><li><code>npm run fight</code>开启代理</li><li>手机接入代理</li><li>开始排位，终端会提示<code>开始匹配</code>，系统会将正确答案添加上<code>###</code></li></ol><h2 id="适用系统"><a href="#适用系统" class="headerlink" title="适用系统"></a>适用系统</h2><ul><li>Android &amp;&amp; iOS</li><li>iOS11.3 已通过测试</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/tnwz" target="_blank" rel="external">https://github.com/xialeistudio/tnwz</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;头脑王者&quot;&gt;&lt;a href=&quot;#头脑王者&quot; class=&quot;headerlink&quot; title=&quot;头脑王者&quot;&gt;&lt;/a&gt;头脑王者&lt;/h1&gt;&lt;p&gt;本项目仅作为学习&lt;code&gt;anyproxy&lt;/code&gt;之用，请勿用于非法用途，否则后果自负&lt;/p&gt;
&lt;h2 id=&quot;功能
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https//www.ddhigh.com/tags/nodejs/"/>
    
      <category term="anyproxy" scheme="https//www.ddhigh.com/tags/anyproxy/"/>
    
  </entry>
  
  <entry>
    <title>golang可能导致内存泄漏的地方</title>
    <link href="https//www.ddhigh.com/2018/01/20/golang-memory-leak.html"/>
    <id>https//www.ddhigh.com/2018/01/20/golang-memory-leak.html</id>
    <published>2018-01-20T05:44:15.000Z</published>
    <updated>2018-01-31T14:18:04.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>golang能够GC是程序声明的变量，而一些外部资源是不可以GC掉的，比如<code>os.OpenFile</code>打开的文件句柄，<code>sql.Open</code>打开的数据库连接句柄等资源。</p><h2 id="开发中常用场景"><a href="#开发中常用场景" class="headerlink" title="开发中常用场景"></a>开发中常用场景</h2><ol><li><p>http请求时<code>resp.Body</code>，刚开始写golang的时候，如果会用<code>ioutil.readAll</code>去读取<code>resp.Body</code>时会加上<code>defer resp.Body.Close()</code>,后来有<code>json.NewDecoder().decode()</code>时没有加，以为会自动关闭，没想到还是太天真了。不管什么情况都需要<code>defer resp.Body.Close()</code></p></li><li><p>sql查询时<code>DB.Prepare</code>，数据库查询操作会得到一个<code>rows</code>的资源，这个一般都关闭了，但是运行一段时间之后发现有内存泄漏，因为只用到了sql查询，所以只有数据库操作代码可以排查，尽快调试发现<code>stmt</code>也有<code>Close</code>方法，加上<code>defer stmt.Close</code>之后，内存稳定了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;核心&quot;&gt;&lt;a href=&quot;#核心&quot; class=&quot;headerlink&quot; title=&quot;核心&quot;&gt;&lt;/a&gt;核心&lt;/h2&gt;&lt;p&gt;golang能够GC是程序声明的变量，而一些外部资源是不可以GC掉的，比如&lt;code&gt;os.OpenFile&lt;/code&gt;打开的文件句柄，&lt;
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="memory-leak" scheme="https//www.ddhigh.com/tags/memory-leak/"/>
    
  </entry>
  
</feed>
