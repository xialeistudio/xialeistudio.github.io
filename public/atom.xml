<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2019-07-08T09:22:08.538Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>druid SQL监控不显示问题</title>
    <link href="https//www.ddhigh.com/2019/07/08/druid-sql-monitor.html"/>
    <id>https//www.ddhigh.com/2019/07/08/druid-sql-monitor.html</id>
    <published>2019-07-08T09:13:40.000Z</published>
    <updated>2019-07-08T09:22:08.538Z</updated>
    
    <content type="html"><![CDATA[<p>新版druid数据源驱动的SQL监控如果用以前的老版本配置是无法监控到SQL的：</p><p>application.properties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    datasource:</span></div><div class="line"><span class="attr">        druid:</span></div><div class="line"><span class="attr">            filters:</span></div><div class="line"><span class="bullet">                -</span> <span class="string">stat</span></div><div class="line"><span class="bullet">                -</span> <span class="string">wall</span></div><div class="line"><span class="bullet">                -</span> <span class="string">log4j</span></div></pre></td></tr></table></figure><p>启动应用之后访问druid监控页面，除了SQL相关的页面都正常工作，但是访问SQL监控页面时没有看到SQL记录。<br>查看监控页面 <strong>数据源</strong> 菜单发现 <strong>filter类名</strong> 显示的是空，估计是filter配置有问题导致。</p><p>查阅官方文档发现filter配置有变更，改成以下形式即可统计SQL，同时在数据源页面 <strong>filter类名</strong> 会显示正常。</p><p>application.properties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    datasource:</span></div><div class="line"><span class="attr">        druid:</span></div><div class="line"><span class="attr">            initial-size:</span> <span class="number">5</span></div><div class="line"><span class="attr">            min-idle:</span> <span class="number">5</span></div><div class="line"><span class="attr">            max-active:</span> <span class="number">20</span></div><div class="line"><span class="attr">            max-wait:</span> <span class="number">5000</span></div><div class="line">            <span class="comment"># 状态监控</span></div><div class="line"><span class="attr">            filter:</span></div><div class="line"><span class="attr">                stat:</span></div><div class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                db-type:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">                log-slow-sql:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                slow-sql-millis:</span> <span class="number">2000</span></div><div class="line">            <span class="comment"># 监控过滤器</span></div><div class="line"><span class="attr">            web-stat-filter:</span></div><div class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                exclusions:</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.js"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.gif"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.jpg"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.png"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.css"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"*.ico"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"/druid/*"</span></div><div class="line">            <span class="comment"># druid 监控页面</span></div><div class="line"><span class="attr">            stat-view-servlet:</span></div><div class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">                url-pattern:</span> <span class="string">/druid/*</span></div><div class="line"><span class="attr">                reset-enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">                login-username:</span> <span class="string">root</span></div><div class="line"><span class="attr">                login-password:</span> <span class="string">root</span></div></pre></td></tr></table></figure><p>数据源filter类名：<strong>com.alibaba.druid.filter.stat.StatFilter</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新版druid数据源驱动的SQL监控如果用以前的老版本配置是无法监控到SQL的：&lt;/p&gt;
&lt;p&gt;application.properties&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="java" scheme="https//www.ddhigh.com/categories/java/"/>
    
    
      <category term="druid" scheme="https//www.ddhigh.com/tags/druid/"/>
    
      <category term="springboot" scheme="https//www.ddhigh.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>解决数据库N+1查询问题</title>
    <link href="https//www.ddhigh.com/2019/06/18/database-n-1-solution.html"/>
    <id>https//www.ddhigh.com/2019/06/18/database-n-1-solution.html</id>
    <published>2019-06-18T07:50:28.000Z</published>
    <updated>2019-06-18T09:17:55.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>数据表如下：</p><p>department表</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>测试部门</td></tr></tbody></table><p> user表</p><table><thead><tr><th>id</th><th>name</th><th>department_id</th></tr></thead><tbody><tr><td>1</td><td>test</td><td>1</td></tr></tbody></table><p>需求是得到以下结构的数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">"name"</span>:<span class="string">"test"</span>,</div><div class="line">        <span class="attr">"department_id"</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">"department"</span>:&#123;</div><div class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">            <span class="attr">"name"</span>:<span class="string">"测试部门"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="方法一-循环查询"><a href="#方法一-循环查询" class="headerlink" title="方法一:循环查询"></a>方法一:循环查询</h2><ol><li>查询用户列表</li><li>循环用户列表查询对应的部门信息</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$users = $db-&gt;query(<span class="string">'SELECT * FROM `user`'</span>);</div><div class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> &amp;$user) &#123;</div><div class="line">    $users[<span class="string">'department'</span>] = $db-&gt;query(<span class="string">'SELECT * FROM `department` WHERE `id` = '</span>.$user[<span class="string">'department_id'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该方法查询次数为：1+N(1次查询列表，N次查询部门)，性能最低，不可取。</p><h2 id="方法二：连表"><a href="#方法二：连表" class="headerlink" title="方法二：连表"></a>方法二：连表</h2><ol><li>通过连表查询用户和部门数据</li><li>处理返回数据</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$users = $db-&gt;query(<span class="string">'SELECT * FROM `user` INNER JOIN `department` ON `department`.`id` = `user`.`department_id`'</span>);</div><div class="line"><span class="comment">// 手动处理返回结果为需求结构</span></div></pre></td></tr></table></figure><p>该方法其实也有局限性，如果 <em>user</em> 和 <em>department</em> 不在同一个服务器是不可以连表的。</p><h2 id="方法三：1-1查询"><a href="#方法三：1-1查询" class="headerlink" title="方法三：1+1查询"></a>方法三：1+1查询</h2><ol><li>该方法先查询1次用户列表</li><li>取出列表中的部门ID组成数组</li><li>查询步骤2中的部门</li><li>合并最终数据</li></ol><p>代码大致如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$users = $db-&gt;query(<span class="string">'SELECT * FROM `user`'</span>);</div><div class="line">$departmentIds =[ ];</div><div class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> $user) &#123;</div><div class="line">    <span class="keyword">if</span>(!in_array($user[<span class="string">'department_id'</span>], $departmentIds)) &#123;</div><div class="line">        $departmentIds[] = $user[<span class="string">'department_id'</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$departments = $db-&gt;query(<span class="string">'SELECT * FROM `department` WHERE id in ('</span>.join(<span class="string">','</span>,$department_id).<span class="string">')'</span>);</div><div class="line">$map = []; <span class="comment">// [部门ID =&gt; 部门item]</span></div><div class="line"><span class="keyword">foreach</span>($departments <span class="keyword">as</span> $department) &#123;</div><div class="line">    $map[$department[<span class="string">'id'</span>]] = $department;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>($users <span class="keyword">as</span> $user) &#123;</div><div class="line">    $user[<span class="string">'department'</span>] = $map[$user[<span class="string">'department_id'</span>]] ?? <span class="keyword">null</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>该方法对两个表没有限制，在目前微服务盛行的情况下是比较好的一种做法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;数据表如下：&lt;/p&gt;
&lt;p&gt;department表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;nam
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="database" scheme="https//www.ddhigh.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>在Swoole环境下运行注入Yii2框架的thrift应用</title>
    <link href="https//www.ddhigh.com/2019/05/19/running-thrift-on-swoole-with-yii2.html"/>
    <id>https//www.ddhigh.com/2019/05/19/running-thrift-on-swoole-with-yii2.html</id>
    <published>2019-05-19T08:10:47.000Z</published>
    <updated>2019-05-19T08:15:37.106Z</updated>
    
    <content type="html"><![CDATA[<p>前两天发布了<a href="/2019/05/16/running-thrift-on-swoole.html">使用swoole来运行thrift应用</a>，项目虽然可以运行起来，但是周边的生态（如缓存，ORM，日志等等）并没有跟上，实际上开发体验比较差。周末研究了一下，把Yii2框架集成到了thrift应用上。</p><p>项目地址：<a href="https://github.com/swoole-foundation/yii2-swoole-thrift" target="_blank" rel="external">https://github.com/swoole-foundation/yii2-swoole-thrift</a></p><p>Yii2优势：</p><ul><li>完美的OOP设计</li><li>大量开箱即用的组件(DB/Cache/Logger/RBAC等等)</li><li>组件化开发</li><li>扩展性</li></ul><p>这些支持是提高thrift应用开发效率的保证，毕竟没有人会直接在生产环境下手写SQL不是?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天发布了&lt;a href=&quot;/2019/05/16/running-thrift-on-swoole.html&quot;&gt;使用swoole来运行thrift应用&lt;/a&gt;，项目虽然可以运行起来，但是周边的生态（如缓存，ORM，日志等等）并没有跟上，实际上开发体验比较差。周末研究了一
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="thrift" scheme="https//www.ddhigh.com/tags/thrift/"/>
    
      <category term="swoole" scheme="https//www.ddhigh.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>在swoole上运行Yii2应用</title>
    <link href="https//www.ddhigh.com/2019/05/19/running-yii2-on-swoole.html"/>
    <id>https//www.ddhigh.com/2019/05/19/running-yii2-on-swoole.html</id>
    <published>2019-05-19T08:02:07.000Z</published>
    <updated>2019-05-19T08:10:17.845Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yiiframework.com" target="_blank" rel="external">Yii2</a>：业界著名的开发框架，完美的OOP设计以及组件化开发思想保证了框架的扩展性。<br><a href="https://www.swoole.com/" target="_blank" rel="external">Swoole</a>：面向生产环境的 PHP 异步网络通信引擎。使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。</p><h2 id="Yii2优点"><a href="#Yii2优点" class="headerlink" title="Yii2优点"></a>Yii2优点</h2><ul><li>完美的OOP设计</li><li>大量开箱即用的组件(DB/Cache/Logger/RBAC等等)</li><li>组件化开发</li><li>扩展性</li></ul><h2 id="Swoole优点"><a href="#Swoole优点" class="headerlink" title="Swoole优点"></a>Swoole优点</h2><ul><li>高性能/异步/事件驱动</li><li>使用PHP语言开发</li><li>单文件容器化(传统的php-fpm容器化有点麻烦，一般使用apache的镜像，但是性能不行)</li></ul><p>如果这两者结合将会擦出什么样的火花呢?</p><h2 id="Yii2-Swoole-Extension"><a href="#Yii2-Swoole-Extension" class="headerlink" title="Yii2-Swoole-Extension"></a>Yii2-Swoole-Extension</h2><p><a href="https://github.com/swoole-foundation/yii2-swoole-extension" target="_blank" rel="external">Yii2-Swoole-Extension</a></p><p>基于swoole运行环境的Yii2扩展，基于标准Yii2组件化思想开发，对应用无侵入性，可以随时从 PHP-FPM &lt;-&gt; swoole 互相迁移。</p><p>通过简单的几行代码即可完成传统PHP-FPM应用到Swoole的升级，给应用带来实打实的性能提升!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.yiiframework.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yii2&lt;/a&gt;：业界著名的开发框架，完美的OOP设计以及组件化开发思想保证了框架的扩展性。&lt;br&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="yii2" scheme="https//www.ddhigh.com/tags/yii2/"/>
    
      <category term="swoole" scheme="https//www.ddhigh.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>使用swoole来运行thrift应用</title>
    <link href="https//www.ddhigh.com/2019/05/16/running-thrift-on-swoole.html"/>
    <id>https//www.ddhigh.com/2019/05/16/running-thrift-on-swoole.html</id>
    <published>2019-05-16T06:32:41.000Z</published>
    <updated>2019-05-16T06:42:27.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swoole扩展简介"><a href="#Swoole扩展简介" class="headerlink" title="Swoole扩展简介"></a>Swoole扩展简介</h2><blockquote><p><strong>Swoole：面向生产环境的 PHP 异步网络通信引擎</strong></p><p>使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。</p></blockquote><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><blockquote><p>Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的。</p></blockquote><h2 id="swoole实现"><a href="#swoole实现" class="headerlink" title="swoole实现"></a>swoole实现</h2><p>thrift官方提供的PHP服务端是运行在php原生阻塞IO模式的，性能比较差。笔者使用Swoole的异步服务端+thrift提供的接口实现一个了异步协程化的thrift应用。</p><p>此项目已经在github上开源：</p><p><a href="https://github.com/xialeistudio/swoole-thrift.git" target="_blank" rel="external">https://github.com/xialeistudio/swoole-thrift.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Swoole扩展简介&quot;&gt;&lt;a href=&quot;#Swoole扩展简介&quot; class=&quot;headerlink&quot; title=&quot;Swoole扩展简介&quot;&gt;&lt;/a&gt;Swoole扩展简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Swoole：面向生产环境的 PH
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="thrift" scheme="https//www.ddhigh.com/tags/thrift/"/>
    
      <category term="swoole" scheme="https//www.ddhigh.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>在缓存中使用闭包函数</title>
    <link href="https//www.ddhigh.com/2019/05/14/use-closure-in-cache.html"/>
    <id>https//www.ddhigh.com/2019/05/14/use-closure-in-cache.html</id>
    <published>2019-05-14T03:48:58.000Z</published>
    <updated>2019-05-14T05:46:59.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>PHP官方文档对于闭包函数的定义：</p><blockquote><p>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。</p></blockquote><p>简单来说，闭包函数也是一种数据类型，可以直接使用变量来存储、传参、调用等等。</p><h2 id="传统缓存操作"><a href="#传统缓存操作" class="headerlink" title="传统缓存操作"></a>传统缓存操作</h2><p>操作缓存的时候一般步骤如下：</p><ol><li>读取缓存</li><li>如果缓存不为空则返回缓存数据</li><li>读取数据库，然后设置到缓存</li><li>返回数据</li></ol><p>PHP示例代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUser</span><span class="params">($userId)</span> </span>&#123;</div><div class="line">    $data = $cache-&gt;get(<span class="string">'user-'</span>. $userId);</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($data)) &#123;</div><div class="line">        <span class="keyword">return</span> $data;</div><div class="line">    &#125;</div><div class="line">    $data = $db-&gt;findOne([<span class="string">'user_id'</span> =&gt; $userId]);</div><div class="line">    $cache-&gt;set(<span class="string">'user-'</span>. $userId, $data, <span class="number">7200</span>);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其实<strong>查找缓存，如果不存在则查找数据库之后写入缓存</strong>这个操作也可以用闭包来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrSet</span><span class="params">($key, callable $callable, $expire = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    $data = $cache-&gt;get($key);</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($data)) &#123;</div><div class="line">        <span class="keyword">return</span> $data;</div><div class="line">    &#125;</div><div class="line">    $data = call_user_func($callable);</div><div class="line">    $cache-&gt;set($key, $data, $expire);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUser</span><span class="params">($userId)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $cache-&gt;getOrSet(<span class="string">'user-'</span>. $userId, <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span><span class="params">($db, $userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> $db-&gt;findOne([<span class="string">'user_id'</span> =&gt; $userId]);</div><div class="line">    &#125;, <span class="number">7200</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到通过闭包省去了手动<strong>get</strong>和<strong>set</strong>的过程，而查询数据库那一步是只有在缓存读取不到才会执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包函数&quot;&gt;&lt;a href=&quot;#闭包函数&quot; class=&quot;headerlink&quot; title=&quot;闭包函数&quot;&gt;&lt;/a&gt;闭包函数&lt;/h2&gt;&lt;p&gt;PHP官方文档对于闭包函数的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名函数（Anonymous functions
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="closure" scheme="https//www.ddhigh.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>在事务中使用闭包函数简化开发</title>
    <link href="https//www.ddhigh.com/2019/05/14/use-closure-in-transaction.html"/>
    <id>https//www.ddhigh.com/2019/05/14/use-closure-in-transaction.html</id>
    <published>2019-05-14T02:25:43.000Z</published>
    <updated>2019-05-14T03:52:33.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>PHP官方文档对于闭包函数的定义：</p><blockquote><p>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。</p></blockquote><p>简单来说，闭包函数也是一种数据类型，可以直接使用变量来存储、传参、调用等等。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务简单来说就是一个核心:</p><blockquote><p>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</p></blockquote><p>一般情况下，每一条SQL的执行情况都需要进行判断，如果执行成功则继续，否则回滚事务。以下是PDO事务代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=demo'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $pdo-&gt;beginTransaction();</div><div class="line">    <span class="comment">//todo 业务代码</span></div><div class="line">    $pdo-&gt;commit();</div><div class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</div><div class="line">    $pdo-&gt;rollBack();</div><div class="line">    <span class="keyword">throw</span> $e;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><p>几乎所有事务都需要如此处理，但是这样重复代码太多，实际上只需要关心的部分是 <strong>业务代码</strong> 部分，使用闭包函数可以很好的解决这个问题。</p><p>闭包函数可以理解为具体的业务逻辑，不带任何事务相关操作，如果出现异常，会自动回滚事务。</p><p>PHP的简单实现代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transaction</span><span class="params">(PDO $pdo, callable $callable)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        $pdo-&gt;beginTransaction();</div><div class="line">        $result = call_user_func($callable, $pdo);</div><div class="line">        $pdo-&gt;commit();</div><div class="line">        <span class="keyword">return</span> $result;</div><div class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</div><div class="line">        $pdo-&gt;rollBack();</div><div class="line">        <span class="keyword">throw</span> $e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PHP调用方法代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transaction($pdo, <span class="function"><span class="keyword">function</span> <span class="params">(PDO $pdo)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $pdo-&gt;query(<span class="string">'INSERT INTO `test` VALUES (1)'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用闭包函数去简化样板代码在生产中是很常见的，具体的设计模式应该是类似“模板方法模式”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包函数&quot;&gt;&lt;a href=&quot;#闭包函数&quot; class=&quot;headerlink&quot; title=&quot;闭包函数&quot;&gt;&lt;/a&gt;闭包函数&lt;/h2&gt;&lt;p&gt;PHP官方文档对于闭包函数的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名函数（Anonymous functions
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="closure" scheme="https//www.ddhigh.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>使用systemd来构建你的服务</title>
    <link href="https//www.ddhigh.com/2019/02/28/build-service-by-systemd.html"/>
    <id>https//www.ddhigh.com/2019/02/28/build-service-by-systemd.html</id>
    <published>2019-02-28T13:51:16.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="systemd是什么"><a href="#systemd是什么" class="headerlink" title="systemd是什么"></a>systemd是什么</h2><p>Systemd 服务是一种以 .service 结尾的单元（unit）配置文件，用于控制由Systemd 控制或监视的进程。简单说，用于后台以守护精灵（daemon）的形式运行程序。</p><h2 id="为什么要使用systemd"><a href="#为什么要使用systemd" class="headerlink" title="为什么要使用systemd"></a>为什么要使用systemd</h2><ol><li>service文件编写简单易用</li><li>可以自动维持进程存活（强大的功能，可以取代PM2）</li><li>自动收集进程输出的输出</li></ol><h2 id="systemd主要命令"><a href="#systemd主要命令" class="headerlink" title="systemd主要命令"></a>systemd主要命令</h2><p>可以看到systemd以字母d结尾，根据linux惯用规则，可以判断该进程为守护进程，可以通过<code>systemctl</code>与之交互。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl start redis<span class="selector-class">.service</span> #启动服务</div><div class="line">systemctl stop redis<span class="selector-class">.service</span> #停止服务</div><div class="line">systemctl restart redis<span class="selector-class">.service</span> #重启服务</div><div class="line">systemctl enable redis<span class="selector-class">.service</span> #将redis设置为开机启动</div></pre></td></tr></table></figure><h2 id="编写systemd"><a href="#编写systemd" class="headerlink" title="编写systemd"></a>编写systemd</h2><p>systmd service文件一般放在<code>/etc/systemd/system/</code>文件夹中。</p><p>systemd service文件是结构化的，以下给出一份笔者常用的清单。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line"><span class="attribute">Description</span>=Git Auto Update Hook Service</div><div class="line"><span class="attribute">After</span>=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line"><span class="attribute">Type</span>=simple</div><div class="line"><span class="attribute">ExecStart</span>=/root/src/git-hookd/git-hookd</div><div class="line"><span class="attribute">Restart</span>=always</div><div class="line">[Install]</div><div class="line"><span class="attribute">WantedBy</span>=multi-user.target</div></pre></td></tr></table></figure><p>拿之前写过的init.d的脚本对比一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">### BEGIN INIT INFO</span></div><div class="line"><span class="comment"># Provides:          xialeistudio</span></div><div class="line"><span class="comment"># Required-Start:    $network</span></div><div class="line"><span class="comment"># Required-Stop:     $local_fs</span></div><div class="line"><span class="comment"># Default-Start:     2 3 4 5</span></div><div class="line"><span class="comment"># Default-Stop:      0 1 6</span></div><div class="line"><span class="comment"># Short-Description: test service</span></div><div class="line"><span class="comment"># Description:       test service</span></div><div class="line"><span class="comment">### END INIT INFO</span></div><div class="line">PROG=<span class="string">"testd"</span></div><div class="line">PROG_PATH=<span class="string">"/root/apps/testd"</span></div><div class="line">PROG_ARGS=<span class="string">"-u xialei"</span></div><div class="line">PID_PATH=<span class="string">"/var/run/"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span> ]; <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Error! <span class="variable">$PROG</span> is running!"</span> 2&gt;&amp;1</div><div class="line">                <span class="built_in">exit</span> 1</div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="variable">$PROG_PATH</span>/<span class="variable">$PROG</span> <span class="variable">$PROG_ARGS</span> 2&gt;&amp;1 &gt; <span class="string">"/var/log/<span class="variable">$PROG</span>.log"</span> &amp;</div><div class="line">                pid=`ps ax|grep testd|awk <span class="string">'&#123;print $2&#125;'</span>|head -n 1`</div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PROG</span> started"</span></div><div class="line">                <span class="built_in">echo</span> <span class="variable">$pid</span> &gt; <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span></div><div class="line">        <span class="keyword">fi</span>      </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span> ]; <span class="keyword">then</span></div><div class="line">                pid=`ps ax|grep testd|awk <span class="string">'&#123;print $2&#125;'</span>|head -n 1`</div><div class="line">                <span class="built_in">kill</span> <span class="variable">$pid</span></div><div class="line">        </div><div class="line">                rm -rf <span class="string">"<span class="variable">$PID_PATH</span>/<span class="variable">$PROG</span>.pid"</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PROG</span> <span class="variable">$pid</span> killed"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Error! <span class="variable">$PROG</span> not running!"</span> 2&gt;&amp;1</div><div class="line">                <span class="built_in">exit</span> 1</div><div class="line">        <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$(id -u)</span>"</span> != <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Please run as root!"</span> 2&gt;&amp;1</div><div class="line">        <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">                start</div><div class="line">                <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">        stop)</div><div class="line">                stop</div><div class="line">                <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">        reload|restart)</div><div class="line">                stop</div><div class="line">                start</div><div class="line">                <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">        **)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|reload&#125;"</span> 2&gt;&amp;1</div><div class="line">                <span class="built_in">exit</span> 1</div><div class="line">        ;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure><p>可以看到init.d脚本实在是太原始了，systemd取代init.d指日可待</p><h2 id="systemd-service文件说明"><a href="#systemd-service文件说明" class="headerlink" title="systemd service文件说明"></a>systemd service文件说明</h2><p>service文件由 Unit, Service, Install 三部分组成</p><h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><p>所有引导过程中systemd要控制的文件/设备/程序等等都称为一个单元。</p><ul><li>Description: 服务描述</li><li>Wants: 本单元启动成功，则会启动此字段定义的单元，如果Wants定义的单元启动失败，对本单元无影响</li><li>Requires：本单元启动成功，则会启动此字段定义的单元，如果Requires定义的单元启动失败，本单元也失败。该字段无法控制先后顺序，如果Requires定义的单元未启动完成就启动本单元，那么一个都启动不了，不建议用这个字段</li><li>OnFailure： 本单元如果启动失败，则启动该字段定义的单元</li><li>Before/After：指定本单元的启动顺序</li></ul><p>本例中只需要依赖网络单元即可</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>服务本体定义：</p><ul><li>Type 启动类型</li><li>ExecStart 启动服务的命令</li><li>ExecStop 停止服务的命令（一般不写）</li><li>Restart 重启规则</li><li>RemainAfterExit 即使没有进程，也任务服务启动成功</li></ul><p>Type 启动类型有以下几种：</p><pre><code>+ simple： 默认类型，启动的进程将成为服务进程。+ forking：标准Unix Daemon进程。本进程启动后会通过系统调用fork，把必要的通信频道都设置好之后父进程退出，留下守护精灵的子进程。（也就是说你自己来将进程变成daemon进程）+ oneshot：一次性命令。该服务运行完毕后没有进程，所以需要配合RemainAfterExit。</code></pre><p>Restart 重启规则有以下几种：</p><pre><code>+ no（默认值）：退出后不会重启+ always：不管是什么退出原因，总是重启+ on-success：只有正常退出时（退出状态码为0），才会重启+ on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启+ on-abnormal：只有被信号终止和超时，才会重启+ on-abort：只有在收到没有捕捉到的信号终止时，才会重启+ on-watchdog：超时退出，才会重启</code></pre><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>systemd装载规则定义</p><ul><li>WantedBy 将被谁装载，本例中使用multi-user.target，最终服务将通过软链接到<code>/etc/systemd/system/multi-user.target.wants</code>目录</li><li>Alias 服务别名，可以通过 <code>systemctl 服务别名 restart</code> 之类的来操作</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>是时候通过systemd改写init.d的服务了，有必要的话可以连pm2守护的进程都交给systemd来处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;systemd是什么&quot;&gt;&lt;a href=&quot;#systemd是什么&quot; class=&quot;headerlink&quot; title=&quot;systemd是什么&quot;&gt;&lt;/a&gt;systemd是什么&lt;/h2&gt;&lt;p&gt;Systemd 服务是一种以 .service 结尾的单元（unit）配置文
      
    
    </summary>
    
      <category term="linux" scheme="https//www.ddhigh.com/categories/linux/"/>
    
    
      <category term="systemd" scheme="https//www.ddhigh.com/tags/systemd/"/>
    
      <category term="daemon" scheme="https//www.ddhigh.com/tags/daemon/"/>
    
      <category term="service" scheme="https//www.ddhigh.com/tags/service/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现简单版的php z_val结构体</title>
    <link href="https//www.ddhigh.com/2019/02/26/c-php-simple-z-val-example.html"/>
    <id>https//www.ddhigh.com/2019/02/26/c-php-simple-z-val-example.html</id>
    <published>2019-02-26T09:32:16.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>学习过PHP的人都知道PHP是基于C语言开发的，但是C语言是强类型的，PHP如何实现弱类型呢？答案在于这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;</div><div class="line"><span class="keyword">long</span> lval;<span class="comment">/* long value */</span></div><div class="line"><span class="keyword">double</span> dval;<span class="comment">/* double value */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">char</span> *val;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line">&#125; str;</div><div class="line">HashTable *ht;<span class="comment">/* hash table value */</span></div><div class="line">zend_object_value obj;</div><div class="line">zend_ast *ast;</div><div class="line">&#125; zvalue_value;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></div><div class="line"><span class="comment">/* Variable information */</span></div><div class="line">zvalue_value value;<span class="comment">/* value */</span></div><div class="line">zend_uint refcount__gc;</div><div class="line">zend_uchar type;<span class="comment">/* active type */</span></div><div class="line">zend_uchar is_ref__gc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>type</strong>保存了实际的类型，而<strong>value</strong>这个共用体保存了具体的值，我们使用到变量的时候需要根据变量类型来取出<strong>_zvalue_value</strong>中保存的具体值。<br>采用union能够避免内存浪费，同一时刻，一个<strong>_zval_struct</strong>中的共用体<strong>zvalue_value</strong>只有一个成员会分配内存，避免了无谓的内存分配。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>阅读源码之前，可能觉得是一个很复杂的实现，阅读源码之后，其实也能自己实现，关键是type和value的组合。源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> z_val_type</div><div class="line">&#123;</div><div class="line">    DOUBLE,</div><div class="line">    LONG,</div><div class="line">    STRING</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z_val</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="keyword">double</span> dval;</div><div class="line">        <span class="keyword">long</span> lval;</div><div class="line">        <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">        &#123;</span></div><div class="line">            <span class="keyword">char</span> *val;</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">        &#125; str;</div><div class="line">    &#125; value;</div><div class="line">    <span class="keyword">enum</span> z_val_type type;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">z_val_print</span><span class="params">(struct z_val *)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// double</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">z_val</span> *<span class="title">doubleVal</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">z_val</span>));</span></div><div class="line">    doubleVal-&gt;type = DOUBLE;</div><div class="line">    doubleVal-&gt;value.dval = <span class="number">1.0</span>;</div><div class="line">    <span class="comment">// long</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">z_val</span> *<span class="title">longVal</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">z_val</span>));</span></div><div class="line">    longVal-&gt;type = LONG;</div><div class="line">    longVal-&gt;value.lval = <span class="number">1</span>;</div><div class="line">    <span class="comment">// string</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">z_val</span> *<span class="title">strVal</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">z_val</span>));</span></div><div class="line">    strVal-&gt;type = STRING;</div><div class="line">    strVal-&gt;value.str.val = <span class="string">"Hello World!"</span>;</div><div class="line">    strVal-&gt;value.str.len = <span class="built_in">strlen</span>(strVal-&gt;value.str.val);</div><div class="line"></div><div class="line">    z_val_print(doubleVal);</div><div class="line">    z_val_print(longVal);</div><div class="line">    z_val_print(strVal);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(strVal);</div><div class="line">    <span class="built_in">free</span>(longVal);</div><div class="line">    <span class="built_in">free</span>(doubleVal);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">z_val_print</span><span class="params">(struct z_val *val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">switch</span> (val-&gt;type)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> LONG:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"type: long, val: %ld\n"</span>, val-&gt;value.lval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> DOUBLE:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"type: double, val: %f\n"</span>, val-&gt;value.dval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> STRING:</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"type: string, val: %s, len: %d\n"</span>, val-&gt;value.str.val, val-&gt;value.str.len);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>采用gcc编译</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -o <span class="class"><span class="keyword">union</span> <span class="title">union</span>.<span class="title">c</span></span></div></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./<span class="class"><span class="keyword">union</span></span></div></pre></td></tr></table></figure><p>输出</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">type:</span> <span class="keyword">double</span>, <span class="string">val:</span> <span class="number">1.000000</span></div><div class="line"><span class="string">type:</span> <span class="keyword">long</span>, <span class="string">val:</span> <span class="number">1</span></div><div class="line"><span class="string">type:</span> string, <span class="string">val:</span> Hello World!, <span class="string">len:</span> <span class="number">12</span></div></pre></td></tr></table></figure><p>可以看到输出跟预期一样，我们也实现了一个“弱类型”的变量，是不是很有成就感呢？<br>实现上，多阅读源码可以多多参考别人的思维方式和编码习惯，所谓“站在巨人的肩膀上，才能看得更远”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;学习过PHP的人都知道PHP是基于C语言开发的，但是C语言是强类型的，PHP如何实现弱类型呢？答案在于这个&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
      <category term="z_val" scheme="https//www.ddhigh.com/categories/php/z-val/"/>
    
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
      <category term="c" scheme="https//www.ddhigh.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>无需编程导出微信表情包</title>
    <link href="https//www.ddhigh.com/2019/01/11/export-wechat-emotion.html"/>
    <id>https//www.ddhigh.com/2019/01/11/export-wechat-emotion.html</id>
    <published>2019-01-11T02:53:02.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<p>微信前两天推送了年度报告，其中的表情统计很有意思，的确，表情包这两年是越来越火了。但是有个问题是微信不支持导出表情包，有的小伙伴又需要导出来保存到其他地方。</p><p>本文分享一个比较简单的方式导出表情包，条件只有一个：谷歌浏览器。</p><ol><li>打开 <a href="https://wx.qq.com" target="_blank" rel="external">https://wx.qq.com</a> 并登陆，这是网页版微信登录入口</li><li>手机选择表情发送给文件传输助手</li><li>打开网页版微信，可以查看到图片<br><img src="http://download.ddhigh.com/blog-img/WX20190111-105910.png" alt="1"></li><li>接下来打开谷歌浏览器的开发者工具（不同电脑不太一样，但是都是右上角打开）<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110041.png" alt="2"></li><li>然后按照图片顺序点击如下图所示的图标<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110109.png" alt="3"></li><li>这时候鼠标处于选择元素的状态，直接悬浮在表情图片上即可<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110127.png" alt="4"></li><li>下方的窗口会出现图片链接，而且会有背景色（本图片的背景色是淡蓝色）<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110127.png" alt="5"></li><li>鼠标悬浮到刚才的淡蓝色窗口的链接上面，会出现表情的原图<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110137.png" alt="6"></li><li>在链接上面点击右键，选择如图名字的菜单（菜单顺序不同系统不同）<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110148.png" alt="7"></li><li>在新窗口打开的图片就是表情原始图片了，可以保存<br><img src="http://download.ddhigh.com/blog-img/WX20190111-110159.png" alt="8"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信前两天推送了年度报告，其中的表情统计很有意思，的确，表情包这两年是越来越火了。但是有个问题是微信不支持导出表情包，有的小伙伴又需要导出来保存到其他地方。&lt;/p&gt;
&lt;p&gt;本文分享一个比较简单的方式导出表情包，条件只有一个：谷歌浏览器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一起学context（二）——超时控制</title>
    <link href="https//www.ddhigh.com/2019/01/02/golang-timeout-context.html"/>
    <id>https//www.ddhigh.com/2019/01/02/golang-timeout-context.html</id>
    <published>2019-01-02T09:54:59.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章讲到如何使用context来传值，实际上context还有另外一个重要功能——goroutine的超时控制。<br>很多时候goroutine如果不设超时，一旦发生阻塞将无限等待，协程数会越来越多，导致耗尽服务器内存。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>拥有超时控制的context有以下几种：</p><ol><li>context.WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) 指定时长超时结束</li><li>context.WithCancel(parent Context) (ctx Context, cancel CancelFunc) 手动结束</li><li>context.WithDeadline(parent Context, d time.Time) (Context, CancelFunc) 指定时间结束</li></ol><p>一般常用的话就<code>context.WithTimeout</code></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>所有超时控制结束的代码结构都是类似的，示例代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"context"</span></div><div class="line"><span class="string">"time"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">ctx, cancel := context.WithTimeout(context.TODO(), time.Second*<span class="number">3</span>)</div><div class="line"><span class="keyword">defer</span> cancel() <span class="comment">// 防止任务比超时时间短导致资源未释放</span></div><div class="line"><span class="comment">// 启动协程</span></div><div class="line"><span class="keyword">go</span> task(ctx)</div><div class="line"><span class="comment">// 主协程需要等待，否则直接退出</span></div><div class="line">time.Sleep(time.Second * <span class="number">4</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">(ctx context.Context)</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)</div><div class="line"><span class="comment">// 真正的任务协程</span></div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 模拟两秒耗时任务</span></div><div class="line">time.Sleep(time.Second * <span class="number">2</span>)</div><div class="line">ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> &lt;-ch:</div><div class="line">fmt.Println(<span class="string">"done"</span>)</div><div class="line"><span class="keyword">case</span> &lt;-ctx.Done():</div><div class="line">fmt.Println(<span class="string">"timeout"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>task函数是一般情况下ctx的处理代码，很多第三方框架会声明具体函数的第一个参数为context.Context来允许设定代码超时时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章讲到如何使用context来传值，实际上context还有另外一个重要功能——goroutine的超时控制。&lt;br&gt;很多时候goroutine如果不设超时，一旦发生阻塞将无限等待，协程数会越来越多，导致耗尽服务器内存。&lt;/p&gt;
&lt;h2 id=&quot;分类&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="goroutine" scheme="https//www.ddhigh.com/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>一起学context（一）——上下文值传递</title>
    <link href="https//www.ddhigh.com/2018/10/17/golang-context-with-value.html"/>
    <id>https//www.ddhigh.com/2018/10/17/golang-context-with-value.html</id>
    <published>2018-10-17T13:50:20.000Z</published>
    <updated>2019-05-13T11:43:39.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列开篇"><a href="#系列开篇" class="headerlink" title="系列开篇"></a>系列开篇</h1><p>本文开始将针对context的用法进行系统化讨论，在这里你将能够在工作中合理使用context解决一些比较棘手的问题。</p><p>context处理超时处理之外还可以用来保存数据，当你需要在多个上下文传递时传递数据，那么本文提到的知识可以排上用场。</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>示例代码为一个简单的http服务，流程是登录之后会跳转首页，首页通过guard中间件进行鉴权。当然，示例代码未做其他诸如连接数据库之类的处理，这不是本文的重点。<br>守卫函数读取cookie之后将cookie值写入context并向下传递，在整个请求中可以说是“透明”的。当访问到需要保护的接口时检测到没有提供cookie，则直接终端请求，否则通过r.WithContext将username的值存入cookie，避免的业务接口直接读取cookie的弊端。因为如果后期更改鉴权算法的话，业务代码可以不用更改，直接更改中间件即可。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"context"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">mux := http.NewServeMux()</div><div class="line">mux.HandleFunc(<span class="string">"/"</span>, guard(home))</div><div class="line">mux.HandleFunc(<span class="string">"/login"</span>, login)</div><div class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, mux))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 登录</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> r.URL.Query().Get(<span class="string">"username"</span>) != <span class="string">"root"</span> &#123;</div><div class="line">http.Error(w, http.StatusText(<span class="number">401</span>), <span class="number">401</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">cookie := &amp;http.Cookie&#123;Name: <span class="string">"username"</span>, Value: <span class="string">"root"</span>, Expires: time.Now().Add(time.Hour)&#125;</div><div class="line">http.SetCookie(w, cookie)</div><div class="line">http.Redirect(w, r, <span class="string">"/"</span>, <span class="number">302</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">home</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">username := r.Context().Value(<span class="string">"username"</span>)</div><div class="line">fmt.Fprintf(w, <span class="string">"welcome login: %s"</span>, username.(<span class="keyword">string</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 守卫</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">guard</span><span class="params">(handleFunc http.HandlerFunc)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"><span class="comment">// check username</span></div><div class="line">log.Printf(<span class="string">"%s - %s\n"</span>, r.Method, r.RequestURI)</div><div class="line">cookie, err := r.Cookie(<span class="string">"username"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || cookie == <span class="literal">nil</span> &#123; <span class="comment">// 如果username为空直接拦截</span></div><div class="line">http.Error(w, http.StatusText(<span class="number">401</span>), <span class="number">401</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">handleFunc(w, r.WithContext(context.WithValue(r.Context(), <span class="string">"username"</span>, cookie.Value)))</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>本文的代码就这么多，内容也很少，希望大家能好好用上这个利器。<br>关于context与协程超时控制将在下一篇文章中讲到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系列开篇&quot;&gt;&lt;a href=&quot;#系列开篇&quot; class=&quot;headerlink&quot; title=&quot;系列开篇&quot;&gt;&lt;/a&gt;系列开篇&lt;/h1&gt;&lt;p&gt;本文开始将针对context的用法进行系统化讨论，在这里你将能够在工作中合理使用context解决一些比较棘手的问题。&lt;/p
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="context" scheme="https//www.ddhigh.com/tags/context/"/>
    
  </entry>
  
  <entry>
    <title>io.Reader游标引发的血案</title>
    <link href="https//www.ddhigh.com/2018/10/17/go-io-reader-panic.html"/>
    <id>https//www.ddhigh.com/2018/10/17/go-io-reader-panic.html</id>
    <published>2018-10-17T13:32:03.000Z</published>
    <updated>2019-05-13T11:43:39.352Z</updated>
    
    <content type="html"><![CDATA[<p>#背景<br>线上运行了一个图片合成程序，默认的小程序二维码中奖是小程序LOGO，不满足需求，所以将微信小程序二维码和用户头像合成在一张图片。<br>由于微信图片有时候返回的Content-Type不对应（比如内容是PNG的，头确是image/jpeg）所以使用jpeg/png/gif的顺序进行图片数据解析，哪个成功就返回解析结果。</p><p>#问题<br>总是出现诸如<code>invalid JPEG format: missing SOI marker</code></p><p>#解决过程<br>我去查看jpeg.Decode的源码，如下：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *decoder)</span> <span class="title">decode</span><span class="params">(r io.Reader, configOnly <span class="keyword">bool</span>)</span> <span class="params">(image.Image, error)</span></span> &#123;</div><div class="line">d.r = r</div><div class="line"></div><div class="line"><span class="comment">// Check for the Start Of Image marker.</span></div><div class="line"><span class="keyword">if</span> err := d.readFull(d.tmp[:<span class="number">2</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> d.tmp[<span class="number">0</span>] != <span class="number">0xff</span> || d.tmp[<span class="number">1</span>] != soiMarker &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, FormatError(<span class="string">"missing SOI marker"</span>)</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>soiMarker常量<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">soiMarker</span>  = <span class="number">0</span>xd8 // Start Of Image.</div></pre></td></tr></table></figure></p><p>可以看到判断了第1个字节如果不是<code>0xff</code>或者第2个字节不是<code>0xd8</code>就报错。打印图片的bytes前几个字节如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]byte&#123;<span class="number">0xff</span>, <span class="number">0xd8</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x0</span>, <span class="number">0x10</span>&#125;</div></pre></td></tr></table></figure></p><p>可以看到第1个字节和第2个字节满足要求，按理说不会出现这个问题，无奈只能求助于Google,搜索了<br><code>invalid JPEG format: missing SOI marker</code>关键字出现一篇<a href="https://stackoverflow.com/questions/46022262/covert-base64-string-to-jpg" target="_blank" rel="external">Covert base64 string to JPG</a>引起了我的注意。<br>打开看到答案</p><blockquote><p>You need to create a new reader for each decoder:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pngI, errPng := png.Decode(bytes.NewReader(unbased))</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">jpgI, errJpg := jpeg.Decode(bytes.NewReader(unbased))</div></pre></td></tr></table></figure></p></blockquote><p>原来需要重新创建读取器，重新创建读取器后问题解决。</p><p>#后续<br>抱着打破砂锅问到底的心态，查看了一下<code>bytes.Reader</code>的源码，发现游标读取完后并未重置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Read implements the io.Reader interface.</span></div><div class="line">func (r *Reader) Read(<span class="selector-tag">b</span> []byte) (n int, err error) &#123;</div><div class="line"><span class="keyword">if</span> r<span class="selector-class">.i</span> &gt;= int64(len(r.s)) &#123;</div><div class="line">return <span class="number">0</span>, io.EOF</div><div class="line">&#125;</div><div class="line">r<span class="selector-class">.prevRune</span> = -<span class="number">1</span></div><div class="line">n = copy(<span class="selector-tag">b</span>, r<span class="selector-class">.s</span>[r<span class="selector-class">.i</span>:])</div><div class="line">r<span class="selector-class">.i</span> += int64(n)</div><div class="line">return</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Reader定义<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</div><div class="line">s        []<span class="keyword">byte</span></div><div class="line">i        <span class="keyword">int64</span> <span class="comment">// current reading index</span></div><div class="line">prevRune <span class="keyword">int</span>   <span class="comment">// index of previous rune; or &lt; 0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到<code>r.i</code>就是游标了。问题圆满解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#背景&lt;br&gt;线上运行了一个图片合成程序，默认的小程序二维码中奖是小程序LOGO，不满足需求，所以将微信小程序二维码和用户头像合成在一张图片。&lt;br&gt;由于微信图片有时候返回的Content-Type不对应（比如内容是PNG的，头确是image/jpeg）所以使用jpeg/p
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="io.Reader" scheme="https//www.ddhigh.com/tags/io-Reader/"/>
    
  </entry>
  
  <entry>
    <title>golang40行代码实现通用协程池</title>
    <link href="https//www.ddhigh.com/2018/08/08/golang-general-goroutine-pool.html"/>
    <id>https//www.ddhigh.com/2018/08/08/golang-general-goroutine-pool.html</id>
    <published>2018-08-08T03:07:25.000Z</published>
    <updated>2019-05-13T11:43:39.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h2><p><a href="https://github.com/xialeistudio/goroutine-pool" target="_blank" rel="external">goroutine-pool</a></p><h2 id="golang-的协程管理"><a href="#golang-的协程管理" class="headerlink" title="golang 的协程管理"></a>golang 的协程管理</h2><p>golang 协程机制很方便的解决了并发编程的问题，但是协程并不是没有开销的，所以也需要适当限制一下数量。</p><h3 id="不使用协程池的代码-示例代码使用-chan-实现，代码略啰嗦"><a href="#不使用协程池的代码-示例代码使用-chan-实现，代码略啰嗦" class="headerlink" title="不使用协程池的代码(示例代码使用 chan 实现，代码略啰嗦)"></a>不使用协程池的代码(示例代码使用 chan 实现，代码略啰嗦)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *converter)</span> <span class="title">upload</span><span class="params">(bytes [][]<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">4</span>)</div><div class="line">wg := &amp;sync.WaitGroup&#123;&#125;</div><div class="line">wg.Add(<span class="built_in">len</span>(bytes))</div><div class="line">ret := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(bytes))</div><div class="line"></div><div class="line"><span class="comment">// 上传</span></div><div class="line"><span class="keyword">for</span> index, item := <span class="keyword">range</span> bytes &#123;</div><div class="line">ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, imageData []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">wg.Done()</div><div class="line">&lt;-ch</div><div class="line">&#125;()</div><div class="line"></div><div class="line">link, err := qiniu.UploadBinary(imageData, fmt.Sprintf(<span class="string">"%d.png"</span>, time.Now().UnixNano()))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log.Println(<span class="string">"上传图片失败"</span>, err.Error())</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">ret[index] = link</div><div class="line">&#125;(index, item)</div><div class="line">&#125;</div><div class="line"></div><div class="line">wg.Wait()</div><div class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要实现的需求有两个:</p><ol><li>限制最大协程数，本例为 4</li><li>等待所有协程完成，本例为<code>bytes切片长度</code></li></ol><h3 id="使用协程池的代码"><a href="#使用协程池的代码" class="headerlink" title="使用协程池的代码"></a>使用协程池的代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *converter)</span> <span class="title">upload</span><span class="params">(bytes [][]<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">ret := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(bytes))</div><div class="line">pool := goroutine_pool.New(<span class="number">4</span>, <span class="built_in">len</span>(bytes))</div><div class="line"></div><div class="line"><span class="keyword">for</span> index, item := <span class="keyword">range</span> bytes &#123;</div><div class="line">index := index</div><div class="line">item := item</div><div class="line">pool.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">link, err := qiniu.UploadBinary(item, fmt.Sprintf(<span class="string">"%d.png"</span>, time.Now().UnixNano()))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">log.Println(<span class="string">"上传图片失败"</span>, err.Error())</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ret[index] = link</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line">pool.Wait()</div><div class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到最大的区别是只需要关注业务逻辑即可，并发控制和等待都已经被协程池接管</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>希望本文能减轻你控制协程的负担</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码仓库&quot;&gt;&lt;a href=&quot;#代码仓库&quot; class=&quot;headerlink&quot; title=&quot;代码仓库&quot;&gt;&lt;/a&gt;代码仓库&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/goroutine-pool&quot; targe
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="golang" scheme="https//www.ddhigh.com/tags/golang/"/>
    
      <category term="goroutine" scheme="https//www.ddhigh.com/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>golang不到30行代码实现依赖注入</title>
    <link href="https//www.ddhigh.com/2018/07/24/golang-dependency-inject-container.html"/>
    <id>https//www.ddhigh.com/2018/07/24/golang-dependency-inject-container.html</id>
    <published>2018-07-24T10:32:51.000Z</published>
    <updated>2019-05-13T11:43:39.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/di-demo" target="_blank" rel="external">go-di-demo</a></p><h2 id="本项目依赖"><a href="#本项目依赖" class="headerlink" title="本项目依赖"></a>本项目依赖</h2><p>使用标准库实现，无额外依赖</p><h2 id="依赖注入的优势"><a href="#依赖注入的优势" class="headerlink" title="依赖注入的优势"></a>依赖注入的优势</h2><p>用java的人对于spring框架一定不会陌生，spring核心就是一个IoC(控制反转/依赖注入)容器，带来一个很大的优势是解耦。一般只依赖容器，而不依赖具体的类，当你的类有修改时，最多需要改动一下容器相关代码，业务代码并不受影响。</p><h2 id="golang的依赖注入原理"><a href="#golang的依赖注入原理" class="headerlink" title="golang的依赖注入原理"></a>golang的依赖注入原理</h2><p>总的来说和java的差不多，步骤如下：(golang不支持动态创建对象，所以需要先手动创建对象然后注入，java可以直接动态创建对象)</p><ol><li>通过反射读取对象的依赖(golang是通过tag实现)</li><li>在容器中查找有无该对象实例</li><li>如果有该对象实例或者创建对象的工厂方法，则注入对象或使用工厂创建对象并注入</li><li>如果无该对象实例，则报错</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一个典型的容器实现如下，依赖类型参考了spring的singleton/prototype，分别对象单例对象和实例对象:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> di</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"reflect"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line"><span class="string">"errors"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">ErrFactoryNotFound = errors.New(<span class="string">"factory not found"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> factory = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span></div><div class="line"><span class="function">// 容器</span></div><div class="line"><span class="function"><span class="title">type</span> <span class="title">Container</span> <span class="title">struct</span></span> &#123;</div><div class="line">sync.Mutex</div><div class="line">singletons <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">factories  <span class="keyword">map</span>[<span class="keyword">string</span>]factory</div><div class="line">&#125;</div><div class="line"><span class="comment">// 容器实例化</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewContainer</span><span class="params">()</span> *<span class="title">Container</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;Container&#123;</div><div class="line">singletons: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;),</div><div class="line">factories:  <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]factory),</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 注册单例对象</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">SetSingleton</span><span class="params">(name <span class="keyword">string</span>, singleton <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">p.Lock()</div><div class="line">p.singletons[name] = singleton</div><div class="line">p.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取单例对象</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">GetSingleton</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line"><span class="keyword">return</span> p.singletons[name]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取实例对象</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">GetPrototype</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line">factory, ok := p.factories[name]</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrFactoryNotFound</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> factory()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置实例对象工厂</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">SetPrototype</span><span class="params">(name <span class="keyword">string</span>, factory factory)</span></span> &#123;</div><div class="line">p.Lock()</div><div class="line">p.factories[name] = factory</div><div class="line">p.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 注入依赖</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">Ensure</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</div><div class="line">elemType := reflect.TypeOf(instance).Elem()</div><div class="line">ele := reflect.ValueOf(instance).Elem()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; elemType.NumField(); i++ &#123; <span class="comment">// 遍历字段</span></div><div class="line">fieldType := elemType.Field(i)</div><div class="line">tag := fieldType.Tag.Get(<span class="string">"di"</span>) <span class="comment">// 获取tag</span></div><div class="line">diName := p.injectName(tag)</div><div class="line"><span class="keyword">if</span> diName == <span class="string">""</span> &#123;</div><div class="line"><span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> (</div><div class="line">diInstance <span class="keyword">interface</span>&#123;&#125;</div><div class="line">err        error</div><div class="line">)</div><div class="line"><span class="keyword">if</span> p.isSingleton(tag) &#123;</div><div class="line">diInstance = p.GetSingleton(diName)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> p.isPrototype(tag) &#123;</div><div class="line">diInstance, err = p.GetPrototype(diName)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> diInstance == <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> errors.New(diName + <span class="string">" dependency not found"</span>)</div><div class="line">&#125;</div><div class="line">ele.Field(i).Set(reflect.ValueOf(diInstance))</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取需要注入的依赖名称</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">injectName</span><span class="params">(tag <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">tags := strings.Split(tag, <span class="string">","</span>)</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tags) == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> tags[<span class="number">0</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 检测是否单例依赖</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">isSingleton</span><span class="params">(tag <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">tags := strings.Split(tag, <span class="string">","</span>)</div><div class="line"><span class="keyword">for</span> _, name := <span class="keyword">range</span> tags &#123;</div><div class="line"><span class="keyword">if</span> name == <span class="string">"prototype"</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 检测是否实例依赖</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">isPrototype</span><span class="params">(tag <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">tags := strings.Split(tag, <span class="string">","</span>)</div><div class="line"><span class="keyword">for</span> _, name := <span class="keyword">range</span> tags &#123;</div><div class="line"><span class="keyword">if</span> name == <span class="string">"prototype"</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 打印容器内部实例</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Container)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">lines := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(p.singletons)+<span class="built_in">len</span>(p.factories)+<span class="number">2</span>)</div><div class="line">lines = <span class="built_in">append</span>(lines, <span class="string">"singletons:"</span>)</div><div class="line"><span class="keyword">for</span> name, item := <span class="keyword">range</span> p.singletons &#123;</div><div class="line">line := fmt.Sprintf(<span class="string">"  %s: %x %s"</span>, name, &amp;item, reflect.TypeOf(item).String())</div><div class="line">lines = <span class="built_in">append</span>(lines, line)</div><div class="line">&#125;</div><div class="line">lines = <span class="built_in">append</span>(lines, <span class="string">"factories:"</span>)</div><div class="line"><span class="keyword">for</span> name, item := <span class="keyword">range</span> p.factories &#123;</div><div class="line">line := fmt.Sprintf(<span class="string">"  %s: %x %s"</span>, name, &amp;item, reflect.TypeOf(item).String())</div><div class="line">lines = <span class="built_in">append</span>(lines, line)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> strings.Join(lines, <span class="string">"\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>最重要的是<code>Ensure</code>方法，该方法扫描实例的所有export字段，并读取di标签，如果有该标签则启动注入。</li><li>判断di标签的类型来确定注入singleton或者prototype对象</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>单例对象在整个容器中只有一个实例，所以不管在何处注入，获取到的指针一定是一样的。</li><li>实例对象是通过同一个工厂方法创建的，所以每个实例的指针不可以相同。</li></ol><p>下面是测试入口代码，完整代码在github仓库，有兴趣的可以翻阅：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"di"</span></div><div class="line"><span class="string">"database/sql"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line"><span class="string">"demo"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">container := di.NewContainer()</div><div class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:root@tcp(localhost)/sampledb"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"error: %s\n"</span>, err.Error())</div><div class="line">os.Exit(<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line">container.SetSingleton(<span class="string">"db"</span>, db)</div><div class="line">container.SetPrototype(<span class="string">"b"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line"><span class="keyword">return</span> demo.NewB(), <span class="literal">nil</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">a := demo.NewA()</div><div class="line"><span class="keyword">if</span> err := container.Ensure(a); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 打印指针，确保单例和实例的指针地址</span></div><div class="line">fmt.Printf(<span class="string">"db: %p\ndb1: %p\nb: %p\nb1: %p\n"</span>, a.Db, a.Db1, &amp;a.B, &amp;a.B1)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行之后打印出来的结果为：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">db:</span> <span class="number">0xc4200b6140</span></div><div class="line"><span class="symbol">db1:</span> <span class="number">0xc4200b6140</span></div><div class="line"><span class="symbol">b:</span> <span class="number">0xc4200a0330</span></div><div class="line"><span class="symbol">b1:</span> <span class="number">0xc4200a0338</span></div></pre></td></tr></table></figure><p>可以看到两个db实例的指针一样，说明是同一个实例，而两个b的指针不同，说明不是一个实例。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>通过依赖注入可以很好的管理多个对象之间的实例化以及依赖关系，配合配置文件在应用初始化阶段将需要注入的实例注册到容器中，在应用的任何地方只需要在实例化时注入容器即可。没有额外依赖。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/di-demo&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="di" scheme="https//www.ddhigh.com/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>不到20行代码实现golang路由调度</title>
    <link href="https//www.ddhigh.com/2018/07/23/golang-route-dispatcher.html"/>
    <id>https//www.ddhigh.com/2018/07/23/golang-route-dispatcher.html</id>
    <published>2018-07-23T13:44:05.000Z</published>
    <updated>2019-05-13T11:43:39.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/go-dispatcher" target="_blank" rel="external">go-dispatcher</a></p><h2 id="本项目依赖"><a href="#本项目依赖" class="headerlink" title="本项目依赖"></a>本项目依赖</h2><p>使用标准库实现，无额外依赖</p><h2 id="为什么需要路由调度层"><a href="#为什么需要路由调度层" class="headerlink" title="为什么需要路由调度层"></a>为什么需要路由调度层</h2><blockquote><p>golang http标准库只能精确匹配请求的URI，然后执行handler。现在一般web项目都至少有个Controller层，以struct实现，根据不同的请求路径派发到不同的方法中去。</p></blockquote><h2 id="路由调度器定义"><a href="#路由调度器定义" class="headerlink" title="路由调度器定义"></a>路由调度器定义</h2><p>由于golang暂时还不可以动态创建对象(比如java的<code>Class.forName(&quot;xxx&quot;).newInstance()</code>,xxx是任意存在的class名称)。所以需要手动注册一下controller关系。</p><ol><li>定义<code>routes</code>保存controller指针</li><li>解析请求过来的URL查询参数，暂定<code>a</code>为<code>action名称</code>,<code>c</code>为<code>controller名称</code>，本文偷了下懒，没对PATH_INFO做处理，也没有对actionName的首字母自动大写，这个不影响本文要传达的核心内容，有兴趣的读者可以自行实现。</li><li>根据URL中的<code>controllerName</code>找到对应的controller</li><li>使用反射将当前请求对象的<code>*http.Request</code>和<code>http.ResponseWriter</code>设置到该Controller</li><li>使用反射以及actionName对应该controller的方法</li></ol><blockquote><p>由于golang的继承不是一般的OOP，所以也没有父子类这种说法，路由注册那里只能使用interface{}</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="app-app-go"><a href="#app-app-go" class="headerlink" title="app/app.go"></a>app/app.go</h3><p>该文件为核心调度文件</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> app</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"reflect"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> application <span class="keyword">struct</span> &#123;</div><div class="line">routes <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">application</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;application&#123;</div><div class="line">routes: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;),</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">controllerName := r.URL.Query().Get(<span class="string">"c"</span>)</div><div class="line">actionName := r.URL.Query().Get(<span class="string">"a"</span>)</div><div class="line"><span class="keyword">if</span> controllerName == <span class="string">""</span> || actionName == <span class="string">""</span> &#123;</div><div class="line">http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">route, ok := p.routes[controllerName]</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line">http.Error(w, <span class="string">"Controller Not Found"</span>, http.StatusNotFound)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">ele := reflect.ValueOf(route).Elem()</div><div class="line">ele.FieldByName(<span class="string">"Request"</span>).Set(reflect.ValueOf(r))</div><div class="line">ele.FieldByName(<span class="string">"Response"</span>).Set(reflect.ValueOf(w))</div><div class="line">ele.MethodByName(actionName).Call([]reflect.Value&#123;&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">printRoutes</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> route, controller := <span class="keyword">range</span> p.routes &#123;</div><div class="line">ele := reflect.ValueOf(controller).Type().String()</div><div class="line">fmt.Printf(<span class="string">"%s %s\n"</span>, route, ele)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">Get</span><span class="params">(route <span class="keyword">string</span>, controller <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">p.routes[route] = controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *application)</span> <span class="title">Run</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">p.printRoutes()</div><div class="line">fmt.Printf(<span class="string">"listen on %s\n"</span>, addr)</div><div class="line"><span class="keyword">return</span> http.ListenAndServe(addr, p)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="app-controller-go"><a href="#app-controller-go" class="headerlink" title="app/controller.go"></a>app/controller.go</h3><p>控制器”基类”</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> app</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Controller <span class="keyword">struct</span> &#123;</div><div class="line">Response http.ResponseWriter</div><div class="line">Request  *http.Request</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="controller-site-go"><a href="#controller-site-go" class="headerlink" title="controller/site.go"></a>controller/site.go</h3><p>具体业务逻辑类</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controllers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"app"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> SiteController <span class="keyword">struct</span> &#123;</div><div class="line">app.Controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p SiteController)</span> <span class="title">Index</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Fprint(p.Response, p.Request.RequestURI)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h3><p>入口文件</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line"><span class="string">"app"</span></div><div class="line"><span class="string">"controllers"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">application := app.New()</div><div class="line">application.Get(<span class="string">"site"</span>, &amp;controllers.SiteController&#123;&#125;)</div><div class="line">application.Run(<span class="string">":8080"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ol><li>启动进程</li><li>访问<code>http://localhost:8080?c=site&amp;a=Index</code>会输出<code>/?c=site&amp;a=Index</code></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>希望这个小小的项目能启发到各位读者，早日开发出适合自己的Web框架!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/go-dispatcher&quot; target
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="http" scheme="https//www.ddhigh.com/tags/http/"/>
    
      <category term="router" scheme="https//www.ddhigh.com/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>redis常用实践</title>
    <link href="https//www.ddhigh.com/2018/06/14/redis-common-practice.html"/>
    <id>https//www.ddhigh.com/2018/06/14/redis-common-practice.html</id>
    <published>2018-06-14T13:49:52.000Z</published>
    <updated>2019-05-13T11:43:39.351Z</updated>
    
    <content type="html"><![CDATA[<p>Redis相信大家都不陌生，而如果只是用来取代memcached做缓存的话，实在是大材小用了。一起来看看生产环境下的常用用法。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$canLock = $redis-&gt;set(<span class="string">'k'</span>, <span class="number">1</span>, <span class="string">'NX'</span>, <span class="string">'EX'</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">if</span>($canLock) &#123;</div><div class="line">    <span class="comment">// 获得锁成功</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>锁定键名为k的数据两秒钟，两秒后该方法才能重新获取锁</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;del(<span class="string">'k'</span>);</div></pre></td></tr></table></figure><p>删除键名为k的数据，其他方法可以重新获取锁</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>这是redis特有的数据结构，memcached没有。使用场景很多，列举一种常用的，假设有一个需求</p><blockquote><p>加密后的用户id和真实用户id的映射关系保存</p></blockquote><p>这种情况我们可以使用hash，而不是使用多个kv缓存, 需要清空所有的时候比较难处理。代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$realId = $redis-&gt;hget(<span class="string">'user_id_map'</span>, <span class="string">'userId1'</span>);</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($realId)) &#123;</div><div class="line">    <span class="keyword">return</span> $realId;</div><div class="line">&#125;</div><div class="line">$realId = getFromDatabase(<span class="string">'userId1'</span>); <span class="comment">// 从数据库读取</span></div><div class="line">$redis-&gt;hset(<span class="string">'user_id_map'</span>,<span class="string">'userId1'</span>,$realId);</div></pre></td></tr></table></figure><p>如果需要清空，则直接删除hash即可。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set就是数据项不重复的集合，使用场景也很多。例子要说的是使用set存储一个聊天室中的所有用户id:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;sadd(<span class="string">'chat_room'</span>, <span class="string">'user1'</span>, <span class="string">'user2'</span>); <span class="comment">// 添加成员到集合</span></div><div class="line">$redis-&gt;srem(<span class="string">'chat_room'</span>, <span class="string">'user1'</span>); <span class="comment">// 删除指定成员</span></div><div class="line">$redis-&gt;smembers(<span class="string">'chat_room'</span>); <span class="comment">// 获取集合所有元素</span></div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p> 大致就是这样了，基于这些简单数据结构可以根据业务需求构造更合理的数据结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Redis相信大家都不陌生，而如果只是用来取代memcached做缓存的话，实在是大材小用了。一起来看看生产环境下的常用用法。&lt;/p&gt;
&lt;h2 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="redis" scheme="https//www.ddhigh.com/tags/redis/"/>
    
      <category term="php" scheme="https//www.ddhigh.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PermissionScope Swift4 兼容问题</title>
    <link href="https//www.ddhigh.com/2018/06/14/PermissionScope-With-Swift-4.html"/>
    <id>https//www.ddhigh.com/2018/06/14/PermissionScope-With-Swift-4.html</id>
    <published>2018-06-14T13:41:15.000Z</published>
    <updated>2019-05-13T11:43:39.351Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nickoneill/PermissionScope" target="_blank" rel="external">PermissionScope</a>是iOS非常好用的权限处理库，界面效果也非常精美。不幸的是作者已经停止维护。</p><blockquote><p>PermissionScope is no longer supported. Please use an alternative if you need updates for newer iOS 10 and 11 APIs!</p></blockquote><h2 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h2><p>因为作者是基于Swift3开发的，而4.0的<code>@selector</code>语法有一点调整，所以是不能通过编译的，处理办法是根据Xcode的提示一个个修正。</p><p>可是事情真的这么简单吗？Xcode处理过后虽然编译通过了，但是会触发运行时错误。错误内容大致是<code>调用了不存在的方法</code>。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由于我们根据Xcode的提示给相关代码加了<code>@objc</code>，但是有些方法是没有加的，而这些方法类似下面的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestCamera</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于没有<code>@objc</code>修饰，<code>@selector</code>指令找不到方法，所以就报错了。解决方案如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestCamera</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/nickoneill/PermissionScope&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PermissionScope&lt;/a&gt;是iOS非常好用的权限处理库，界面效果也非常精美。不幸的是作者
      
    
    </summary>
    
      <category term="ios" scheme="https//www.ddhigh.com/categories/ios/"/>
    
    
      <category term="ios" scheme="https//www.ddhigh.com/tags/ios/"/>
    
      <category term="permission" scheme="https//www.ddhigh.com/tags/permission/"/>
    
      <category term="swift" scheme="https//www.ddhigh.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>使用yii2依赖注入规范业务开发</title>
    <link href="https//www.ddhigh.com/2018/04/24/yii2-dependency-inject.html"/>
    <id>https//www.ddhigh.com/2018/04/24/yii2-dependency-inject.html</id>
    <published>2018-04-24T14:18:04.000Z</published>
    <updated>2019-05-13T11:43:39.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文代码"><a href="#本文代码" class="headerlink" title="本文代码"></a>本文代码</h2><p><a href="https://github.com/xialeistudio/yii2-di-demo" target="_blank" rel="external">https://github.com/xialeistudio/yii2-di-demo</a></p><h2 id="什么是依赖注入-DI"><a href="#什么是依赖注入-DI" class="headerlink" title="什么是依赖注入(DI)?"></a>什么是依赖注入(DI)?</h2><p>对象由框架来创建而不是程序员通过 <strong>new</strong> 创建。跟IoC差不多一个意思。</p><h2 id="为什么要有依赖注入"><a href="#为什么要有依赖注入" class="headerlink" title="为什么要有依赖注入?"></a>为什么要有依赖注入?</h2><ol><li>解耦。调用方不再通过 <strong>new</strong> 运算符实例化被调用对象，而通过框架(IoC容器)创建之后注入进来。解除了调用者与被调用者之间的依赖。</li><li>有利于面向接口编程。个人认为OOP程序设计最重要的就是面向接口(面向抽象)编程。因为有了第1步的关系，调用者只需要依赖接口类型而不用依赖实现类型，提高了程序的扩展性。</li></ol><h2 id="Yii2的依赖注入"><a href="#Yii2的依赖注入" class="headerlink" title="Yii2的依赖注入"></a>Yii2的依赖注入</h2><p>Yii2通过 <a href="http://www.yiichina.com/doc/api/2.0/yii-di-container" target="_blank" rel="external">yii\di\Container</a> 提供DI容器特性。目前支持一下4种方式注入：</p><ol><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">构造方法注入</a></li><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">方法注入</a></li><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">Setter和属性注入</a></li><li><a href="http://www.yiichina.com/doc/guide/2.0/concept-di-container#constructor-injection" target="_blank" rel="external">PHP回调注入</a></li></ol><h2 id="注册依赖关系"><a href="#注册依赖关系" class="headerlink" title="注册依赖关系"></a>注册依赖关系</h2><ol><li>通过容器的 <strong>set</strong> 方法注入</li><li>通过配置文件注入(推荐)</li></ol><h2 id="依赖注入实战"><a href="#依赖注入实战" class="headerlink" title="依赖注入实战"></a>依赖注入实战</h2><ol><li><p>打开终端，执行以下命令初始化项目：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic basic</div></pre></td></tr></table></figure></li><li><p>声明接口业务类 <strong>app\services\UserService</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by PhpStorm.</span></div><div class="line"><span class="comment">* User: xialei</span></div><div class="line"><span class="comment">* Date: 2018/4/24</span></div><div class="line"><span class="comment">* Time: 下午10:55</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">services</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 用户业务类</span></div><div class="line"><span class="comment">* Interface UserService</span></div><div class="line"><span class="comment">* <span class="doctag">@package</span> app\services</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 根据ID查询用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> integer $id</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array|null</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看所有用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>接口实现文件 <strong>app\services\impl\UserServiceImpl</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by PhpStorm.</span></div><div class="line"><span class="comment">* User: xialei</span></div><div class="line"><span class="comment">* Date: 2018/4/24</span></div><div class="line"><span class="comment">* Time: 下午10:56</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">impl</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">UserService</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $users = [</div><div class="line">        [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'xialei'</span>],</div><div class="line">        [<span class="string">'id'</span> =&gt; <span class="number">2</span>, <span class="string">'name'</span> =&gt; <span class="string">'zhangsan'</span>],</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 根据ID查询用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> integer $id</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;users <span class="keyword">as</span> $user) &#123;</div><div class="line">            <span class="keyword">if</span> ($user[<span class="string">'id'</span>] == $id) &#123;</div><div class="line">                <span class="keyword">return</span> $user;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看所有用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>注册依赖关系 <strong>config/web.php</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">UserService</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">impl</span>\<span class="title">UserServiceImpl</span>;</div><div class="line"></div><div class="line">$params = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/params.php'</span>;</div><div class="line">$db = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/db.php'</span>;</div><div class="line"></div><div class="line">$config = [</div><div class="line">    <span class="string">'id'</span> =&gt; <span class="string">'basic'</span>,</div><div class="line">    <span class="string">'basePath'</span> =&gt; dirname(<span class="keyword">__DIR__</span>),</div><div class="line">    <span class="string">'bootstrap'</span> =&gt; [<span class="string">'log'</span>],</div><div class="line">    <span class="string">'aliases'</span> =&gt; [</div><div class="line">        <span class="string">'@bower'</span> =&gt; <span class="string">'@vendor/bower-asset'</span>,</div><div class="line">        <span class="string">'@npm'</span> =&gt; <span class="string">'@vendor/npm-asset'</span>,</div><div class="line">    ],</div><div class="line">    <span class="string">'container'</span> =&gt; [</div><div class="line">        <span class="string">'definitions'</span> =&gt; [</div><div class="line">            UserService::class =&gt; UserServiceImpl::class</div><div class="line">        ]</div><div class="line">    ],</div><div class="line">    <span class="string">'components'</span> =&gt; [</div><div class="line">        <span class="string">'request'</span> =&gt; [</div><div class="line">            <span class="comment">// !!! insert a secret key in the following (if it is empty) - this is required by cookie validation</span></div><div class="line">            <span class="string">'cookieValidationKey'</span> =&gt; <span class="string">'0xGrStOOZE2oXxNNiu-o2eYovJ_Ia1Dk'</span>,</div><div class="line">        ],</div><div class="line">        <span class="string">'response'</span> =&gt; [</div><div class="line">            <span class="string">'format'</span> =&gt; <span class="string">'json'</span></div><div class="line">        ],</div><div class="line">        <span class="string">'errorHandler'</span> =&gt; [</div><div class="line">            <span class="string">'errorAction'</span> =&gt; <span class="string">'site/error'</span>,</div><div class="line">        ],</div><div class="line">        <span class="string">'urlManager'</span> =&gt; [</div><div class="line">            <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">            <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</div><div class="line">            <span class="string">'rules'</span> =&gt; [</div><div class="line">            ],</div><div class="line">        ],</div><div class="line">    ],</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</div><div class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></div><div class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'debug'</span>;</div><div class="line">    $config[<span class="string">'modules'</span>][<span class="string">'debug'</span>] = [</div><div class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\debug\Module'</span>,</div><div class="line">        <span class="comment">// uncomment the following to add your IP if you are not connecting from localhost.</span></div><div class="line">        <span class="comment">//'allowedIPs' =&gt; ['127.0.0.1', '::1'],</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</div><div class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</div><div class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</div><div class="line">        <span class="comment">// uncomment the following to add your IP if you are not connecting from localhost.</span></div><div class="line">        <span class="comment">//'allowedIPs' =&gt; ['127.0.0.1', '::1'],</span></div><div class="line">    ];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> $config;</div></pre></td></tr></table></figure></li><li><p>添加控制器 <strong>app\controllers\UserController</strong></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Created by PhpStorm.</span></div><div class="line"><span class="comment">* User: xialei</span></div><div class="line"><span class="comment">* Date: 2018/4/24</span></div><div class="line"><span class="comment">* Time: 下午10:57</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">UserService</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Module</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">NotFoundHttpException</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $userService;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $id, Module $module, UserService $userService, array $config = [])</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;userService = $userService;</div><div class="line">        <span class="keyword">parent</span>::__construct($id, $module, $config);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> $id</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array|null</span></div><div class="line"><span class="comment">    * <span class="doctag">@throws</span> NotFoundHttpException</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionShow</span><span class="params">($id)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $user = <span class="keyword">$this</span>-&gt;userService-&gt;show($id);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($user)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException(<span class="string">'用户不存在'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 查看所有用户</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionAll</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userService-&gt;all();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行测试服务器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./yii serve/index</div></pre></td></tr></table></figure></li><li><p>访问用户列表接口 <a href="http://localhost:8080/user/all" target="_blank" rel="external">http://localhost:8080/user/all</a></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"xialei"</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></li><li><p>访问查看用户接口 <a href="http://localhost:8080/user/show?id=1" target="_blank" rel="external">http://localhost:8080/user/show?id=1</a></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"xialei"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如你所见，Yii2自带的IoC容器使用起来还是挺方便的，观测了Yii <strong>配置优于编码</strong> 的思想，Yii的组件基本上都可以在配置文件中进行配置而不需要手动编码。</p><p>灵活使用DI可以使我们从依赖关系中解脱出来，专注于业务逻辑。</p><p>当然，业务逻辑的组织也是一个很大的研究课题，有兴趣的可以去看看 <strong>DDD(领域驱动设计)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本文代码&quot;&gt;&lt;a href=&quot;#本文代码&quot; class=&quot;headerlink&quot; title=&quot;本文代码&quot;&gt;&lt;/a&gt;本文代码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xialeistudio/yii2-di-demo&quot; target=
      
    
    </summary>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/php/"/>
    
    
      <category term="yii2" scheme="https//www.ddhigh.com/tags/yii2/"/>
    
      <category term="di" scheme="https//www.ddhigh.com/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>golang使用travis进行持续集成</title>
    <link href="https//www.ddhigh.com/2018/04/08/golang-travis-ci.html"/>
    <id>https//www.ddhigh.com/2018/04/08/golang-travis-ci.html</id>
    <published>2018-04-08T09:40:37.000Z</published>
    <updated>2019-05-13T11:43:39.350Z</updated>
    
    <content type="html"><![CDATA[<p>虽然golang的工程工具已经非常完善了，比如测试、代码格式化等等。但是如果开发library开源到github的话，这些东西是可以使用自动化工具完成的，那就是 <a href="https://www.travis-ci.org/" target="_blank" rel="external">travis</a></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>开发好需要集成的library以及测试用例</li><li><p>在项目根目录新建<code>.travis.yml</code>文件</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">go</span></div><div class="line"><span class="attr">go:</span></div><div class="line"><span class="bullet">-</span> <span class="number">1.</span><span class="string">x</span></div><div class="line"><span class="bullet">-</span> <span class="string">'1.8'</span></div><div class="line"><span class="bullet">-</span> <span class="string">'1.9'</span></div><div class="line"><span class="bullet">-</span> <span class="number">1.10</span><span class="string">.x</span></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">-</span> <span class="string">go</span> <span class="string">test</span> <span class="bullet">-v</span> <span class="string">./...</span></div></pre></td></tr></table></figure></li><li><p>提交到github</p></li><li>打开<a href="https://www.travis-ci.org/" target="_blank" rel="external">https://www.travis-ci.org/</a>并使用github账号登录</li><li>登录之后点击左边 <strong>“My Repositories”</strong> 旁边的 <strong>“+”</strong> 号添加项目（点击项目前面的滑块即可）</li><li>更改项目文件，push一次到github，此时travis会自动运行测试脚本</li></ol><h2 id="敏感数据加密"><a href="#敏感数据加密" class="headerlink" title="敏感数据加密"></a>敏感数据加密</h2><p>如果你的测试用例需要使用到敏感数据（如一些密钥等等），那需要用travis将你的敏感数据加密(以Mac为例)</p><ol><li>终端执行<code>sudo gem install travis</code></li><li>在项目根目录打开终端执行<code>travis encrypt AMAP_KEY=&quot;xxxx&quot; --add</code> <strong>AMAP_KEY</strong>是环境变量名称，程序读取环境变量可以得到真实的key，<strong>xxxx</strong>是敏感数据</li><li><p>执行完毕后，<strong>.travis.yml</strong> 会发生更改, 会添加如下内容(secure可能不一致)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">env:</span></div><div class="line"><span class="attr">global:</span></div><div class="line"><span class="attr">    secure:</span> <span class="string">kr5JHNTYsh/jezvk88qP91arb+UD/op/5CyOFY7uNYpJ6ZSsJY5fDKyZHjf0VSFmaYqJFMPl6uCASE9baiepeGvBFcy8aI9CNsbLzj2uBNjqqYPmvYGnBjpzp8yknVJKRTitF/kkWtzZcWImHnpvNGHuzXxp/EIBeJtNwjcCRoP/qfGhlZKbLsYFvlWkmRYb0dr8RM5mlmGXPZi8q7m+soVRO8Zjr4QQccybgmhonxlcUrHr6ro+yjjQefoJXRufqoRX0sGyecGYucC4nUpWl5hkDPkQE+Mekhz+rF657SwNsn8nXOFnnUuwsPXE26ak5xF1roEcFk2CpwGZuT7smJZPtw1inXFdIaW+4qllbyxMJkylvFZa5IcvLT3+/eKaQc8Fg6PoxJH0PF3RdtoQVB31cQiPWNm1SecQ6wC64WA/5qN4T5OoRfpt60BFDAITdS62dQGu5LSepcXMWXhxCdQPeDm5Qce6wjJXURubJMpBm0mPWwCNZhJyRw1G5TTyO25NckXQRlObrjltvwAd+7OEUcsYXqhdPtUTIVy6w3XOwT2eC/hP0Yi7qqUMMlJTHUW7Lb9zsEc4UB5BVwgeZ5Y9bVbknJfpt3ygcXAJeeDYxwV9g16KoS7HMFPzwrqlHbiBytIahqarBd4enwqR5RYQPEyetiIDLaJA4SyQ0cE=</span></div></pre></td></tr></table></figure></li><li><p>上传到github</p></li></ol><h2 id="接收测试结果通知"><a href="#接收测试结果通知" class="headerlink" title="接收测试结果通知"></a>接收测试结果通知</h2><p>如果你需要获取travis执行结果通知的话，可以添加邮箱配置，travis执行完毕后会通知到该邮箱。</p><ol><li>打开 <strong>.travis.yml</strong></li><li><p>添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">notifications:</span></div><div class="line"><span class="attr">  email:</span></div><div class="line"><span class="attr">    recipients:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">邮箱地址</span></div><div class="line"><span class="attr">    on_success:</span> <span class="string">change</span></div><div class="line"><span class="attr">    on_failure:</span> <span class="string">always</span></div></pre></td></tr></table></figure></li><li><p>提交到github</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然golang的工程工具已经非常完善了，比如测试、代码格式化等等。但是如果开发library开源到github的话，这些东西是可以使用自动化工具完成的，那就是 &lt;a href=&quot;https://www.travis-ci.org/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="golang" scheme="https//www.ddhigh.com/categories/golang/"/>
    
    
      <category term="travis" scheme="https//www.ddhigh.com/tags/travis/"/>
    
      <category term="ci" scheme="https//www.ddhigh.com/tags/ci/"/>
    
  </entry>
  
</feed>
