<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2019-09-16T10:56:12.612Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode(3)——无重复字符的最长子串</title>
    <link href="https//www.ddhigh.com/2019/09/16/leetcode-longest-substring-without-repeating-characters.html"/>
    <id>https//www.ddhigh.com/2019/09/16/leetcode-longest-substring-without-repeating-characters.html</id>
    <published>2019-09-16T10:34:58.000Z</published>
    <updated>2019-09-16T10:56:12.612Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎跟着夏老师一起学习算法。</p><p>关注公众号可以进行交流和加入微信群，群内定期有系列文章分享噢！</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><p>[TOC]</p><h2><span id="question">Question</span></h2><blockquote><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p></blockquote><p><strong>示例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;abcabcbb&quot;</div><div class="line">输出: 3 </div><div class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</div></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;bbbbb&quot;</div><div class="line">输出: 1</div><div class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</div></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: &quot;pwwkew&quot;</div><div class="line">输出: 3</div><div class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</div><div class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</div></pre></td></tr></table></figure><h2><span id="遍历法">遍历法</span></h2><blockquote><p>最容易想到的一种算法，也是效率最低的一种算法</p><ol><li>通过两次遍历得到所有可能的 <strong>子字符串</strong> 列表</li><li>将每个字符串传入一个函数检测是否包含重复字符，如果不包含则更新最长子串的长度</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断给定的子串是否包含重复字符</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUnique</span>(<span class="params">str, start, end</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> chars = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</div><div class="line">    <span class="keyword">const</span> char = str[i];</div><div class="line">    <span class="keyword">if</span>(chars.indexOf(char) !== <span class="number">-1</span>) &#123; <span class="comment">// 字符已存在，本字符串不符合条件</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    chars.push(char); <span class="comment">// 添加字符</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取字符串最长子串长度</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt;= s.length; j++) &#123;</div><div class="line">      <span class="keyword">if</span>(isUnique(s, i, j)) &#123; <span class="comment">// 判断子串是否唯一</span></div><div class="line">        max = <span class="built_in">Math</span>.max(max, j - i); <span class="comment">// j - i 为当前子串长度</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度$O(n^3)$</p><blockquote><p>i循环，j循环，isUnquie中的循环，3次循还嵌套</p></blockquote><p>空间复杂度$O(min(n,m))$</p><blockquote><p>isUnique函数中定义了一个数组来存储不重复的子串字符，长度为$k$,$k$的长度取决于字符串$s$的大小$n$以及 字符串$s$包含的不重复字符数大小$m$</p></blockquote><h2><span id="滑动窗口法">滑动窗口法</span></h2><blockquote><p>暴力法中我们会重复检查一个子串是否包含重复的字符，如果从$i$ ~ $j-1$ 之间的子串已经被检查过没有重复字符了，那么只需要检查$s[j]$是否在这个子串就行了。</p><p>子串使用js自带的数据结构Set存储</p><p>如果不在该子串，那么子串长度+1，$j+1$，继续往后走</p><p>如果在这个子串，证明出现了重复，我们需要将$s[i]$移出来之后$i+1$，继续往后走</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">  <span class="keyword">const</span> max = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">while</span>(i &lt; s.length &amp;&amp; j &lt; s.length) &#123;</div><div class="line">    <span class="keyword">if</span>(!set.has(s[j])) &#123; <span class="comment">// j 不在set中，set中添加s[j],j后移，同时更新最大子串长度</span></div><div class="line">      set.add(s[j]);</div><div class="line">     j++;</div><div class="line">      max = <span class="built_in">Math</span>.max(max, j - i);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      set.delete(s[i]); <span class="comment">// 移除set左边的数据，i后移一位</span></div><div class="line">      i++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度 $O(2n) \approx O(n)$</p><blockquote><p>最好的情况是j一次走完没有出现重复，最坏的情况是i和j都走到了末尾</p></blockquote><p>空间复杂度 $O(min(n,m))$</p><blockquote><p>与暴力法相似，也需要一个Set存储不重复字符，$n$ 是字符串$s$长度，$m$是字符串$s$中不重复的字母个数</p></blockquote><h2><span id="优化的滑动窗口">优化的滑动窗口</span></h2><blockquote><p>在滑动窗口解法中，$i$的后移可以优化一下，如果 s$[j]$ 在 s[$i$] ~ s[$j$] 内与字符 $c$ (随便取的名字)重复，$i$ 不需要一步一步$i$++，直接把 $i$ 定位到 $c$ + 1的位置即可。这样可以将算法时间复杂度稳定在 $O(n)$</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">s</span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> map = &#123;&#125;; <span class="comment">// 保存 字符和下标的映射关系，如果字符重复，从map拿到位置，i直接跳到这个位置</span></div><div class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>;j &lt; s.length;j++) &#123;</div><div class="line">    <span class="keyword">const</span> char = s[j];</div><div class="line">    <span class="keyword">if</span>(map[char] !== <span class="literal">undefined</span>) &#123; <span class="comment">// 当前字符存在重复，需要将i更新</span></div><div class="line">      i = <span class="built_in">Math</span>.max(i, map[char]); <span class="comment">// 如果i的当前位置大于map[char]，不能更新为map[char]</span></div><div class="line">    &#125;</div><div class="line">    max = <span class="built_in">Math</span>.max(max, j - i + <span class="number">1</span>); <span class="comment">// 由于j最大是s.length-1，所以最大子串长度需要+1</span></div><div class="line">    map[char] = j + <span class="number">1</span>; <span class="comment">// 保存映射关系</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度 $O(n)$</p><blockquote><p>只遍历了j</p></blockquote><p>空间复杂度 $O(min(n,m))$</p><blockquote><p>与之前的方法相同</p></blockquote><p>Q: 为什么第8行的 <code>i = Math.max(i, map[char])</code> 不能直接是 <code>i = map[char]</code>?</p><p>A: $i$ 的位置比<code>map[char]</code>大的情况下如果直接赋值会导致 $i$ 往前面走，会导致返回的子串长度大于实际的子串长度</p><p>错误例子 <code>abba</code></p><table><thead><tr><th>i</th><th>j</th><th>s[j]</th><th>s[i] ~ s[j]</th><th>Max</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>a</td><td>a</td><td>1</td></tr><tr><td>0</td><td>1</td><td>b</td><td>ab</td><td>2</td></tr><tr><td>2(map中没有s[j]，所以这里的位置直接是当前j的值)</td><td>2</td><td>b</td><td>b</td><td>2</td></tr><tr><td>1(map中有s[j]，第1个字符就是a，直接拿来用)</td><td>3</td><td>a</td><td>bba</td><td>3</td></tr></tbody></table><p>可以看到第4次循环中 i 的位置已经出现了问题，把位置1的a拿过来进行计算了，窗口的起始左边也从2变成了1，往回走了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎跟着夏老师一起学习算法。&lt;/p&gt;
&lt;p&gt;关注公众号可以进行交流和加入微信群，群内定期有系列文章分享噢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2019-08-26-060638.jpg&quot; alt=&quot;img&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="leetcode" scheme="https//www.ddhigh.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode(2) —— 两数相加</title>
    <link href="https//www.ddhigh.com/2019/09/12/leetcode-add-two-sum.html"/>
    <id>https//www.ddhigh.com/2019/09/12/leetcode-add-two-sum.html</id>
    <published>2019-09-12T15:16:28.000Z</published>
    <updated>2019-09-12T15:19:52.976Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎跟着夏老师一起学习算法，这方面我自己的基础很薄弱，所以解题方法和思路也会讲的很”小白“，不需要什么基础就能看懂。</p><p>关注公众号可以进行交流和加入微信群，群内定期有系列文章分享噢！</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><h2><span id="目录">目录</span></h2><!-- toc --><ul><li><a href="#question">Question</a></li><li><a href="#分析">分析</a><ul><li><a href="#边界情况">边界情况</a></li></ul></li><li><a href="#解题方法">解题方法</a></li><li><a href="#结尾">结尾</a></li></ul><!-- tocstop --><h2><span id="question">Question</span></h2><blockquote><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line">输出：7 -&gt; 0 -&gt; 8</div><div class="line">原因：342 + 465 = 807</div></pre></td></tr></table></figure><h2><span id="分析">分析</span></h2><p>遍历两个链表把值加起来好之后插入链表，如果有进位的话需要把进位的值保存到后面的节点上，如果遍历完毕之后还剩下需要进位的值，那么需要插入末尾新节点。</p><h3><span id="边界情况">边界情况</span></h3><p>遇到链表相关的题目时一定要处理好边界情况，因为有些为空的链表或者只有1个节点的链表没有处理的必要，及时返回可以降低算法复杂度。</p><ol><li>链表1和链表2同时为空，直接返回undefined即可</li><li>链表1为空，返回链表2</li><li>链表2为空，返回链表1</li></ol><h2><span id="解题方法">解题方法</span></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 链表节点定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.val = val;</div><div class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params">l1, l2</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!l1 &amp;&amp; !l2) &#123; <span class="comment">// 链表1和链表2同时为空，无需任何处理</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(!l1) &#123; <span class="comment">// 链表1为空，直接返回链表2</span></div><div class="line">    <span class="keyword">return</span> l2;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(!l2) &#123; <span class="comment">// 链表2为空，直接返回链表1</span></div><div class="line">    <span class="keyword">return</span> l1;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>; <span class="comment">// 进位值</span></div><div class="line">  <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">// 链表头节点</span></div><div class="line">  <span class="keyword">let</span> p = head; <span class="comment">// 链表移动指针</span></div><div class="line">  </div><div class="line">  <span class="keyword">while</span>(l1 || l2 || carry &gt; <span class="number">0</span>) &#123; <span class="comment">// l1和l2虽然不会同时为空，但是存在l1和l2长度不一致的情况， 这种也需要处理</span></div><div class="line">    <span class="keyword">let</span> sum = carry; <span class="comment">// sum为本节点的值，需要加上前一个节点的进位值</span></div><div class="line">    <span class="keyword">if</span>(l1) &#123;</div><div class="line">     sum += l1.val; <span class="comment">// 把链表1当前节点的值加上</span></div><div class="line">     l1 = l1.next; <span class="comment">// 移动链表1指针</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l2) &#123;</div><div class="line">      sum += l2.val;</div><div class="line">      l2 = l2.next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(sum &gt;= <span class="number">10</span>) &#123; <span class="comment">// 两个个位数相加最大值为18，所以到下一个节点进位的最大值为1</span></div><div class="line">      carry = <span class="number">1</span>;</div><div class="line">      sum -= <span class="number">10</span>; <span class="comment">// 去掉十位，保留个位为节点最终值</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      carry = <span class="number">0</span>; <span class="comment">// 相加之后和小于10，不需要进位，清除进位数据，否则死循环</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    p.next = <span class="keyword">new</span> ListNode(sum); <span class="comment">// 插入新节点</span></div><div class="line">    p = p.next; <span class="comment">// 新链表指针后移</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> head.next; <span class="comment">// 头结点的值不是相加得到的，所以需要后移一个节点返回由两个链表加起来的结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>进位的处理搞清楚之后这道题就清楚了。</p><p>时间复杂度O(max(l1.length, l2.length))</p><blockquote><p>　循环次数的根据链表1和链表2中长的那个链表来的，因为要保证两个链表的所有节点都被便利到</p></blockquote><p>空间复杂度O(max(l1,l2))</p><blockquote><p>最终链表的节点数也是根据链表1和链表2中长的那个链表来的，因为要保证两个链表的所有节点都被便利到，如果最后有进位的话，结果链表的长度会比链表1和链表2中长的链表大小+1。</p></blockquote><h2><span id="结尾">结尾</span></h2><p>这道题的难度是中等，但是摸清楚链表的基本操作之后，应该没什么问题就能解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎跟着夏老师一起学习算法，这方面我自己的基础很薄弱，所以解题方法和思路也会讲的很”小白“，不需要什么基础就能看懂。&lt;/p&gt;
&lt;p&gt;关注公众号可以进行交流和加入微信群，群内定期有系列文章分享噢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.
      
    
    </summary>
    
      <category term="leetcode" scheme="https//www.ddhigh.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode(1) —— 两数之和</title>
    <link href="https//www.ddhigh.com/2019/09/12/leetcode-two-sum.html"/>
    <id>https//www.ddhigh.com/2019/09/12/leetcode-two-sum.html</id>
    <published>2019-09-12T11:32:13.000Z</published>
    <updated>2019-09-12T15:20:25.928Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎跟着夏老师一起学习算法，这方面我自己的基础很薄弱，所以解题方法和思路也会讲的很”小白“，不需要什么基础就能看懂。</p><p>关注公众号可以进行交流和加入微信群，群内定期有系列文章分享噢！</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><h2><span id="目录">目录</span></h2><!-- toc --><ul><li><a href="#问题">问题</a></li><li><a href="#嵌套循环解题法">嵌套循环解题法</a></li><li><a href="#两遍hashtable解题法">两遍HashTable解题法</a></li><li><a href="#一遍hashtable解题法">一遍HashTable解题法</a></li><li><a href="#结尾">结尾</a></li></ul><!-- tocstop --><h2><span id="问题">问题</span></h2><blockquote><p> 给定一个整数数组 <em><code>nums</code></em> 和一个目标值 <em><code>target</code></em>，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p></blockquote><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定 nums = [2, 7, 11, 15], target = 9</div><div class="line"></div><div class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</div><div class="line"></div><div class="line">所以返回 [0, 1]</div></pre></td></tr></table></figure><h2><span id="嵌套循环解题法">嵌套循环解题法</span></h2><blockquote><p>通过第1遍循环可以拿到当前值和剩余值，然后嵌套循环一次，检查剩余值是不是在数组中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">    <span class="keyword">const</span> current = nums[i]; <span class="comment">// 拿到当前值</span></div><div class="line">    <span class="keyword">const</span> remain = target - current; <span class="comment">// 拿到剩余值</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>;j&lt;nums.length;j++) &#123;</div><div class="line">      <span class="keyword">if</span>(nums[j] === remain) &#123;</div><div class="line">        <span class="keyword">return</span> [i, j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度是O(n^2)</p><blockquote><p>nums的长度为n,嵌套循环的总执行次数是 n*(n-1)，当n趋向于无穷大时n-1和n没什么区别，忽略</p></blockquote><p>空间复杂度为O(1)</p><blockquote><p>增加的临时变量有 current, remain, i, j，不会随着nums的长度而增加，所以是常量O(1)</p></blockquote><p>嵌套循环的效率是最低的, 面试的时候就算回答出来被送走的几率也是很大的。</p><h2><span id="两遍hashtable解题法">两遍HashTable解题法</span></h2><blockquote><p>核心思想是使用一个HashTable保存每个值和每个值的位置。</p><p>第1次循环时构造出HashTable，键为nums数组的元素，值为元素对应的下标</p><p>第2次循环时获取当前循环的值以及剩余值，如果剩余值的索引不等于当前值的索引，且剩余值也在HashTable中，直接从HashTable读取出当前值和剩余值的index返回。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> hashTable = &#123;&#125;;</div><div class="line">  <span class="comment">// 第1次循环</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">    hashTable[nums[i]] = i;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 第2次循环</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">    <span class="keyword">const</span> current = nums[i];</div><div class="line">    <span class="keyword">const</span> remain = target - current;</div><div class="line">    <span class="keyword">if</span>(map[remain] !== <span class="literal">undefined</span> &amp;&amp; map[remain] !== i) &#123;</div><div class="line">      <span class="keyword">return</span> [i, map[remain]];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度为O(2n) = O(n)</p><blockquote><p>进行了两次循环，理论上是2*n的时间复杂度，但是当n趋向于无穷大时，n和2n的差距可以忽略，所以结果是O(n)</p></blockquote><p>空间复杂度为O(n)</p><blockquote><p>增加了HashTable，大小是nums的长度n，所以空间复杂度是O(n)</p></blockquote><p>该算法利用了HashTable的O(1)的时间复杂度巧妙地减少了嵌套循环，算法效率提升很大！</p><p>一般回答到这里基本就没啥问题了，但是还有一种基于HashTable一次循环就能解决问题的方案。</p><h2><span id="一遍hashtable解题法">一遍HashTable解题法</span></h2><blockquote><p>循环nums数组，得到当前值和剩余值，判断剩余值在不在HashTable，如果在的话，直接返回剩余值的位置和当前值的位置。如果不在则把剩余值插入HashTable，继续循环。</p><p>Q: 为什么先返回的是剩余值的位置而不是当前值的位置？</p><p>A: 因为当前值的位置是确定的，所以当前值的位置不在HashTable中，但是剩余值可能在前面的循环中插入了HashTable，是老值，所以先返回。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> hashTable = &#123;&#125;;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">    <span class="keyword">const</span> current = nums[i];</div><div class="line">    <span class="keyword">const</span> remain = target - remain;</div><div class="line">    <span class="keyword">if</span>(hashTable[remain] !== <span class="literal">undefined</span>) &#123; <span class="comment">// 为什么不需要判断位置?因为当前值的位置根本没插入HashTable中，索引不可能重复</span></div><div class="line">      <span class="keyword">return</span> [hashTable[remain], i];</div><div class="line">    &#125;</div><div class="line">    hashTable[current] = i; <span class="comment">// 插入当前值到HashTable，下一次循环时这里就成了"老值"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度O(n)</p><blockquote><p>正宗的O(n),一次循环解决问题</p></blockquote><p>空间复杂度O(n)</p><blockquote><p>增加了HashTable，大小随着nums的增大而增大</p></blockquote><h2><span id="结尾">结尾</span></h2><p>两数之和是leetcode的第1个问题，也是比较简单的一个问题，对算法有畏难情绪的读者可以把心收到肚子里了，跟着夏老师一起学算法！<br>有疑问的读者可以扫描上方二维码和我沟通。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎跟着夏老师一起学习算法，这方面我自己的基础很薄弱，所以解题方法和思路也会讲的很”小白“，不需要什么基础就能看懂。&lt;/p&gt;
&lt;p&gt;关注公众号可以进行交流和加入微信群，群内定期有系列文章分享噢！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.
      
    
    </summary>
    
      <category term="leetcode" scheme="https//www.ddhigh.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(9)——拦截器</title>
    <link href="https//www.ddhigh.com/2019/09/10/nestjs-interceptor.html"/>
    <id>https//www.ddhigh.com/2019/09/10/nestjs-interceptor.html</id>
    <published>2019-09-10T07:17:32.000Z</published>
    <updated>2019-09-10T07:18:03.425Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<em><code>NestJs之旅</code></em>系列文章</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><p>拦截器是一个实现了<strong>NestInterceptor</strong>接口且被<strong>@Injectable</strong>装饰器修饰的类。</p><p><img src="https://static.ddhigh.com/blog/2019-09-10-061428.png" alt="img"></p><p>拦截器是基于AOP编程思想的一种应用，以下是常用的功能：</p><ul><li>在方法执行之前或之后执行<strong>额外的逻辑</strong>，这些逻辑一般不属于业务的一部分</li><li><strong>转换</strong>函数执行结果</li><li><strong>转换</strong>函数执行时抛出的异常</li><li>扩展函数基本行为</li><li>特定场景下完全重写函数的行为（比如缓存拦截器，一旦有可用的缓存则直接返回，不执行真正的业务逻辑，即业务逻辑处理函数行为已经被重写）</li></ul><h2><span id="拦截器接口">拦截器接口</span></h2><p>每个拦截器都需要实现<strong>NestInterceptor</strong>接口的<strong>intercept()</strong>方法，该方法接收两个参数。方法原型如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">intercept</span>(<span class="params">context: ExecutionContext, next: CallHandler</span>): <span class="title">Observable</span>&lt;<span class="title">any</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>ExecutionContext 执行上下文，与<a href="https://www.ddhigh.com/2019/08/27/nestjs-guard.html" target="_blank" rel="external">NestJs学习之旅(7)——路由守卫</a>中的<strong>执行上下文</strong>相同</li><li>CallHandler 路由处理函数</li></ul><h2><span id="callhandler">CallHandler</span></h2><p>该接口是对路由处理函数的抽象，接口定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> CallHandler&lt;T = any&gt; &#123;</div><div class="line">    handle(): Observable&lt;T&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>handle()函数的返回值也就是对应路由函数的返回值。</p><p>以获取用户列表为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.controller.ts</span></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  list() &#123;</div><div class="line">    <span class="keyword">return</span> [];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当访问 /user/list 时，路由处理函数返回<strong>[]</strong>，如果在应用拦截器的情况下，调用CallHandler接口的handle()方法得到的也是Observable&lt;[]&gt;(RxJs包装对象)。</p><p><strong>所以，如果在拦截器中调用了next.handle()方法就会执行对应的路由处理函数，如果不调用的话就不会执行。</strong></p><h2><span id="一个请求链路日志记录拦截器">一个请求链路日志记录拦截器</span></h2><p>随着微服务的兴起，原来的单一项目被拆分成多个比较小的子模块，这些子模块可以独立开发、独立部署、独立运行，大大提高了开发、执行效率，但是带来的问题也比较多，一个经常遇到的问题是接口调用出错不好查找日志。</p><p>如果在业务逻辑中硬编码这种链路调用日志是非常不可取的，严重违反了单一职责的原则，这在微服务开发中是相当不好的一种行为，会让微服务变得臃肿，这些逻辑完全可以通过拦截器来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.interceptor.ts</span></div><div class="line"><span class="keyword">import</span> &#123; CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Request &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'util'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppInterceptor <span class="keyword">implements</span> NestInterceptor &#123;</div><div class="line">  <span class="keyword">private</span> readonly logger = <span class="keyword">new</span> Logger(); <span class="comment">// 实例化日志记录器</span></div><div class="line"></div><div class="line">  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now(); <span class="comment">// 请求开始时间</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> next.handle().pipe(tap(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 调用完handle()后得到RxJs响应对象，使用tap可以得到路由函数的返回值</span></div><div class="line">      <span class="keyword">const</span> host = context.switchToHttp();</div><div class="line">      <span class="keyword">const</span> request = host.getRequest&lt;Request&gt;();</div><div class="line"></div><div class="line">      <span class="comment">// 打印请求方法，请求链接，处理时间和响应数据</span></div><div class="line">      <span class="keyword">this</span>.logger.log(format(</div><div class="line">        <span class="string">'%s %s %dms %s'</span>,</div><div class="line">        request.method,</div><div class="line">        request.url,</div><div class="line">        <span class="built_in">Date</span>.now() - start,</div><div class="line">        <span class="built_in">JSON</span>.stringify(response),</div><div class="line">      ));</div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.controller.ts</span></div><div class="line"><span class="meta">@UseInterceptors</span>(AppInterceptor)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  list() &#123;</div><div class="line">    <span class="keyword">return</span> [];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当访问 /user时控制台想输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Nest] 96310   - 09/10/2019, 2:44 PM   GET /user 1ms []</div></pre></td></tr></table></figure><h2><span id="拦截器作用域">拦截器作用域</span></h2><p>拦截器可以在以下作用域进行绑定：</p><ul><li>全局拦截器</li><li>控制器拦截器</li><li>路由方法拦截器</li></ul><h3><span id="全局拦截器">全局拦截器</span></h3><p>在main.ts中使用以下代码即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</div><div class="line">app.useGlobalInterceptors(<span class="keyword">new</span> AppInterceptor());</div></pre></td></tr></table></figure><h3><span id="控制器拦截器">控制器拦截器</span></h3><p>将对该控制器所有<strong>路由</strong>方法生效：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="meta">@UseInterceptors</span>(AppInterceptor)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="路由方法拦截器">路由方法拦截器</span></h3><p>只对当前被装饰的路由方法进行拦截：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  <span class="meta">@UseInterceptors</span>(AppInterceptor)</div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  list() &#123;</div><div class="line">    <span class="keyword">return</span> [];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="响应处理">响应处理</span></h2><p>CallHandler接口的handle()返回值实际上是RxJs的Observable对象，利用RxJs操作符可以对该对象进行操作，比如有一个API接口，之前返回的数据结构如下，如果正常响应，响应体就是数据，没有包装结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>:<span class="string">"xialei"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>新的需求是要把之前的纯数据响应包装为一个data属性，结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"xialei"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接到这个需求时有的小伙伴可能已经在梳理响应接口的数量然后评估工时准备进行开发了，而使用NestJs的拦截器，不到一炷香的时间即可实现该需求。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppInterceptor <span class="keyword">implements</span> NestInterceptor &#123;</div><div class="line"></div><div class="line">  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> next.handle().</div><div class="line">      pipe(map(<span class="function"><span class="params">data</span> =&gt;</span> (&#123; data &#125;))); <span class="comment">// map操作符与Array.prototype.map类似</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>应用上述拦截器后响应数据就会被包上一层data属性。</p><h2><span id="异常映射">异常映射</span></h2><p>另外一个有趣的例子是利用RxJs的catchError来覆盖路由处理函数抛出的异常。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Injectable,</div><div class="line">  NestInterceptor,</div><div class="line">  ExecutionContext,</div><div class="line">  BadGatewayException,</div><div class="line">  CallHandler,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable, throwError &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; catchError &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ErrorsInterceptor <span class="keyword">implements</span> NestInterceptor &#123;</div><div class="line">  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line">    <span class="keyword">return</span> next</div><div class="line">      .handle()</div><div class="line">      .pipe(</div><div class="line">        catchError(<span class="function"><span class="params">err</span> =&gt;</span> throwError(<span class="keyword">new</span> BadGatewayException())) <span class="comment">// catchError用来捕获异常</span></div><div class="line">      );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="重写路由函数逻辑">重写路由函数逻辑</span></h2><p>在文章开始部分提到了拦截器可以重写路由处理函数逻辑。如下是一个缓存拦截器的例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable, of &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CacheInterceptor <span class="keyword">implements</span> NestInterceptor &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly cacheService: CacheService</span>) &#123;&#125;</div><div class="line">  </div><div class="line">   <span class="keyword">async</span> intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line">  <span class="keyword">const</span> host = context.switchToHttp();</div><div class="line">    <span class="keyword">const</span> request = host.getRequest();</div><div class="line">    <span class="keyword">if</span>(request.method !== <span class="string">'GET'</span>) &#123;  </div><div class="line">      <span class="comment">// 非GET请求放行</span></div><div class="line">      <span class="keyword">return</span> next.handle();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> cachedData = <span class="keyword">await</span> <span class="keyword">this</span>.cacheService.get(request.url);</div><div class="line">    <span class="keyword">if</span>(cachedData) &#123; </div><div class="line">      <span class="comment">// 命中缓存，直接放行</span></div><div class="line">      <span class="keyword">return</span> of(cachedData);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> next.handle().pipe(tap(response) =&gt; &#123; </div><div class="line">      <span class="comment">// 响应数据写入缓存，此处可以等待缓存写入完成，也可以不等待</span></div><div class="line">      <span class="keyword">this</span>.cacheService.set(request.method, response);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="结尾">结尾</span></h2><p>本文是NestJs基础知识的最后一篇，接下将针对特定模块进行更新，比如数据库、上传、鉴权等等。</p><p>由于直接放出群二维码导致加群门槛极低，近期有微商之类的人员扫码入群发送广告/恶意信息，严重骚扰群成员，二维码入群通道已关闭。有需要的伙伴可以关注公众号来获得加群资格。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;em&gt;&lt;code&gt;NestJs之旅&lt;/code&gt;&lt;/em&gt;系列文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2019-08-26-060638.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;拦截器是一个实
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(8)——管道</title>
    <link href="https//www.ddhigh.com/2019/08/28/nestjs-pipe.html"/>
    <id>https//www.ddhigh.com/2019/08/28/nestjs-pipe.html</id>
    <published>2019-08-28T06:47:48.000Z</published>
    <updated>2019-08-28T06:59:27.214Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<strong>NestJs学习之旅</strong>系列文章</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><h2><span id="管道">管道</span></h2><p>熟悉Linux命令的伙伴应该对“管道运算符”不陌生。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -la | grep demo</div></pre></td></tr></table></figure><p>“|” 就是管道运算符，它把左边命令的输出作为输入传递给右边的命令，支持级联，如此一来，便可以通过管道运算符进行复杂命令的交替运算。</p><p><img src="https://static.ddhigh.com/blog/2019-08-28-054610.png" alt="img"></p><p>NestJs中的管道有着类似的功能，也可以级联处理数据。NestJs管道通过<strong>@Injectable()</strong>装饰器装饰，需要实现<strong>PipeTransform</strong>接口。</p><p>NestJs中管道的主要职责如下：</p><ul><li><strong>数据转换</strong> 将输入数据转换为所需的输出</li><li><strong>数据验证</strong> 接收客户端提交的参数，如果通过验证则继续传递，如果验证未通过则提示错误</li></ul><h2><span id="执行顺序">执行顺序</span></h2><p>在前面的文章中我们讨论了<strong>中间件</strong>、<strong>控制器</strong>、<strong>路由守卫</strong>，结合本问讨论的<strong>管道</strong>，可能有些读者会对这些组件的执行顺序提出疑问：这些东西执行的顺序到底是怎样的？</p><p>执行顺序也不用找资料，自己在这些组件执行时加上日志即可，我得出的结论如下：</p><blockquote><p>客户端请求 -&gt; 中间件 -&gt; 路由守卫 -&gt; 管道 -&gt; 控制器方法</p></blockquote><h2><span id="开发管道">开发管道</span></h2><p>数据转换类的管道就不详细解释了：</p><blockquote><p>给你一个value和元数据，你的return值就是转换后的值。</p></blockquote><p>NestJs内置了ValidationPipe、ParseIntPipe和ParseUUIDPipe。为了更好地理解它们的工作原理，我们以ValidationPipe（验证器管道）为例来演示管道的使用。</p><h3><span id="pipetransform">PipeTransform</span></h3><p>这是管道必须实现的接口，该接口定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> PipeTransform&lt;T = any, R = any&gt; &#123;</div><div class="line">    transform(value: T, metadata: ArgumentMetadata): R;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>value <t> 输入参数，T为输入参数类型</t></li><li>metadata <argumentmetadata> value的元数据，包括参数来源，参数类型等等</argumentmetadata></li><li><r> 输出参数，R为输出参数类型</r></li></ul><h3><span id="argumentmetadata">ArgumentMetadata</span></h3><p>用来描述当前处理value的元数据接口，接口定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ArgumentMetadata &#123;</div><div class="line">  readonly <span class="keyword">type</span>: <span class="string">'body'</span> | <span class="string">'query'</span> | <span class="string">'param'</span> | <span class="string">'custom'</span>;</div><div class="line">  readonly metatype?: Type&lt;<span class="built_in">any</span>&gt;;</div><div class="line">  readonly data?: <span class="built_in">string</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个接口大家可能看不明白，没关系，等下会有具体示例来进行解读。</p><ul><li>type <string> 输入数据的来源</string></li><li>metatype <type<any>&gt; 注入数据的类型</type<any></li><li>data <string|undefined>传递给装饰器的数据类型</string|undefined></li></ul><p>例如如下控制器方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Post</span>()</div><div class="line">login(<span class="meta">@Query</span>(<span class="string">'type'</span>) <span class="keyword">type</span>: <span class="built_in">number</span>) &#123; <span class="comment">// type 为登录类型参数，类似手机号登录为1，账号登录为2的例子</span></div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述例子的元数据如下：</p><ul><li>type query @Query装饰器是读取GET参数</li><li>metatype Number type的类型符号</li><li>data type 传递给@Query装饰器的参数为“type” </li></ul><h2><span id="验证器示例">验证器示例</span></h2><p>下面以用户登录时校验账号密码来说明验证器管道的使用，规则如下：</p><ul><li>账号必须是字符串，长度6-20</li><li>密码不能为空</li></ul><h3><span id="dto定义">DTO定义</span></h3><p>DTO在Java中是Data Transfer Object，简单来说就是对数据的一层包装。咱们NestJs中用这个东西一般是为了防止非法字段的提交和IDE自动提示（偷笑）。</p><p>使用规则装饰器需要安装class-validator和class-transformer：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save class-validator class-transformer</div></pre></td></tr></table></figure><p>登录表单定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// userLogin.dto.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserLoginDto &#123;</div><div class="line">  <span class="meta">@IsString</span>()</div><div class="line">  <span class="meta">@Length</span>(<span class="number">6</span>, <span class="number">20</span>, &#123; message: <span class="string">'长度不合法'</span> &#125;)</div><div class="line">  readonly username: <span class="built_in">string</span>;</div><div class="line">  <span class="meta">@Length</span>(<span class="number">1</span>)</div><div class="line">  readonly password: <span class="built_in">string</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="管道定义">管道定义</span></h3><p>由于咱们的管道是通用的，也就是验证什么内容是由外部决定的，管道只负责“你给我数据和规则，我来校验”。所以咱们需要使用到装饰器元数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// validate.pipe.ts</span></div><div class="line"><span class="keyword">import</span> &#123; ArgumentMetadata, BadRequestException, Injectable, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; plainToClass &#125; <span class="keyword">from</span> <span class="string">'class-transformer'</span>;</div><div class="line"><span class="keyword">import</span> &#123; validate &#125; <span class="keyword">from</span> <span class="string">'class-validator'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ValidatePipe <span class="keyword">implements</span> PipeTransform &#123;</div><div class="line"></div><div class="line">  <span class="keyword">async</span> transform(value: <span class="built_in">any</span>, &#123; metatype &#125;: ArgumentMetadata): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!metatype || !<span class="keyword">this</span>.toValidate(metatype)) &#123; <span class="comment">// 如果不是注入的数据且不需要验证，直接跳过处理</span></div><div class="line">      <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 数据格式转换</span></div><div class="line">    <span class="keyword">const</span> object = plainToClass(metatype, value);</div><div class="line">    <span class="comment">// 调用验证</span></div><div class="line">    <span class="keyword">const</span> errors = <span class="keyword">await</span> validate(object);</div><div class="line">    <span class="comment">// 如果错误长度大于0，证明出错，需要抛出400错误</span></div><div class="line">    <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(errors);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 需要验证的数据类型</span></div><div class="line"><span class="comment">   * @param metatype</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="keyword">private</span> toValidate(metatype: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;</div><div class="line">    <span class="keyword">const</span> types = [<span class="built_in">String</span>, <span class="built_in">Boolean</span>, <span class="built_in">Number</span>, <span class="built_in">Array</span>, <span class="built_in">Object</span>];</div><div class="line">    <span class="keyword">return</span> !types.includes(metatype);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="控制器定义">控制器定义</span></h3><p>今天的主角是管道，所以控制器层就不写逻辑了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.controller.ts</span></div><div class="line"><span class="meta">@Post</span>(<span class="string">'login'</span>)</div><div class="line"><span class="meta">@UsePipes</span>(ValidatePipe)</div><div class="line">login(<span class="meta">@Body</span>() userLoginDto: UserLoginDTO) &#123;</div><div class="line">  <span class="keyword">return</span> &#123;errcode:<span class="number">0</span>, errmsg: <span class="string">'ok'</span>&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="运行项目">运行项目</span></h3><p>项目根目录执行以下命令即可运行NestJs项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run start</div></pre></td></tr></table></figure><p>项目运行后可以使用Postman来验证一下：</p><p>请求数据1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>响应数据1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">400</span>,</div><div class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</div><div class="line">    <span class="attr">"message"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"target"</span>: &#123;&#125;,</div><div class="line">            <span class="attr">"property"</span>: <span class="string">"username"</span>,</div><div class="line">            <span class="attr">"children"</span>: [],</div><div class="line">            <span class="attr">"constraints"</span>: &#123;</div><div class="line">                <span class="attr">"length"</span>: <span class="string">"长度不合法"</span>,</div><div class="line">                <span class="attr">"isString"</span>: <span class="string">"username must be a string"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"target"</span>: &#123;&#125;,</div><div class="line">            <span class="attr">"property"</span>: <span class="string">"password"</span>,</div><div class="line">            <span class="attr">"children"</span>: [],</div><div class="line">            <span class="attr">"constraints"</span>: &#123;</div><div class="line">                <span class="attr">"length"</span>: <span class="string">"password must be longer than or equal to 1 characters"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请求数据2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"username"</span>:<span class="string">"xialeistudio"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>响应数据2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">400</span>,</div><div class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</div><div class="line">    <span class="attr">"message"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"target"</span>: &#123;</div><div class="line">                <span class="attr">"username"</span>: <span class="string">"xialeistudio"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"property"</span>: <span class="string">"password"</span>,</div><div class="line">            <span class="attr">"children"</span>: [],</div><div class="line">            <span class="attr">"constraints"</span>: &#123;</div><div class="line">                <span class="attr">"length"</span>: <span class="string">"password must be longer than or equal to 1 characters"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请求数据3</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"username"</span>:<span class="string">"xialeistudio"</span>,</div><div class="line"><span class="attr">"password"</span>:<span class="string">"111111"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>响应数据3</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]</div></pre></td></tr></table></figure><h3><span id="注意事项">注意事项</span></h3><p>上文演示了ValidatePipe的实现，生产环境直接使用NestJs提供的ValidationPipe即可。我们可以在main.ts中使用全局管道。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</div><div class="line">  app.useGlobalPipes(<span class="keyword">new</span> ValidationPipe());</div><div class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</div><div class="line">&#125;</div><div class="line">bootstrap();</div></pre></td></tr></table></figure><h2><span id="结尾">结尾</span></h2><p>和笔者使用的SpringBoot中验证框架对比一下之后发现，NestJs验证管道所实现的功能还真不比SpringBoot差，看来官方说的“下一代Node.js全栈开发框架”确实不是盖的！</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://static.ddhigh.com/blog/2019-08-27-065355.jpg?imageView2/2/h/200" alt="20190827145318"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;strong&gt;NestJs学习之旅&lt;/strong&gt;系列文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2019-08-26-060638.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(7)——路由守卫</title>
    <link href="https//www.ddhigh.com/2019/08/27/nestjs-guard.html"/>
    <id>https//www.ddhigh.com/2019/08/27/nestjs-guard.html</id>
    <published>2019-08-27T06:58:36.000Z</published>
    <updated>2019-09-10T06:25:23.232Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<strong>NestJs学习之旅</strong>系列文章</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><p>传统的Web应用中去检测用户登录、权限判断等等都是在控制器层或者中间件层做的，而在目前比较推荐的模块化与组件化架构中，不同职责的功能建议拆分到不同的类文件中去。</p><p>通过前几篇的学习可以发现NestJs在这方面做的很好，传统的express/koa应用中，需要开发者去思考项目结构以及代码组织，而NestJs不需要你这样做，降低了开发成本，另外也统一了开发风格。</p><h2><span id="路由守卫">路由守卫</span></h2><p>熟悉Vue,React的伙伴应该比较熟悉这个概念，通俗的说就是在访问指定的路由之前回调一个处理函数，如果该函数<strong>返回true</strong>或者<strong>调用了next()</strong>就会放行当前访问，否则阻断当前访问。</p><p>NestJs中路由守卫也是如此，通过继承<strong>CanActive</strong>接口即可定义一个路由守卫。</p><p><img src="https://static.ddhigh.com/blog/2019-08-27-055230.png" alt="img"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; CanActivate, ExecutionContext, Injectable &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">class</span> AppGuard <span class="keyword">implements</span> CanActivate &#123;</div><div class="line">  canActivate(context: ExecutionContext): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="路由守卫与中间件">路由守卫与中间件</span></h2><h3><span id="区别">区别</span></h3><p>路由守卫本质上也是中间件的一种，koa或者express开发中接口鉴权就是基于中间件开发的，如果当前请求是不被允许的，当前中间件将不会调用后续中间件，达到阻断请求的目的。</p><p>但是中间件的职责是不明确的，中间件可以干任何事（数据校验，格式转化，响应体压缩等等），这导致只能通过名称来识别中间件，项目迭代比较久以后，有比较高的维护成本。</p><h3><span id="联系">联系</span></h3><p>由于单一职责的关系，路由守卫只能返回true和false来决定放行/阻断当前请求，不可以修改request/response对象，因为一旦破坏单一职责的原则，排查问题比较麻烦。</p><p>如果需要修改request对象，可以结合中间件一起使用。</p><blockquote><p>路由守卫在所有中间件执行完毕之后开始执行。</p></blockquote><p>以下是一个结合路由守卫和中间件的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// auth.middleware.ts</span></div><div class="line"><span class="comment">// 中间件职责：读取请求头Authorization，如果存在且有效的话，设置user对象到request中</span></div><div class="line"><span class="keyword">import</span> &#123; Injectable, NestMiddleware &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthMiddleware <span class="keyword">implements</span> NestMiddleware&lt;Request|<span class="built_in">any</span>, Response&gt; &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123;&#125;</div><div class="line">  <span class="keyword">async</span> use(req: Request|<span class="built_in">any</span>, res: Response, next: <span class="built_in">Function</span>) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> token = req.header(<span class="string">'authorization'</span>);</div><div class="line">    <span class="keyword">if</span>(!token) &#123;</div><div class="line">      next();</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">this</span>.userService.getUserByToken(token);</div><div class="line">    <span class="keyword">if</span>(!user) &#123;</div><div class="line">      next();</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    request.user = user;</div><div class="line">    next();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.guard.ts</span></div><div class="line"><span class="keyword">import</span> &#123; CanActivate, ExecutionContext, Injectable &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Request &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserGuard <span class="keyword">implements</span> CanActivate &#123;</div><div class="line">  canActivate(context: ExecutionContext): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</div><div class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest&lt;Request | <span class="built_in">any</span>&gt;();</div><div class="line">    <span class="comment">// 直接检测是否有user对象，因为无user对象证明无token或者token无效</span></div><div class="line">    <span class="keyword">return</span> !!request.user;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上例子是笔者常用的一种方法，这样职责比较清晰，而且user对象可以在其他中间件中读取。</p><h2><span id="使用路由守卫来保护我们的应用">使用路由守卫来保护我们的应用</span></h2><p>NestJs使用<strong>@UseGuards()</strong>装饰器来注入路由守卫。支持全局守卫、控制器级别守卫、方法级别守卫。</p><p>下面以一个实际的例子来演示路由守卫的工作过程。</p><h3><span id="登录流程">登录流程</span></h3><ol><li>用户输入账号密码后进行登录，如果登录成功下发Token</li><li>客户端在请求头Authorization中加入第1步下发的Token进行请求</li><li>路由守卫读取当前请求的Authorization信息并与数据库的进行比对，如果成功则放行，否则阻断请求</li></ol><h3><span id="定义token校验业务类">定义token校验业务类</span></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injetable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">  <span class="comment">// 模拟校验，这里直接返回true，实际开发中自行实现即可</span></div><div class="line">  validateToken(token: <span class="built_in">string</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="定义路由守卫">定义路由守卫</span></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.guard.ts</span></div><div class="line"><span class="meta">@Injetable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserGuard <span class="keyword">implements</span> CanActive &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123;&#125;</div><div class="line"></div><div class="line">  canActivate(context: ExecutionContext): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</div><div class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest&lt;Request&gt;();</div><div class="line">    <span class="comment">// 读取token</span></div><div class="line">    <span class="keyword">const</span> authorization = request.header(<span class="string">'authorization'</span>);</div><div class="line">    <span class="keyword">if</span> (!authorization) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userService.validateToken(authorization);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="定义控制器">定义控制器</span></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  <span class="comment">// 请求登录</span></div><div class="line">  <span class="meta">@Post</span>(<span class="string">'login'</span>)</div><div class="line">login() &#123;</div><div class="line"><span class="keyword">return</span> &#123;token:<span class="string">'fake_token'</span>&#125;; <span class="comment">// 直接下发token，真实场景下需要验证账号密码    </span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 查看当前用户信息</span></div><div class="line">  <span class="meta">@Get</span>(<span class="string">'info'</span>)</div><div class="line">  <span class="meta">@UseGuards</span>(UserGuard) <span class="comment">// 方法级路由守卫</span></div><div class="line">  info() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;username: <span class="string">'fake_user'</span>&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一个完整的路由守卫应用实例就已经出来了，虽然咱们的路由守卫没啥逻辑都是直接放行的，但是实际开发中也是基于这种思路去开发的，只不过校验的逻辑不一样罢了。</p><h2><span id="路由守卫级别">路由守卫级别</span></h2><h3><span id="控制器级别">控制器级别</span></h3><p>该级别会对被装饰控制器的所有路由方法生效。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="meta">@UseGuards</span>(UserGuard)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  <span class="comment">// 查看当前用户信息</span></div><div class="line">  <span class="meta">@Get</span>(<span class="string">'info'</span>)</div><div class="line">  info() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;username: <span class="string">'fake_user'</span>&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="方法级别">方法级别</span></h3><p>该级别只对被装饰的方法生效。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Get</span>(<span class="string">'info'</span>)</div><div class="line"><span class="meta">@UseGuards</span>(UserGuard)</div><div class="line">info() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;username: <span class="string">'fake_user'</span>&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="全局级别">全局级别</span></h3><p>与全局异常过滤器类似，该级别对所有控制器的所有路由方法生效。该方法与全局异常过滤器一样不会对WebSocket和GRPC生效。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</div><div class="line">  <span class="comment">// 由于main.ts启动时并未初始化依赖注入容器，所以依赖必须手动传入，一般情况下不建议使用全局守卫，因为依赖注入得自己解决。</span></div><div class="line">  app.useGlobalGuards(<span class="keyword">new</span> UserGuard(<span class="keyword">new</span> UserService()));</div><div class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap();</div></pre></td></tr></table></figure><h2><span id="执行上下文">执行上下文</span></h2><p><strong>CanActive</strong>接口的方法中有一个<strong>ExecutionContext</strong>对象，该对象为请求上下文对象，该对象定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ExecutionContext <span class="keyword">extends</span> ArgumentsHost &#123;</div><div class="line">  getClass&lt;T = <span class="built_in">any</span>&gt;(): Type&lt;T&gt;;</div><div class="line">  getHandler(): <span class="built_in">Function</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到继承了ArgumentHost，ArgumentHost在之前的异常处理文章中已经提到过了，这里不再赘述。</p><ul><li>getClass<t>() 获取当前访问的Controller对象（不是实例），T为调用时传入的具体控制器对象泛型参数</t></li><li>getHandler() 获取当前访问路由的方法</li></ul><p>例如访问 /user/info 时，getClass()将返回UserController对象（不是实例），getHandler()将返回info()函数的引用。</p><p>这个特性有什么作用呢？</p><blockquote><p>NestJs中可以使用反射来获取定义在方法、属性、类等等上面的自定义属性，这一点和Java的注解有点类似。</p></blockquote><h2><span id="反射示例基于角色的权限验证rbac">反射示例——基于角色的权限验证(RBAC)</span></h2><h3><span id="定义角色装饰器">定义角色装饰器</span></h3><p>被角色装饰器装饰的控制器或者方法在访问时，路由守卫会读取当前用户的角色，与装饰器传入的角色相匹配，如果匹配失败，将阻断请求，否则将放行请求。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// roles.decorator.ts</span></div><div class="line"><span class="keyword">import</span> &#123; SetMetadata &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> Roles = <span class="function">(<span class="params">...roles: <span class="built_in">string</span>[]</span>) =&gt;</span> SetMetadata(<span class="string">'roles'</span>, roles);</div></pre></td></tr></table></figure><h3><span id="定义控制器">定义控制器</span></h3><p>假设我们有一个只允许管理员访问的创建用户的接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Post</span>(<span class="string">'create'</span>)</div><div class="line"><span class="meta">@Roles</span>(<span class="string">'admin'</span>)</div><div class="line"><span class="keyword">async</span> create(<span class="meta">@Body</span>() createUserDTO: CreateUserDTO) &#123;</div><div class="line">  <span class="keyword">this</span>.userService.create(createUserDTO);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="定义路由守卫">定义路由守卫</span></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// role.guard.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Reflector &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> RolesGuard <span class="keyword">implements</span> CanActivate &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly reflector: Reflector</span>) &#123;&#125;</div><div class="line"></div><div class="line">  canActivate(context: ExecutionContext): <span class="built_in">boolean</span> &#123;</div><div class="line">    <span class="comment">// 获取roles元数据，roles与roles.decorator.ts中SetMetadata()第一个参数一致</span></div><div class="line">    <span class="keyword">const</span> roles = <span class="keyword">this</span>.reflector.get&lt;<span class="built_in">string</span>[]&gt;(<span class="string">'roles'</span>, context.getHandler());</div><div class="line">    <span class="keyword">if</span> (!roles) &#123; <span class="comment">// 未被装饰器装饰，直接放行</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest();</div><div class="line">    <span class="keyword">const</span> user = request.user; <span class="comment">// 读取请求对象的user，该user对象可以通过中间件来设置（本文前面有例子）</span></div><div class="line">    <span class="keyword">const</span> hasRole = <span class="function"><span class="params">()</span> =&gt;</span> user.roles.some(<span class="function">(<span class="params">role</span>) =&gt;</span> roles.includes(role));</div><div class="line">    <span class="keyword">return</span> user &amp;&amp; user.roles &amp;&amp; hasRole();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上就是读取自定义装饰器数据开发RBAC的例子，写的比较简陋，但是原理是一样的，代码量少的话便于理解核心。</p><h2><span id="异常处理">异常处理</span></h2><p>路由守卫返回false时框架会抛出ForbiddenException，客户端收到的默认响应如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"statusCode"</span>: <span class="number">403</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Forbidden resource"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果需要抛出其他异常，比如UnauthorizedException，可以直接在路由守卫的canActive()方法中抛出。</p><p>另外，在这里抛出的异常时可以被异常过滤器捕获并且处理的，所以我们可以自定义异常类型以及输出自定义响应数据。</p><h2><span id="结尾">结尾</span></h2><p>本文除了路由守卫之外另一个重要的知识是【自定义元数据装饰器】的使用，基于该装饰器可以开发很多令人惊艳的功能，这个就看各位看官的实现了。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://static.ddhigh.com/blog/2019-08-27-065355.jpg?imageView2/2/h/200" alt="20190827145318"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;strong&gt;NestJs学习之旅&lt;/strong&gt;系列文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2019-08-26-060638.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;传统的Web应用中去
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(6)——异常处理</title>
    <link href="https//www.ddhigh.com/2019/08/26/nestjs-exception-filter.html"/>
    <id>https//www.ddhigh.com/2019/08/26/nestjs-exception-filter.html</id>
    <published>2019-08-26T07:32:29.000Z</published>
    <updated>2019-08-26T07:33:26.345Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<em><code>NestJs之旅</code></em>系列文章，关注公众号可以获得最新的教程！</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-060638.jpg" alt="img"></p><h2><span id="传统的异常处理">传统的异常处理</span></h2><p>在前面的内容中我们介绍了NestJs的几大常用组件，但是有一点没有做出说明，当我们的应用需要中断此次请求且输出错误信息时，我们需要怎么做？</p><p>这个问题有两种解决办法：</p><ol><li><p>services层直接返回中断请求的响应对象，controller直接输出该对象即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.allowLogin()) &#123;</div><div class="line">  <span class="keyword">return</span> &#123;errcode: <span class="number">403</span>, errmsg: <span class="string">'不允许登录'</span>&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>services层抛出异常，controller捕获该异常，然后输出响应对象</p></li></ol><p>以上两种方法都有一定的缺点：</p><ol><li>controller调用多个services时，需要依据services层的返回值来进行错误判断，要是漏了判断的话会导致原本需要中断的请求处理继续运行，导致不可预料的后果</li><li>如果每个controller都需要try/catch掉services层抛出的异常的话，会多了很多“重复”代码</li></ol><p>那有没有一个像SpringBoot的<code>ExceptionHandler</code>相似的解决办法呢?</p><h2><span id="nestjs的异常处理">NestJs的异常处理</span></h2><p>NestJs提供了统一的异常处理器，来集中处理运行过程中<strong>未捕获的异常</strong>，可以自定义响应参数，非常灵活。</p><p><img src="https://static.ddhigh.com/blog/2019-08-26-073002.png" alt="img"></p><h2><span id="默认响应">默认响应</span></h2><p>NestJs内置了默认的<strong>全局异常过滤器</strong>，该过滤器处理<strong>HttpException</strong>(及其子类)的异常。如果抛出的异常不是上述异常，则会响应以下默认JSON：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"statusCode"</span>: <span class="number">500</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Interval server error"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="内置异常过滤器">内置异常过滤器</span></h2><p>由于NestJs内置了默认的异常过滤器，如果在应用内抛出HttpException，是可以被NestJs自动捕获的。</p><p>比如在services层抛出一个HttpException：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">  login(username: <span class="built_in">string</span>, password: <span class="built_in">string</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.allowLogin()) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">'您无权登录'</span>, HttpStatus.FORBIDDEN);</div><div class="line">&#125;</div><div class="line">    <span class="keyword">return</span> &#123;user_id:<span class="number">1</span>, token: <span class="string">'fake token'</span>&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>controller正常调用该services即可:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123;&#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Post</span>(<span class="string">'login'</span>)</div><div class="line">  login(<span class="meta">@Body</span>(<span class="string">'username'</span>) username: <span class="built_in">string</span>, <span class="meta">@Body</span>(<span class="string">'password'</span>) password: <span class="built_in">string</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userService.login(username, password);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>客户端访问/user/login时，如果不允许登录，会收到以下响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"statusCode"</span>: <span class="number">403</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"您无权登录"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一般情况下，上述JSON的返回的信息是不够的，比如有些业务自定义的错误码没地方可以自定义。</p><p>如果你有这种需求，可以传递object给HttpException的第一个参数来实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> HttpException(&#123;errcode: <span class="number">40010</span>, errmsg: <span class="string">'您无权登录'</span>&#125;, HttpStatus.FORBIDDEN);</div></pre></td></tr></table></figure><p>客户端访问时，如果不允许登录，会收到以下响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"errcode"</span>: <span class="number">40010</span>,</div><div class="line">  <span class="attr">"errmsg"</span>: <span class="string">"您无权登录"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="自定义异常">自定义异常</span></h2><p>企业级应用开发过程中，使用HttpException进行处理对开发是不太友好的，一个比较常用的做法是自定义一个UserException来承载业务异常（系统运行正常，只不过当前请求不满足业务上的要求而中断，比如注册的时候用户名重复的时候打回去，此时数据库查询是正常的，这就是业务异常和系统异常的区别）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserException <span class="keyword">extends</span> HttpException &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">errcode: <span class="built_in">number</span>, errmsg: <span class="built_in">string</span>, statusCode: <span class="built_in">number</span></span>) &#123;</div><div class="line">    <span class="keyword">super</span>(&#123; errcode, errmsg &#125;, statusCode);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>业务层在使用该异常时直接使用以下代码即可，将原来传递对象的代码扁平化了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UserException(<span class="number">40010</span>, <span class="string">'您无权登录'</span>, HttpStatus.FORBIDDEN);</div></pre></td></tr></table></figure><h3><span id="语义化业务异常">语义化业务异常</span></h3><p>使用自定义异常时HTTP协议层是正常的，抛出403错误有点不符合语义化的需求。对上例改造一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserException <span class="keyword">extends</span> HttpException &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">errcode: <span class="built_in">number</span>, errmsg: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">super</span>(&#123; errcode, errmsg &#125;, HttpStatus.OK);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UserException(<span class="number">40010</span>, <span class="string">'您无权登录'</span>);</div></pre></td></tr></table></figure><p>此时客户端收到的HttpStatus为200，意味着此次请求在协议层面是成功的，只不过业务层返回了错误。前端在处理响应时可以直接对errcode是否为0来确定此次请求是否成功。</p><h2><span id="自定义异常过滤器">自定义异常过滤器</span></h2><p>虽然内置的异常过滤器可以自动处理很多情况，但是不是“可编程”的，也就是说我们无法完全控制异常处理过程，如果我们需要记录日志的话，使用内置的异常过滤器办不到，这时候可以使用<strong>@Catch</strong>注解来自定义异常处理器，添加日志记录什么的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Catch</span>(HttpException)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpExceptionFilter <span class="keyword">implements</span> ExceptionFilter&lt;HttpException&gt; &#123;</div><div class="line">  <span class="keyword">catch</span>(exception: HttpException, host: ArgumentsHost) &#123;</div><div class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</div><div class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;();</div><div class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;();</div><div class="line">    <span class="keyword">const</span> status = exception.getStatus();</div><div class="line"><span class="comment">// @todo 记录日志</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s error: %s'</span>, request.method, request.url, exception.message);</div><div class="line">    <span class="comment">// 发送响应</span></div><div class="line">    response</div><div class="line">      .status(status)</div><div class="line">      .json(&#123;</div><div class="line">        statusCode: status,</div><div class="line">      message: exception.message</div><div class="line">        path: request.url,</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="argumenthost">ArgumentHost</span></h3><p>ArgumentHost是原始请求的包装器，由于NestJs支持HTTP/GRPC/WebSocket，这三种请求的原始请求对象是有差异的，为了异常过滤器能够统一处理这三种异常，NestJs做了包装。最终在使用时处理那种异常由开发者来决定。</p><p>ArgumentHost接口定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ArgumentsHost &#123;</div><div class="line">  getArgs&lt;T <span class="keyword">extends</span> <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; = <span class="built_in">any</span>[]&gt;(): T;</div><div class="line">  getArgByIndex&lt;T = <span class="built_in">any</span>&gt;(index: <span class="built_in">number</span>): T;</div><div class="line">  switchToRpc(): RpcArgumentsHost;</div><div class="line">  switchToHttp(): HttpArgumentsHost;</div><div class="line">  switchToWs(): WsArgumentsHost;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果需要处理的是WebSocket异常，就使用<strong>host.switchToWs()</strong>，其他异常以此类推。</p><h3><span id="使用自定义异常过滤器">使用自定义异常过滤器</span></h3><p>如果定义完自定义异常过滤器之后，直接去访问会抛出异常的接口，此时可以发现并没有走自定义异常过滤器。</p><p>因为我们<strong>只是定义，并没有注册</strong>。</p><p>使用<strong>@UseFilters</strong>注册自定义异常过滤器。</p><p>异常过滤器有以下三种作用范围：</p><ul><li>方法级别</li><li>控制器级别</li><li>全局级别</li></ul><h3><span id="方法级别">方法级别</span></h3><p>只会处理该方法上抛出的异常，其他方法抛出的异常不会处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Post</span>(<span class="string">'login'</span>)</div><div class="line"><span class="meta">@UseFilters</span>(UserExceptionFilter)</div><div class="line">login(<span class="meta">@Body</span>(<span class="string">'username'</span>) username:<span class="built_in">string</span>, password: <span class="built_in">string</span>) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> UserException(<span class="number">40010</span>, <span class="string">'您无权登录'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="控制器级别">控制器级别</span></h3><p>只会处理该控制器方法上抛出的异常，其他控制器抛出的异常不处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="meta">@UseFilters</span>(UserExceptionFilter)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="全局级别">全局级别</span></h3><p>在应用入口注册，不会对Websocket或者混合应用（同时支持两种应用，如HTTP/GRPC或者HTTP/WebSocket）生效。一般Web开发中全局异常过滤器已经够用了。</p><p>在main.ts中注册全局异常过滤器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</div><div class="line">  app.useGlobalFilters(<span class="keyword">new</span> UserExceptionFilter());</div><div class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</div><div class="line">&#125;</div><div class="line">bootstrap();</div></pre></td></tr></table></figure><h2><span id="依赖注入">依赖注入</span></h2><p>由于异常过滤器并不是任何模块上下文的一部分，所以NestJs无法对其进行依赖注入管理，如果有此种需求，比如在异常过滤器中注入service，需要定义服务提供者。服务提供者名称为NestJs规定的常量APP_FILTER</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; APP_FILTER &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  providers: [</div><div class="line">    &#123;</div><div class="line">      provide: APP_FILTER,</div><div class="line">      useClass: UserExceptionFilter,</div><div class="line">    &#125;,</div><div class="line">  ],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure><h2><span id="捕获多种异常或者所有异常">捕获多种异常或者所有异常</span></h2><p>上例中提到的自定义异常处理器只会捕获UserException异常，如果有系统异常，会使用内置的异常处理器。通过传入异常类型给<strong>@Catch</strong>装饰器来捕获多种异常。如果不传任何异常类型的话，NestJs会捕获所有异常（也就是Error及其子类）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Catch</span>() <span class="comment">// 捕获所有异常</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpExceptionFilter <span class="keyword">implements</span> ExceptionFilter&lt;<span class="built_in">Error</span>&gt; &#123;</div><div class="line">  <span class="keyword">catch</span>(exception: <span class="built_in">Error</span>, host: ArgumentsHost) &#123;</div><div class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</div><div class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;();</div><div class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;();</div><div class="line">    <span class="keyword">const</span> status = exception.getStatus();</div><div class="line"><span class="comment">// @todo 记录日志</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s error: %s'</span>, request.method, request.url, exception.message);</div><div class="line">    <span class="comment">// 发送响应</span></div><div class="line">    response</div><div class="line">      .status(status)</div><div class="line">      .json(&#123;</div><div class="line">        statusCode: status,</div><div class="line">      message: exception.message</div><div class="line">        path: request.url,</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="结尾">结尾</span></h2><p>异常过滤器让应用异常有了统一的处理渠道，同时也解决文章开头提出的两个问题。通过自定义异常过滤器，开发者可以进行统一响应格式，统一记录日志等等操作。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;em&gt;&lt;code&gt;NestJs之旅&lt;/code&gt;&lt;/em&gt;系列文章，关注公众号可以获得最新的教程！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2019-08-26-060638.jpg&quot; alt=&quot;img&quot;
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>socks5协议详解</title>
    <link href="https//www.ddhigh.com/2019/08/24/socks5-protocol.html"/>
    <id>https//www.ddhigh.com/2019/08/24/socks5-protocol.html</id>
    <published>2019-08-24T09:02:26.000Z</published>
    <updated>2019-08-24T09:04:13.714Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="socks5代理协议">Socks5代理协议</span></h1><p>或许你没听说过socks5，但你一定听说过SS，SS内部使用的正是socks5协议。</p><p>socks5是一种网络传输协议，主要用于客户端与目标服务器之间通讯的透明传递。</p><p>该协议设计之初是为了让有权限的用户可以穿过防火墙的限制，访问外部资源。</p><h2><span id="1-rfc地址">1. RFC地址</span></h2><ol><li><a href="https://www.ietf.org/rfc/rfc1928.txt" target="_blank" rel="external">socks5协议规范rfc1928</a></li><li><a href="https://www.ietf.org/rfc/rfc1929.txt" target="_blank" rel="external">socks5账号密码鉴权规范rfc1929</a></li></ol><h2><span id="2-协议过程">2. 协议过程</span></h2><p><img src="https://static.ddhigh.com/blog/2019-08-24-041841.png" alt="image.png"></p><ol><li>客户端连接上代理服务器之后需要发送请求告知服务器目前的socks协议版本以及支持的认证方式</li><li>代理服务器收到请求后根据其设定的认证方式返回给客户端</li><li>如果代理服务器不需要认证，客户端将直接向代理服务器发起真实请求</li><li>代理服务器收到该请求之后连接客户端请求的目标服务器</li><li>代理服务器开始转发客户端与目标服务器之间的流量</li></ol><h2><span id="3-认证过程">3. 认证过程</span></h2><h3><span id="31-客户端发出请求">3.1 客户端发出请求</span></h3><blockquote><p>客户端连接服务器之后将直接发出该数据包给代理服务器</p></blockquote><table><thead><tr><th>VERSION</th><th>METHODS_COUNT</th><th style="text-align:left">METHODS…</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td style="text-align:left">1到255字节，长度由METHODS_COUNT值决定</td></tr><tr><td>0x05</td><td>0x03</td><td style="text-align:left">0x00 0x01 0x02</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，目前固定0x05</li><li>METHODS_COUNT 客户端支持的认证方法数量</li><li>METHODS… 客户端支持的认证方法，每个方法占用1个字节</li></ul><p>METHOD定义</p><ul><li>0x00 不需要认证（常用）</li><li>0x01 GSSAPI认证</li><li>0x02 账号密码认证（常用）</li><li>0x03 - 0x7F IANA分配</li><li>0x80 - 0xFE 私有方法保留</li><li>0xFF 无支持的认证方法</li></ul><h3><span id="32-服务端返回选择的认证方法">3.2 服务端返回选择的认证方法</span></h3><blockquote><p>接收完客户端支持的认证方法列表后，代理服务器从中选择一个受支持的方法返回给客户端</p></blockquote><h4><span id="321-无需认证">3.2.1 无需认证</span></h4><table><thead><tr><th>VERSION</th><th>METHOD</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td></tr><tr><td>0x05</td><td>0x00</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，目前固定0x05</li><li>METHOD 本次连接所用的认证方法，上例中为无需认证</li></ul><h4><span id="322-账号密码认证">3.2.2 账号密码认证</span></h4><table><thead><tr><th>VERSION</th><th>METHOD</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td></tr><tr><td>0x05</td><td>0x02</td></tr></tbody></table><h4><span id="323-客户端发送账号密码">3.2.3 客户端发送账号密码</span></h4><blockquote><p>服务端返回的认证方法为0x02(账号密码认证)时，客户端会发送账号密码数据给代理服务器</p></blockquote><table><thead><tr><th>VERSION</th><th>USERNAME_LENGTH</th><th>USERNAME</th><th>PASSWORD_LENGTH</th><th>PASSWORD</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td>1-255字节</td><td>1字节</td><td>1-255字节</td></tr><tr><td>0x01</td><td>0x01</td><td>0x0a</td><td>0x01</td><td>0x0a</td></tr></tbody></table><ul><li>VERSION 认证子协商版本（与SOCKS协议版本的0x05无关系）</li><li>USERNAME_LENGTH 用户名长度</li><li>USERNAME 用户名字节数组，长度为USERNAME_LENGTH</li><li>PASSWORD_LENGTH 密码长度</li><li>PASSWORD 密码字节数组，长度为PASSWORD_LENGTH</li></ul><h4><span id="324-服务端响应账号密码认证结果">3.2.4 服务端响应账号密码认证结果</span></h4><blockquote><p>收到客户端发来的账号密码后，代理服务器加以校验，并返回校验结果</p></blockquote><table><thead><tr><th>VERSION</th><th>STATUS</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td></tr></tbody></table><ul><li>VERSION 认证子协商版本，与客户端VERSION字段一致</li><li>STATUS 认证结果<ul><li>0x00 认证成功</li><li>大于0x00 认证失败</li></ul></li></ul><h2><span id="4-命令过程">4. 命令过程</span></h2><blockquote><p>认证成功后，客户端会发送连接命令给代理服务器，代理服务器会连接目标服务器，并返回连接结果</p></blockquote><h4><span id="41-客户端请求">4.1 客户端请求</span></h4><table><thead><tr><th>VERSION</th><th>COMMAND</th><th>RSV</th><th>ADDRESS_TYPE</th><th>DST.ADDR</th><th>DST.PORT</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td>1字节</td><td>1字节</td><td>1-255字节</td><td>2字节</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，固定0x05</li><li>COMMAND 命令<ul><li>0x01 CONNECT 连接上游服务器</li><li>0x02 BIND 绑定，客户端会接收来自代理服务器的链接，著名的FTP被动模式</li><li>0x03 UDP ASSOCIATE UDP中继</li></ul></li><li>RSV 保留字段</li><li>ADDRESS_TYPE 目标服务器地址类型<ul><li>0x01 IP V4地址</li><li>0x03 域名地址(没有打错，就是没有0x02)，域名地址的第1个字节为域名长度，剩下字节为域名名称字节数组</li><li>0x04 IP V6地址</li></ul></li><li>DST.ADDR 目标服务器地址</li><li>DST.PORT 目标服务器端口</li></ul><h4><span id="42-代理服务器响应">4.2 代理服务器响应</span></h4><table><thead><tr><th>VERSION</th><th>RESPONSE</th><th>RSV</th><th>ADDRESS_TYPE</th><th>BND.ADDR</th><th>BND.PORT</th></tr></thead><tbody><tr><td>1字节</td><td>1字节</td><td>1字节</td><td>1字节</td><td>1-255字节</td><td>2字节</td></tr></tbody></table><ul><li>VERSION SOCKS协议版本，固定0x05</li><li>RESPONSE 响应命令<ul><li>0x00 代理服务器连接目标服务器成功</li><li>0x01 代理服务器故障</li><li>0x02 代理服务器规则集不允许连接</li><li>0x03 网络无法访问</li><li>0x04 目标服务器无法访问（主机名无效）</li><li>0x05 连接目标服务器被拒绝</li><li>0x06 TTL已过期</li><li>0x07 不支持的命令</li><li>0x08 不支持的目标服务器地址类型</li><li>0x09 - 0xFF 未分配</li></ul></li><li>RSV 保留字段</li><li>BND.ADDR 代理服务器连接目标服务器成功后的代理服务器IP</li><li>BND.PORT 代理服务器连接目标服务器成功后的代理服务器端口</li></ul><h2><span id="5-通信过程">5. 通信过程</span></h2><blockquote><p>　经过认证与命令过程后，客户端与代理服务器进入正常通信，客户端发送需要请求到目标服务器的数据给代理服务器，代理服务器转发这些数据，并把目标服务器的响应转发给客户端，起到一个“透明代理”的功能。</p></blockquote><h2><span id="6-实际例子">6. 实际例子</span></h2><p>上文详细讲解了协议规范，下面来一个实例的通信过程范例。</p><p><em>6.2中无需认证和需要账号密码认证是互斥的</em>，同一请求只会采取一种，本文都列在下面。</p><h3><span id="61-客户端发送受支持的认证方法">6.1 客户端发送受支持的认证方法</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x02 0x00 0x02</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x02 支持的认证方法数量</li><li>0x00 免认证</li><li>0x02 账号密码认证</li></ul><h3><span id="62-服务端响应选择的认证方法">6.2 服务端响应选择的认证方法</span></h3><h4><span id="621-无需认证">6.2.1 无需认证</span></h4><blockquote><p>以下是无需认证，客户端收到该响应后直接发送需要发送给目标服务器的数据给到代理服务器，此时进入通信错过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x00</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x00 免认证</li></ul><h4><span id="622-需要账号密码认证">6.2.2 需要账号密码认证</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x02</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x02 账号密码认证</li></ul><h4><span id="623-客户端发送账号密码">6.2.3 客户端发送账号密码</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x01 0x04 0x61 0x61 0x61 0x61 0x04 0x61 0x61 0x61 0x61</div></pre></td></tr></table></figure><ul><li>0x01 子协商版本</li><li>0x04 用户名长度</li><li>0x61 0x61 0x61 0x61 转换为ascii字符之后为”aaaa”</li><li>0x04 密码长度</li><li>0x61 0x61 0x61 0x61 转换为ascii字符之后”aaaa”</li></ul><h4><span id="624-代理服务器响应认证结果">6.2.4 代理服务器响应认证结果</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x01 0x00</div></pre></td></tr></table></figure><ul><li>0x01 子协商版本</li><li>0x00 认证成功（也就是代理服务器允许aaaa账号以aaaa密码登录）</li></ul><h3><span id="63-客户端请求代理服务器连接目标服务器">6.3 客户端请求代理服务器连接目标服务器</span></h3><p>以127.0.0.1和80端口为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x01 0x01 0x01 0x7f 0x00 0x00 0x01 0x00 0x50</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS协议版本</li><li>0x01 CONNECT命令</li><li>0x01 RSV保留字段</li><li>0x01 地址类型为IPV4</li><li>0x7f 0x00 0x00 0x01 目标服务器IP为127.0.0.1</li><li>0x00 0x50 目标服务器端口为80</li></ul><h3><span id="64-代理服务器连接目标主机并返回结果给客户端">6.4 代理服务器连接目标主机，并返回结果给客户端</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x05 0x00 0x01 0x01 0x7f 0x00 0x00 0x01 0x00 0xaa 0xaa</div></pre></td></tr></table></figure><ul><li>0x05 SOCKS5协议版本</li><li>0x00 连接成功</li><li>0x01 RSV保留字段</li><li>0x01 地址类型为IPV4</li><li>0x7f 0x00 0x00 0x01 代理服务器连接目标服务器成功后的代理服务器IP, 127.0.0.1</li><li>0xaa 0xaa 代理服务器连接目标服务器成功后的代理服务器端口（代理服务器使用该端口与目标服务器通信），本例端口号为43690</li></ul><h3><span id="65-客户端发送请求数据给代理服务器">6.5 客户端发送请求数据给代理服务器</span></h3><p>如果客户端需要请求目标服务器的HTTP服务,就会发送HTTP协议报文给代理服务器,代理服务器将这些报文原样转发给目标服务器,并将目标服务器的响应发送给客户端,代理服务器不会对客户端或者目标服务器的报文做任何解析。</p><h2><span id="7-结尾">7. 结尾</span></h2><p>SOCKS5协议的讲解到此结束，后续会使用GOLANG实现一个SOCKS5服务器来讲述TCP协议服务器的开发。</p><p><img src="https://static.ddhigh.com/blog/2019-08-24-085213.jpg" alt="关注公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;socks5代理协议&quot;&gt;Socks5代理协议&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;或许你没听说过socks5，但你一定听说过SS，SS内部使用的正是socks5协议。&lt;/p&gt;
&lt;p&gt;socks5是一种网络传输协议，主要用于客户端与目标服务器之间通讯的透明传递。
      
    
    </summary>
    
      <category term="protocol" scheme="https//www.ddhigh.com/categories/protocol/"/>
    
    
      <category term="socks5" scheme="https//www.ddhigh.com/tags/socks5/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(5)——中间件</title>
    <link href="https//www.ddhigh.com/2019/08/23/nestjs-middlware.html"/>
    <id>https//www.ddhigh.com/2019/08/23/nestjs-middlware.html</id>
    <published>2019-08-23T02:40:49.000Z</published>
    <updated>2019-08-26T06:04:37.708Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="中间件">中间件</span></h2><p>中间件是在路由处理程序<strong>之前</strong>调用的函数。中间件函数可以访问<strong>请求</strong>和<strong>响应</strong>对象。</p><p>使用过koa和express的朋友应该知道，中间件是一个很核心的功能，尤其是koa，核心就是中间件，连路由功能都是由中间件提供的。</p><p>中间件可以提供以下功能：</p><ul><li>运行过程中执行任意代码</li><li>对请求和响应进行更改</li><li>结束本次请求的响应</li><li>继续调用下一个中间件</li></ul><h2><span id="示例">示例</span></h2><p>NestJs使用<code>@Injectable()</code>来装饰中间件，被装饰的对象应该实现<code>NestMiddleware</code>接口。</p><p>以下是一个日志中间件的实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// log.middleware.ts</span></div><div class="line"><span class="keyword">import</span> &#123;Injectable, NestMiddleware&#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Request, Response&#125; <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> LogMiddleware <span class="keyword">implements</span> NestMiddleware &#123;</div><div class="line">    use(req: Request, resp: Response, next: <span class="built_in">Function</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.path&#125;</span>`</span>)</div><div class="line">        next();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.module.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">      .forRoutes(<span class="string">'users'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="针对请求方法应用中间件">针对请求方法应用中间件</span></h2><p>上面的简单示例中会对所有的<code>users</code>路由应用中间件，如果需要只对特定的请求方法，比如GET请求才应用中间件，可以使用以下方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">       .forRoutes(&#123; path: <span class="string">'users'</span>, method: RequestMethod.GET &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="应用多个中间件">应用多个中间件</span></h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware, OtherMiddleware)</div><div class="line">       .forRoutes(&#123; path: <span class="string">'users'</span>, method: RequestMethod.GET &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="基于控制器名称应用中间件">基于控制器名称应用中间件</span></h2><p>上述代码都是针对固定的路由地址应用中间件，在NestJs中路由地址是通过装饰器定义的，如果控制器的路由地址有变化，而中间件这里没有跟着改掉，就会导致问题。</p><p>NestJs在使用中间件的时候提供了基于控制器来注册的方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">       .forRoutes(UserController);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="排除指定路由">排除指定路由</span></h2><p>有些场景下对控制器应用了中间件之后需要绕过其中几个方法，比如登录验证中间件应该放行登录路由，否则没有人能够登录成功。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LogMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/log.middleware'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserModule &#125; <span class="keyword">from</span> <span class="string">'./user/user.module'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  imports: [UserModule],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</div><div class="line">  configure(consumer: MiddlewareConsumer) &#123;</div><div class="line">    consumer</div><div class="line">      .apply(LogMiddleware)</div><div class="line">      .exclude(</div><div class="line">          &#123;path:<span class="string">'users/login'</span>,method:RequestMethod.GET&#125;</div><div class="line">      )</div><div class="line">       .forRoutes(UserController);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="全局中间件">全局中间件</span></h2><p>类似于全局模块，中间件也可以全局注册，对每一个路由都生效。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.ts</span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</div><div class="line">app.use(LogMiddleware);</div><div class="line"><span class="keyword">await</span> app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><h2><span id="结尾">结尾</span></h2><p>中间件给框架赋予了极大的灵活性，可以根据功能抽象为中间件，达到”可插拔“的目的。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(4)——模块系统</title>
    <link href="https//www.ddhigh.com/2019/08/22/nestjs-module.html"/>
    <id>https//www.ddhigh.com/2019/08/22/nestjs-module.html</id>
    <published>2019-08-22T03:27:38.000Z</published>
    <updated>2019-08-22T04:00:21.230Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="模块">模块</span></h2><p>NestJs中模块是构建和组织业务单元的基本元素。使用<code>@Module()</code>装饰模块来声明该模块的元信息：</p><ul><li>本模块导出哪些服务提供者</li><li>本模块导入了哪些依赖模块</li><li>本模块提供了哪些控制器</li></ul><p>每个NestJs至少有一个跟模块，这个就是<code>app.module.ts</code>定义的。根模块一般不放具体的业务逻辑，具体业务逻辑应该下沉到各个子业务模块去做。</p><p>比如我们开发一个商城系统，该系统有以下业务模块：</p><ul><li>订单中心</li><li>用户中心</li><li>支付中心</li><li>商品中心</li><li>物流中心</li></ul><p>那我们可以定义以下的模块结构:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">|-- app.module.ts</span></div><div class="line"><span class="string">|-- order</span></div><div class="line">    <span class="string">|-- order.module.ts</span></div><div class="line">    <span class="string">|-- services</span></div><div class="line">        <span class="string">|-- order.service.ts</span></div><div class="line">    <span class="string">|-- controllers</span></div><div class="line">        <span class="string">|-- order.controller.ts</span></div><div class="line"><span class="string">|-- user</span></div><div class="line">    <span class="string">|-- user.module.ts</span></div><div class="line">    <span class="string">|-- services</span></div><div class="line">        <span class="string">|-- user.service.ts</span></div><div class="line">    <span class="string">|-- controllers</span></div><div class="line">        <span class="string">|-- user.controller.ts</span></div><div class="line"><span class="string">|-- pay</span></div><div class="line">    <span class="string">|-- pay.module.ts</span></div><div class="line">    <span class="string">|-- services</span></div><div class="line">        <span class="string">|-- wepay.service.ts</span></div><div class="line">        <span class="string">|-- alipay.service.ts</span></div><div class="line">        <span class="string">|-- pay.service.ts</span></div><div class="line">    <span class="string">|-- controller</span></div><div class="line">        <span class="string">|-- pay.controller.ts</span></div><div class="line">...</div></pre></td></tr></table></figure><p>模块化有以下优点：</p><ul><li>业务低耦合</li><li>边界清晰</li><li>便于排查错误</li><li>便于维护</li></ul><h2><span id="模块声明与配置">模块声明与配置</span></h2><p><code>@Module()</code>装饰的类为<code>模块类</code>，该装饰器的典型用法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [UserService],</div><div class="line">    controllers: [UserController],</div><div class="line">    imports: [OrderModule],</div><div class="line">    exports: [UserService]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">proviers</td><td style="text-align:left">服务提供者列表，本模块可用，可以自动注入</td></tr><tr><td style="text-align:left">controllers</td><td style="text-align:left">控制器列表，本模块可用，用来绑定路由访问</td></tr><tr><td style="text-align:left">imports</td><td style="text-align:left">本模块导入的模块，如果需要使用到其他模块的服务提供者，此处必须导入其他模块</td></tr><tr><td style="text-align:left">exports</td><td style="text-align:left">本模块导出的服务提供者，只有在此处定义的服务提供者才能在其他模块使用</td></tr></tbody></table><h2><span id="模块重导出">模块重导出</span></h2><p>ts中有以下用法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> A &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.ts</span></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./a'</span>;</div></pre></td></tr></table></figure><p>我们在使用的时候直接使用以下代码即可，方面封装</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;A&#125; <span class="keyword">from</span> <span class="string">'./index'</span></div></pre></td></tr></table></figure><p>NestJs中的模块也有类似用法，比如我们定义了两个基本模块，这两个基本模块用的时候基本都是一起导入的，此时我们通过模块重导出将其封装到一个叫<code>CoreModule</code>，其他地方直接导入<code>CoreModule</code>即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [CommonService],</div><div class="line">    exports: [CommonService]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CommonModule &#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [Util],</div><div class="line">    exports: [Util]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UtilModule &#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    imports: [CommonModule, UtilModule],</div><div class="line">    exports: [CommonModule, UtilModule]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CoreModule &#123;&#125;</div></pre></td></tr></table></figure><h2><span id="模块初始化与依赖注入">模块初始化与依赖注入</span></h2><p>如果需要在模块实例化的时候运行一些逻辑，而且该逻辑有外部依赖的时候，可以通过以下方式处理</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  controllers: [UserController],</div><div class="line">  providers: [UserService],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> catsModule &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123; <span class="comment">// 没有@Inject</span></div><div class="line">    <span class="comment">// 调用userService</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="全局模块">全局模块</span></h2><p>上面定义的模块都是需要手动<code>imports</code>进来的，如果有些模块是使用率很高的，比如工具模块，此时可以声明为全局模块。</p><p>使用<code>@Global()</code>即可声明全局模块。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Global</span>()</div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">  controllers: [UserController],</div><div class="line">  providers: [UserService],</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> catsModule &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="动态模块">动态模块</span></h2><p>上面定义的都是静态模块，如果我们需要动态声明我们的模块，比如数据库模块，连接成功我才返回模块，此时需要使用动态模块来处理。</p><p>使用<code>模块名.forRoot()</code>方法来返回模块定义，通过该方式定义的即为动态模块。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [DatabaseProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DatabaseModule &#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">async</span> forRoot(env: <span class="built_in">string</span>) &#123;</div><div class="line">         <span class="keyword">const</span> provider =  createDatabaseProvider(env); <span class="comment">// 根据环境变量连接不同的数据库</span></div><div class="line">         <span class="keyword">return</span> &#123;</div><div class="line">             <span class="keyword">module</span>: DatabaseModule,</div><div class="line">             providers: [provider],</div><div class="line">             exports: [provider]</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    imports: [DatabaseModule.forRoot(<span class="string">'production'</span>)]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</div></pre></td></tr></table></figure><h2><span id="生产环境下的姿势">生产环境下的姿势</span></h2><p>上面有一个商城系统的模块例子，当我们的业务模块开发完毕之后，需要将其注册到AppModule，这样才能生效，这个也有个好处，有点像插拔的例子，当需要下掉一个业务时，业务代码不动，在AppModule取消注册即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    imports:[UserModule,GoodsModule,OrderModule,PayModule]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure><h2><span id="结尾">结尾</span></h2><p>模块系统是NestJs另一个重要的特性，个人认为是基于DDD思想的，每个模块就是一个单独的领域业务，可以由一个小组去独立开发。多个模块时可以同时开发，如果有依赖问题的话，可以先把模块和响应的interface公开出去，别人正常调用你的interface，当实现类开发完毕之后NestJs会自动注入该实现类，调用方的代码不用更改。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(3)——服务提供者</title>
    <link href="https//www.ddhigh.com/2019/08/21/nestjs-provider.html"/>
    <id>https//www.ddhigh.com/2019/08/21/nestjs-provider.html</id>
    <published>2019-08-21T02:27:42.000Z</published>
    <updated>2019-08-21T03:58:14.449Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="简介">简介</span></h2><p>服务提供者是NestJs一个非常重要的概念，一般来说，被装饰器<code>@Injectable()</code>修饰的类都可以视为服务提供者。服务提供者一般包含以下几种：</p><ul><li>Services(业务逻辑)</li><li>Factory(用来创建提供者)</li><li>Repository(数据库访问使用)</li><li>Utils(工具函数)</li></ul><h2><span id="使用">使用</span></h2><p>下文中将以Services来说明服务提供者的具体使用。</p><p>典型的MVC架构中其实有一个问题，业务逻辑到底放哪里？</p><ul><li>放在控制器，代码复用成了问题，不可能去New一个控制器然后调用方法，控制器方法都是根据路由地址绑定的</li><li>放在Model，导致Model层臃肿，Model应该是直接和数据库打交道的，业务逻辑跟数据库的关系并不是强制绑定的，只有业务逻辑涉及到数据查询/存储才会使用到Model层</li></ul><p>现阶段比较流行的架构是多添加一个Services层来写业务逻辑，分离Model层不应该做的事情。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 业务类 user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserServices &#123;</div><div class="line">  <span class="keyword">private</span> readonly users: User[] = [];</div><div class="line"></div><div class="line">  create(user: User) &#123;</div><div class="line">    <span class="keyword">this</span>.users.push(user);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  findAll(): User[] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.users;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用户控制器</span></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService</span>) &#123;&#125; <span class="comment">// 注入UserService</span></div><div class="line"></div><div class="line">    <span class="meta">@Post</span>()</div><div class="line">    <span class="keyword">async</span> create(<span class="meta">@Body</span>() createUserDTO:CreateUserDTO) &#123;</div><div class="line">        <span class="keyword">this</span>.userService.create(createUserDTO);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Get</span>()</div><div class="line">    <span class="keyword">async</span> findAll() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.findAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="服务提供者的scope">服务提供者的Scope</span></h2><p>SpringBoot中提供了Scope注解来指明Bean的作用域，NestJs也提供了类似的<code>@Scope()</code>装饰器：</p><table><thead><tr><th style="text-align:left">scope名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SINGLETON</td><td style="text-align:left">单例模式，整个应用内只存在一份实例</td></tr><tr><td style="text-align:left">REQUEST</td><td style="text-align:left">每个请求初始化一次</td></tr><tr><td style="text-align:left">TRANSIENT</td><td style="text-align:left">每次注入都会实例化</td></tr></tbody></table><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Injectable</span>(&#123;scope: Scope.REQUEST&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="可选的依赖项">可选的依赖项</span></h2><p>默认情况下，如果依赖注入的对象不存在会提示错误，中断应用运行，此时可以使用<code>@Optional()</code>来指明选择性注入，但依赖注入的对象不存在时不会发生错误。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">    constructor(@Optional() private readonly userService:UserService)&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="基于属性的注入">基于属性的注入</span></h2><p>上文中的注入都是基于构造函数的，这样做有一个缺陷，如果涉及到继承的话，子类必须显示调用<code>super</code>来实例化父类。如果父类的构造函数参数过多的话反而成了子类的负担。</p><p>针对这个问题，NestJs建议的方式是<code>基于属性</code>进行注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="meta">@Inject</span>()</div><div class="line">    <span class="keyword">private</span> readonly userService:UserService;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="服务提供者注册">服务提供者注册</span></h2><p>只有被注册过的服务提供者才能被NestJs进行自动注入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    controllers:[UserController], <span class="comment">// 注册控制器</span></div><div class="line">    providers: [UserServices], <span class="comment">// 注册服务提供者，可以是services,factory等等</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="自定义服务提供者">自定义服务提供者</span></h2><h3><span id="使用值">使用值</span></h3><p>上文中提供的Services一般用在编写业务逻辑，结构基本是固定的，如果需要集成其他库作为注入对象的话，需要使用的自定义的服务提供者。</p><p>比如我们使用sequelize创建了数据库连接，想把他注入到我们的Services中进行数据库操作。可以使用以下方式进行处理：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sequelize.ts 数据库访问</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(&#123;</div><div class="line">    <span class="comment">///</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sequelize.provider.ts</span></div><div class="line"><span class="keyword">import</span> &#123;sequelize&#125; <span class="keyword">from</span> <span class="string">'./sequelize'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> sequelizeProvider = &#123;</div><div class="line">    provide: <span class="string">'SEQUELIZE'</span>, <span class="comment">// 服务提供者标识</span></div><div class="line">    useValue: sequelize, <span class="comment">// 直接使用值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers:[UserService, sequelizeProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">    constructor(@Inject('SEQUELIZE') private readonly sequelize: Sequelize) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="使用类">使用类</span></h3><p>OOP的一个重要思想就是<code>面向接口化</code>设计，比如我们开发了一个日志接口，有写入本地文件的实现，也有写入syslog的实现。依赖注入到时候我们希望使用接口进行注入，而不是具体的实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logger.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Logger &#123;</div><div class="line">    log(log:<span class="built_in">string</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file.logger.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FileLogger <span class="keyword">implements</span> Logger &#123;</div><div class="line">    log(log:<span class="built_in">string</span>) &#123;</div><div class="line">        <span class="comment">// 写入本地文件</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// syslog.logger.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SyslogLogger <span class="keyword">implements</span> Logger &#123;</div><div class="line">    log(log:<span class="built_in">string</span>) &#123;</div><div class="line">        <span class="comment">// 写入Syslog</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logger.provider.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> loggerProvider = &#123;</div><div class="line">    provide: Logger, <span class="comment">// 使用接口标识</span></div><div class="line">    useClass: process.env.NODE_ENV===<span class="string">'development'</span>?FileLogger:SyslogLogger, <span class="comment">// 开发日志写入本地，生产日志写入syslog</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers:[UserService,loggerProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">    constructor(@Inject(Logger) private readonly logger: Logger) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="使用工厂">使用工厂</span></h3><p>工厂模式相信大家都不陌生，工厂模式本质上是一个函数或者方法，返回我们需要的产品。</p><p>传统的第三方库都是提供callback形式或者事件形式的进行连接，比如redis，如果需要使用该类型的注入对象，工厂模式是最佳方式。</p><p>以下是使用工厂模式创建数据库连接的例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// database.provider.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> databaseProvider = &#123;</div><div class="line">    provide:<span class="string">'DATABASE'</span>,</div><div class="line">    useFactory: <span class="keyword">async</span>(optionsProvider: OptionsProvider) &#123; <span class="comment">// 使用依赖，注入顺序和下面定义的顺序一致</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> connection = createConnection(optionsProvider.getDatabaseConfig())</div><div class="line">            connection.on(<span class="string">'ready'</span>,<span class="function"><span class="params">()</span>=&gt;</span>resolve(connection));</div><div class="line">            connection.on(<span class="string">'error'</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>reject(e));</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    inject:[OptionsProvider], <span class="comment">// 注入依赖</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.module.ts</span></div><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers:[OptionsProvider, databaseProvider]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user.service.ts</span></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</div><div class="line">    constructor(@Inject('DATABASE') private readonly connection: Connection) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="别名方式">别名方式</span></h3><p>别名方式可以基于现有的提供者进行创建。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> loggerAliasProvider = &#123;</div><div class="line">  provide: <span class="string">'AliasedLoggerService'</span>,</div><div class="line">  useExisting: Logger,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2><span id="导出服务提供者到其他模块">导出服务提供者到其他模块</span></h2><p>模块的详细知识将在后文提到，但是有一点需要提前知道，<code>只有被模块导出的服务提供者才能被其他模块导入</code></p><h3><span id="基于类型的导出">基于类型的导出</span></h3><p>上文中的<code>UserService</code>是基于类型而不是进入名称进行注入的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [UserService],</div><div class="line">    exports: [UserService], <span class="comment">// 重要</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</div></pre></td></tr></table></figure><h3><span id="基于名称的导出">基于名称的导出</span></h3><p>上文中<code>DATABASE</code>和<code>SEQUELIZE</code>这种服务提供者都是自定义的，而且指定的标识符。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(&#123;</div><div class="line">    providers: [sequelizeProvider],</div><div class="line">    exports: [<span class="string">'SEQUELIZE'</span>], <span class="comment">// 其他模块的组件直接使用@Inject('SEQUELIZE')即可</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2><span id="结尾">结尾</span></h2><p>服务提供者是NestJs的精华之一，提供了几种方式方便我们在各种环境下的服务提供者创建。</p><p>如果您觉得有所收获，分享给更多需要的朋友，谢谢！</p><p>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(2)——控制器</title>
    <link href="https//www.ddhigh.com/2019/08/20/nestjs-controller.html"/>
    <id>https//www.ddhigh.com/2019/08/20/nestjs-controller.html</id>
    <published>2019-08-20T02:10:21.000Z</published>
    <updated>2019-08-20T06:30:34.732Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="mvc">MVC</span></h2><p>说到控制器就不得不说经典的MVC架构。</p><blockquote><p>MVC模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><ul><li>控制器（Controller）- 负责转发请求，对请求进行处理，处理完毕后输出响应。</li><li>视图 （View） - 界面设计人员进行图形界面设计</li><li>模型 （Model）- 数据库查询和业务逻辑</li></ul></blockquote><p>可以看到控制器起着承上启下的作用，是Web开发中必备的一环，视图和模型倒不是必须的，理由如下：</p><ol><li>API项目直接输出JSON数据，无需渲染页面</li><li>无数据库或者复杂业务逻辑的项目时可以把请求处理直接在控制器完成</li></ol><h2><span id="路由">路由</span></h2><p>控制器的目的是接收应用程序的特定请求。基于路由机制来实现请求的分发。通常，每个控制器具有多个路由，并且不同的路由可以执行不同的动作。</p><p>为了创建一个基本的控制器，我们使用类和装饰器。装饰器将类与所需的元数据相关联，并使Nest能够创建路由映射（将请求绑定到相应的控制器）。</p><h2><span id="控制器定义">控制器定义</span></h2><p>使用<code>@Controller</code>装饰器来定义控制器，传入一个可选的路由前缀可以将该控制器绑定到该前缀。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'cats'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsController &#123;</div><div class="line">  <span class="meta">@Get</span>(<span class="string">'list'</span>)</div><div class="line">  findAll(): <span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'This action returns all cats'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Get</span>(<span class="string">'show'</span>)</div><div class="line">  fineOne(): <span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'one cat'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  index():<span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'index'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上例程会生成以下路由：</p><ol><li>GET /cats/list CatsController::findAll方法处理</li><li>GET /cats/show CatsController::show方法处理</li><li>GET /cats CatsController::index方法处理</li></ol><p>上述例程使用的是<code>@Get</code>装饰器，所以只能处理<code>GET</code>请求，以下是支持的请求方法与对应的装饰器</p><table><thead><tr><th style="text-align:left">请求方法</th><th style="text-align:left">装饰器名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td style="text-align:left">@Get</td><td style="text-align:left">匹配GET请求</td></tr><tr><td style="text-align:left">POST</td><td style="text-align:left">@Post</td><td style="text-align:left">匹配POST请求</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">@Put</td><td style="text-align:left">匹配PUT请求</td></tr><tr><td style="text-align:left">HEAD</td><td style="text-align:left">@Head</td><td style="text-align:left">匹配HEAD请求</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">@Delete</td><td style="text-align:left">匹配DELETE请求</td></tr><tr><td style="text-align:left">OPTIONS</td><td style="text-align:left">@Options</td><td style="text-align:left">匹配OPTIONS请求</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">@All</td><td style="text-align:left">匹配所有请求方法</td></tr></tbody></table><h2><span id="动态路由">动态路由</span></h2><p>上文中的路由方法接收的参数是固定的，所以只能匹配固定的请求，如果路由地址是动态变化的(<code>路由地址指请求的path，不包括QueryString</code>)，则上述路由定义方式无法正常工作。</p><p>NestJs支持基于路径的路由定义，使用如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="meta">@Controller</span>, Get&#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'cats'</span>)</div><div class="line"><span class="keyword">class</span> CatsController &#123;</div><div class="line">    <span class="meta">@Get</span>(<span class="string">':id'</span>)</div><div class="line">    findOne(<span class="meta">@Param</span>() params): <span class="built_in">string</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(params.id);</div><div class="line">        <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;params.id&#125;</span> cat`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当请求<code>/cats/猫ID</code>这种动态路由时(<code>因为猫ID是path的一部分，所以path是变化的</code>)，<code>params.id</code>就是<code>猫ID</code>，做过Vue或者React开发的读者应该熟悉以下写法：</p><p>路由定义 <code>/user/:userId/orders/:orderId</code><br>页面地址 <code>/user/1/orders/2</code></p><p>访问以上页面将产生以下参数:</p><ul><li>userId =&gt; 1</li><li>orderId =&gt; 2</li></ul><p>NestJs在这方面是一致的。</p><h2><span id="请求参数">请求参数</span></h2><p>上述例子中，我们使用<code>@Params</code>读取了请求路径上的动态参数。NestJs还支持以下的装饰器来获取不同的请求参数</p><table><thead><tr><th style="text-align:left">装饰器名称</th><th style="text-align:left">底层对象</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">@Request()</td><td style="text-align:left">req</td><td style="text-align:left">原始请求对象</td></tr><tr><td style="text-align:left">@Response()</td><td style="text-align:left">res</td><td style="text-align:left">原始响应对象</td></tr><tr><td style="text-align:left">@Param(key?:string)</td><td style="text-align:left">req.params或req.params[key]</td><td style="text-align:left">路径参数</td></tr><tr><td style="text-align:left">@Body(key?:string)</td><td style="text-align:left">req.body或req.body[key]</td><td style="text-align:left">请求体，支持表单或JSON</td></tr><tr><td style="text-align:left">@Query(key?:string)</td><td style="text-align:left">req.query或req.query[key]</td><td style="text-align:left">请求链接的查询字符串</td></tr><tr><td style="text-align:left">@Headers(name?:string)</td><td style="text-align:left">req.headers或req.headers[key]</td><td style="text-align:left">请求头</td></tr></tbody></table><h2><span id="请求体">请求体</span></h2><p>在POST/PUT/PATCH请求中，会包含请求体，NestJs通过<code>@Body</code>装饰器可以自动获取该数据。比如如下代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'user'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppController &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly appService: AppService</span>) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="meta">@Post</span>()</div><div class="line">  findAll(<span class="meta">@Body</span>() data: <span class="built_in">any</span>) &#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上例程会原样输出请求内容。</p><h3><span id="请求体绑定">请求体绑定</span></h3><p>SpringBoot中<code>@RequestBody</code>注解可以直接绑定到给定的POJO对象实现请求参数自动注入，在NestJs中，该特性也得到了支持。</p><p>定义DTO对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserLoginDTO &#123;</div><div class="line">    readonly username: <span class="built_in">string</span>;</div><div class="line">    readonly password: <span class="built_in">string</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义控制器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">class</span> UserController() &#123;</div><div class="line">    <span class="meta">@Post</span>(<span class="string">'login'</span>)</div><div class="line">    login(<span class="meta">@Body</span>() userLoginDTO: UserLoginDTO) &#123;</div><div class="line">        <span class="built_in">console</span>.log(userLoginDTO.username, userLoginDTO.password);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到与SpringBoot的开发体验几乎一致。</p><h2><span id="响应头">响应头</span></h2><p>如果需要输出响应头，可以使用<code>@Header(name:string,value:string)</code>装饰器来进行处理。</p><p><code>请注意：响应头使用@Header()装饰器，请求头使用@Headers()装饰器，末尾有个s的区别!</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="meta">@Head</span>(<span class="string">':id'</span>)</div><div class="line">    <span class="meta">@Header</span>(<span class="string">'x-version'</span>, <span class="string">'1.0.0'</span>)</div><div class="line">    function head(@Param('id') id:number) &#123;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2><span id="响应状态码">响应状态码</span></h2><p>从响应体的设计可以发现一个问题，由于不推荐直接操纵<code>response</code>对象，如果需要输出响应状态码怎么办?NestJs也为我们提供了解决方案。</p><p>使用<code>@HttpCode(statusCode:number)</code>装饰器可以设定响应状态码。</p><p>在Restful API设计中，DELETE请求应当返回<code>204 No Content</code>状态码，如下代码所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">class</span> UserController &#123;</div><div class="line">    <span class="meta">@DELETE</span>(<span class="string">":id"</span>)</div><div class="line">    <span class="meta">@HttpCode</span>(<span class="number">204</span>)</div><div class="line">    <span class="keyword">delete</span>(<span class="meta">@Param</span>(<span class="string">'id'</span>) id:<span class="built_in">number</span>) &#123;</div><div class="line">        <span class="comment">// 删除成功不需要返回数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="响应体">响应体</span></h2><p>在express或者开发中，响应内容都是我们手动赋值或者输出的，但是在NestJs，可以直接根据路由函数的返回值<code>类型</code>自动识别响应体类型。NestJs支持以下格式的响应：</p><table><thead><tr><th style="text-align:left">TS类型</th><th style="text-align:left">响应类型</th><th style="text-align:left">响应格式</th></tr></thead><tbody><tr><td style="text-align:left">string</td><td style="text-align:left">字符串</td><td style="text-align:left">text/html</td></tr><tr><td style="text-align:left">object</td><td style="text-align:left">JSON</td><td style="text-align:left">application/json</td></tr><tr><td style="text-align:left">array</td><td style="text-align:left">JSON</td><td style="text-align:left">application/json</td></tr><tr><td style="text-align:left">null</td><td style="text-align:left">无(响应体长度为0)</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">undefined</td><td style="text-align:left">无(响应体长度为0)</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">Promise&lt;*&gt;</td><td style="text-align:left">根据Promise返回的结果类型确定(规则如上)</td><td style="text-align:left">-</td></tr></tbody></table><h2><span id="异步路由函数">异步路由函数</span></h2><p>在前面的例子中，我们所有的路由处理函数都是同步的，但是在实际开发中基本不可能，一旦涉及到数据库访问、缓存访问就会存在IO，有IO就会有异步。</p><p>NestJs天生完美支持异步，有以下两种方法进行异步编程：</p><h3><span id="promise">Promise</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Get</span>()</div><div class="line"><span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve([]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="rxjs">RxJs</span></h3><p>RxJs中提供了<code>Observable</code>对象，NestJs可以自动订阅并获取最后一次产生的值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Get</span>()</div><div class="line">findAll: Observable&lt;<span class="built_in">any</span>[]&gt; &#123;</div><div class="line">    <span class="keyword">return</span> of([]); <span class="comment">// of为RxJs操作符</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="实现一个restful-api">实现一个Restful API</span></h2><p>以下是基于Restful API规范开发的API，本文的主要内容为控制器，所以DTO对象的创建省略。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Controller, Get, Query, Post, Body, Put, Param, Delete &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; CreateCatDto, UpdateCatDto, ListAllEntities &#125; <span class="keyword">from</span> <span class="string">'./dto'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>(<span class="string">'users'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UsersController &#123;</div><div class="line">  <span class="comment">// 创建用户，POST请求会自动返回201状态码，响应体为空</span></div><div class="line">  <span class="meta">@Post</span>()</div><div class="line">  create(<span class="meta">@Body</span>() dto: CreateUserDto) &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 用户列表</span></div><div class="line">  <span class="meta">@Get</span>()</div><div class="line">  findAll() &#123;</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">          &#123;id:<span class="number">1</span>,username:<span class="string">'a'</span>,password:<span class="string">'a'</span>&#125;,</div><div class="line">          &#123;id:<span class="number">2</span>,username:<span class="string">'b'</span>,password:<span class="string">'b'</span>&#125;</div><div class="line">      ];</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 查看用户</span></div><div class="line">  <span class="meta">@Get</span>(<span class="string">':id'</span>)</div><div class="line">  findOne(<span class="meta">@Param</span>(<span class="string">'id'</span>) id: <span class="built_in">number</span>) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;id,username:<span class="string">'mock username'</span>, password: <span class="string">'mock password'</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 更新用户，需要返回编辑后的用户资源</span></div><div class="line">  <span class="meta">@Put</span>(<span class="string">':id'</span>)</div><div class="line">  update(<span class="meta">@Param</span>(<span class="string">'id'</span>) id: <span class="built_in">number</span>, <span class="meta">@Body</span>() updateUserDto: UpdateUserDto) &#123;</div><div class="line">      <span class="keyword">return</span> &#123;id,username:<span class="string">'updated username'</span>,password: <span class="string">'updated password'</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 删除用户，返回204状态码</span></div><div class="line">  <span class="meta">@Delete</span>(<span class="string">':id'</span>)</div><div class="line">  <span class="meta">@HttpCode</span>(<span class="number">204</span>)</div><div class="line">  remove(<span class="meta">@Param</span>(<span class="string">'id'</span>) id: <span class="built_in">number</span>) &#123;</div><div class="line">   </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2><span id="结尾">结尾</span></h2><p>如果您觉得有所收获，请点击右下角在看或者转发朋友圈，分享给更多需要的朋友，谢谢！<br>如果您想交流关于NestJs更多的知识，欢迎加群讨论！</p><p><img src="https://more-happy.ddhigh.com/Fi58A_3OsMbbcZLL0c0Sx982T-Nx?imageView2/1/w/200" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎持续关注&lt;code&gt;NestJs之旅&lt;/code&gt;系列文章&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200&quot; alt=&quot;二维码&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nestjs" scheme="https//www.ddhigh.com/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>NestJs学习之旅(1)——快速开始</title>
    <link href="https//www.ddhigh.com/2019/08/19/nestjs-get-started.html"/>
    <id>https//www.ddhigh.com/2019/08/19/nestjs-get-started.html</id>
    <published>2019-08-19T02:10:13.000Z</published>
    <updated>2019-08-19T03:45:11.821Z</updated>
    
    <content type="html"><![CDATA[<p>经过<a href="https://www.ddhigh.com/2019/07/18/nodejs-guide-about.html" target="_blank" rel="external">NodeJs系列课程</a>和<a href="https://www.ddhigh.com/2019/07/25/typescript-quick-guide.html" target="_blank" rel="external">Typescript系列课程</a>，终于开始了激动人心的NestJs学习之旅。</p><p>欢迎持续关注<code>NestJs之旅</code>系列文章<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="介绍">介绍</span></h2><p>Nest（或NestJS）是一个用于构建高效，可扩展的Node.js服务器端应用程序的框架。它使用渐进式JavaScript，内置并完全支持TypeScript（但仍然允许开发人员使用纯JavaScript编写代码）并结合了OOP（面向对象编程），FP（功能编程）和FRP（功能反应编程）的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</div><div class="line"></div><div class="line">@Controller(<span class="string">'cats'</span>)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</div><div class="line">  @Get()</div><div class="line">  findAll(): string &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'This action returns all cats'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>熟悉Java的同学应该有似曾相识的感觉，SpringBoot中大量使用注解来简化开发。现在，使用基于ES6装饰器构建的NestJs框架，你也可以做到!</p><h2><span id="优缺点">优缺点</span></h2><p>先说说优点吧：</p><ul><li>完美支持Typescript，因此可以使用日益繁荣的TS生态资源</li><li>兼容express中间件，降低造轮子成本</li><li>完美支持响应式编程框架rxjs</li><li>完美支持依赖注入</li><li>模块化思想，方便开发以及后期维护</li><li>使用装饰器简化开发，减少样板代码</li><li>组件化设计，解决Node.js无全栈框架约束的现存问题</li></ul><p>当然，”缺点”也是有点的，不过熟练之后这些都不是缺点：</p><ul><li>基于TS导致的语言门槛</li><li>代码设计上对模块化/组件化思想有一定要求</li></ul><h2><span id="第一个nestjs应用">第一个NestJs应用</span></h2><p>使用NestJs的命令行工具，可以简化项目的创建以及项目文件的创建。</p><ol><li><code>npm install -g @nestjs/cli</code>安装命令行工具</li><li><code>nest new 项目名称</code>初始化项目</li></ol><p>初始化完毕后可以看到一个完整的项目结果，目录如下(忽略node_modules)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">├── README.md                       自述文件</div><div class="line">├── nest-cli.json                   NestJs项目配置</div><div class="line">├── package.json                    npm文件</div><div class="line">├── src                             项目源码</div><div class="line">│   ├── app.controller.spec.ts      控制器测试文件</div><div class="line">│   ├── app.controller.ts           控制器类</div><div class="line">│   ├── app.module.ts               模块类</div><div class="line">│   ├── app.service.ts              服务类</div><div class="line">│   └── main.ts                     项目入口文件</div><div class="line">├── test                            测试目录</div><div class="line">│   ├── app.e2e-spec.ts             应用e2e测试</div><div class="line">│   └── jest-e2e.json               jest e2e测试配置</div><div class="line">├── tsconfig.build.json             生产环境Typescript所用</div><div class="line">├── tsconfig.json                   开发环境Typescript配置</div><div class="line">├── tslint.json                     tslint配置</div><div class="line">└── yarn.lock                       yarn锁文件</div></pre></td></tr></table></figure><p>NestJs有几大类文件是主要的是下面几种，其他类型的文件在后续课程会讲解；</p><ul><li>module 模块声明(这是NestJs的一个亮点，有点DDD的思想)</li><li>controller 控制器(负责接收数据，返回响应)</li><li>service 服务(主要业务逻辑)</li></ul><p>使用<code>npm run start</code>来运行项目。终端输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [NestFactory] Starting Nest application...</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [InstanceLoader] AppModule dependencies initialized +22ms</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [RoutesResolver] AppController &#123;/&#125;: +12ms</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [RouterExplorer] Mapped &#123;/, GET&#125; route +9ms</div><div class="line">[Nest] 2986   - 08/19/2019, 10:29 AM   [NestApplication] Nest application successfully started +6ms</div></pre></td></tr></table></figure><p>一般来说，看到<code>successfully</code>就可以认为启动成功了。启动失败的话可以根据错误提示进行处理，比较多的情况可能是端口占用导致的错误。</p><p>打开浏览器访问<code>http://localhost:3000</code>即可看到输出<code>Hello World!</code>。</p><h2><span id="to-be-continued">To Be Continued</span></h2><p>下一期将介绍Controller，欢迎持续关注!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过&lt;a href=&quot;https://www.ddhigh.com/2019/07/18/nodejs-guide-about.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJs系列课程&lt;/a&gt;和&lt;a href=&quot;https://www.
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="nest" scheme="https//www.ddhigh.com/tags/nest/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(4)</title>
    <link href="https//www.ddhigh.com/2019/08/06/typescript-quick-guide4.html"/>
    <id>https//www.ddhigh.com/2019/08/06/typescript-quick-guide4.html</id>
    <published>2019-08-06T07:37:39.000Z</published>
    <updated>2019-08-08T03:03:12.750Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文讲解装饰器</p><h2><span id="装饰器">装饰器</span></h2><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，访问符，属性或参数上。 装饰器使用<code>@expression</code>这种形式，expression必须是一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p><blockquote><p>Typescript中的装饰器是一项实验性功能，需要在tsconfig.json中开启该特性</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">        <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例如，有一个<code>@sealed</code>装饰器，我们这样定义<code>sealed</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">    <span class="comment">// 操作被装饰对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="装饰器工厂">装饰器工厂</span></h2><p>如果需要给装饰器添加一些动态行为，比如开发一个监控统计的装饰器，需要传入当前统计的事件名称，有多个事件名称时只需要变更传入的事件名而不用重复定义装饰器。</p><p>这时候需要使用到装饰器工厂。装饰器工厂也是一个函数，只不过它的返回值是一个装饰器。例如如下的事件监控装饰器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">event</span>(<span class="params">eventName: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">        <span class="comment">// 获取到当前eventName和被装饰对象进行操作</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="装饰器组合">装饰器组合</span></h2><p>多个装饰器可以同时应用到被装饰对象上，例如下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@sealed</span></div><div class="line"><span class="meta">@test</span>(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>装饰器执行顺序：</p><ol><li>装饰器工厂需要先求值，再装饰，求值顺序是由上到下</li><li>装饰器可以直接求值，装饰顺序是由下到上</li></ol><p>上面的说明可以难以理解，下面举一个实际的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'f求值'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'f装饰'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'g求值'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'g装饰'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@f</span>()</div><div class="line"><span class="meta">@g</span>()</div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例的执行顺序为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f求值</div><div class="line">g求值</div><div class="line">g装饰</div><div class="line">f装饰</div></pre></td></tr></table></figure><p>因为先求值，所以在上面的f会比g先求值。因为装饰器是由下到上装饰，所以求值后的g比f先执行。</p><h2><span id="装饰器类型">装饰器类型</span></h2><p>根据被装饰的对象不同，装饰器分为以下几类：</p><ol><li>类装饰器</li><li>方法装饰器</li><li>属性装饰器</li><li>函数参数装饰器</li></ol><h2><span id="类装饰器">类装饰器</span></h2><p>类装饰器在定义类的地方。类装饰器可以监视、修改或替换类定义。类的构造函数将作为唯一参数传递给装饰器。如果类装饰器返回一个值，它会使用返回的构造函数替换原来的类声明。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">target: <span class="built_in">Function</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">Object</span>.seal(target);</div><div class="line">    <span class="built_in">Object</span>.seal(target.prototype);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@sealed</span></div><div class="line"><span class="keyword">class</span> Demo &#123;&#125;</div></pre></td></tr></table></figure><p>下面来一个替换构造函数的示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args: <span class="built_in">any</span>[]):&#123;&#125;&#125;&gt;(target: T) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> target &#123;</div><div class="line">        newname = <span class="string">"newName"</span>;</div><div class="line">        age = <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@replace</span></div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    oldname = <span class="string">"oldname"</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">oldname: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.oldname = oldname;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Demo(<span class="string">"oldname"</span>));</div></pre></td></tr></table></figure><p>以上例程会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class_1 &#123; oldname: &apos;oldname&apos;, newname: &apos;newName&apos;, age: 18 &#125;</div></pre></td></tr></table></figure><p>可以看到通过装饰器新增的newname和age属性已经成功注入了。</p><h2><span id="方法装饰器">方法装饰器</span></h2><p>方法装饰器用来装饰类的方法（静态方法和实例方法都可以）。方法装饰器可以监视、修改或替换方法定义。<br>方法装饰器接收3个参数：</p><ol><li>类的原型对象，如果是静态方法则为类的构造函数</li><li>方法名称</li><li>方法的属性描述符</li></ol><p>下面是一个<code>修改</code>方法行为的装饰器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hack</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> oldFunction = target[propertyKey]; <span class="comment">// 获取方法引用</span></div><div class="line">    <span class="keyword">const</span> newFunction = <span class="function"><span class="keyword">function</span>(<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'call function '</span>, propertyKey);</div><div class="line">        oldFunction.call(target, ...args);</div><div class="line">    &#125;</div><div class="line">    descriptor.value = newFunction; <span class="comment">// 替换原声明</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    <span class="meta">@hack</span></div><div class="line">    demo() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'call demo'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> demo = <span class="keyword">new</span> Demo();</div><div class="line">demo.demo();</div></pre></td></tr></table></figure><p>以上例程输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">call function  demo</div><div class="line">call demo</div></pre></td></tr></table></figure><h2><span id="属性装饰器">属性装饰器</span></h2><p>属性装饰器用来装饰类的成员属性。属性装饰器接收两个参数：</p><ol><li>类的原型对象，如果是静态方法则为类的构造函数</li><li>属性名</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">value: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">target[propertyKey] = value;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    <span class="meta">@demo</span>(<span class="string">'haha'</span>) name?: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Demo();</div><div class="line"><span class="built_in">console</span>.log(d.name);</div></pre></td></tr></table></figure><p>属性装饰器多用在属性依赖注入上面</p><h2><span id="函数参数装饰器">函数参数装饰器</span></h2><p>参数装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>参数的名字。</li><li>参数在函数参数列表中的索引。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathParam</span>(<span class="params">paramDesc: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, paramName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</div><div class="line">        !target.$meta &amp;&amp; (target.$meta = &#123;&#125;);</div><div class="line">        target.$meta[paramIndex] = paramDesc;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Demo &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</div><div class="line">    getUser( <span class="meta">@PathParam</span>(<span class="string">"userId"</span>) userId: <span class="built_in">string</span>) &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log((&lt;<span class="built_in">any</span>&gt;Demo).prototype.$meta);</div></pre></td></tr></table></figure><p>以上例程输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; &apos;0&apos;: &apos;userId&apos; &#125;</div></pre></td></tr></table></figure><p>函数参数装饰器可以用在开发Web框架时自动注入请求参数。</p><h2><span id="结语">结语</span></h2><p>装饰器的介绍到这里就暂时结束了，装饰器的存在让Typescript有了与Java和C#等语言的注解相同的功能。当然，基于装饰器能做的工作是相当多的，注明的Angular2就大量使用了装饰器来分离业务逻辑。<br>对装饰器有想法的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(3)</title>
    <link href="https//www.ddhigh.com/2019/07/30/typescript-quick-guide3.html"/>
    <id>https//www.ddhigh.com/2019/07/30/typescript-quick-guide3.html</id>
    <published>2019-07-30T02:12:29.000Z</published>
    <updated>2019-07-30T03:46:43.989Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文讲解泛型</p><h2><span id="泛型">泛型</span></h2><blockquote><p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p></blockquote><p>泛型的出现有效的降低了代码重复率，同时也能很好的保留类型信息，降低运行期崩溃的概率。</p><h2><span id="helloworld">HelloWorld</span></h2><p>假设有个函数，你给他啥类型，他就返回啥类型，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">arg: <span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果需要支持字符串的话，有以下做法：</p><ol><li>复制一份代码，然后更改<code>number</code>为<code>string</code></li><li>把<code>number</code>改为<code>any</code></li></ol><p>但是以上做法有弊端，方法1会导致代码重复比较多，而且难以扩展（只能通过复制代码来扩展）；方法2的话会丢失变量类型信息，运行期可能会抛出异常。</p><p>因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了 类型变量，它是一种特殊的变量，只用于表示类型而不是值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> arg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> n = getValue&lt;<span class="built_in">number</span>&gt;(<span class="number">2</span>);</div><div class="line"><span class="keyword">const</span> s = getValue&lt;<span class="built_in">string</span>&gt;(<span class="string">'s'</span>);</div></pre></td></tr></table></figure><p>说明，如果<code>arg:T</code>中<code>arg</code>是<code>可自动推导类型（一般不是any就能推导）</code>，那么<code>&lt;&gt;</code>之间的类型可以省略，如果<code>&lt;&gt;</code>指定了类型，但是<code>arg</code>类型不匹配的话，编译失败。</p><p><code>T</code>是随便取的，你叫ABCD都没人管你</p><h2><span id="泛型函数">泛型函数</span></h2><p>原型如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名&lt;泛型类型，有几个写几个，逗号分隔&gt;(<span class="params">参数名: 参数类型，参数名:参数类型</span>):返回值类型</span></div></pre></td></tr></table></figure><p>传统风格</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;(<span class="params">key: K, value: V</span>):<span class="title">map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">return</span> map&lt;K,V&gt;(key,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>箭头函数风格</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> makeMap: &lt;K,V&gt;<span class="function">(<span class="params">key:K,value:V</span>) =&gt;</span> map&lt;K,V&gt; = &#123; <span class="comment">// &lt;K,V&gt;(key:K,value:V) =&gt; map&lt;K,V&gt; 类型声明</span></div><div class="line">    <span class="keyword">return</span> map&lt;K,V&gt;(key,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="泛型接口">泛型接口</span></h2><p>原型如下:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> 接口名称&lt;泛型类型，有几个写几个，逗号分隔&gt; &#123;</div><div class="line">    <span class="comment">// 使用泛型约束</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> GenericFunction&lt;T&gt; &#123;</div><div class="line">    getValue(arg:T):T;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 字符串类型</span></div><div class="line"><span class="keyword">class</span> Test <span class="keyword">implements</span> GenericFunction&lt;<span class="built_in">string</span>&gt; &#123;</div><div class="line">    getValue(arg:<span class="built_in">string</span>):<span class="built_in">string</span> &#123;</div><div class="line">        returna arg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 数字类型</span></div><div class="line"><span class="keyword">class</span> Test2 <span class="keyword">implements</span> GenericFunction&lt;<span class="built_in">number</span>&gt; &#123;</div><div class="line">    getValue(arg:<span class="built_in">number</span>):<span class="built_in">number</span> &#123;</div><div class="line">        returna arg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</div><div class="line"><span class="built_in">console</span>.log(test.getValue(<span class="string">'111'</span>));</div><div class="line"></div><div class="line"><span class="keyword">const</span> test2 = <span class="keyword">new</span> Test2();</div><div class="line"><span class="built_in">console</span>.log(test.getValue(<span class="number">111</span>));</div></pre></td></tr></table></figure><h2><span id="泛型类">泛型类</span></h2><p>泛型类的使用和泛型接口差不多</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> GenericClass&lt;T&gt; &#123;</div><div class="line">    add(a: T, b: T):T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> n = <span class="keyword">new</span> GenericClass&lt;<span class="built_in">number</span>&gt;();</div><div class="line"><span class="built_in">console</span>.log(n.add(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line"></div><div class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> GenericClass&lt;<span class="built_in">string</span>&gt;();</div><div class="line"><span class="built_in">console</span>.log(s.add(<span class="string">'1'</span>,<span class="string">'2'</span>));</div></pre></td></tr></table></figure><h2><span id="使用继承约束">使用继承约束</span></h2><p>Java中经常看到如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> T key;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中，T只能为<code>Number</code>子类。避免过大范围的泛型导致问题</p><p>TS也可以使用以上方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> BeeKeeper &#123;</div><div class="line">    hasMask: <span class="built_in">boolean</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ZooKeeper &#123;</div><div class="line">    nametag: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">    numLegs: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;</div><div class="line">    keeper: BeeKeeper;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;</div><div class="line">    keeper: ZooKeeper;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</div><div class="line">&#125;</div><div class="line"></div><div class="line">createInstance(Lion).keeper.nametag;  <span class="comment">// 编译OK</span></div><div class="line">createInstance(Bee).keeper.hasMask;   <span class="comment">// 编辑OK</span></div></pre></td></tr></table></figure><p>以下代码可能难以理解</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A</div></pre></td></tr></table></figure><p>拆开来看:</p><ol><li><a extends="" animal=""> 泛型约束，A必须是Animal子类</a></li><li><code>new () =&gt; A</code> 箭头函数，约束了传入的值必须是构造方法</li><li><code>:A</code> <code>createInstance</code>必须返回传入的构造函数的实例</li></ol><h2><span id="结语">结语</span></h2><p>泛型有效减少了重复代码，同时也解决了类型强制转换的问题，在开发中要尽量使用泛型而不是<code>any</code>。<br>TS的泛型用法大部分都比这复杂，但是原理是一样的，不足之处，敬请包涵。<br>对TS有兴趣的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(2)</title>
    <link href="https//www.ddhigh.com/2019/07/29/typescript-quick-guide2.html"/>
    <id>https//www.ddhigh.com/2019/07/29/typescript-quick-guide2.html</id>
    <published>2019-07-29T02:11:30.000Z</published>
    <updated>2019-07-29T03:30:43.199Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="类">类</span></h2><p>传统JS使用<code>函数</code>和<code>原型链</code>进行集成，在<code>ES6</code>出现了<code>class</code>关键，JS也能使用传统OOP的方式进行继承，但是还是存在一定的局限性，在TS中，OOP已经和传统语言差不多。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    name: <span class="built_in">string</span>;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    say() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;this.name&#125;</span>, age: <span class="subst">$&#123;this.age&#125;</span>`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> Parent();</div><div class="line">parent.say();</div></pre></td></tr></table></figure><p>可以看到TS的OOP写法和Java还是有点类似的。但是他两的构造方法名不同，TS构造方法名为<code>constructor</code>，Java是<code>类名</code>。</p><h2><span id="继承">继承</span></h2><p>继承用来扩展现有的类，TS中这一点和传统语言一样使用<code>extends</code>语法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    name: <span class="built_in">string</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Parent say: <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123; <span class="comment">// 覆盖父类构造方法</span></div><div class="line">        <span class="keyword">super</span>(name); <span class="comment">// 调用父类构造方法</span></div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Child say: <span class="subst">$&#123;this.name&#125;</span> <span class="subst">$&#123;this.age&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> child: Parent = <span class="keyword">new</span> Child(<span class="string">"haha"</span> ,<span class="number">1</span>);</div><div class="line">child.say(); <span class="comment">// 输出 Child say haha 1</span></div></pre></td></tr></table></figure><ol><li>子类存在构造方法时，必须<code>显示调用</code>父类构造方法<code>先有父亲，后有儿子</code></li><li>TS方法调用是基于<code>值</code>而不是基于<code>类型声明</code>，比如<code>child</code>声明为<code>Parent</code>类型，但是值是子类型，所以调用方法时会调用<code>子类</code>的<code>say</code></li></ol><h2><span id="访问限定符">访问限定符</span></h2><h3><span id="public">public</span></h3><p>TS中方法和属性默认的访问限定符为<code>public</code>，所有外部或内部成员都可访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// public可以不加</span></div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Parent();</div><div class="line">p.name = <span class="string">'hello'</span>;</div><div class="line">p.say(); <span class="comment">// 输出 say hello</span></div></pre></td></tr></table></figure><h3><span id="private">private</span></h3><p>私有访问，只能在<code>本类</code>访问,<code>子类和其他类都不行</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Parent();</div><div class="line">p.name = <span class="string">'hello'</span>; <span class="comment">// 错误，private限定的属性不能被外部访问</span></div><div class="line">p.say(); <span class="comment">// 错误，private限定的访问不能被外部访问</span></div></pre></td></tr></table></figure><h3><span id="protected">protected</span></h3><p>保护性访问，只能<code>被本类或本类的子类(子类的子类也可以访问)</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</div><div class="line">    <span class="keyword">public</span> say() &#123; <span class="comment">// 提升访问性</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span>`</span>); <span class="comment">// 访问父类属性</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Child(<span class="string">'hello'</span>);</div><div class="line">c.say(); <span class="comment">// 输出 say hello</span></div></pre></td></tr></table></figure><p>访问限定符只能提升，不能降低，如下例子是<code>无法通过编译的</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">// 错误，子类访问性必须&gt;=父类的访问性</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="只读限定">只读限定</span></h2><p>TS使用<code>readonly</code>声明只读<code>属性(方法不能使用)</code>，必须在<code>声明时</code>或者<code>构造时</code>进行赋值,<code>其他地方不能赋值</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> readonly name = <span class="string">'hello'</span>;</div><div class="line">    <span class="keyword">private</span> readonly age: <span class="built_in">number</span>;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="参数属性">参数属性</span></h2><p>在上例中我们在构造方法中使用<code>this.age = age</code>对已存在的<code>私有只读属性age</code>进行了赋值。由于该操作时常用操作，所以TS有了更加便捷的写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span>, <span class="keyword">private</span> readonly age: <span class="built_in">number</span></span>) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`say <span class="subst">$&#123;this.name&#125;</span> <span class="subst">$&#123;this.age&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中声明了<code>公有只读的name属性，私有只读的age属性</code></p><h2><span id="getter-ampamp-setter">getter &amp;&amp; setter</span></h2><p>在传统语言中，几乎不会直接声明公有属性，然后对其进行操作，都会先定义私有属性，然后提供<code>getter</code>和<code>setter</code>方法对其操作(<code>Java中很多类都是这种情况</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">get</span> name(): <span class="built_in">string</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`name设置前: <span class="subst">$&#123;this._name&#125;</span> 设置后: <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">        <span class="keyword">this</span>._name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> Parent();</div><div class="line">parent.name = <span class="string">'ok'</span>; <span class="comment">// 可以直接使用赋值语句，但是会自动调用set name(name: string)方法</span></div></pre></td></tr></table></figure><p>getter和setter方法提高了开发者对属性的控制，一起对属性的访问都是可控的，为以后的扩展性打下了基础（比如如果需要加缓存，我们可以在set时设置缓存,get时读取缓存，如果是直接操作属性的话，该功能实现起来很麻烦</p><h2><span id="静态属性-ampamp-静态方法">静态属性 &amp;&amp; 静态方法</span></h2><p>以上讨论的都是<code>实例属性和梳理方法</code>，需要有实例才能调用，如果有些属性或方法并不是存在于实例上时可以使用静态方法或静态属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Parent &#123;</div><div class="line">    <span class="keyword">static</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`name <span class="subst">$&#123;this.name&#125;</span>`</span>); <span class="comment">// 方法是静态，属性是静态时可以使用this</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Parent.say();<span class="comment">// 使用类名调用静态方法</span></div></pre></td></tr></table></figure><p>需要注意的是<code>实例可以直接调用静态，静态不能直接调用实例</code>，因为<code>实例需要实例化后调用</code></p><h2><span id="抽象类">抽象类</span></h2><p>传统语言中接口只包含实现，不包含细节。而抽象类可以包含细节。一般来说，有些公有方法可以放到抽象类做，不同的子类完成不同功能的代码可以放到抽象类做。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</div><div class="line">    <span class="keyword">abstract</span> say(): <span class="built_in">void</span>; <span class="comment">// 声明抽象方法，子类必须实现</span></div><div class="line"></div><div class="line">    eat() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`animal eat`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123; <span class="comment">// 使用extends关键字</span></div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'human say words'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'dog say wangwang'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="接口">接口</span></h2><p>接口用来限定子类的行为，不关心具体实现。与传统语言不同的是,TS接口还可以限定变量或常量的属性</p><p>限定子类行文：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Animal &#123;</div><div class="line">    say(): <span class="built_in">void</span>;</div><div class="line">    eat(): <span class="built_in">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human <span class="keyword">implements</span> Animal &#123;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'human say'</span>);</div><div class="line">    &#125;</div><div class="line">    eat() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'human eat'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>限定变量属性：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> A &#123;</div><div class="line">    name?: <span class="built_in">string</span>;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> obj: A = &#123;</div><div class="line">    age: <span class="number">10</span>,</div><div class="line">    <span class="comment">// name是可选的</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3><span id="可索引类型">可索引类型</span></h3><p>使用<code>可索引类型</code>来<code>描述</code>可以通过<code>索引访问得到</code>的类型。如<code>person[&quot;name&quot;]</code>,<code>list[0]</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> HashMap &#123;</div><div class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 冒号左边为属性名类型，右边为值类型</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> map: HashMap = &#123;&#125;;</div><div class="line">map[<span class="string">"name"</span>] = <span class="string">"1"</span>;</div><div class="line">map.a = <span class="string">"2"</span>;</div></pre></td></tr></table></figure><h3><span id="接口继承">接口继承</span></h3><p>与类继承类似，接口也可以通过继承来扩展现有的功能：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Animal &#123;</div><div class="line">    eat(): <span class="built_in">void</span>; <span class="comment">// 动物会吃，但是怎么吃的不管</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">interface</span> Human <span class="keyword">extends</span> Animal &#123;</div><div class="line">    say(): <span class="built_in">void</span>; <span class="comment">// 人会说话，但是怎么说，说什么不管</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="混合类型">混合类型</span></h3><p>JS中，函数可以直接调用也可以通过对象方式调用，TS中可以通过接口声明被修饰的函数支持的调用方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Counter &#123;</div><div class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</div><div class="line">    step: <span class="built_in">number</span>;</div><div class="line">    reset(): <span class="built_in">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">const</span> counter = &lt;Counter&gt; <span class="function"><span class="keyword">function</span>(<span class="params">start: <span class="built_in">number</span></span>) </span>&#123;&#125;;</div><div class="line">    counter.step = <span class="number">1</span>;</div><div class="line">    counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> c = getCounter();</div><div class="line">c(<span class="number">1</span>);</div><div class="line">c.reset();</div><div class="line">c.step = <span class="number">2</span>;</div></pre></td></tr></table></figure><h2><span id="结语">结语</span></h2><p>面向对象中的类和接口内容实在是太多了，本文只选择了开发中常用到的用法进行说明，不足之处，敬请包涵。<br>对TS有兴趣的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>手把手从零开始小程序单元测试(附避坑指南以及源码跟踪)</title>
    <link href="https//www.ddhigh.com/2019/07/27/miniprogram-unit-test.html"/>
    <id>https//www.ddhigh.com/2019/07/27/miniprogram-unit-test.html</id>
    <published>2019-07-27T10:35:49.000Z</published>
    <updated>2019-07-29T02:12:36.045Z</updated>
    
    <content type="html"><![CDATA[<p>单元测试是一个老生常谈的话题，基于Web/NodeJs环境的测试框架、测试教程数不胜数，也趋于成熟了。但是对于微信小程序的单元测试，目前还是处于起步状态，这两天在研究微信小程序的测试，也遇到了一些坑，在这里记录一下，希望给看到本文的小伙伴带来一点帮助，少走一些弯路。</p><p>本文内容有点多，但是干货满满，不明白的小伙伴可以关注公众号给我留言<br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><h2><span id="demo地址">demo地址</span></h2><p><a href="https://github.com/xialeistudio/miniprogram-unit-test-demo" target="_blank" rel="external">https://github.com/xialeistudio/miniprogram-unit-test-demo</a></p><h2><span id="关键依赖版本">关键依赖版本</span></h2><p>本文写作时相关依赖版本如下(版本不同，源码行数可能不同)：</p><ol><li>miniprogram-simulate: 1.0.7</li><li>j-component: 1.1.6</li><li>miniprogram-exparser: 0.0.6</li></ol><h2><span id="测试流程">测试流程</span></h2><ol><li>初始化小程序项目，编写待测试组件</li><li>安装jest,miniprogram-simulate测试环境</li><li>编写测试用例</li><li>执行测试</li></ol><h2><span id="初始化小程序项目">初始化小程序项目</span></h2><ol><li>使用小程序开发者工具初始化新项目，APPID选择<code>测试号</code>即可，语言选择<code>Javascript</code>。</li><li>使用小程序开发者工具新建<code>/components/user</code>组件</li><li><p><code>components/user.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// components/user.js</span></div><div class="line">Component(&#123;</div><div class="line">    data: &#123;</div><div class="line">        nickname: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        handleUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.setData(&#123; <span class="attr">nickname</span>: e.detail.userInfo.nickName &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p><code>components/user.wxml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"nickname"</span>&gt;</span>&#123;&#123;nickname&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"handleUserInfo"</span>&gt;</span>Oauth<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>pages/index/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">    data:&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p><code>pages/index/index.wxml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>打开小程序开发者工具，可以看到有一个<code>Oauth</code>按钮，点击之后会在上面显示昵称。</p></li><li>由此可以得到测试用例<code>点击授权按钮时上方显示为授权用户的昵称</code></li></ol><h2><span id="安装jestminiprogram-simulate测试环境">安装jest/miniprogram-simulate测试环境</span></h2><ol><li>由于JS项目的小程序根目录没有<code>package.json</code>，需要手动生成一下</li><li>打开终端，在项目根目录执行<code>npm init -y</code>生成<code>package.json</code></li><li>安装测试工具集<code>npm install jest miniprogram-simulate --save-dev</code></li><li>编辑<code>package.json</code>，在<code>scripts</code>新建<code>test</code>命令 <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"unit-test-demo"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</div><div class="line">    <span class="attr">"scripts"</span>: &#123;</div><div class="line">        <span class="attr">"test"</span>: <span class="string">"jest"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"keywords"</span>: [],</div><div class="line">    <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">    <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">        <span class="attr">"jest"</span>: <span class="string">"^24.8.0"</span>,</div><div class="line">        <span class="attr">"miniprogram-simulate"</span>: <span class="string">"^1.0.7"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2><span id="编写测试用例">编写测试用例</span></h2><ol><li>在项目根目录新建<code>tests/components/user.spec.js</code>文件(目录需要手动创建)</li><li>代码如下(参考微信官方单元测试文档编写): <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> simulate = <span class="built_in">require</span>(<span class="string">'miniprogram-simulate'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line">test(<span class="string">'components/user'</span>, (done) =&gt; &#123; <span class="comment">// 定义测试名称,传入done表示当前测试是异步测试，需要回调函数来告诉jest，我测试执行完毕</span></div><div class="line"><span class="keyword">const</span> id = simulate.load(path.join(__dirname, <span class="string">'../../components/user'</span>)); <span class="comment">// 加载组件</span></div><div class="line"><span class="keyword">const</span> component = simulate.render(id); <span class="comment">// 渲染组件</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> text = component.querySelector(<span class="string">'.nickname'</span>); <span class="comment">// 获取nickname节点</span></div><div class="line"><span class="keyword">const</span> button = component.querySelector(<span class="string">'.button'</span>); <span class="comment">// 获取button节点</span></div><div class="line">button.dispatchEvent(<span class="string">'getuserinfo'</span>, &#123; <span class="comment">// 模拟触发事件</span></div><div class="line">    detail: &#123;   <span class="comment">// 传递事件参数</span></div><div class="line">        userInfo: &#123;</div><div class="line">            nickName: <span class="string">'hello'</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步断言</span></div><div class="line">    expect(text.dom.innerHTML).toBe(<span class="string">'hello'</span>); <span class="comment">// 检测text节点的innerHTML等于模拟授权获取的昵称</span></div><div class="line">    done();</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><h2><span id="执行测试">执行测试</span></h2><ol><li><code>npm run test</code>，等待一秒后发现，<code>不出意外的话，测试肯定过不去</code></li><li><p>部分出错日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Expected: &quot;hello&quot;</div><div class="line">Received: &quot;&quot;</div><div class="line">     at toBe (/Users/xialeistudio/WeChatProjects/unit-test-demo/tests/components/user.spec.js:18:32)</div><div class="line">     at Timeout.callback [as _onTimeout] (/Users/xialeistudio/WeChatProjects/unit-test-demo/node_modules/jsdom/lib/jsdom/browser/Window.js:678:19)</div><div class="line">     at listOnTimeout (internal/timers.js:535:17)</div><div class="line">     at processTimers (internal/timers.js:479:7)</div></pre></td></tr></table></figure></li><li><p>可以推测一下原因：</p><ol><li>dispatchEvent的事件触发有问题，导致handleUserInfo未触发[1]</li><li>dispatchEvent的事件触发成功，但是触发参数有问题[2]</li></ol></li></ol><h2><span id="错误分析源码跟踪过程">错误分析(源码跟踪过程)</span></h2><ol><li><p>针对第1点原因，可以写一下测试代码(<code>components/user.js</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    data: &#123;</div><div class="line">        nickname: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        handleUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p><code>npm run test</code>，可以看到事件还是成功触发了，不过<code>detail</code>是<code>{}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> console.log components/user.js:21</div><div class="line">&#123; type: &apos;getuserinfo&apos;,</div><div class="line">  timeStamp: 948,</div><div class="line">  target: &#123; id: &apos;&apos;, offsetLeft: 0, offsetTop: 0, dataset: &#123;&#125; &#125;,</div><div class="line">  currentTarget: &#123; id: &apos;&apos;, offsetLeft: 0, offsetTop: 0, dataset: &#123;&#125; &#125;,</div><div class="line">  detail: &#123;&#125;,</div><div class="line">  touches: &#123;&#125;,</div><div class="line">  changedTouches: &#123;&#125; &#125;</div></pre></td></tr></table></figure></li><li><p>原因1排除，查原因2</p></li><li><code>dispatchEvent</code>方法是<code>被测试组件的子组件</code>，<code>被测试组件</code>由<code>simulate.render</code>函数返回</li><li>浏览<code>node_modules/miniprogram-simulate/src/index.js</code>，看到<code>render函数(152行)</code>，可以看到返回的组件由<code>jComponent.create</code>提供</li><li>浏览<code>node_modules/j-component/src/index.js</code>的<code>create</code>函数，可以看到其返回了<code>RootComponent</code>实例，而<code>RootComponent</code>是由<code>./render/component.js</code>提供</li><li>浏览<code>node_modules/j-component/src/render/component.js</code>的<code>dispatchEvent</code>函数，在这里可以打下日志测试(本文就不打了，结果是这里的options就是<code>user.spec.js</code> <code>dispatchEvent</code>函数的<code>第二个参数</code>，<code>detail</code>是有值的)</li><li><p>继续跟踪源码，由于咱们的是<code>自定义事件</code>，所以会走到<code>91行</code>的代码，该代码块如下：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义事件</span></div><div class="line">  <span class="keyword">const</span> customEvent = <span class="keyword">new</span> CustomEvent(eventName, options);</div><div class="line"></div><div class="line">  <span class="comment">// 模拟异步情况</span></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    dom.dispatchEvent(customEvent);</div><div class="line"></div><div class="line">    exparser.Event.dispatchEvent(customEvent.target, exparser.Event.create(eventName, &#123;&#125;, &#123;</div><div class="line">      originalEvent: customEvent,</div><div class="line">      bubbles: <span class="literal">true</span>,</div><div class="line">      capturePhase: <span class="literal">true</span>,</div><div class="line">      composed: <span class="literal">true</span>,</div><div class="line">      extraFields: &#123;</div><div class="line">        touches: options.touches || &#123;&#125;,</div><div class="line">        changedTouches: options.changedTouches || &#123;&#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;));</div><div class="line">  &#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure></li><li><p>可以看到调用了<code>exparser.Event.dispatchEvent</code>函数，该函数的<code>第二个参数</code>调用了<code>exparser.Event.create</code>对自定义事件进行了包装，这里还没到最底层，需要继续跟踪</p></li><li><code>exparser</code>对象是<code>miniprogram-exparser模块</code>提供的，浏览<code>node_modules/miniprogram-exparser/exparser.min.js</code>，发现该文件被混淆了，不过没关系<code>混淆后的代码逻辑是不变的，只不过变量名变得无意义，可读性变差</code></li><li>使用webstorm格式化该文件，这里我传了一份格式化好的到github <a href="https://github.com/xialeistudio/miniprogram-unit-test-demo/blob/master/extra/wxparser.jscc" target="_blank" rel="external">wxparser.js，可在线观看</a></li><li><p>需要在源码中搜索<code>三个参数</code>的<code>create</code>函数(<code>Object.create不算</code>)，需要有耐心，经过排查后发现<a href="https://github.com/xialeistudio/miniprogram-unit-test-demo/blob/master/extra/wxparser.js#L168" target="_blank" rel="external">168行</a>代码应该是目标代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i.create = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, r</span>) </span>&#123;</div><div class="line">    r = r || &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> n = r.originalEvent, o = r.extraFields || &#123;&#125;, a = <span class="built_in">Date</span>.now() - l, s = <span class="keyword">new</span> i;</div><div class="line">    s.currentTarget = <span class="literal">null</span>, s.type = e, s.timeStamp = a, s.mark = <span class="literal">null</span>, s.detail = t, s.bubbles = !!r.bubbles, s.composed = !!r.composed, s.__originalEvent = n, s.__hasCapture = !!r.capturePhase, s.__stopped = !<span class="number">1</span>, s.__dispatched = !<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> u <span class="keyword">in</span> o) s[u] = o[u];</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>可以看到<code>s.detail = t</code>这个赋值，<code>t</code>是<code>create</code>的<code>第二个参数</code>，由<code>node_modules/j-component/render/component.js</code>的<code>wxparser.Event.create</code>传入，但是传入的<code>第二个参数写死了{}</code>，所以咱们的组件获取<code>detail</code>的时候<code>永远为{}</code>，将其修改为<code>options.detail||{}</code>即可，修改后代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exparser.Event.dispatchEvent(customEvent.target, exparser.Event.create(eventName, options.detail||&#123;&#125;, xxxxxx</div></pre></td></tr></table></figure></li><li><p>重新测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   PASS  tests/components/user.spec.js</div><div class="line">✓ components/user (1099ms)</div><div class="line"></div><div class="line">  Test Suites: 1 passed, 1 total</div><div class="line">  Tests:       1 passed, 1 total</div><div class="line">  Snapshots:   0 total</div><div class="line">  Time:        3.622s</div><div class="line">  Ran all test suites.</div></pre></td></tr></table></figure></li></ol><h2><span id="避坑指南">避坑指南</span></h2><ol><li><code>querySelector</code>用法同HTML，但是需要在<code>组件</code>执行，而不是<code>组件.dom</code>，HTML中实在<code>DOMNode</code>执行的</li><li><code>dispatchEvent</code>是触发事件，需要在<code>组件</code>执行，上述代码中是触发<code>button组件</code>的<code>自定义事件</code></li><li><code>dispatchEvent</code>事件名规范: <code>去掉前导bind剩余的字符串为事件名</code>，示例代码中<code>bindgetuserinfo</code>，触发时就是<code>getuserinfo</code>，如果是<code>bindtap</code>，那触发时就是<code>tap</code></li><li><p><code>dispatchEvent</code>底层是<code>j-component</code>这个<code>npm模块实现</code>的，跟踪源码发现执行是异步的(代码文件<code>node_modules/j-component/src/render/component.js</code>，函数名<code>dispatchEvent</code>)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义事件</span></div><div class="line">  <span class="keyword">const</span> customEvent = <span class="keyword">new</span> CustomEvent(eventName, options);</div><div class="line"></div><div class="line">  <span class="comment">// 模拟异步情况</span></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    dom.dispatchEvent(customEvent);</div><div class="line"></div><div class="line">    exparser.Event.dispatchEvent(customEvent.target, exparser.Event.create(eventName, &#123;&#125;, &#123;</div><div class="line">      originalEvent: customEvent,</div><div class="line">      bubbles: <span class="literal">true</span>,</div><div class="line">      capturePhase: <span class="literal">true</span>,</div><div class="line">      composed: <span class="literal">true</span>,</div><div class="line">      extraFields: &#123;</div><div class="line">        touches: options.touches || &#123;&#125;,</div><div class="line">        changedTouches: options.changedTouches || &#123;&#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;));</div><div class="line">  &#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure></li><li><p>由于<code>setTimeout</code>的存在，触发事件为异步，所以写断言时需要加定时器</p></li></ol><h2><span id="结语">结语</span></h2><p>小程序单元测试基本是没什么经验扩借鉴，但是基于官网提供的工具，以及<code>开源</code>，咱们遇到问题时细心排查然后修改一下，还是可以解决问题的。对单元测试有疑问的小伙伴可以扫码加我进行交流<br><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单元测试是一个老生常谈的话题，基于Web/NodeJs环境的测试框架、测试教程数不胜数，也趋于成熟了。但是对于微信小程序的单元测试，目前还是处于起步状态，这两天在研究微信小程序的测试，也遇到了一些坑，在这里记录一下，希望给看到本文的小伙伴带来一点帮助，少走一些弯路。&lt;/p&gt;
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="test" scheme="https//www.ddhigh.com/tags/test/"/>
    
      <category term="miniprogram" scheme="https//www.ddhigh.com/tags/miniprogram/"/>
    
  </entry>
  
  <entry>
    <title>使用Typescript装饰器来劫持React组件</title>
    <link href="https//www.ddhigh.com/2019/07/26/react-decorator-example.html"/>
    <id>https//www.ddhigh.com/2019/07/26/react-decorator-example.html</id>
    <published>2019-07-26T11:31:15.000Z</published>
    <updated>2019-07-27T11:43:08.568Z</updated>
    
    <content type="html"><![CDATA[<p>最近在捣鼓Typescript的装饰器，NodeJs项目的装饰器比较好理解，但是React项目的装饰器由于有JSX，走了一点弯路，但是总之来说是<code>新技能get</code></p><h2><span id="typescript对装饰器的说明">typescript对装饰器的说明</span></h2><blockquote><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 @expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p></blockquote><p>装饰器为我们提供了<code>运行时修改数据</code>的能力。</p><h2><span id="react例子">React例子</span></h2><p>Parent.tsx</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> App <span class="keyword">extends</span> PureComponent &#123;</div><div class="line">  handleClick() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent click'</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className=<span class="string">"App"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;parent&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure><p>Component装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; <span class="keyword">new</span>(...args: <span class="built_in">any</span>[]): <span class="built_in">any</span> &#125;&gt;(component: T) &#123; <span class="comment">// 泛型限定</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> component &#123;</div><div class="line">    handleClick() &#123; <span class="comment">// 劫持onClick</span></div><div class="line">      <span class="keyword">super</span>.handleClick()</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'child clicked'</span>);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">const</span> parent = <span class="keyword">super</span>.render()</div><div class="line">      <span class="comment">// 劫持onClick</span></div><div class="line">      <span class="keyword">return</span> React.cloneElement(parent, &#123; onClick: <span class="keyword">this</span>.handleClick &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击渲染之后的<code>parent</code>字符，可以看到劫持成功</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/26/16c2e0b64f0d48a7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="clipboard.png"></p><h2><span id="项目地址">项目地址</span></h2><p><a href="https://github.com/xialeistudio/react-decorator-example" target="_blank" rel="external">react-decorator-example</a></p><h2><span id="文后">文后</span></h2><p>本文写的只是比较简单的装饰器用法，但是可以基于此文的原来来开发如<code>登录后才能访问的组件</code>之类的装饰器，将业务逻辑更好的组织起来。</p><p>对TS有兴趣的伙伴可以加我微信交流~</p><p><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在捣鼓Typescript的装饰器，NodeJs项目的装饰器比较好理解，但是React项目的装饰器由于有JSX，走了一点弯路，但是总之来说是&lt;code&gt;新技能get&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;typescript对装饰器的说明&quot;&gt;typescri
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="react" scheme="https//www.ddhigh.com/tags/react/"/>
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>TS简明教程(1)</title>
    <link href="https//www.ddhigh.com/2019/07/25/typescript-quick-guide.html"/>
    <id>https//www.ddhigh.com/2019/07/25/typescript-quick-guide.html</id>
    <published>2019-07-25T14:01:54.000Z</published>
    <updated>2019-07-26T04:53:10.539Z</updated>
    
    <content type="html"><![CDATA[<p>为了后续内容(如<code>nestjs</code>等框架)的开展，本文更新TS相关的基础知识。</p><p>关注获取更多<code>TS精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><blockquote><p>TypeScript是JavaScript的一个超集，支持 ECMAScript 6 标准。<br>TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。<br>Typescript由微软开发，与C#出自同一人之手!</p></blockquote><h2><span id="ts与js的区别">TS与JS的区别</span></h2><blockquote><p>TS是JS的超集，扩展了TS的语法，因此现有的JS代码可<code>直接与TS一起工作无需任何修改</code>，TS通过类型注解提供编译时的静态类型检查。</p></blockquote><p>由于TS与JS语法大部分一致，本文只对有差异的部分进行讲解。</p><h2><span id="目录">目录</span></h2><p>有些知识点可能是交叉的建议通读完本文再开始真正的开发，这样疑惑会比较少一点</p><ol><li>数据类型与类型断言</li><li>函数</li><li>接口和类</li><li>泛型</li><li>枚举</li><li>命名空间和模块</li><li>装饰器(注解)</li><li>高级类型</li><li>声明文件</li><li>tsconfig.json</li><li>示例<ol><li>React示例(前端)</li><li>Koa示例(后端)</li></ol></li></ol><h2><span id="数据类型与类型声明">数据类型与类型声明</span></h2><p>TS使用<code>:</code>语法对类型进行声明。基础类型如下：</p><h3><span id="布尔类型">布尔类型</span></h3><p>TS使用<code>boolean</code>来声明布尔类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> succeed: <span class="built_in">boolean</span> = <span class="literal">false</span>; <span class="comment">// 声明succeed为boolean类型</span></div></pre></td></tr></table></figure><h3><span id="数字">数字</span></h3><p>TS对数字的支持与JS一致，所有数字都是浮点数，所以TS并不存在<code>int</code>,<code>float</code>之类的数字类型声明，只有<code>number</code>。<br>除了支持十进制和十六进制，TS还支持ES6的二进制和八进制数字。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> age: <span class="built_in">number</span> = <span class="number">16</span>; <span class="comment">// 声明年龄为数字类型</span></div><div class="line"><span class="keyword">const</span> price: <span class="built_in">number</span> = <span class="number">99.99</span>; <span class="comment">// 声明价格为数字类型</span></div></pre></td></tr></table></figure><h3><span id="字符串">字符串</span></h3><p>TS使用<code>string</code>声明字符串，和JS一样，支持<code>单引号</code>和<code>双引号</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"demo"</span>;</div><div class="line"></div><div class="line">name = <span class="string">"demo1"</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> description = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// ES6语法</span></div></pre></td></tr></table></figure><h3><span id="数组">数组</span></h3><p>TS使用<code>类型[]</code>声明数组的元素类型，与JS不一样的地方在于，<code>TS</code>中一旦指明一个类型，所有元素必须是该类型。<code>JS</code>则可以往数组放任意类型的元素。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers: <span class="built_in">number</span>[] = [];</div><div class="line">numbers.push(<span class="number">1</span>);</div><div class="line">numbers.push(<span class="number">2</span>);</div><div class="line">numbers.push(<span class="string">'3'</span>); <span class="comment">// 错误，'3'不是数字类型</span></div></pre></td></tr></table></figure><h3><span id="对象">对象</span></h3><p>与JS一样，TS的对象也是由<code>键值对</code>构成，类型声明可以分别作用与<code>键类型</code>以及<code>值类型</code>。</p><p>声明语法：<code>{[key名称: key类型]: 值类型}</code><br>key名称可以<code>自定义</code>，如<code>key</code>,<code>index</code>都是合法的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125; = &#123;&#125;; <span class="comment">// 声明键和值都只能是字符串类型</span></div><div class="line">config.version = <span class="string">'1.0.0'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ages: &#123;[key: <span class="built_in">number</span>]: <span class="built_in">number</span>&#125; = &#123;&#125;; <span class="comment">// 声明键值对都是数字类型</span></div><div class="line">ages[<span class="number">10</span>] = <span class="string">'1.0.0'</span>; <span class="comment">// 赋值</span></div></pre></td></tr></table></figure><p>上例中赋值语法虽然和数组一致，但是ages对象的长度为1，如果ages是数组的话，长度为11。(0-9个元素为undefined)</p><h3><span id="任意类型">任意类型</span></h3><p>TS用<code>any</code>用来声明<code>任意类型</code>，被<code>any</code>修饰的变量(或常量以及返回值等等)在编译阶段会<code>直接通过</code>，但是运行阶段可能会<code>抛出undefined或null相关错误</code>。</p><p><code>any</code>的出现使得现有的JS代码能够很快速的切换到TS。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> age:<span class="built_in">any</span> = <span class="number">10</span>;</div><div class="line">age = <span class="string">'name'</span>; <span class="comment">// 编译通过</span></div></pre></td></tr></table></figure><h3><span id="空类型">空类型</span></h3><p>TS使用<code>void</code>声明空类型。与<code>any</code>相反，表示没有任何类型，常用在函数返回值中。<br><code>void</code>类型只能被赋值为<code>null</code>和<code>undefined</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123; <span class="comment">// 声明函数无返回值，编译成JS之后取返回值会取到undefined，与JS一致</span></div><div class="line">    <span class="built_in">console</span>.log(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> v: <span class="built_in">void</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure><h3><span id="null和undefined">null和undefined</span></h3><p>TS中<code>默认情况</code>下，<code>null</code>和<code>undefined</code>是所有类型的子类型，换句话说，你可以把<code>null</code>和<code>undefined</code>直接赋值给<code>number</code>/<code>string</code>/<code>boolean</code>等类型。<br>但是不能反过来干，你不能把<code>number</code>/<code>string</code>/<code>boolean</code>类型赋值给<code>null</code>或者<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure><h3><span id="never">never</span></h3><p><code>never</code>是<code>100%不存在的值</code>的类型。比如函数中直接抛出异常或者有死循环。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123; <span class="comment">// TS自动类型推断返回值类型为never，类型推断在下文中会提到</span></div><div class="line">    <span class="keyword">return</span> error(<span class="string">'failed'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123; <span class="comment">// 死循环，肯定不会返回</span></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>never</code>和<code>void</code>区别</p><ol><li>被<code>void</code>修饰的函数<code>能正常终止，只不过没有返回值</code></li><li>被<code>never</code>修饰的函数<code>不能正常终止，如抛出异常或死循环</code></li></ol><h3><span id="枚举">枚举</span></h3><p>枚举是对JS的一个扩展。TS使用<code>enum</code>关键字定义枚举类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;</div><div class="line">    Red,</div><div class="line">    Green,</div><div class="line">    Yellow</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c: Color = Color.Red;</div></pre></td></tr></table></figure><h3><span id="object">Object</span></h3><p>TS使用<code>object</code>类修饰对象类型，TS中表示<code>非原始类型</code>。原始类型如下：</p><ol><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol(ES6新出类型)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a: object = &#123;&#125;; <span class="comment">// ok</span></div><div class="line"><span class="keyword">let</span> a: object = <span class="number">1</span>; <span class="comment">// error</span></div><div class="line"><span class="keyword">let</span> a: object = Symbol(); <span class="regexp">/ error</span></div></pre></td></tr></table></figure><p>虽然<code>Symbol</code>长得像<code>对象类型</code>，不过在<code>ES6</code>规范中，人家就是<code>原始类型</code>。</p><h3><span id="函数声明">函数声明</span></h3><p>TS中可以对函数的<code>形参</code>以及<code>返回值</code>进行类型声明。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;name&#125;</span>,age:<span class="subst">$&#123;age&#125;</span>`</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="类型断言">类型断言</span></h3><p>类型断言说白了就是<code>告诉编译器，你按照我指定的类型进行处理</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> value: <span class="built_in">any</span> = <span class="string">'a string'</span>;</div><div class="line"><span class="keyword">const</span> length: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;value).length;</div></pre></td></tr></table></figure><p>编译结果(正常编译且正常运行)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> value = <span class="string">'a string'</span>;</div><div class="line"><span class="keyword">const</span> length = value.length;</div></pre></td></tr></table></figure><h3><span id="类型推断">类型推断</span></h3><p>当没有手动指定类型时，TS编译器利用类型推断来推断类型。<br>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num = <span class="number">2</span>; <span class="comment">// 推断为number类型</span></div></pre></td></tr></table></figure><h2><span id="函数">函数</span></h2><p>TS函数与JS函数没有大的区别，多了一个类型系统。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123; <span class="comment">// 自动推断返回类型为string</span></div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="可选参数">可选参数</span></h3><p>TS中函数每个形参都是<code>必须</code>的，当然你可以传递<code>null</code>和<code>undefined</code>，因为<code>他们是值</code>。但是在JS中，每个形参都是可选的，没传的情况下取值会得到<code>undefined</code>。<br>TS中<code>在参数名后面使用?号指明该参数为可选参数</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>:<span class="subst">$&#123;age&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line">test(<span class="string">'a'</span>); <span class="comment">// 输出 a:undefined</span></div></pre></td></tr></table></figure><h3><span id="默认参数">默认参数</span></h3><p>与ES6一致，TS也的函数也支持默认参数。需要注意的是<code>可选参数</code>和<code>默认参数</code>是<code>互斥</code>的。因为如果使用了默认参数，不管外部传不传值，取值的时候都是有值的，和可选参数矛盾。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = 10</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>:<span class="subst">$&#123;age&#125;</span>`</span>)</div><div class="line">&#125;</div><div class="line">test(<span class="string">'a'</span>); <span class="comment">// 输出 a:10</span></div></pre></td></tr></table></figure><h3><span id="剩余参数">剩余参数</span></h3><p>剩余参数和ES6表现一致，但是多了类型声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name1: <span class="built_in">string</span>, ...names: <span class="built_in">string</span>[]</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name1, names);</div><div class="line">&#125;</div><div class="line">test(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>);<span class="comment">// 输出 1 ['2', '3']</span></div></pre></td></tr></table></figure><h3><span id="this执行">this执行</span></h3><p>TS中this指向和JS一致，这里不做赘述。</p><h2><span id="结语">结语</span></h2><p>未完待续~欢迎加我微信交流TS相关的知识~</p><p><img src="https://more-happy.ddhigh.com/Fg5UE615NzZ0dXo6_gUe6qpCJILG?imageView2/1/w/200" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了后续内容(如&lt;code&gt;nestjs&lt;/code&gt;等框架)的开展，本文更新TS相关的基础知识。&lt;/p&gt;
&lt;p&gt;关注获取更多&lt;code&gt;TS精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-happy.ddhigh.com/FuFpZh9QTZV
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https//www.ddhigh.com/tags/typescript/"/>
    
      <category term="ts" scheme="https//www.ddhigh.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs简明教程(11) - 完结篇</title>
    <link href="https//www.ddhigh.com/2019/07/25/nodejs-guide-next-step.html"/>
    <id>https//www.ddhigh.com/2019/07/25/nodejs-guide-next-step.html</id>
    <published>2019-07-25T03:26:30.000Z</published>
    <updated>2019-07-25T03:45:21.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！</p></blockquote><p>关注获取更多<code>NodeJs精品文章</code><br><img src="https://more-happy.ddhigh.com/FuFpZh9QTZVatcBtupR4MtOGPGTJ?imageView2/1/w/200" alt="二维码"></p><p>本文是NodeJs简明教程的完结篇，将对以往文章进行归档。</p><h2><span id="系列文章">系列文章</span></h2><ol><li><a href="https://www.ddhigh.com/2019/07/18/nodejs-guide-about.html" target="_blank" rel="external">NodeJs简明教程(1)——简介</a></li><li><a href="https://www.ddhigh.com/2019/07/19/nodejs-guide-installation.html" target="_blank" rel="external">NodeJs简明教程(2)——安装</a></li><li><a href="https://www.ddhigh.com/2019/07/19/nodejs-guide-http-server.html" target="_blank" rel="external">NodeJs简明教程(3)——HTTP服务器</a></li><li><a href="https://www.ddhigh.com/2019/07/20/nodejs-guide-filesystem.html" target="_blank" rel="external">NodeJs简明教程(4)——文件系统</a></li><li><a href="https://www.ddhigh.com/2019/07/20/nodejs-guide-path.html" target="_blank" rel="external">NodeJs简明教程(5)——路径</a></li><li><a href="https://www.ddhigh.com/2019/07/21/nodejs-guide-crypto.html" target="_blank" rel="external">NodeJs简明教程(6)——加解密</a></li><li><a href="https://www.ddhigh.com/2019/07/22/nodejs-guide-events.html" target="_blank" rel="external">NodeJs简明教程(7)——事件</a></li><li><a href="https://www.ddhigh.com/2019/07/23/nodejs-guide-child-process.html" target="_blank" rel="external">NodeJs简明教程(8)——子进程</a></li><li><a href="https://www.ddhigh.com/2019/07/24/nodejs-guide-net.html" target="_blank" rel="external">NodeJs简明教程(9)——TCP开发</a></li><li><a href="https://www.ddhigh.com/2019/07/25/nodejs-guide-dgram.html" target="_blank" rel="external">NodeJs简明教程(10)——UDP开发</a></li></ol><h2><span id="接下来的内容">接下来的内容</span></h2><ol><li>Typescript语言基础</li><li>NodeJs常用第三方模块(缓存、数据库、通用连接池、消息队列等等)</li><li>koa 专题</li><li>express 专题</li><li>nestjs 专题</li></ol><p>欢迎持续关注~</p><p>欢迎加群交流NodeJs相关的开发~</p><p><img src="https://more-happy.ddhigh.com/FpffwgkBeSWPyHRUJJmi9J9SFX_l?imageView2/1/w/200" alt="微信群"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;NodeJs简明教程将从零开始学习NodeJs相关知识，助力JS开发者构建全栈开发技术栈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注获取更多&lt;code&gt;NodeJs精品文章&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://more-h
      
    
    </summary>
    
      <category term="nodejs" scheme="https//www.ddhigh.com/categories/nodejs/"/>
    
    
      <category term="javascript" scheme="https//www.ddhigh.com/tags/javascript/"/>
    
      <category term="nodejs guide" scheme="https//www.ddhigh.com/tags/nodejs-guide/"/>
    
  </entry>
  
</feed>
