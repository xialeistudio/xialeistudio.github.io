<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天进步一点点</title>
  
  <subtitle>Coding Change Anything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https//www.ddhigh.com/"/>
  <updated>2021-06-23T12:23:46.025Z</updated>
  <id>https//www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PlanUML指南</title>
    <link href="https//www.ddhigh.com/2021/06/04/plantuml-tutorial.html"/>
    <id>https//www.ddhigh.com/2021/06/04/plantuml-tutorial.html</id>
    <published>2021-06-04T07:17:06.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong>统一建模语言</strong>（英语：Unified Modeling Language，缩写 UML）是非专利的第三代<a href="https://zh.wikipedia.org/w/index.php?title=对象建模语言&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">建模</a>和<a href="https://zh.wikipedia.org/wiki/规约语言" target="_blank" rel="noopener">规约语言</a>。UML是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法</p></blockquote><p>编写UML的软件很多，但是基本是可视化的，需要手动编写，本文主要介绍基于文本的UML编写工具——PlantUML。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>PlantUML有以下依赖：</p><ol><li>graphviz</li><li>jdk</li><li>Jetbrains IDE插件(可选，本文推荐)</li></ol><h3 id="安装graphviz"><a href="#安装graphviz" class="headerlink" title="安装graphviz"></a>安装graphviz</h3><p>本文使用<code>Homebrew</code>安装<code>graphviz</code>，终端执行以下命令安装<code>graphviz</code>。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install graphviz</span><br></pre></td></tr></table></figure><p>安装完毕后查看版本信息。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dot -v</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dot - graphviz <span class="hljs-keyword">version</span> <span class="hljs-number">2.47</span>.<span class="hljs-number">0</span> (<span class="hljs-number">20210316.0004</span>)</span><br><span class="line">libdir = <span class="hljs-string">"/usr/local/Cellar/graphviz/2.47.0/lib/graphviz"</span></span><br><span class="line">Activated plugin library: libgvplugin_dot_layout.<span class="hljs-number">6</span>.dylib</span><br><span class="line">Using layou<span class="hljs-variable">t:</span> <span class="hljs-keyword">do</span><span class="hljs-variable">t:dot_layout</span></span><br><span class="line">Activated plugin library: libgvplugin_core.<span class="hljs-number">6</span>.dylib</span><br><span class="line">Using render: <span class="hljs-keyword">do</span><span class="hljs-variable">t:core</span></span><br><span class="line">Using device: <span class="hljs-keyword">do</span><span class="hljs-variable">t:dot</span>:core</span><br><span class="line">The plugin configuration <span class="hljs-keyword">file</span>:</span><br><span class="line">/usr/local/Cellar/graphviz/<span class="hljs-number">2.47</span>.<span class="hljs-number">0</span>/lib/graphviz/config6</span><br><span class="line">was successfully loaded.</span><br><span class="line">    render:  cairo dot dot_json fig gd json json0 <span class="hljs-keyword">map</span> mp pic pov <span class="hljs-keyword">ps</span> quartz svg tk visio vml vrml xdot xdot_json</span><br><span class="line">    layout:  circo dot fdp neato nop nop1 nop2 osage patchwork sfdp twopi</span><br><span class="line">    textlayout:  textlayout</span><br><span class="line">    device:  bmp canon cgimage <span class="hljs-keyword">cmap</span> cmapx cmapx_np dot dot_json eps exr fig gd gd2 gif <span class="hljs-keyword">gv</span> icns ico <span class="hljs-keyword">imap</span> imap_np ismap jp2 jpe jpeg jpg json json0 mp pct pdf pic pict plain plain-ext png pov <span class="hljs-keyword">ps</span> ps2 psd sgi svg svgz tga tif tiff tk vdx vml vmlz vrml wbmp webp xdot xdot1.<span class="hljs-number">2</span> xdot1.<span class="hljs-number">4</span> xdot_json</span><br><span class="line">    loadimage:  (lib) bmp eps gd gd2 gif jpe jpeg jpg pdf png <span class="hljs-keyword">ps</span> svg webp xbm</span><br></pre></td></tr></table></figure><h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><p>本文使用<code>Homebrew</code>安装<code>openjdk</code>即可，终端执行以下命令安装<code>openjdk</code>。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openjdk</span><br></pre></td></tr></table></figure><p>安装完毕后查看版本信息。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version <span class="hljs-string">"11.0.10"</span> <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-19</span></span><br><span class="line">OpenJDK Runtime Environment (build <span class="hljs-number">11.0</span><span class="hljs-number">.10</span>+<span class="hljs-number">9</span>)</span><br><span class="line">OpenJDK <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">11.0</span><span class="hljs-number">.10</span>+<span class="hljs-number">9</span>, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="Jetbrains-IDE插件安装"><a href="#Jetbrains-IDE插件安装" class="headerlink" title="Jetbrains IDE插件安装"></a>Jetbrains IDE插件安装</h3><p>本文以<code>Goland</code>为例。</p><ol><li><p>打开IDE设置，打开<code>Plugins</code>窗口，搜索<code>PlantUML integration</code></p></li><li><p>安装完毕后重启IDE</p></li><li><p>打开IDE设置，搜索<code>plantuml</code>，确保<code>Remote rendering</code>已关闭</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622792407142095000.png" alt="image-20210604154007098"></p></li></ol><h2 id="PlantUML语法"><a href="#PlantUML语法" class="headerlink" title="PlantUML语法"></a>PlantUML语法</h2><p>以最常用的时序图、类图、流程图、组件图举例。</p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><h4 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h4><ol><li><p>IDE新建一个空项目，打开项目之后，右键新建文件</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622791752260150000.png" alt="image-20210604152912197"></p></li><li><p>选择<code>Sequence</code></p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622791775795758000.png" alt="image-20210604152935751"></p></li><li><p>PlantUML菜单项说明</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622793009802684000.png" alt="image-20210604155009752"></p></li><li><p>以微信网页授权为例编写时序图。</p><figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">@startuml</span></span><br><span class="line">'<span class="hljs-attribute">https</span>:<span class="hljs-comment">//plantuml.com/sequence-diagram</span></span><br><span class="line"></span><br><span class="line">'启用自动编号</span><br><span class="line">autonumber</span><br><span class="line">'生命线自动激活</span><br><span class="line">autoactivate on</span><br><span class="line"></span><br><span class="line">actor 用户</span><br><span class="line"></span><br><span class="line">用户 -&gt; 应用服务器: 获取用户信息</span><br><span class="line">应用服务器 -&gt; 微信服务器: 跳转授权链接:(appid,scope,callback)</span><br><span class="line">微信服务器 -&gt; 用户: 请求用户授权</span><br><span class="line">return 允许授权</span><br><span class="line">return 返回授权code</span><br><span class="line">应用服务器 -&gt; 微信服务器: 获取用户access_token(appid,secret,code)</span><br><span class="line">return 返回access_token+openid</span><br><span class="line">应用服务器 -&gt; 微信服务器: 获取用户信息(openid,access_token)</span><br><span class="line">return 用户信息</span><br><span class="line">return 用户信息</span><br><span class="line"></span><br><span class="line"><span class="hljs-variable">@enduml</span></span><br></pre></td></tr></table></figure></li><li><p>渲染效果</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622792350734661000.png" alt="image-20210604153910674"></p></li></ol><h4 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h4><h5 id="标记声明"><a href="#标记声明" class="headerlink" title="标记声明"></a>标记声明</h5><figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">@startuml</span>和<span class="hljs-variable">@enduml</span>是PlantUML的开始结束标记，无需更改。</span><br><span class="line">autonumber 打开启动编号，也就是每个步骤之前都有数字编号，打开之后整个流程更加清晰</span><br><span class="line">autoactivate on 打开生命线自动激活，需要配合<span class="hljs-built_in">`return`</span>使用</span><br><span class="line">actor 用户 声明<span class="hljs-built_in">`用户`</span>的类型是actor(行为人)</span><br></pre></td></tr></table></figure><h5 id="时序声明"><a href="#时序声明" class="headerlink" title="时序声明"></a>时序声明</h5><ul><li>使用<code>-&gt;</code>来声明一个时序操作，<code>:</code>后面可以附加消息</li><li>使用<code>return</code>来返回消息给调用者</li></ul><h5 id="声明参与者"><a href="#声明参与者" class="headerlink" title="声明参与者"></a>声明参与者</h5><p>默认情况下参与者为矩形，无法看出实际类型。实际应用中，会有数据库、消息队列等等参与者，使用以下关键字来改变参与者的图例。</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actor 用户</span><br><span class="line">database 数据库</span><br><span class="line">queue 消息队列</span><br></pre></td></tr></table></figure><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622792920216896000.png" alt="image-20210604154840162"></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>类图是UML中非常重要的一种类型，能够在实际编码之前为我们提供OOP的详细设计。</p><h4 id="Get-Started-1"><a href="#Get-Started-1" class="headerlink" title="Get Started"></a>Get Started</h4><ol><li><p>IDE新建一个空项目，打开项目之后，右键新建文件</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622791752260150000.png" alt="image-20210604152912197"></p></li><li><p>选择<code>Class</code></p><p><img src="https://static.ddhigh.com/blog/2021/06/04/1622793181374871000.png" alt="image-20210604155301322"></p></li><li><p>以一个上传类为例编写类图</p><figure class="highlight haskell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">'https://plantuml.com/<span class="hljs-keyword">class</span>-diagram</span><br><span class="line"></span><br><span class="line"><span class="hljs-title">namespace</span> com.ddhigh.uploader &#123;</span><br><span class="line">    interface <span class="hljs-type">Uploader</span> &#123;</span><br><span class="line">        + <span class="hljs-type">String</span> <span class="hljs-type">Upload</span>(<span class="hljs-type">String</span> filename) <span class="hljs-type">Throws</span> <span class="hljs-type">IOException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    namespace qiniu &#123;</span><br><span class="line"><span class="hljs-class">        <span class="hljs-keyword">class</span> <span class="hljs-type">QiniuUploader</span> implements <span class="hljs-type">Uploader</span> &#123;</span></span><br><span class="line"><span class="hljs-class">            - client: qiniu.<span class="hljs-type">Client</span></span></span><br><span class="line"><span class="hljs-class">            <span class="hljs-comment">--</span></span></span><br><span class="line"><span class="hljs-class">            + <span class="hljs-type">String</span> <span class="hljs-type">Upload</span>(<span class="hljs-type">String</span> <span class="hljs-title">filename</span>) <span class="hljs-type">Throws</span> <span class="hljs-type">IOException</span></span></span><br><span class="line"><span class="hljs-class">        &#125;</span></span><br><span class="line"><span class="hljs-class">        <span class="hljs-type">QiniuUploader</span> *<span class="hljs-comment">-- qiniu.Client</span></span></span><br><span class="line"><span class="hljs-class">    &#125;</span></span><br><span class="line"><span class="hljs-class"></span></span><br><span class="line"><span class="hljs-class">    package aliyun &#123;</span></span><br><span class="line"><span class="hljs-class">        <span class="hljs-keyword">class</span> <span class="hljs-type">AliyunUploader</span> implements <span class="hljs-type">Uploader</span> &#123;</span></span><br><span class="line"><span class="hljs-class">            - client: aliyun.<span class="hljs-type">Client</span></span></span><br><span class="line"><span class="hljs-class">            <span class="hljs-comment">--</span></span></span><br><span class="line"><span class="hljs-class">            + <span class="hljs-type">String</span> <span class="hljs-type">Upload</span>(<span class="hljs-type">String</span> <span class="hljs-title">filename</span>) <span class="hljs-type">Throws</span> <span class="hljs-type">IOException</span></span></span><br><span class="line"><span class="hljs-class">        &#125;</span></span><br><span class="line"><span class="hljs-class">        <span class="hljs-type">AliyunUploader</span> *<span class="hljs-comment">-- aliyun.Client</span></span></span><br><span class="line"><span class="hljs-class">    &#125;</span></span><br><span class="line"><span class="hljs-class"></span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-type">UploaderFacade</span> &#123;</span></span><br><span class="line"><span class="hljs-class">        - uploaders: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Uploader</span>&gt;</span></span><br><span class="line"><span class="hljs-class">        <span class="hljs-comment">--</span></span></span><br><span class="line"><span class="hljs-class">        + <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt; <span class="hljs-type">Upload</span>(<span class="hljs-type">String</span> <span class="hljs-title">filename</span>) <span class="hljs-type">Throws</span> <span class="hljs-type">IOException</span></span></span><br><span class="line"><span class="hljs-class">    &#125;</span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-type">UploaderFacade</span> o<span class="hljs-comment">-- Uploader</span></span></span><br><span class="line"><span class="hljs-class">&#125;</span></span><br><span class="line"><span class="hljs-class"></span></span><br><span class="line"><span class="hljs-class">@enduml</span></span><br></pre></td></tr></table></figure></li><li><p>渲染效果</p><p><img src="https://static.ddhigh.com/blog/2021/06/04/1622793501066543000.png" alt="image-20210604155821009"></p></li></ol><h5 id="语法说明-1"><a href="#语法说明-1" class="headerlink" title="语法说明"></a>语法说明</h5><h5 id="包"><a href="#包" class="headerlink" title="包"></a>包</h5><p>建议使用<code>namespace</code>关键字声明包，<code>package</code>声明的包内的类名必须全局唯一(无视package)，而<code>namespace</code>只要求该<code>namespace</code>内唯一即可。</p><h5 id="class-interface"><a href="#class-interface" class="headerlink" title="class/interface"></a>class/interface</h5><p>与实际编程语言几乎无差别，比如上面例子中采用的是java语法。</p><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>PlantUML支持3种可见性：</p><ul><li><code>-</code> 私有级别 <code>private</code></li><li><code>#</code> 保护级别 <code>protected</code></li><li><code>+</code> 公有级别 <code>public</code></li></ul><h5 id="元素关系"><a href="#元素关系" class="headerlink" title="元素关系"></a>元素关系</h5><p>PlantUML主要有以下3种关系：</p><ol><li>扩展: 包含<code>implements</code>和<code>extends</code></li><li>聚合: 使用<code>o--</code>，<code>左边</code>的包含<code>右边</code>的</li><li>组合: 使用<code>*--</code>,<code>左边</code>的依赖<code>右边</code>的</li></ol><blockquote><p>组合和聚合的区别：(以上面的图为例)</p><ol><li>组合：QiniuUploader必须依赖Client才能提供上传功能，组合一般是1对1的。</li><li>聚合：UploadFacade可以依赖多个Uploader实例，也可以依赖0个实例(只是这时候不会有文件上传了)，聚合一般是1对多的。</li></ol></blockquote><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>在梳理复杂业务逻辑时，善用流程图能帮我们更加清晰地梳理清楚，也方便我们和其他人员进行沟通（非开发人员基本看不懂代码）。</p><h4 id="Get-Started-2"><a href="#Get-Started-2" class="headerlink" title="Get Started"></a>Get Started</h4><ol><li><p>IDE新建一个空项目，打开项目之后，右键新建文件</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622791752260150000.png" alt="image-20210604152912197"></p></li><li><p>新建<code>Activity</code>类型文件</p><p><img src="https://static.ddhigh.com/blog/2021/06/04/1622794169645334000.png" alt="image-20210604160929588"></p></li><li><p>下面以一个<code>授权获取用户openid并插入数据库，然后查询用户好友进行消息推送</code>的场景编写流程图</p><figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">@startuml</span></span><br><span class="line">'<span class="hljs-attribute">https</span>:<span class="hljs-comment">//plantuml.com/activity-diagram-beta</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line">:使用code,appid,secret请求微信服务器获取access_token和openid;</span><br><span class="line">:使用<span class="hljs-selector-tag">access_token</span>和<span class="hljs-selector-tag">openid</span>请求微信服务器获取用户信息;</span><br><span class="line">:查询数据库<span class="hljs-selector-tag">openid</span>是否存在;</span><br><span class="line"><span class="hljs-selector-tag">if</span> (数据库查询失败?) <span class="hljs-selector-tag">then</span> (是)</span><br><span class="line"><span class="hljs-selector-tag">stop</span></span><br><span class="line"><span class="hljs-selector-tag">elseif</span> (用户已存在?) <span class="hljs-selector-tag">then</span> (是)</span><br><span class="line">:更新用户信息;</span><br><span class="line"><span class="hljs-selector-tag">else</span> (否)</span><br><span class="line">:新建用户并绑定<span class="hljs-selector-tag">openid</span>;</span><br><span class="line"><span class="hljs-selector-tag">endif</span></span><br><span class="line"></span><br><span class="line">:获取用户好友列表;</span><br><span class="line"><span class="hljs-selector-tag">while</span>(好友列表遍历完成?) <span class="hljs-selector-tag">is</span> (否)</span><br><span class="line">:推送消息给好友;</span><br><span class="line"><span class="hljs-selector-tag">endwhile</span>(是)</span><br><span class="line"><span class="hljs-selector-tag">stop</span></span><br><span class="line"></span><br><span class="line">@<span class="hljs-selector-tag">enduml</span></span><br></pre></td></tr></table></figure></li><li><p>渲染效果</p><p><img src="https://static.ddhigh.com/blog/2021/06/04/1622794522917043000.png" alt="image-20210604161522881"></p></li></ol><h4 id="语法说明-2"><a href="#语法说明-2" class="headerlink" title="语法说明"></a>语法说明</h4><ul><li><p>开始和结束: 使用<code>start</code>和<code>stop</code></p></li><li><p>处理语句: 使用<code>:</code>和<code>;</code>包裹该流程</p></li><li>条件判断: 使用<code>if</code>,<code>elseif</code>,<code>else</code>,<code>endif</code>,<code>then</code></li><li>循环语句: 使用<code>while</code>,<code>is</code>,<code>endwhile</code>编写</li></ul><h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><p>现阶段组件化MVVM框架大行其道，具有代表性的有<code>Vue</code>,<code>React</code>和<code>Angular</code>。我们可以使用组件图来绘制组件关系，简单易懂。</p><h5 id="Get-Started-3"><a href="#Get-Started-3" class="headerlink" title="Get Started"></a>Get Started</h5><ol><li><p>IDE新建一个空项目，打开项目之后，右键新建文件</p><p><img src="https://static.ddhigh.com/blog//2021/06/04/1622791752260150000.png" alt="image-20210604152912197"></p></li><li><p>选择<code>Component</code></p><p><img src="https://static.ddhigh.com/blog/2021/06/04/1622794820895677000.png" alt="image-20210604162020830"></p></li><li><p>以微信首页聊天列表为例绘制组件关系图</p><figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">@startuml</span></span><br><span class="line">'<span class="hljs-attribute">https</span>:<span class="hljs-comment">//plantuml.com/component-diagram</span></span><br><span class="line"></span><br><span class="line">package widgets &#123;</span><br><span class="line">    <span class="hljs-selector-attr">[SearchBar]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[Text]</span></span><br><span class="line">    <span class="hljs-selector-attr">[SearchBar]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[Icon]</span></span><br><span class="line">    <span class="hljs-selector-attr">[NavigationBar]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[Text]</span></span><br><span class="line">    <span class="hljs-selector-attr">[NavigationBar]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[Icon]</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-selector-attr">[ListView]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[ListItem]</span></span><br><span class="line">    <span class="hljs-selector-attr">[ListItem]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[Image]</span></span><br><span class="line">    <span class="hljs-selector-attr">[ListItem]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[Text]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package routes &#123;</span><br><span class="line">    <span class="hljs-selector-attr">[Home]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[NavigationBar]</span></span><br><span class="line">    <span class="hljs-selector-attr">[Home]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[SearchBar]</span></span><br><span class="line">    <span class="hljs-selector-attr">[Home]</span> <span class="hljs-selector-tag">--</span>&gt; <span class="hljs-selector-attr">[ListView]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-variable">@enduml</span></span><br></pre></td></tr></table></figure></li><li><p>渲染效果</p><p><img src="https://static.ddhigh.com/blog/2021/06/04/1622795518286015000.png" alt="image-20210604162521451"></p><blockquote><p>依赖关系如下：</p><ul><li>首页: 导航栏, 搜索框，列表</li><li>导航栏: 文本，图标</li><li>搜索框: 文本，图标</li><li>列表: 列表项</li><li>列表项: 文本，图片</li></ul></blockquote></li></ol><h5 id="语法说明-3"><a href="#语法说明-3" class="headerlink" title="语法说明"></a>语法说明</h5><ul><li>package 声明包，同一个包内的组件是类似地位</li><li><code>[组件名]</code>声明组件，<code>组件名</code>在单个文件内是唯一的</li><li><code>--&gt;</code> 声明依赖关系，<code>左边</code>依赖<code>右边</code></li></ul><p>(完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;统一建模语言&lt;/strong&gt;（英语：Unified Modeling Language，缩写 U
      
    
    </summary>
    
      <category term="devtools" scheme="https//www.ddhigh.com/categories/devtools/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang程序设计——函数</title>
    <link href="https//www.ddhigh.com/2021/03/17/golang-function.html"/>
    <id>https//www.ddhigh.com/2021/03/17/golang-function.html</id>
    <published>2021-03-17T02:22:36.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习Go语言函数知识。函数是基本的代码块，用于执行一个任务。在Go语言中，函数可以接收数量不固定的参数，也可以返回多个结果。</p><h2 id="函数结构"><a href="#函数结构" class="headerlink" title="函数结构"></a>函数结构</h2><p>在编程领域，函数向编译器和开发者提供了有关的信息，这些信息指明了函数该接收什么样的输入以及会产生什么样的输出。这些信息是通过函数第一行提供的，第一行称为函数签名。</p><p>Go语言声明函数语法如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名称<span class="hljs-params">(参数名 参数类型)</span> <span class="hljs-params">(返回值名称 返回值类型)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 函数体</span></span><br><span class="line">  <span class="hljs-keyword">return</span>语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>参数名在参数类型前面，如<code>a int</code>，这一点和其他语言是不同的</li><li>函数参数数量可以不固定，但是只允许最后一个参数数量不固定，而且必须是同种类型</li><li>返回值名称不是必须的，但是参数名是必须写的</li><li>有返回值的函数，函数体内必须包含return语句</li></ol><p>示例：函数定义与调用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"1+2=%d\n"</span>, sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Go语言中，如果多个参数或多个返回值类型相同，只需要在最后一个参数或返回值声明类型。</p><p>例如下面的函数签名在Go语言中是合法的。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum2</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(c, d <span class="hljs-keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure><h2 id="不定参数函数"><a href="#不定参数函数" class="headerlink" title="不定参数函数"></a>不定参数函数</h2><p>不定参数也就是数量不固定的参数。例如C语言中的printf函数就是一个典型的不定参数函数。Go语言支持不定参数函数，但是不定参数的类型必须相同。要声明不定参数，需要使用3个点(…)。</p><p>示例：不定参数的加法函数</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">total := <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> nums &#123;</span><br><span class="line">total += n</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"1+2+3+4=%d\n"</span>, sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sum函数中，nums是一个包含所有参数的切片。</p><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><h3 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h3><p>在Go语言中，函数能声明多个返回值，在这种情况下，return可以返回多个结果。函数调用者可通过多变量声明接收多个返回值。</p><p>示例：多返回值函数</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"errors"</span></span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">div</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, errors.New(<span class="hljs-string">"b is zero"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> a / b, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">ret, err := div(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"2/1=%d\n"</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h3><p>命名返回值让函数能够在返回前将返回值赋给命名变量，这种设计有利于提高程序可读性。要指定命名返回值，可在函数签名的返回值类型前面添加变量名。</p><p>示例：命名返回值函数</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(total <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">total = a + b</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"1+2=%d\n"</span>, sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命名返回值后，return关键字可以单独出现，当然，return关键字继续返回结果值也是合法的。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(total <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">total = a + b</span><br><span class="line"><span class="hljs-keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>在Go语言中，函数是一种数据类型，可以将函数赋值给变量、或者作为参数传递，也可以作为返回值返回。</p><p>示例：将函数作为变量、参数、返回值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 函数作为变量</span></span><br><span class="line">sum := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"1+1=%d\n"</span>, sum(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))</span><br><span class="line"><span class="hljs-comment">// 函数作为参数</span></span><br><span class="line">sum2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(total <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"1+1=%d\n"</span>, total)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// 函数作为返回值</span></span><br><span class="line">totalFn := sum3(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"1+1=%d\n"</span>, totalFn())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum2</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>, callback <span class="hljs-keyword">func</span>(<span class="hljs-keyword">int</span>)</span>)</span> &#123;</span><br><span class="line">total := a + b</span><br><span class="line">callback(total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum3</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数、闭包、延迟执行函数"><a href="#匿名函数、闭包、延迟执行函数" class="headerlink" title="匿名函数、闭包、延迟执行函数"></a>匿名函数、闭包、延迟执行函数</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数指没有名称的函数，只有函数签名（参数和返回值声明）和函数体，匿名函数经常用于回调、闭包、临时函数等。</p><p>示例：利用匿名函数实现事件总线。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">emitter := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span>)</span></span><br><span class="line">addEventListener(emitter, <span class="hljs-string">"event1"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"event1 called"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">emit(emitter, <span class="hljs-string">"event2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 添加事件监听器</span></span><br><span class="line"><span class="hljs-comment">// emitter 事件总线</span></span><br><span class="line"><span class="hljs-comment">// event 事件名</span></span><br><span class="line"><span class="hljs-comment">// callback 回调函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addEventListener</span><span class="hljs-params">(emitter <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">event</span> <span class="hljs-title">string</span>, <span class="hljs-title">callback</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>)</span> &#123;</span><br><span class="line">emitter[event] = callback</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 触发事件</span></span><br><span class="line"><span class="hljs-comment">// emitter 事件总线</span></span><br><span class="line"><span class="hljs-comment">// event 事件名</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">emit</span><span class="hljs-params">(emitter <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">event</span> <span class="hljs-title">string</span>)</span> &#123;</span><br><span class="line">callback, ok := emitter[event]</span><br><span class="line"><span class="hljs-keyword">if</span> ok &#123;</span><br><span class="line">callback()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数调用addEventListener时传入的第三个函数即为匿名函数。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包可以理解为定义在一个函数内部的函数。在本质上，闭包是函数和其引用环境的组合体。引用环境即使在外部函数执行结束也不会被回收，因此可以利用闭包保存保存执行环境。</p><p>示例：利用闭包提供唯一ID生成器。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">s1 := sequenceId()</span><br><span class="line">s2 := sequenceId()</span><br><span class="line">fmt.Printf(<span class="hljs-string">"s1 -&gt; %v\n"</span>, s1())</span><br><span class="line">fmt.Printf(<span class="hljs-string">"s1 -&gt; %v\n"</span>, s1())</span><br><span class="line">fmt.Printf(<span class="hljs-string">"s2 -&gt; %v\n"</span>, s2())</span><br><span class="line">fmt.Printf(<span class="hljs-string">"s2 -&gt; %v\n"</span>, s2())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sequenceId</span><span class="hljs-params">()</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> id <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">id++</span><br><span class="line"><span class="hljs-keyword">return</span> id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 -&gt; <span class="hljs-number">1</span></span><br><span class="line">s1 -&gt; <span class="hljs-number">2</span></span><br><span class="line">s2 -&gt; <span class="hljs-number">1</span></span><br><span class="line">s2 -&gt; <span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p>函数sequenceId定义了一个局部变量id，并返回了一个子函数，子函数内部访问了外部的id，因此这构成一个典型的闭包。在前面的内容中我们学习过变量作用域，内部总是可以访问外部的变量或常量，而外部无法访问内部的变量或常量。此外，由于变量id被子函数使用，因此在sequenceId函数返回后，id也不会被销毁。</p><p>每调用一次sequenceId函数都会返回一个新的子函数以及对应的id，因此s1和s2之间的输出互不影响。</p><blockquote><p>注意：由于闭包会导致被引用的变量无法销毁，因此需要注意使用，避免产生内存泄漏。</p></blockquote><h3 id="延迟执行函数"><a href="#延迟执行函数" class="headerlink" title="延迟执行函数"></a>延迟执行函数</h3><p>在实际编程中往往会打开一些资源，例如文件、网络连接等等，这些资源在使用完毕时（无论是正常关闭或者函数异常）需要主动关闭，当函数的结束分支太多或者逻辑比较复杂时容易发生忘记关闭的情况导致资源泄漏。</p><p>Go语言提供了defer关键字用来延迟执行一个函数，一般使用该函数延迟关闭资源。多个defer语句会按照先进后出的方式执行，也就是最后声明的最先执行，典型的栈结构。</p><p>示例：defer执行顺序。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> f1()</span><br><span class="line"><span class="hljs-keyword">defer</span> f2()</span><br><span class="line">fmt.Println(<span class="hljs-string">"call main"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"call f1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">"defer call f2"</span>)</span><br><span class="line">fmt.Println(<span class="hljs-string">"call f2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">call</span> <span class="hljs-keyword">main</span></span><br><span class="line"><span class="hljs-keyword">call</span> f2</span><br><span class="line">defer <span class="hljs-keyword">call</span> f2</span><br><span class="line"><span class="hljs-keyword">call</span> f1</span><br></pre></td></tr></table></figure><ol><li><p>第一行输出call main是因为main函数中只有一个非defer语句，因此call main最先执行</p></li><li><p>第二行输出call f2是因为f2函数内部有一个非defer语句</p></li><li><p>第三行输出defer call f2是因为f2函数的fmt.Println(“call f2”)执行完毕后才能执行defer</p></li><li><p>第四行输出call f1是因为defer f1()最先声明因此最后执行</p></li></ol><p>示例：基于defer和闭包构造一个函数执行耗时记录器。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Name <span class="hljs-keyword">string</span></span><br><span class="line">Age  <span class="hljs-keyword">int</span></span><br><span class="line">Sex  <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> spendTime()()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="hljs-string">"call main"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">spendTime</span><span class="hljs-params">()</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">startAt := time.Now()</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Since(startAt))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">call</span> <span class="hljs-keyword">main</span></span><br><span class="line"><span class="hljs-number">1.002345498</span>s</span><br></pre></td></tr></table></figure><p>spendTime()会返回一个闭包，因此定义defer时会初始化startAt为当前时间，defer执行时会执行闭包函数得到函数耗时。main函数为了测试方便休眠了一秒钟，因此可以看到输出是超过1秒的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文介绍了如何在Go语言中使用函数。包括不定参数函数、多返回值和命名返回值函数以及将函数作为类型使用的方法，最后介绍了匿名函数、闭包和延迟执行函数。接下来的内容中将介绍Go语言中的结构体。</p><p><img src="https://static.ddhigh.com/blog/2021-03-09-162926-2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文学习Go语言函数知识。函数是基本的代码块，用于执行一个任务。在Go语言中，函数可以接收数量不固定的参数，也可以返回多个结果。&lt;/p&gt;
&lt;h2 id=&quot;函数结构&quot;&gt;&lt;a href=&quot;#函数结构&quot; class=&quot;headerlink&quot; title=&quot;函数结构&quot;&gt;&lt;/a&gt;函数
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang程序设计——数据容器</title>
    <link href="https//www.ddhigh.com/2021/03/09/golang-data-container.html"/>
    <id>https//www.ddhigh.com/2021/03/09/golang-data-container.html</id>
    <published>2021-03-09T08:21:34.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习Go语言数据容器、包括数组、切片和映射。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一个数据集合，常用于存储用数字索引的同类型数据。Go语言的数组调用函数时使用的是值传递，因此形参会拷贝一份实参的值。</p><p>在Go语言中，声明数组需要同时指定长度和数据类型，数组长度是其类型的一部分，因此<code>[5]int</code>和<code>[1]int</code>是两种类型。</p><p>Go语言可以对数组进行写入、读取、删除、遍历等操作。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 声明数组并指明长度，不初始化，因此a的5个元素为int类型的零值（0）</span></span><br><span class="line"><span class="hljs-keyword">var</span> a [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-comment">// 声明数组并指明长度，并初始化4个元素，因此b的最后1个元素为int类型零值（0）</span></span><br><span class="line"><span class="hljs-keyword">var</span> b = [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line"><span class="hljs-comment">// 声明数组，不指明长度，编译器会根据值数量推导长度为4</span></span><br><span class="line"><span class="hljs-keyword">var</span> c = [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line"><span class="hljs-comment">// 数组写入</span></span><br><span class="line">a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span></span><br><span class="line">a[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-comment">// 数组读取</span></span><br><span class="line">fmt.Printf(<span class="hljs-string">"a[0]=%d\n"</span>, a[<span class="hljs-number">0</span>])</span><br><span class="line"><span class="hljs-comment">// 数组删除（赋零值）</span></span><br><span class="line">a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-comment">// 数组的遍历</span></span><br><span class="line"><span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> c &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"c[%d]=%d\n"</span>, index, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 输出b</span></span><br><span class="line">fmt.Printf(<span class="hljs-string">"b=%v\n"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h3 id="使用切片"><a href="#使用切片" class="headerlink" title="使用切片"></a>使用切片</h3><p>在Go语言中，数组是一个重要的类型，但是使用切片的情况更多。切片是底层数组中的一个连续片段，因此数组支持的特性切片也全部支持，必须顺序遍历、通过索引访问元素等等。</p><p>为何使用切片的情况更多呢？主要是因为Go语言的数组不支持自动扩容，而且不支持删除元素，更重要的是Go语言数组是值类型，切片是引用类型，在向函数传参时切片拥有更好的性能。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 声明一个大小为0的int类型切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-comment">// 添加三个元素</span></span><br><span class="line">a = <span class="hljs-built_in">append</span>(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="hljs-comment">// 遍历元素</span></span><br><span class="line"><span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a[%d]=%d\n"</span>, index, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 声明一个大小为4的切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">4</span>)</span><br><span class="line"><span class="hljs-comment">// 将a的元素复制到b</span></span><br><span class="line"><span class="hljs-built_in">copy</span>(b, a)</span><br><span class="line"><span class="hljs-comment">// 删除指定下标的元素</span></span><br><span class="line">a = <span class="hljs-built_in">append</span>(a[:<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>:]...)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a=%v\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"b=%v\n"</span>, b)</span><br><span class="line"><span class="hljs-comment">// 使用值初始化切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> c = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"c=%v\n"</span>, c)</span><br><span class="line"><span class="hljs-comment">// 只定义，不初始化切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> d []<span class="hljs-keyword">int</span></span><br><span class="line">d = <span class="hljs-built_in">append</span>(d, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"d=%v\n"</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明切片可以不使用make初始化，append也不会报错。</p><h3 id="运行时结构"><a href="#运行时结构" class="headerlink" title="运行时结构"></a>运行时结构</h3><p>切片运行时结构如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="hljs-built_in">len</span>   <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-built_in">cap</span>   <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>array是底层数组</p></li><li><p>len是数组大小，可以通过len函数获取</p></li><li><p>cap是数组容量，可以通过cap函数获取</p></li></ol><p>make函数创建切片有两种写法：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>) <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><ol><li><p>声明了一个长度为0的切片，此时len为0，cap也为0</p></li><li><p>声明一个长度为0，容量为8的切片，此时len为0，cap为8</p></li></ol><h3 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h3><p>Go语言提供append函数追加元素到切片中，append会在必要时扩容底层数组。扩容规则如下：</p><ol><li><p>新容量小于1024时，每次扩容2倍。例如现有容量为2，扩容后为4</p></li><li><p>新容量大于1024时，每次扩容1.25倍。例如现有容量为1024，扩容后为1280</p></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 直接使用值初始化切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;</span><br><span class="line">a = <span class="hljs-built_in">append</span>(a, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> b = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;</span><br><span class="line"><span class="hljs-comment">// 追加b的全部元素到a</span></span><br><span class="line">a = <span class="hljs-built_in">append</span>(a, b...)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a=%v\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"b=%v\n"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范围操作符"><a href="#范围操作符" class="headerlink" title="范围操作符"></a>范围操作符</h3><p>切片支持取范围操作，新切片和原切片共享底层数组，因此对切片的修改会同时影响两个切片。</p><p>范围操作符语法如下：a[begin:end]，左闭右开区间。因此a[1:10]包含a切片索引为1~9的元素。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 直接使用值初始化切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> b = a[<span class="hljs-number">1</span>:<span class="hljs-number">10</span>]</span><br><span class="line">fmt.Println(b)</span><br><span class="line"><span class="hljs-comment">// 修改新切片元素</span></span><br><span class="line">b[<span class="hljs-number">0</span>] = <span class="hljs-number">11</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到修改b索引为0的元素为11之后，a切片也同时受到影响。</p><p>范围操作符的切片这一点在编程中要特别注意！</p><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>利用范围操作符和append函数可以删除指定的切片元素。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 直接使用值初始化切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;</span><br><span class="line"><span class="hljs-comment">// 删除第2个元素</span></span><br><span class="line">a = <span class="hljs-built_in">append</span>(a[:<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>:]...)</span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="hljs-comment">// 删除第2、3个元素</span></span><br><span class="line">a = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;</span><br><span class="line">a = <span class="hljs-built_in">append</span>(a[:<span class="hljs-number">1</span>], a[<span class="hljs-number">3</span>:]...)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制元素"><a href="#复制元素" class="headerlink" title="复制元素"></a>复制元素</h3><p>通过copy函数可以复制切片的全部或部分元素。在复制切片之前，需要声明好目标切片并设置len。</p><p><em>len<strong>必须大于</strong>0**，否则将不会复制任何元素。</em></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 直接使用值初始化切片</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>)</span><br><span class="line"><span class="hljs-built_in">copy</span>(b, a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line"><span class="hljs-keyword">var</span> c = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">8</span>)</span><br><span class="line"><span class="hljs-built_in">copy</span>(c, a[<span class="hljs-number">9</span>:<span class="hljs-number">10</span>])</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出如下：</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br><span class="line">[<span class="hljs-number">10</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]</span><br></pre></td></tr></table></figure><p>可以看到切片b没有任何值，切片c成功复制了a的最后一个元素。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>映射也叫字典、哈希表，数组和切片是通过数字索引访问的顺序集合，而映射是通过键来访问的无序集合。映射在查找方面非常高效，有着O(1)的时间复杂度，是非常常用的数据结构。</p><h3 id="使用映射"><a href="#使用映射" class="headerlink" title="使用映射"></a>使用映射</h3><p>映射必须初始化之后才能使用，这一点和切片不同。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 使用make初始化映射</span></span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>)</span><br><span class="line">a[<span class="hljs-string">"zhangsan"</span>] = <span class="hljs-number">18</span></span><br><span class="line">a[<span class="hljs-string">"lisi"</span>] = <span class="hljs-number">28</span></span><br><span class="line">fmt.Printf(<span class="hljs-string">"a=%v\n"</span>, a)</span><br><span class="line"><span class="hljs-comment">// 使用值初始化映射</span></span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>&#123;</span><br><span class="line"><span class="hljs-string">"zhangsan"</span>: <span class="hljs-number">18</span>,</span><br><span class="line"><span class="hljs-string">"lisi"</span>:     <span class="hljs-number">28</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"b=%v\n"</span>, b)</span><br><span class="line"><span class="hljs-comment">// 遍历映射</span></span><br><span class="line"><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> b &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是未初始化映射的使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span></span><br><span class="line">a[<span class="hljs-string">"zhangsan"</span>] = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"%s=%d\n"</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序会产生运行时错误：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">panic</span>: assignment to entry in <span class="hljs-literal">nil</span> <span class="hljs-keyword">map</span></span><br><span class="line">goroutine <span class="hljs-number">1</span> [running]:</span><br><span class="line">main.main()</span><br><span class="line">/Users/example/<span class="hljs-keyword">go</span>/src/<span class="hljs-keyword">go</span>-microservice-inaction/src/<span class="hljs-number">2.1</span>/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">7</span> +<span class="hljs-number">0x5d</span></span><br></pre></td></tr></table></figure><h3 id="运行时结构-1"><a href="#运行时结构-1" class="headerlink" title="运行时结构"></a>运行时结构</h3><p>映射的运行时结构如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">count      <span class="hljs-keyword">int</span></span><br><span class="line">flags      <span class="hljs-keyword">uint8</span></span><br><span class="line">B          <span class="hljs-keyword">uint8</span></span><br><span class="line">noverflow  <span class="hljs-keyword">uint16</span></span><br><span class="line">hash0      <span class="hljs-keyword">uint32</span></span><br><span class="line">buckets    unsafe.Pointer</span><br><span class="line">oldbuckets unsafe.Pointer</span><br><span class="line">nevacuate  <span class="hljs-keyword">uintptr</span></span><br><span class="line">extra      *mapextra</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分字段说明如下：</p><ol><li><p>count是目前映射的键值对数量</p></li><li><p>B是映射的容量，对数。例如B为8，则映射容量为28=256</p></li><li><p>buckets中存储具体的键值对</p></li><li><p>oldbuckets在扩容中会使用到</p></li><li><p>nevacuate 扩容进度指示器</p></li></ol><p>当装载因子超过6.5时，映射将发生扩容操作。装载因子计算公式：count/2B。例如当前为为166，此时装载因子为166/28=0.6484375，继续插入元素时，装载因子变为167/28= 0.65234375，此时会触发自动扩容。</p><p>每次扩容会增加1倍的空间，同时会对已存在的键值对进行渐进式迁移（一次迁移一小部分）。</p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>Go语言映射添加元素和其他语言类似，使用[]语法即可。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>)</span><br><span class="line">m[<span class="hljs-string">"name"</span>] = <span class="hljs-number">18</span></span><br></pre></td></tr></table></figure><p>添加元素时运行时会自动处理扩容和键值对迁移，无需用户程序关心。</p><h3 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h3><p>要从映射中删除元素，需要使用delete函数。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>&#123;</span><br><span class="line">  <span class="hljs-string">"zhangsan"</span>:<span class="hljs-number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">delete</span>(m, <span class="hljs-string">"zhangsan"</span>)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本章介绍了Go语言常用的数据容器，其中对切片和映射的底层原理进行了简单介绍。Go语言通过内置切片和映射解决了C语言需要手动实现这两种常用数据结构的问题，提高了开发效率。在下一章将介绍Go语言的函数。</p><p><img src="https://static.ddhigh.com/blog/2021-03-09-162926-2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文学习Go语言数据容器、包括数组、切片和映射。&lt;/p&gt;
&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;数组是一个数据集合，常用于存储用数字索引的同类型数据。Go语言的数组调用函数
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang程序设计——基本语法</title>
    <link href="https//www.ddhigh.com/2021/02/26/golang-basic.html"/>
    <id>https//www.ddhigh.com/2021/02/26/golang-basic.html</id>
    <published>2021-02-26T08:04:33.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习Go语言基本语法，例如变量和常量、数据类型、运算符、条件语句、循环语句。</p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>变量和常量是计算机程序不可或缺的部分。本节将介绍如何在Go程序中声明、使用变量和常量、还将介绍声明方式和作用域。</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>在Go语言中，声明变量的方式有多种。在前面的文章介绍过，Go语言是一种静态类型语言，因此声明变量时必须指明其类型。</p><p>例：声明string类型的变量。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s1 <span class="hljs-keyword">string</span> = <span class="hljs-string">"Hello World"</span></span><br><span class="line"><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">"Hello World"</span></span><br><span class="line"><span class="hljs-keyword">var</span> s3 <span class="hljs-keyword">string</span></span><br><span class="line">s3 = <span class="hljs-string">"Hello World"</span></span><br><span class="line">fmt.Println(s1, s2, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用关键字var声明变量。</p></li><li><p>如果变量类型可以通过值推导则不用声明类型。s2通过值可以推导类型为string类型。</p></li><li><p>变量可以在声明后赋值，未赋值的变量值为该类型的零值。</p></li></ul><blockquote><p>变量的类型很重要，因为这决定了可将什么值赋给该变量。例如，对于类型为string的变量，不能将整数赋值给它。将不匹配的值赋值给变量时，将导致编译错误。</p></blockquote><p>例：将string类型的值赋值给int类型的变量。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span></span><br><span class="line">i = <span class="hljs-string">"Hello World"</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译该文件将导致编译错误。</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go build main.go </span><br><span class="line"><span class="hljs-comment"># command-line-arguments</span></span><br><span class="line">./main.go:7:4: cannot use <span class="hljs-string">"Hello World"</span> (type untyped string) as<span class="hljs-built_in"> type </span>int <span class="hljs-keyword">in</span> assignment</span><br></pre></td></tr></table></figure><h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><p>例：声明多个<strong>类型相同</strong>的变量并进行赋值（显式指定类型）。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s1, s2 <span class="hljs-keyword">string</span> = <span class="hljs-string">"S1"</span>, <span class="hljs-string">"S2"</span></span><br><span class="line">fmt.Println(s1, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：声明多个<strong>类型不同</strong>的变量并进行赋值（不能显式指定类型）。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s1, i1= <span class="hljs-string">"S1"</span>, <span class="hljs-number">1</span></span><br><span class="line">fmt.Println(s1, i1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：声明多个<strong>类型不同</strong>的变量（显式指定类型）。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">s1 <span class="hljs-keyword">string</span></span><br><span class="line">i1 <span class="hljs-keyword">int</span></span><br><span class="line">)</span><br><span class="line">s1 = <span class="hljs-string">"Hello"</span></span><br><span class="line">i1 = <span class="hljs-number">10</span></span><br><span class="line">fmt.Println(s1, i1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明变量后可以再次赋值，但是同一个变量只允许声明一次，否则将导致编译错误。</p></blockquote><h3 id="简短变量声明"><a href="#简短变量声明" class="headerlink" title="简短变量声明"></a>简短变量声明</h3><p>在<strong>函数</strong>中声明变量时，可以用更简洁的方式。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="hljs-string">"Hello World"</span></span><br><span class="line">fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>:=表示简短变量声明，可以不使用var，不指定类型，但是必须进行赋值。</p></li><li><p>只能在函数中使用简短变量声明。</p></li></ul><h3 id="变量声明最佳实践"><a href="#变量声明最佳实践" class="headerlink" title="变量声明最佳实践"></a>变量声明最佳实践</h3><p>Go语言提供了多种变量声明方式，下面的声明方式都是合法的。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span> = <span class="hljs-string">"Hello"</span></span><br><span class="line"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">"Hello"</span></span><br><span class="line"><span class="hljs-keyword">var</span> s2 <span class="hljs-keyword">string</span></span><br><span class="line">s2 = <span class="hljs-string">"Hello"</span></span><br><span class="line">s3 := <span class="hljs-string">"Hello"</span></span><br></pre></td></tr></table></figure><p>该使用哪种方式呢？</p><p>Go语言对此有一个限制——只能在函数内部使用简短变量声明，在函数外部必须使用var进行声明。</p><blockquote><p>在标准库中遵循的约定如下：有初始值的情况下，在函数内使用简短变量声明，在函数外使用var并省略类型；无初始值的情况下使用var并指定类型。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="hljs-string">"Hello World"</span></span><br><span class="line">fmt.Println(s, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量和零值"><a href="#变量和零值" class="headerlink" title="变量和零值"></a>变量和零值</h3><p>在Go语言中，声明变量时如果未初始化，则变量为默认值，该默认值也称为零值。在其他语言中未初始化的值为null或undefined。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span></span><br><span class="line"><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-keyword">var</span> b <span class="hljs-keyword">bool</span></span><br><span class="line"><span class="hljs-keyword">var</span> f <span class="hljs-keyword">float32</span></span><br><span class="line">fmt.Printf(<span class="hljs-string">"%v %v %v %v\n"</span>, s, i, b, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Go语言中，检查变量是否为空，必须与该类型的零值比较。例如检测string类型的变量是否为空，可以与””判定。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span></span><br><span class="line"><span class="hljs-keyword">if</span> s == <span class="hljs-string">""</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"s为空"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>作用域指变量可以在什么地方使用，而不是说变量在哪里声明的。Go语言使用基于块的词法作用域，简单来说就是{}会产生一个作用域。</p><p>Go语言作用域规则如下：</p><ol><li>一对大括号({})表示一个块，块是可以嵌套的</li><li>对于在块内声明的变量，可以在本块以及子块中访问</li><li>子块可以访问父块的变量，父块不能访问子块的变量</li></ol><p>例：Go语言的作用域。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">"s1"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">"s2"</span></span><br><span class="line"><span class="hljs-comment">// 可以访问s1,s2</span></span><br><span class="line">fmt.Println(s1, s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s3 = <span class="hljs-string">"s3"</span></span><br><span class="line"><span class="hljs-comment">// 可以访问s1,s2,s3</span></span><br><span class="line">fmt.Println(s1, s2, s3)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 只能访问s1</span></span><br><span class="line">fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单来说，就是块内可以访问块外的变量，块外不能访问块内变量。</p></blockquote><h3 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h3><p>常量只在整个程序运行过程中都不变的值，常量必须在声明时赋值，声明后不可以更改。</p><p>Go语言使用const关键字声明常量。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-string">"Hello"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> s2 = <span class="hljs-string">"World"</span></span><br><span class="line"><span class="hljs-keyword">const</span> s3,s4 = <span class="hljs-string">"Hello"</span>,<span class="hljs-string">"World"</span></span><br><span class="line">fmt.Println(s, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常量也支持一次声明多个，此外常量的作用域和变量作用域一致。</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Go语言提供了丰富的数据类型，按类别分为布尔型、数值型（整数、浮点数、复数）、字符串型 、派生型。其中派声型包括指针类型、数组类型、结构体类型、接口类型、Channel类型、函数类型、切片类型和Map类型。</p><p>派生类型我们将在后面的内容中进行介绍。</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型值只能为true或false。某些语言允许使用1和0来表示true和false，但Go语言不允许。</p><p>布尔类型的零值为false。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> b <span class="hljs-keyword">bool</span></span><br><span class="line"><span class="hljs-keyword">if</span> b &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"b是true"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"b是false"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><p>Go语言中数值型包含整数、浮点数以及复数。</p><p><strong>整数型</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>字节数</strong></th><th><strong>范围</strong></th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0 ~ 28</td></tr><tr><td>uint8</td><td>1</td><td>0 ~ 28</td></tr><tr><td>int8</td><td>1</td><td>-27 ~ 27-1</td></tr><tr><td>uint16</td><td>2</td><td>0 ~ 216</td></tr><tr><td>int16</td><td>2</td><td>-215 ~ 215-1</td></tr><tr><td>uint32</td><td>4</td><td>0 ~ 232</td></tr><tr><td>int32</td><td>4</td><td>-231 ~ 231-1</td></tr><tr><td>uint64</td><td>8</td><td>0 ~ 264</td></tr><tr><td>int64</td><td>8</td><td>263 ~ 263-1</td></tr><tr><td>int</td><td>平台相关(32位或64位)</td><td></td></tr><tr><td>uint</td><td>平台相关(32位或64位)</td></tr></tbody></table><p><strong>浮点数</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>字节数</strong></th><th><strong>范围</strong></th></tr></thead><tbody><tr><td>float32</td><td>4</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>float64</td><td>8</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><p><strong>复数</strong></p><p>略</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串可以是任何字符序列，包括数字、字母和符号。Go语言使用Unicode来存储字符串，因此可以支持世界上所有的语言。</p><p>下面是一些字符串示例：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"$%^&amp;*"</span></span><br><span class="line"><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">"1234"</span></span><br><span class="line"><span class="hljs-keyword">var</span> s3 = <span class="hljs-string">"你好"</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符用于在程序运行时执行数据运算和逻辑运算。Go语言支持的运算符有：</p><ul><li><p>算术运算符</p></li><li><p>逻辑运算符</p></li><li><p>关系运算符</p></li><li><p>位运算符</p></li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符是用来对数值类型进行算术运算的。下表列出了Go语言支持的算术运算符。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>相加</td></tr><tr><td>-</td><td>相减</td></tr><tr><td>*</td><td>相乘</td></tr><tr><td>/</td><td>相除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>++</td><td>自增</td></tr><tr><td>–</td><td>自减</td></tr></tbody></table><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">a = <span class="hljs-number">10</span></span><br><span class="line">b = <span class="hljs-number">20</span></span><br><span class="line">)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a+b=%d\n"</span>, a+b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a-b=%d\n"</span>, a-b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a*b=%d\n"</span>, a*b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a/b=%d\n"</span>, a/b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a%%b=%d\n"</span>, a%b)</span><br><span class="line">a++</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a++=%d\n"</span>, a)</span><br><span class="line">a--</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a--=%d\n"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>和其他语言不同的是，Go语言不提供++a，–a运算符，只提供a++，a–。</p></blockquote><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符用来判断两个值的关系。下表列出了Go语言支持的关系运算符。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>判断两个值是否相等</td></tr><tr><td>!=</td><td>判断两个值是否不相等</td></tr><tr><td>&gt;</td><td>判断运算符左边的值是否大于右边的值</td></tr><tr><td>&lt;</td><td>判断运算符左边的值是否小于右边的值</td></tr><tr><td>&gt;=</td><td>判断运算符左边的值是否大于等于右边的值</td></tr><tr><td>&lt;=</td><td>判断运算符左边的值是否小于等于右边的值</td></tr></tbody></table><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">a = <span class="hljs-number">10</span></span><br><span class="line">b = <span class="hljs-number">20</span></span><br><span class="line">)</span><br><span class="line"><span class="hljs-keyword">if</span> a == b &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a==b"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a!=b"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> a &lt; b &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a&lt;b"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a&gt;=b"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> a &lt;= b &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a&lt;=b"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a&gt;b"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符用来对操作数进行逻辑判断。下表列出了Go语言支持的逻辑运算符。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与。两边操作数都为true则结果为true，否则为false</td></tr><tr><td>\</td><td>\</td><td></td><td>逻辑或。两边操作数只要有一个为true则结果为true，否则为false</td></tr><tr><td>!</td><td>逻辑非。如果操作数为true则结果为false，否则为true</td></tr></tbody></table><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a, b = <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-keyword">if</span> a &amp;&amp; b &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a和b同时为true"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a和b至少一个为false"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> a || b &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a和b至少一个为true"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a和b都为false"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !a &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a是false"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a是true"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符用来对整数进行二进制位操作。下表列出了Go语言支持的位运算符。</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td></tr><tr><td>\</td><td></td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr></tbody></table><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">a = <span class="hljs-number">1</span></span><br><span class="line">b = <span class="hljs-number">2</span></span><br><span class="line">)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a&amp;b=%d\n"</span>, a&amp;b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a|b=%d\n"</span>, a|b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a^b=%d\n"</span>, a^b)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a&gt;&gt;1=%d\n"</span>, a&gt;&gt;<span class="hljs-number">1</span>)</span><br><span class="line">fmt.Printf(<span class="hljs-string">"a&lt;&lt;1=%d\n"</span>, a&lt;&lt;<span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>条件语句是计算机程序的重要组成部分，几乎所有编程语言都支持。简单地说，条件语句检查指定的条件是否满足，并在满足时执行指定的操作。</p><p>下表列出了Go语言支持的条件语句。</p><table><thead><tr><th>if</th><th>由一个布尔表达式后紧跟一个或多个语句组成。</th></tr></thead><tbody><tr><td>if…else if…else</td><td>由多个布尔表达式分支组成，并提供例外分支</td></tr><tr><td>switch</td><td>基于不同条件执行不同操作，并提供默认操作</td></tr></tbody></table><p>例：if的使用。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a大于10"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a == <span class="hljs-number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a等于10"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"a小于10"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：switch的使用。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">switch</span> a &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:</span><br><span class="line">fmt.Println(<span class="hljs-string">"a等于1"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:</span><br><span class="line">fmt.Println(<span class="hljs-string">"a等于2"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:</span><br><span class="line">fmt.Println(<span class="hljs-string">"a等于3"</span>)</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="hljs-string">"默认分支"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>和其他语言不同，Go语言的case分支不需要添加break。</p></blockquote><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>在其他语言中一般会提供for、while、foreach等关键字实现循环，而在Go语言中只提供for关键字，但是也实现了类似的效果。</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环有着经典的三段式结构：</p><ol><li><p>循环初始化</p></li><li><p>循环终止条件</p></li><li><p>循环步进条件</p></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while循环指定循环终止条件，不满足条件时循环一直执行并向终止条件靠拢，满足条件后终止循环。（无终止条件的循环称为死循环）</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  i := <span class="hljs-number">0</span></span><br><span class="line">  <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死循环不需要终止条件。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"fmt"</span></span><br><span class="line">  <span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  i := <span class="hljs-number">0</span></span><br><span class="line">  <span class="hljs-keyword">for</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>foreach循环多用来遍历列表、字典等数据结构。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  list := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;</span><br><span class="line">  <span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> list &#123;</span><br><span class="line">fmt.Println(index, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue用来跳过本次循环继续执行下次循环。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序判断i为1时跳过并执行下次循环，该程序输出如下。</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">4</span></span><br></pre></td></tr></table></figure><h3 id="3-1-5-break"><a href="#3-1-5-break" class="headerlink" title="3.1.5   break"></a>3.1.5   break</h3><p>break用来跳出循环，后续循环将不执行。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序判断i为1时跳出循环，该程序输出如下。</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">0</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文介绍了Go语言的基本语法，包括变量和常量的使用、基础数据类型、流程控制等知识。下一章将介绍Go语言的数据容器类型，包括数组、切片和映射。</p><p><img src="https://static.ddhigh.com/blog/2021-02-26-161953-2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文学习Go语言基本语法，例如变量和常量、数据类型、运算符、条件语句、循环语句。&lt;/p&gt;
&lt;h2 id=&quot;变量和常量&quot;&gt;&lt;a href=&quot;#变量和常量&quot; class=&quot;headerlink&quot; title=&quot;变量和常量&quot;&gt;&lt;/a&gt;变量和常量&lt;/h2&gt;&lt;p&gt;变量和常量是计算机程
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
  </entry>
  
  <entry>
    <title>修复GitTalk出现Forbidden问题</title>
    <link href="https//www.ddhigh.com/2021/02/25/fix-gittalk-github.html"/>
    <id>https//www.ddhigh.com/2021/02/25/fix-gittalk-github.html</id>
    <published>2021-02-25T04:00:23.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitTalk失效原因"><a href="#GitTalk失效原因" class="headerlink" title="GitTalk失效原因"></a>GitTalk失效原因</h2><p>对于所有自建博客的博主来书，GitTalk应该不陌生。GitTalk通过Github的OpenAPI以及issues功能实现社区评论，确实是一大亮点。</p><p>今天在查看文章的时候发现评论区出现了Forbidden错误，通过检查网络请求发现获取Github Token时请求了以下链接</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="hljs-regexp">//</span>cors-anywhere.herokuapp.com<span class="hljs-regexp">/https:/</span><span class="hljs-regexp">/github.com/</span>login<span class="hljs-regexp">/oauth/</span>access_token</span><br></pre></td></tr></table></figure><p>通过查询GitTalk官方文档发现github.com的oauth是不允许跨域请求的，cors-anywhere.herokuapp.com是一个第三方提供的CORS代理服务，会默认放行所有CORS请求。目前由于该CORS代理服务遭到滥用，因此做了限制，导致GitTalk失效。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>通过自己的nginx进行反向代理转发即可。</p></blockquote><h3 id="修改gitalk初始化参数"><a href="#修改gitalk初始化参数" class="headerlink" title="修改gitalk初始化参数"></a>修改gitalk初始化参数</h3><p>笔者使用的是hexo+icarus主题，其他主题或者博客系统也是类似做法。</p><p>编辑themes/icarus/layout/comment/gitalk.ejs</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> gitalk = <span class="hljs-keyword">new</span> Gitalk(&#123;</span><br><span class="line">        clientID: <span class="hljs-string">'&lt;%= get_config('</span>comment.client_id<span class="hljs-string">') %&gt;'</span>,</span><br><span class="line">        clientSecret: <span class="hljs-string">'&lt;%= get_config('</span>comment.client_secret<span class="hljs-string">') %&gt;'</span>,</span><br><span class="line">        id: <span class="hljs-string">'&lt;%= md5(page.path) %&gt;'</span>,</span><br><span class="line">        repo: <span class="hljs-string">'&lt;%= get_config('</span>comment.repo<span class="hljs-string">') %&gt;'</span>,</span><br><span class="line">        owner: <span class="hljs-string">'&lt;%= get_config('</span>comment.owner<span class="hljs-string">') %&gt;'</span>,</span><br><span class="line">        admin: &lt;%- <span class="hljs-built_in">JSON</span>.stringify(get_config(<span class="hljs-string">'comment.admin'</span>))%&gt;,</span><br><span class="line">        createIssueManually: &lt;%= get_config(<span class="hljs-string">'comment.create_issue_manually'</span>, <span class="hljs-literal">false</span>) %&gt;,</span><br><span class="line">        distractionFreeMode: &lt;%= get_config(<span class="hljs-string">'comment.distraction_free_mode'</span>, <span class="hljs-literal">false</span>) %&gt;,</span><br><span class="line">        proxy: <span class="hljs-string">'/github/login/oauth/access_token'</span> <span class="hljs-comment">// 新添加的</span></span><br><span class="line">    &#125;)</span><br><span class="line">    gitalk.render(<span class="hljs-string">'comment-container'</span>)</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>编辑nginx配置，笔者的博客域名为<a href="http://www.ddhigh.com，因此需要限制CORS来源域名，否则将有盗用风险" target="_blank" rel="noopener">www.ddhigh.com，因此需要限制CORS来源域名，否则将有盗用风险</a>!</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">location</span> /github &#123;</span><br><span class="line"><span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin www.ddhigh.com;</span><br><span class="line">  <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods <span class="hljs-string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">  <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers <span class="hljs-string">'DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line">  <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">'OPTIONS'</span>) &#123;</span><br><span class="line">  <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-attribute">proxy_pass</span> https://github.com/; <span class="hljs-comment"># 尾部斜杠不能少</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行nginx -s reload配置。</p><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>访问新写的文章<a href="https://www.ddhigh.com/2021/02/25/golang-get-started.html，可以看到界面上已经正常了。" target="_blank" rel="noopener">https://www.ddhigh.com/2021/02/25/golang-get-started.html，可以看到界面上已经正常了。</a></p><p><img src="https://static.ddhigh.com/blog/2021-02-25-121050-2.png" alt="image-20210225121050348"></p><p>查看Chrome网络状况，可以看到已经走了自己配置的CORS跨域了。</p><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https:<span class="hljs-comment">//www.ddhigh.com/github/login/oauth/access_token</span></span><br><span class="line">Request <span class="hljs-function"><span class="hljs-keyword">Method</span>:</span> POST</span><br><span class="line">Status Code: <span class="hljs-number">200</span> </span><br><span class="line">Remote Address: <span class="hljs-number">106.52</span>.<span class="hljs-number">24.199</span>:<span class="hljs-number">443</span></span><br><span class="line">Referrer Policy: <span class="hljs-keyword">strict</span>-origin-when-cross-origin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GitTalk失效原因&quot;&gt;&lt;a href=&quot;#GitTalk失效原因&quot; class=&quot;headerlink&quot; title=&quot;GitTalk失效原因&quot;&gt;&lt;/a&gt;GitTalk失效原因&lt;/h2&gt;&lt;p&gt;对于所有自建博客的博主来书，GitTalk应该不陌生。GitTalk
      
    
    </summary>
    
      <category term="other" scheme="https//www.ddhigh.com/categories/other/"/>
    
    
      <category term="gittalk" scheme="https//www.ddhigh.com/tags/gittalk/"/>
    
  </entry>
  
  <entry>
    <title>Go语言程序设计</title>
    <link href="https//www.ddhigh.com/2021/02/25/golang-get-started.html"/>
    <id>https//www.ddhigh.com/2021/02/25/golang-get-started.html</id>
    <published>2021-02-25T03:13:02.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言概述"><a href="#Go语言概述" class="headerlink" title="Go语言概述"></a>Go语言概述</h2><h3 id="语言历史"><a href="#语言历史" class="headerlink" title="语言历史"></a>语言历史</h3><p>Go语言也称为Golang，是由Google公司开发的一种静态强类型、编译型、语言原生支持并发、具有垃圾回收功能的编程语言。起源于2007年，并在2009年正式对外发布。Go语言是非常年轻的一门语言，它的主要目标是“兼具 Python 等动态语言的开发速度和 C/C++等编译型语言的性能与安全性”。</p><p>Go语言是编程语言设计的又一次尝试，是对类C语言的重大改进，它不但能让你访问底层操作系统，还提供了强大的网络编程和并发编程支持。Go语言的用途众多，可以进行网络编程、系统编程、并发编程等等。</p><p>Go语言的推出，旨在不损失应用程序性能的情况下降低代码的复杂性，具有“部署简单、并发性好、语言设计良好、执行性能好”等优势。</p><p>Go语言有时候被描述为“21世纪的C语言”。Go 从C语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言编译后的运行效率。</p><p>Go语言没有类和继承的概念，通过组合来实现代码复用，同时它通过接口（interface）的概念来实现多态性。所以Go语言的面向对象编程和传统面向对象语言（如C++和Java）并不相同。</p><p>Go语言有一个吉祥物，在会议、文档页面和博文中，大多会包含下图所示的 Go Gopher，这是才华横溢的插画家 Renee French 设计的，她也是 Go 设计者之一 Rob Pike 的妻子。</p><p><img src="https://static.ddhigh.com/blog/2021-02-25-111457-2.jpg" alt="img"></p><h3 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h3><p><strong>语法简单</strong></p><p>Go语言的设计思想类似Unix的“少即是多”。Go语言的语法规则严谨，没有歧义，这使得Go语言简单易学。Go语言保留了指针，但通常情况下禁止指针运算（保留unsafe包操作指针的能力）。此外，Go语言还内置切片和字典，在保留运行性能的同时也提高了开发效率。</p><p><strong>语言级别支持并发</strong></p><p>主流的并发模型有多进程模型、多线程模型。和主流多并发模型不同，Go语言采用了基于CSP的协程实现，并且在运行时做了更深度的优化处理。这使得语言级别上并发编程变得极为容易，无须处理回调、也无需关注线程切换，只需要添加一个go关键字即可。</p><p>“通过通信去共享内存，而不是通过共享内存去通信”，go语言内置的channel数据结构配合go关键字实现并发通信及控制，这对于需要考虑内存可见性等问题的多线程模型来说，是一个良好的解决方案。</p><p><strong>高效的垃圾回收</strong></p><p>Go语言的每次升级，垃圾回收器必然是核心组件里修改最多的部分。从并发清理，到降低STW时间，直到Go的1.5版本实现并发标记，逐步引入三色标记和写屏障等等，都是为了能让垃圾回收在不影响用户逻辑的情况下更好地工作。从最开始的秒级别STW到目前的微秒级STW，Go语言开发团队一直在垃圾回收方面进行努力。</p><p><strong>静态链接</strong></p><p>静态编译的好处显而易见。将运行时、依赖库直接打包到可执行文件内部，简化了部署和发布操作，无须事先安装运行环境和下载诸多第三方库。虽然相比动态编译增加了可执行文件的大小，但是省去了依赖库的管理。随着微服务和容器化的发展，这也成为了Go语言的杀手锏之一，一个二进制文件即可运行服务。</p><p><strong>标准库</strong></p><p>功能完善、质量可靠的标准库为编程语言提供了有力的支持。在不借助第三方扩展的情况下，就可完成大部分基础功能开发，这大大降低了学习和使用成本。</p><p>Go语言标准库可以说极为丰富。其中值得称道的是net/http，仅须简单几条语句就能实现一个高性能 Web Server。</p><p><strong>工具链</strong></p><p>完整的工具链对于项目开发极为重要。Go语言在此做得相当不错，无论是编译、格式化、错误检查、帮助文档，还是第三方包下载、更新都有对应的工具。</p><p>值得一提的gofmt工具，为了解决开发者经常遇到的“代码风格不统一”的难题，官方直接通过gofmt指定一套标准，可以看出go语言在工程方面确实解决了许多实际问题。</p><p>此外Go语言内置完整测试框架，其中包括单元测试、性能测试、代码覆盖率、数据竞争，以及用来调优的pprof，这些都是保障代码能正确而稳定运行的必备利器。</p><h3 id="Go语言应用场景"><a href="#Go语言应用场景" class="headerlink" title="Go语言应用场景"></a>Go语言应用场景</h3><p>Go 语言从发布1.0版本以来备受众多开发者关注并得到广泛使用，Go 语言的简单、高效、并发特性吸引了众多传统语言开发者的加入，而且人数越来越多。</p><p>鉴于Go语言的特点和设计的初衷，Go语言作为服务器编程语言，很适合处理日志、数据打包、虚拟机处理、文件系统、分布式系统、数据库代理等；网络编程方面，Go语言广泛应用于Web应用、API应用、下载应用等；除此之外，Go语言还适用于内存数据库和云平台领域，目前国外很多云平台都是采用Go开发。</p><ul><li><p>服务器编程。例如处理日志、数据打包、虚拟机处理、文件系统等。</p></li><li><p>分布式系统、数据库代理器、中间件等。例如Etcd。</p></li><li><p>网络编程。这一块目前应用最广，包括Web应用、API应用、下载应用等等。</p></li><li><p>开发云平台。目前国内外很多云平台在采用Go开发。</p></li></ul><h3 id="Go语言知名项目"><a href="#Go语言知名项目" class="headerlink" title="Go语言知名项目"></a>Go语言知名项目</h3><p>Go发布之后，很多公司特别是云计算公司开始用Go重构他们的基础架构，很多基础设施都是直接采用Go进行了开发，诞生了许多热门项目。</p><p><strong>基础设施</strong></p><p>代表项目：docker、kubernetes、etcd、consul等。</p><p><strong>数据库</strong></p><p>代表项目：influxdb、cockroachdb等。</p><p><strong>微服务</strong></p><p>代表项目：go-kit、micro、kratos等。</p><h2 id="安装Go语言"><a href="#安装Go语言" class="headerlink" title="安装Go语言"></a>安装Go语言</h2><p>Go语言可用于FreeBSD、Linux、Windows和macOS等操作系统。有关对这些平台的要求，请参与Go语言网站列出的系统需求。</p><p>Go语言的官方网站为<a href="https://golang.org/，国内的用户可以访问https://golang.google.cn/dl/。通常情况下，按照本文的步骤进行安装不会出现问题，遇到安装问题的读者，请通过公众号与我联系。" target="_blank" rel="noopener">https://golang.org/，国内的用户可以访问https://golang.google.cn/dl/。通常情况下，按照本文的步骤进行安装不会出现问题，遇到安装问题的读者，请通过公众号与我联系。</a></p><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><p><strong>下载链接</strong></p><ul><li><p>32位下载地址：<a href="https://golang.google.cn/dl/go1.15.8.windows-386.msi" target="_blank" rel="noopener">https://golang.google.cn/dl/go1.15.8.windows-386.msi</a></p></li><li><p>64位下载地址：<a href="https://golang.google.cn/dl/go1.15.8.windows-amd64.msi" target="_blank" rel="noopener">https://golang.google.cn/dl/go1.15.8.windows-amd64.msi</a></p></li></ul><p>默认安装到C:\go目录下，建议不要更改安装目录。</p><p><strong>GOPATH配置</strong></p><p>安装完毕后需要配置GOPATH，GOPATH是Go语言用来存放第三方源码、二进制文件、类库等文件的路径。</p><ol><li><p>例如系统用户名为demo，则需要新建以下三个目录：</p><ul><li><p>C:\Users\demo\go\src 存放源码</p></li><li><p>C:\Users\demo\go\pkg 存放类库</p></li><li><p>C:\Users\demo\go\bin 存在二进制文件</p></li></ul></li><li><p>环境变量设置：</p><ul><li><p>新增GOPATH，值为C:\Users\demo\go</p></li><li><p>新增PATH（已存在则编辑），值为C:\Users\demo\go\bin</p></li></ul></li></ol><h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><p>Linux具有众多发行版，如Ubuntu、CentOS、RedHat、Debian等等，所有发行版的安装步骤是一致的，区别是根据CPU架构选择不同的发布包。</p><p>常见的个人计算机CPU架构为amd64，下载amd64架构的发布包即可。</p><p><strong>Linux配置命令</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 下载压缩包</span></span><br><span class="line">wget https://golang.google.cn/dl/go1.15.8.linux-amd64.tar.gz</span><br><span class="line"><span class="hljs-comment"># 移动到opt目录</span></span><br><span class="line">mv go1.15.8.linux-amd64.tar.gz /opt</span><br><span class="line"><span class="hljs-comment"># 解压</span></span><br><span class="line">tar xf go1.15.8.linux-amd64.tar.gz</span><br><span class="line"><span class="hljs-comment"># 新建GOPATH目录</span></span><br><span class="line"><span class="hljs-built_in">cd</span> ~</span><br><span class="line">mkdir go</span><br><span class="line"><span class="hljs-built_in">cd</span> go</span><br><span class="line">mkdir pkg src bin</span><br><span class="line"><span class="hljs-comment"># 编辑 ~/.bashrc文件, 添加bin路径到PATH环境变量中</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'GOPATH=用户主目录/go'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'PATH=/opt/go/bin:$GOPATH/bin:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="hljs-comment"># 更新环境变量</span></span><br><span class="line"><span class="hljs-built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="hljs-comment"># 测试安装结果</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="macOS系统"><a href="#macOS系统" class="headerlink" title="macOS系统"></a>macOS系统</h3><p>Apple公司于2020年发布了采用M1芯片(arm64架构)的硬件产品，支持M1芯片的Go语言版本为1.16，根据CPU架构选择对应的pkg包安装即可。</p><ul><li><p>amd64: <a href="https://golang.google.cn/dl/go1.15.8.darwin-amd64.pkg" target="_blank" rel="noopener">https://golang.google.cn/dl/go1.15.8.darwin-amd64.pkg</a></p></li><li><p>arm64: <a href="https://golang.google.cn/dl/go1.16.darwin-arm64.pkg" target="_blank" rel="noopener">https://golang.google.cn/dl/go1.16.darwin-arm64.pkg</a></p></li></ul><p><strong>macOS配置命令</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 新建GOPATH目录</span></span><br><span class="line"><span class="hljs-built_in">cd</span> ~</span><br><span class="line">mkdir go</span><br><span class="line"><span class="hljs-built_in">cd</span> go</span><br><span class="line">mkdir pkg src bin</span><br><span class="line"><span class="hljs-comment"># 编辑 ~/.bashrc文件, 添加bin路径到PATH环境变量中</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'GOPATH=用户主目录/go'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'PATH=$GOPATH/bin:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="hljs-comment"># 更新环境变量</span></span><br><span class="line"><span class="hljs-built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="hljs-comment"># 测试安装结果</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h2 id="配置集成开发环境"><a href="#配置集成开发环境" class="headerlink" title="配置集成开发环境"></a>配置集成开发环境</h2><p>本节将介绍如何在本地计算机上配置集成开发环境，以下步骤使用macOS版本作为示例，其他操作系统类似。</p><p>Visual Studio Code(简称VSCode)是由微软开发的、同时支持Windows、Linux和macOS操作系统的开源编辑器，它支持测试，并且内置了git功能，提供了丰富的语言支持与常用编程工具。</p><ol><li><p>打开官方网站 <a href="https://code.visualstudio.com/，点击蓝色按钮下载即可。" target="_blank" rel="noopener">https://code.visualstudio.com/，点击蓝色按钮下载即可。</a></p></li><li><p>新版本的VSCode不再内置中文语言包，需要安装语言包扩展。安装VSCode后打开VSCode编辑器，在扩展窗口中搜索“Chinese”，安装第一个即可。</p></li></ol><p><img src="https://static.ddhigh.com/blog/2021-02-25-111457-2.png" alt="image-20191022102923920"></p><ol start="3"><li>用VSCode新建一个空项目，打开项目之后新建main.go，此时VSCode右下角会弹出Go工具链安装的提示，选择”Install All“即可。</li></ol><h2 id="编写HTTP服务器"><a href="#编写HTTP服务器" class="headerlink" title="编写HTTP服务器"></a>编写HTTP服务器</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"io"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">io.WriteString(w, <span class="hljs-string">"hello world"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序结构说明"><a href="#程序结构说明" class="headerlink" title="程序结构说明"></a>程序结构说明</h3><ul><li>package 关键字声明文件所在的包，每个go文件都必须声明。每个可执行程序都必须包含main包，程序的入口点为main包的func main函数</li><li>import 关键字声明需要导入的包，代码中需要使用http服务器相关方法，因此导入了http包</li><li>func main程序的入口点</li></ul><h3 id="编译并运行程序"><a href="#编译并运行程序" class="headerlink" title="编译并运行程序"></a>编译并运行程序</h3><p>编译并运行文件是开发过程中的一个常见步骤，Go提供了完成这个步骤的快捷途径。</p><p>Go语言提供了build和run两个命令来编译运行Go程序：</p><ul><li>go build 会编译可执行文件，并不执行</li><li>go run 不会创建可执行文件，直接执行</li></ul><p>使用go run运行HTTP服务器，之后通过浏览器打开即可。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文介绍了Go语言的安装以及集成开发环境的配置。通过HTTP服务器演示了Go程序的开发过程。</p><p>下一章将学习Go语言的基本语法：</p><ul><li>变量和常量</li><li>数据类型</li><li>运算符</li><li>条件语句</li><li>循环语句</li></ul><p><img src="https://static.ddhigh.com/blog/2021-02-26-161953-2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言概述&quot;&gt;&lt;a href=&quot;#Go语言概述&quot; class=&quot;headerlink&quot; title=&quot;Go语言概述&quot;&gt;&lt;/a&gt;Go语言概述&lt;/h2&gt;&lt;h3 id=&quot;语言历史&quot;&gt;&lt;a href=&quot;#语言历史&quot; class=&quot;headerlink&quot; title=&quot;语
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
  </entry>
  
  <entry>
    <title>golang依赖注入工具wire指南</title>
    <link href="https//www.ddhigh.com/2021/02/06/go-wire-tutorial.html"/>
    <id>https//www.ddhigh.com/2021/02/06/go-wire-tutorial.html</id>
    <published>2021-02-06T12:27:14.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wire与依赖注入"><a href="#wire与依赖注入" class="headerlink" title="wire与依赖注入"></a>wire与依赖注入</h2><p><a href="https://github.com/google/wire" target="_blank" rel="noopener">Wire</a> 是一个的Golang依赖注入工具，通过自动生成代码的方式在<strong>编译期</strong>完成依赖注入，Java体系中最出名的<strong>Spring</strong>框架采用<strong>运行时</strong>注入，个人认为这是wire和其他依赖注入最大的不同之处。</p><p>依赖注入(Dependency Injection)也称作控制反转(Inversion of Control)，个人给控制反转下的定义如下：</p><blockquote><p>当前对象需要的依赖对象由外部提供（通常是IoC容器），外部负责依赖对象的构造等操作，当前对象只负责调用，而不关心依赖对象的构造。即依赖对象的控制权交给了IoC容器。</p></blockquote><p>下面给出一个控制反转的示例，比如我们通过配置去创建一个数据库连接：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 连接配置</span></span><br><span class="line"><span class="hljs-keyword">type</span> DatabaseConfig <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Dsn <span class="hljs-keyword">string</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDB</span><span class="hljs-params">(config *DatabaseConfig)</span><span class="hljs-params">(*sql.DB, error)</span></span> &#123;</span><br><span class="line">    db,err := sql.Open(<span class="hljs-string">"mysql"</span>, config.Dsn)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun NewConfig()(*DatabaseConfig,error) &#123;</span><br><span class="line">    <span class="hljs-comment">// 读取配置文件</span></span><br><span class="line">    fp, err := os.Open(<span class="hljs-string">"config.json"</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>,err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">defer</span> fp.Close()</span><br><span class="line">    <span class="hljs-comment">// 解析为Json</span></span><br><span class="line">    <span class="hljs-keyword">var</span> config DatabaseConfig</span><br><span class="line">    <span class="hljs-keyword">if</span> err:=json.NewDecoder(fp).Decode(&amp;config);err!=<span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>,err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> &amp;config, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitDatabase</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    cfg, err:=NewConfig()</span><br><span class="line">    <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    db,err:=NewDB(cfg)</span><br><span class="line">    <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        log.Fatail(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// db对象构造完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库配置怎么来的，<code>NewDB</code>方法并不关心(示例代码采用的是<code>NewConfig</code>提供的JSON配置对象)，<code>NewDB</code>只负责创建DB对象并返回，和配置方式并没有耦合，所以即使换成配置中心或者其他方式来提供配置，<code>NewDB</code>代码也无需更改，这就是控制反转的魔力！</p><p>来看一个反面例子，也就是控制正转：</p><blockquote><p>当前对象需要的依赖由自己创建，即依赖对象的控制权在当前对象自己手里。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> DatabaseConfig <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Dsn <span class="hljs-keyword">string</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDB</span><span class="hljs-params">()</span><span class="hljs-params">(*sql.DB, error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 读取配置文件</span></span><br><span class="line">    fp, err := os.Open(<span class="hljs-string">"config.json"</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>,err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">defer</span> fp.Close()</span><br><span class="line">    <span class="hljs-comment">// 解析为Json</span></span><br><span class="line">    <span class="hljs-keyword">var</span> config DatabaseConfig</span><br><span class="line">    <span class="hljs-keyword">if</span> err:=json.NewDecoder(fp).Decode(&amp;config);err!=<span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>,err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 初始化数据库连接</span></span><br><span class="line">    db,err = sql.Open(<span class="hljs-string">"mysql"</span>, config.Dsn)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制正转模式下，<code>NewDB</code>方法需要自己实现配置对象的创建工作，在示例中需要读取Json配置文件，这是<strong>强耦合</strong>的代码，一旦配置文件的格式不是Json，<code>NewDB</code>方法将返回错误。</p><p>依赖注入固然好用，但是像刚才的例子中去手动管理依赖关系是相当复杂也是相当痛苦的一件事，因此在接下来的内容中会重点介绍golang的依赖注入工具——wire。</p><h2 id="上手使用"><a href="#上手使用" class="headerlink" title="上手使用"></a>上手使用</h2><p>通过<code>go get github.com/google/wire/cmd/wire</code>安装好<code>wire</code>命令行工具即可。</p><p>在正式开始之前需要介绍一下wire中的两个概念：<code>Provider</code>和<code>Injector</code>：</p><ul><li><code>Provider</code>：负责创建对象的方法，比如上文中<code>控制反转示例</code>的<code>NewDB</code>(提供DB对象)和<code>NewConfig</code>(提供DatabaseConfig对象)方法。</li><li><code>Injector</code>：负责根据对象的依赖，依次构造依赖对象，最终构造目的对象的方法，比如上文中<code>控制反转示例</code>的<code>InitDatabase</code>方法。</li></ul><p>现在我们通过<code>wire</code>来实现一个简单的项目。项目结构如下：</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">|--cmd</span></span><br><span class="line"><span class="hljs-string">|--main.go</span></span><br><span class="line"><span class="hljs-string">|--wire.go</span></span><br><span class="line"><span class="hljs-string">|--config</span></span><br><span class="line"><span class="hljs-string">|--app.json</span></span><br><span class="line"><span class="hljs-string">|--internal</span></span><br><span class="line"><span class="hljs-string">|--config</span></span><br><span class="line"><span class="hljs-string">|--config.go</span></span><br><span class="line"><span class="hljs-string">|--db</span></span><br><span class="line"><span class="hljs-string">|--db.go</span></span><br></pre></td></tr></table></figure><p>config/app.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"database"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"dsn"</span>: <span class="hljs-string">"root:root@tcp(localhost:3306)/test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>internal/config/config.go</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"encoding/json"</span></span><br><span class="line"><span class="hljs-string">"github.com/google/wire"</span></span><br><span class="line"><span class="hljs-string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> Provider = wire.NewSet(New) <span class="hljs-comment">// 将New方法声明为Provider，表示New方法可以创建一个被别人依赖的对象,也就是Config对象</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Database database <span class="hljs-string">`json:"database"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> database <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Dsn <span class="hljs-keyword">string</span> <span class="hljs-string">`json:"dsn"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> <span class="hljs-params">(*Config, error)</span></span> &#123;</span><br><span class="line">fp, err := os.Open(<span class="hljs-string">"config/app.json"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> fp.Close()</span><br><span class="line"><span class="hljs-keyword">var</span> cfg Config</span><br><span class="line"><span class="hljs-keyword">if</span> err := json.NewDecoder(fp).Decode(&amp;cfg); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;cfg, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>internal/db/db.go</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"database/sql"</span></span><br><span class="line">_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="hljs-string">"github.com/google/wire"</span></span><br><span class="line"><span class="hljs-string">"wire-example2/internal/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> Provider = wire.NewSet(New) <span class="hljs-comment">// 同理</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(cfg *config.Config)</span> <span class="hljs-params">(db *sql.DB, err error)</span></span> &#123;</span><br><span class="line">db, err = sql.Open(<span class="hljs-string">"mysql"</span>, cfg.Database.Dsn)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err = db.Ping(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd/main.go</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"database/sql"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> App <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// 最终需要的对象</span></span><br><span class="line">db *sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewApp</span><span class="hljs-params">(db *sql.DB)</span> *<span class="hljs-title">App</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;App&#123;db: db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">app, err := InitApp() <span class="hljs-comment">// 使用wire生成的injector方法获取app对象</span></span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> version <span class="hljs-keyword">string</span></span><br><span class="line">row := app.db.QueryRow(<span class="hljs-string">"SELECT VERSION()"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err := row.Scan(&amp;version); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(version)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd/wire.go</p><p>重点文件，也就是实现Injector的核心所在：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// +build wireinject</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"github.com/google/wire"</span></span><br><span class="line"><span class="hljs-string">"wire-example2/internal/config"</span></span><br><span class="line"><span class="hljs-string">"wire-example2/internal/db"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitApp</span><span class="hljs-params">()</span> <span class="hljs-params">(*App, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(wire.Build(config.Provider, db.Provider, NewApp)) <span class="hljs-comment">// 调用wire.Build方法传入所有的依赖对象以及构建最终对象的函数得到目标对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件编写完毕，进入<code>cmd</code>目录执行<code>wire</code>命令会得到以下输出：</p><figure class="highlight taggerscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\A</span>dministrator<span class="hljs-symbol">\G</span>olandProjects<span class="hljs-symbol">\w</span>ire-example2<span class="hljs-symbol">\c</span>md&gt;wire</span><br><span class="line">wire: wire-example2/cmd: wrote C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\A</span>dministrator<span class="hljs-symbol">\G</span>olandProjects<span class="hljs-symbol">\w</span>ire-example2<span class="hljs-symbol">\c</span>md<span class="hljs-symbol">\w</span>ire_gen.go</span><br></pre></td></tr></table></figure><p>表明成功生成<code>wire_gen.go</code>文件，文件内容如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Code generated by Wire. DO NOT EDIT.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//go:generate go run github.com/google/wire/cmd/wire</span></span><br><span class="line"><span class="hljs-comment">//+build !wireinject</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"wire-example2/internal/config"</span></span><br><span class="line"><span class="hljs-string">"wire-example2/internal/db"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Injectors from wire.go:</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitApp</span><span class="hljs-params">()</span> <span class="hljs-params">(*App, error)</span></span> &#123;</span><br><span class="line">configConfig, err := config.New()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">sqlDB, err := db.New(configConfig)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">app := NewApp(sqlDB)</span><br><span class="line"><span class="hljs-keyword">return</span> app, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到生成App对象的代码已经自动生成了。</p><h3 id="Provider说明"><a href="#Provider说明" class="headerlink" title="Provider说明"></a>Provider说明</h3><p>通过<code>NewSet</code>方法将本包内创建对象的方法声明为<code>Provider</code>以供其他对象使用。<code>NewSet</code>可以接收多个参数，比如我们<code>db</code>包内可以创建Mysql和Redis连接对象，则可以如下声明：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> Provider = wire.NewSet(NewDB, NewRedis)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDB</span><span class="hljs-params">(config *Config)</span><span class="hljs-params">(*sql.DB,error)</span></span> &#123; <span class="hljs-comment">// 创建数据库对象</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewRedis</span><span class="hljs-params">(config *Config)</span><span class="hljs-params">(*redis.Client,error)</span></span> &#123; <span class="hljs-comment">// 创建Redis对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wire-go文件说明"><a href="#wire-go文件说明" class="headerlink" title="wire.go文件说明"></a>wire.go文件说明</h3><p><code>wire.go</code>文件需要放在创建目标对象的地方，比如我们<code>Config</code>和<code>DB</code>对象最终是为<code>App</code>服务的，因此<code>wire.go</code>文件需要放在<code>App</code>所在的包内。</p><blockquote><p>wire.go文件名不是固定的，不过大家习惯叫这个文件名。</p></blockquote><p><code>wire.go</code>的第一行<code>// +build wireinject</code>是必须的，含义如下：</p><blockquote><p>只有添加了名称为”wireinject”的build tag，本文件才会编译，而我们go build main.go的时候通常不会加。因此，该文件不会参与最终编译。</p></blockquote><p><code>wire.Build(config.Provider, db.Provider, NewApp)</code>通过传入<code>config</code>以及<code>db</code>对象来创建最终需要的<code>App</code>对象</p><h3 id="wire-gen-go文件说明"><a href="#wire-gen-go文件说明" class="headerlink" title="wire_gen.go文件说明"></a>wire_gen.go文件说明</h3><p>该文件由<code>wire</code>自动生成，无需手工编辑！！！</p><p><code>//+build !wireinject</code>标签和<code>wire.go</code>文件的标签相对应，含义如下：</p><blockquote><p>编译时只有<strong>未添加</strong>“wireinject”的build tag，本文件才参与编译。</p></blockquote><p>因此，任意时刻下，<code>wire.go</code>和<code>wire_gen.go</code>只会有一个参与编译。</p><h2 id="高级玩法"><a href="#高级玩法" class="headerlink" title="高级玩法"></a>高级玩法</h2><h3 id="cleanup函数"><a href="#cleanup函数" class="headerlink" title="cleanup函数"></a>cleanup函数</h3><p>在创建依赖资源时，如果由某个资源创建失败，那么其他资源需要关闭的情况下，可以使用cleanup函数来关闭资源。比如咱们给<code>db.New</code>方法返回一个<code>cleanup</code>函数来关闭数据库连接，相关代码修改如下(未列出的代码不修改)：</p><p>internal/db/db.go</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(cfg *config.Config)</span> <span class="hljs-params">(db *sql.DB, cleanup <span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">err</span> <span class="hljs-title">error</span>)</span> &#123; <span class="hljs-comment">// 声明第二个返回值</span></span><br><span class="line">db, err = sql.Open(<span class="hljs-string">"mysql"</span>, cfg.Database.Dsn)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err = db.Ping(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cleanup = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// cleanup函数中关闭数据库连接</span></span><br><span class="line">db.Close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> db, cleanup, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd/wire.go</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitApp</span><span class="hljs-params">()</span> <span class="hljs-params">(*App, <span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">error</span>)</span> &#123; <span class="hljs-comment">// 声明第二个返回值</span></span><br><span class="line"><span class="hljs-built_in">panic</span>(wire.Build(config.Provider, db.Provider, NewApp))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd/main.go</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">app, cleanup, err := InitApp() <span class="hljs-comment">// 添加第二个参数</span></span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> cleanup() <span class="hljs-comment">// 延迟调用cleanup关闭资源</span></span><br><span class="line"><span class="hljs-keyword">var</span> version <span class="hljs-keyword">string</span></span><br><span class="line">row := app.db.QueryRow(<span class="hljs-string">"SELECT VERSION()"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err := row.Scan(&amp;version); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(version)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新在cmd目录执行<code>wire</code>命令，生成的<code>wire_gen.go</code>如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitApp</span><span class="hljs-params">()</span> <span class="hljs-params">(*App, <span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">error</span>)</span> &#123;</span><br><span class="line">configConfig, err := config.New()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">sqlDB, cleanup, err := db.New(configConfig)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">app := NewApp(sqlDB)</span><br><span class="line"><span class="hljs-keyword">return</span> app, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// 返回了清理函数</span></span><br><span class="line">cleanup()</span><br><span class="line">&#125;, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口绑定"><a href="#接口绑定" class="headerlink" title="接口绑定"></a>接口绑定</h3><p>在面向接口编程中，代码依赖的往往是接口，而不是具体的struct，此时依赖注入相关代码需要做一点小小的修改，继续刚才的例子，示例修改如下：</p><p>新增<code>internal/db/dao.go</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"database/sql"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Dao <span class="hljs-keyword">interface</span> &#123; <span class="hljs-comment">// 接口声明</span></span><br><span class="line">Version() (<span class="hljs-keyword">string</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> dao <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// 默认实现</span></span><br><span class="line">db *sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dao)</span> <span class="hljs-title">Version</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> version <span class="hljs-keyword">string</span></span><br><span class="line">row := d.db.QueryRow(<span class="hljs-string">"SELECT VERSION()"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err := row.Scan(&amp;version); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> version, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDao</span><span class="hljs-params">(db *sql.DB)</span> *<span class="hljs-title">dao</span></span> &#123; <span class="hljs-comment">// 生成dao对象的方法</span></span><br><span class="line"><span class="hljs-keyword">return</span> &amp;dao&#123;db: db&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>internal/db/db.go也需要修改Provider，增加<code>NewDao</code>声明:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> Provider = wire.NewSet(New, NewDao)</span><br></pre></td></tr></table></figure><p>cmd/main.go文件修改：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"wire-example2/internal/db"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> App <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">dao db.Dao <span class="hljs-comment">// 依赖Dao接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewApp</span><span class="hljs-params">(dao db.Dao)</span> *<span class="hljs-title">App</span></span> &#123; <span class="hljs-comment">// 依赖Dao接口</span></span><br><span class="line"><span class="hljs-keyword">return</span> &amp;App&#123;dao: dao&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">app, cleanup, err := InitApp()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> cleanup()</span><br><span class="line">version, err := app.dao.Version() <span class="hljs-comment">// 调用Dao接口方法</span></span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(version)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入cmd目录执行<code>wire</code>命令，此时会出现报错：</p><figure class="highlight verilog hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\GolandProjects\<span class="hljs-keyword">wire</span>-example2\cmd&gt;<span class="hljs-keyword">wire</span></span><br><span class="line"><span class="hljs-keyword">wire</span>: C:\Users\Administrator\GolandProjects\<span class="hljs-keyword">wire</span>-example2\cmd\<span class="hljs-keyword">wire</span><span class="hljs-variable">.go</span>:<span class="hljs-number">11</span>:<span class="hljs-number">1</span>: inject InitApp: no provider found <span class="hljs-keyword">for</span> <span class="hljs-keyword">wire</span>-example2/internal/db<span class="hljs-variable">.Dao</span></span><br><span class="line">        needed by *<span class="hljs-keyword">wire</span>-example2/cmd<span class="hljs-variable">.App</span> in provider <span class="hljs-string">"NewApp"</span> (C:\Users\Administrator\GolandProjects\<span class="hljs-keyword">wire</span>-example2\cmd\main<span class="hljs-variable">.go</span>:<span class="hljs-number">12</span>:<span class="hljs-number">6</span>)</span><br><span class="line"><span class="hljs-keyword">wire</span>: <span class="hljs-keyword">wire</span>-example2/cmd: <span class="hljs-keyword">generate</span> failed</span><br><span class="line"><span class="hljs-keyword">wire</span>: at least one <span class="hljs-keyword">generate</span> failure</span><br></pre></td></tr></table></figure><p><code>wire</code>提示<code>inject InitApp: no provider found for wire-example2/internal/db.Dao</code>，也就是没找到能提供<code>db.Dao</code>对象的<code>Provider</code>，咱们不是提供了默认的<code>db.dao</code>实现也注册了<code>Provider</code>吗？这也是go的OOP设计奇特之处。</p><p>咱们修改一下<code>internal/db/db.go</code>的<code>Provider</code>声明，增加<code>db.*dao</code>和<code>db.Dao</code>的接口绑定关系:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> Provider = wire.NewSet(New, NewDao, wire.Bind(<span class="hljs-built_in">new</span>(Dao), <span class="hljs-built_in">new</span>(*dao)))</span><br></pre></td></tr></table></figure><p><code>wire.Bind()</code>方法第一个参数为<code>interface{}</code>，第二个参数为<code>实现</code>。</p><p>此时再执行<code>wire</code>命令就可以成功了！</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><code>wire</code>工具还有很多玩法，但是就笔者个人工作经验而言，掌握本文介绍到的知识已经能够胜任绝大部分场景了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;wire与依赖注入&quot;&gt;&lt;a href=&quot;#wire与依赖注入&quot; class=&quot;headerlink&quot; title=&quot;wire与依赖注入&quot;&gt;&lt;/a&gt;wire与依赖注入&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/wire&quot; t
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang组件化网络服务器框架Halia指南</title>
    <link href="https//www.ddhigh.com/2021/01/12/golang-halia-get-started.html"/>
    <id>https//www.ddhigh.com/2021/01/12/golang-halia-get-started.html</id>
    <published>2021-01-12T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在<strong>netty</strong>框架面世之前，几乎没有一个成熟的OOP/组件化规范指导网络服务器开发，一些常用的<code>FrameDecoder</code>,<code>BusinessHandler</code>等等组件紧密耦合在了项目当中，整个项目可以说扩展性比较差。</p><p>netty的出现可以说是划时代的，基于OOP/组件化屏蔽了底层 <strong>BlockingIO</strong>/<strong>NonBlockingIO</strong>/<strong>AsynchrousIO</strong>之间的差异，各种组件可以无缝切换，网络服务器开发效率有了非常大的提高。</p><p>通过阅读netty源码，以及核心组件的架构，基于Golang进行了实现，至此，Golang的Halia框架面世了！</p><h2 id="Halia特性"><a href="#Halia特性" class="headerlink" title="Halia特性"></a>Halia特性</h2><h3 id="组件化-可扩展"><a href="#组件化-可扩展" class="headerlink" title="组件化/可扩展"></a>组件化/可扩展</h3><p>Halia框架面向接口编程，并提供默认实现，同时内置常用的解码器，真正做到开箱即用。</p><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>基于Golang原生网络库进行开发，无第三方依赖，性能有保障。</p><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><p>Halia框架采用极简设计，没有冗余代码，并附带3个常用解码器示例，助您基于Halia快速开始开发。</p><h3 id="开源免费"><a href="#开源免费" class="headerlink" title="开源免费"></a>开源免费</h3><p>Halia框架基于MIT开源协议发布，无论是商用以及非商用都可以免费使用。</p><h3 id="社区驱动"><a href="#社区驱动" class="headerlink" title="社区驱动"></a>社区驱动</h3><p>Halia框架托管于Github，任何人都可以贡献一臂之力。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>接下来将演示如何开发一个时间回显服务器。</p><p>客户端每隔1秒发送时间字符串给服务器，服务器回显该数据。</p><h3 id="公用代码"><a href="#公用代码" class="headerlink" title="公用代码"></a>公用代码</h3><h4 id="encoder-go"><a href="#encoder-go" class="headerlink" title="encoder.go"></a>encoder.go</h4><p>字符串编码器，将字符串转换为<code>[]byte</code>传输到下一个出站处理器</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"halia/channel"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> StringToByteEncoder <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="hljs-comment">// 编码器不处理处理，交由下一个处理器(也就是业务处理器)处理</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *StringToByteEncoder)</span> <span class="hljs-title">OnError</span><span class="hljs-params">(c channel.HandlerContext, err error)</span></span> &#123;</span><br><span class="line">c.FireOnError(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *StringToByteEncoder)</span> <span class="hljs-title">Write</span><span class="hljs-params">(c channel.HandlerContext, msg <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> str, ok := msg.(<span class="hljs-keyword">string</span>); ok &#123; <span class="hljs-comment">// string才转换</span></span><br><span class="line"><span class="hljs-keyword">return</span> c.Write([]<span class="hljs-keyword">byte</span>(str))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> c.Write(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *StringToByteEncoder)</span> <span class="hljs-title">Flush</span><span class="hljs-params">(c channel.HandlerContext)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> c.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><h4 id="handler-go"><a href="#handler-go" class="headerlink" title="handler.go"></a>handler.go</h4><p>客户端业务处理代码。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line">log <span class="hljs-string">"github.com/sirupsen/logrus"</span></span><br><span class="line"><span class="hljs-string">"halia/channel"</span></span><br><span class="line"><span class="hljs-string">"strings"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> EchoClientHandler <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">log *log.Entry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewEchoClientHandler</span><span class="hljs-params">()</span> *<span class="hljs-title">EchoClientHandler</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;EchoClientHandler&#123;</span><br><span class="line">log: log.WithField(<span class="hljs-string">"component"</span>, <span class="hljs-string">"EchoClientHandler"</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 发送错误回调</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoClientHandler)</span> <span class="hljs-title">OnError</span><span class="hljs-params">(c channel.HandlerContext, err error)</span></span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Warnln(<span class="hljs-string">"error caught"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 连接已建立</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoClientHandler)</span> <span class="hljs-title">ChannelActive</span><span class="hljs-params">(c channel.HandlerContext)</span></span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Infoln(<span class="hljs-string">"connected"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err := c.WriteAndFlush(<span class="hljs-string">"Hello World\r\n"</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">p.log.WithError(err).Warnln(<span class="hljs-string">"write error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">p.log.Infof(<span class="hljs-string">"pipeline in: %v"</span>, strings.Join(c.Pipeline().InboundNames(), <span class="hljs-string">"-&gt;"</span>))</span><br><span class="line">p.log.Infof(<span class="hljs-string">"pipeline out: %v"</span>, strings.Join(c.Pipeline().OutboundNames(), <span class="hljs-string">"-&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 连接已断开</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoClientHandler)</span> <span class="hljs-title">ChannelInActive</span><span class="hljs-params">(c channel.HandlerContext)</span></span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Infoln(<span class="hljs-string">"disconnected"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 读取到完整的消息回调</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoClientHandler)</span> <span class="hljs-title">ChannelRead</span><span class="hljs-params">(c channel.HandlerContext, msg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">data, ok := msg.([]<span class="hljs-keyword">byte</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Warnf(<span class="hljs-string">"unknown msg type: %+v"</span>, msg)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">str := <span class="hljs-keyword">string</span>(data)</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Infoln(<span class="hljs-string">"receive "</span>, str)</span><br><span class="line">    <span class="hljs-comment">// 1秒后发送数据给服务器</span></span><br><span class="line">time.AfterFunc(time.Second, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := c.WriteAndFlush(fmt.Sprintf(<span class="hljs-string">"client say:%s\r\n"</span>, time.Now().String())); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">p.log.WithError(err).Warnln(<span class="hljs-string">"write error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">log <span class="hljs-string">"github.com/sirupsen/logrus"</span></span><br><span class="line"><span class="hljs-string">"halia/bootstrap"</span></span><br><span class="line"><span class="hljs-string">"halia/channel"</span></span><br><span class="line"><span class="hljs-string">"halia/handler/codec"</span></span><br><span class="line"><span class="hljs-string">"net"</span></span><br><span class="line"><span class="hljs-string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">log.SetOutput(os.Stdout)</span><br><span class="line">log.SetLevel(log.DebugLevel)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">client := bootstrap.NewClient(&amp;bootstrap.ClientOptions&#123;</span><br><span class="line">        <span class="hljs-comment">// 将原始net.Conn包装为Channel实现，一般情况下用DefaultChannel即可</span></span><br><span class="line">ChannelFactory: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(conn net.Conn)</span> <span class="hljs-title">channel</span>.<span class="hljs-title">Channel</span></span> &#123;</span><br><span class="line">c := channel.NewDefaultChannel(conn)</span><br><span class="line">            <span class="hljs-comment">// 添加解码器，换行符分割报文解码器</span></span><br><span class="line">c.Pipeline().AddInbound(<span class="hljs-string">"decoder"</span>, codec.NewLineBasedFrameDecoder())</span><br><span class="line">            <span class="hljs-comment">// 添加业务处理器</span></span><br><span class="line">c.Pipeline().AddInbound(<span class="hljs-string">"handler"</span>, NewEchoClientHandler())</span><br><span class="line">            <span class="hljs-comment">// 添加编码器</span></span><br><span class="line">c.Pipeline().AddOutbound(<span class="hljs-string">"encoder"</span>, &amp;StringToByteEncoder&#123;&#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> c</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// 连接服务器</span></span><br><span class="line">log.WithField(<span class="hljs-string">"component"</span>, <span class="hljs-string">"client"</span>).Fatal(client.Dial(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">"127.0.0.1:8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><h4 id="handler-go-1"><a href="#handler-go-1" class="headerlink" title="handler.go"></a>handler.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">log <span class="hljs-string">"github.com/sirupsen/logrus"</span></span><br><span class="line"><span class="hljs-string">"halia/channel"</span></span><br><span class="line"><span class="hljs-string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> EchoServerHandler <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">log *log.Entry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewEchoServerHandler</span><span class="hljs-params">()</span> *<span class="hljs-title">EchoServerHandler</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;EchoServerHandler&#123;</span><br><span class="line">log: log.WithField(<span class="hljs-string">"component"</span>, <span class="hljs-string">"EchoServerHandler"</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoServerHandler)</span> <span class="hljs-title">OnError</span><span class="hljs-params">(c channel.HandlerContext, err error)</span></span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Warnln(<span class="hljs-string">"error caught"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoServerHandler)</span> <span class="hljs-title">ChannelActive</span><span class="hljs-params">(c channel.HandlerContext)</span></span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Infoln(<span class="hljs-string">"connected"</span>)</span><br><span class="line"></span><br><span class="line">p.log.Infof(<span class="hljs-string">"pipeline in: %v"</span>, strings.Join(c.Pipeline().InboundNames(), <span class="hljs-string">"-&gt;"</span>))</span><br><span class="line">p.log.Infof(<span class="hljs-string">"pipeline out: %v"</span>, strings.Join(c.Pipeline().OutboundNames(), <span class="hljs-string">"-&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoServerHandler)</span> <span class="hljs-title">ChannelInActive</span><span class="hljs-params">(c channel.HandlerContext)</span></span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Infoln(<span class="hljs-string">"disconnected"</span>)</span><br><span class="line"></span><br><span class="line">p.log.Infof(<span class="hljs-string">"pipeline in: %v"</span>, strings.Join(c.Pipeline().InboundNames(), <span class="hljs-string">"-&gt;"</span>))</span><br><span class="line">p.log.Infof(<span class="hljs-string">"pipeline out: %v"</span>, strings.Join(c.Pipeline().OutboundNames(), <span class="hljs-string">"-&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *EchoServerHandler)</span> <span class="hljs-title">ChannelRead</span><span class="hljs-params">(c channel.HandlerContext, msg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">data, ok := msg.([]<span class="hljs-keyword">byte</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Warnf(<span class="hljs-string">"unknown msg type: %+v"</span>, msg)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">str := <span class="hljs-keyword">string</span>(data)</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).Infoln(<span class="hljs-string">"receive "</span>, str)</span><br><span class="line"><span class="hljs-keyword">if</span> err := c.Write(<span class="hljs-string">"server:"</span> + str + <span class="hljs-string">"\r\n"</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">p.log.WithField(<span class="hljs-string">"peer"</span>, c.Channel().RemoteAddr()).WithError(err).Warnln(<span class="hljs-string">"write error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-go-1"><a href="#main-go-1" class="headerlink" title="main.go"></a>main.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">log <span class="hljs-string">"github.com/sirupsen/logrus"</span></span><br><span class="line"><span class="hljs-string">"halia/bootstrap"</span></span><br><span class="line"><span class="hljs-string">"halia/channel"</span></span><br><span class="line"><span class="hljs-string">"halia/handler/codec"</span></span><br><span class="line"><span class="hljs-string">"net"</span></span><br><span class="line"><span class="hljs-string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">log.SetOutput(os.Stdout)</span><br><span class="line">log.SetLevel(log.DebugLevel)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">s := bootstrap.NewServer(&amp;bootstrap.ServerOptions&#123;</span><br><span class="line">ChannelFactory: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(conn net.Conn)</span> <span class="hljs-title">channel</span>.<span class="hljs-title">Channel</span></span> &#123;</span><br><span class="line">c := channel.NewDefaultChannel(conn)</span><br><span class="line">c.Pipeline().AddInbound(<span class="hljs-string">"decoder"</span>, codec.NewLineBasedFrameDecoder())</span><br><span class="line">c.Pipeline().AddInbound(<span class="hljs-string">"handler"</span>, NewEchoServerHandler())</span><br><span class="line">c.Pipeline().AddOutbound(<span class="hljs-string">"encoder"</span>, &amp;StringToByteEncoder&#123;&#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> c</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.WithField(<span class="hljs-string">"component"</span>, <span class="hljs-string">"server"</span>).Fatal(s.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">"0.0.0.0:8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>先运行服务端，再运行客户端。</p><p>服务端输出</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">time=&quot;2021-01-12T11:30:13+08:00&quot; level=info msg=started addr=&quot;0.0.0.0:8080&quot; component=server network=tcp pid=7584</span><br><span class="line">time=&quot;2021-01-12T11:30:13+08:00&quot; level=info msg=initialized component=channelId machineId=a0c5895a25a3 pid=7584</span><br><span class="line">time=&quot;2021-01-12T11:30:18+08:00&quot; level=info msg=connected component=EchoServerHandler peer=&quot;127.0.0.1:57641&quot;</span><br><span class="line">time=&quot;2021-01-12T11:30:18+08:00&quot; level=info msg=&quot;pipeline in: InHeadContext-&gt;decoder-&gt;handler&quot; component=EchoServerHandler</span><br><span class="line">time=&quot;2021-01-12T11:30:18+08:00&quot; level=info msg=&quot;pipeline out: OutHeadContext-&gt;encoder-&gt;OutTailContext&quot; component=EchoServerHandler</span><br><span class="line">time=&quot;2021-01-12T11:30:18+08:00&quot; level=info msg=&quot;receive  Hello World&quot; component=EchoServerHandler peer=&quot;127.0.0.1:57641&quot;</span><br><span class="line">time=&quot;2021-01-12T11:30:19+08:00&quot; level=info msg=&quot;receive  client say:2021-01-12 11:30:19.5192868 +0800 CST m=+1.046443501&quot; component=EchoServerHandler peer=&quot;127.0.0.1:57641&quot;</span><br><span class="line">time=&quot;2021-01-12T11:30:20+08:00&quot; level=info msg=&quot;receive  client say:2021-01-12 11:30:20.5193884 +0800 CST m=+2.046545101&quot; component=EchoServerHandler peer=&quot;127.0.0.1:57641&quot;</span><br><span class="line">time=&quot;2021-01-12T11:30:21+08:00&quot; level=info msg=&quot;receive  client say:2021-01-12 11:30:21.5345887 +0800 CST m=+3.061745401&quot; component=EchoServerHandler peer=&quot;127.0.0.1:57641&quot;</span><br><span class="line">time=&quot;2021-01-12T11:30:22+08:00&quot; level=info msg=&quot;receive  client say:2021-01-12 11:30:22.5459978 +0800 CST m=+4.073154501&quot; component=EchoServerHandler peer=&quot;127.0.0.1:57641&quot;</span><br></pre></td></tr></table></figure><p>客户端输出</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:18+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=connected <span class="hljs-attribute">component</span>=EchoClientHandler <span class="hljs-attribute">peer</span>=<span class="hljs-string">"127.0.0.1:8080"</span></span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:18+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"pipeline in: InHeadContext-&gt;decoder-&gt;handler"</span> <span class="hljs-attribute">component</span>=EchoClientHandler</span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:18+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"pipeline out: OutHeadContext-&gt;encoder-&gt;OutTailContext"</span> <span class="hljs-attribute">component</span>=EchoClientHandler</span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:18+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"receive  server:Hello World"</span> <span class="hljs-attribute">component</span>=EchoClientHandler <span class="hljs-attribute">peer</span>=<span class="hljs-string">"127.0.0.1:8080"</span></span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:18+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=initialized <span class="hljs-attribute">component</span>=channelId <span class="hljs-attribute">machineId</span>=a0c5895a25a3 <span class="hljs-attribute">pid</span>=960</span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:19+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"receive  server:client say:2021-01-12 11:30:19.5192868 +0800 CST m=+1.046443501"</span> <span class="hljs-attribute">component</span>=EchoClientHandler <span class="hljs-attribute">peer</span>=<span class="hljs-string">"127.0.0.1:8080"</span></span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:20+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"receive  server:client say:2021-01-12 11:30:20.5193884 +0800 CST m=+2.046545101"</span> <span class="hljs-attribute">component</span>=EchoClientHandler <span class="hljs-attribute">peer</span>=<span class="hljs-string">"127.0.0.1:8080"</span></span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:21+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"receive  server:client say:2021-01-12 11:30:21.5345887 +0800 CST m=+3.061745401"</span> <span class="hljs-attribute">component</span>=EchoClientHandler <span class="hljs-attribute">peer</span>=<span class="hljs-string">"127.0.0.1:8080"</span></span><br><span class="line"><span class="hljs-attribute">time</span>=<span class="hljs-string">"2021-01-12T11:30:22+08:00"</span> <span class="hljs-attribute">level</span>=info <span class="hljs-attribute">msg</span>=<span class="hljs-string">"receive  server:client say:2021-01-12 11:30:22.5459978 +0800 CST m=+4.073154501"</span> <span class="hljs-attribute">component</span>=EchoClientHandler <span class="hljs-attribute">peer</span>=<span class="hljs-string">"127.0.0.1:8080"</span></span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>Halia期待您的贡献！</p><ul><li><a href="https://halia-group.github.io/halia/" target="_blank" rel="noopener">文档地址</a></li><li><a href="https://github.com/halia-group/halia" target="_blank" rel="noopener">仓库地址</a></li></ul><p><img src="https://imgkr2.cn-bj.ufileos.com/ccd85d43-46ce-405b-8efb-6f22c0f9ec3f.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;Signature=APhNQ04SOdsYvwRWMyj6hc%252BUu5s%253D&amp;Expires=1610510873" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在&lt;strong&gt;netty&lt;/strong&gt;框架面世之前，几乎没有一个成熟的OOP/组件化规范指导网络服务器开发，一些常用
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
      <category term="halia" scheme="https//www.ddhigh.com/tags/halia/"/>
    
  </entry>
  
  <entry>
    <title>Laravel定时任务写入日志用户变为root导致Web进程无法写入日志问题</title>
    <link href="https//www.ddhigh.com/2020/10/20/laravel-crontab-log-permission.html"/>
    <id>https//www.ddhigh.com/2020/10/20/laravel-crontab-log-permission.html</id>
    <published>2020-10-20T03:17:09.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>今天访问接口时返回 <strong>接口写入日志失败</strong>，通过排查后发现 <code>storage/logs</code>下面出现了<code>root</code>用户新建的日志，导致<code>www</code>用户无法写入日志。</p><p>通过排查发现，<code>crontab</code>写入了<code>laravel</code>的<code>定时任务命令</code>。默认情况下，crontab的任务是使用<code>root</code>用户去执行的，因此<code>laravel定时任务</code>新建的文件属主自然成为了<code>root</code>。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法就是<code>使用指定用户来运行 crontab 任务</code>。比如使用<code>www</code>用户来运行<code>laravel</code>的计划任务命令。</p><p>使用下面的命令编辑<code>www</code>用户的定时任务。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -u www -e</span><br></pre></td></tr></table></figure><p>例如写入下面的示例任务：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * /usr/<span class="hljs-built_in">local</span>/php/bin/php /data/wwwroot/laravel/artisan schedule:run &gt;&gt; /var/<span class="hljs-built_in">log</span>/laravel-crontab.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>保存即可，等待系统运行任务。</p><h2 id="运行时错误"><a href="#运行时错误" class="headerlink" title="运行时错误"></a>运行时错误</h2><p>通过观察发现定时任务并没有成功运行，通过查询<code>/var/log/cron</code>日志发现如下的日志：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(www) CMD (/usr/local/php/bin/php /data/wwwroot/laravel/artisan schedule:run &gt;&gt; /var/log/laravel-crontab.log 2&gt;&amp;1)</span><br><span class="line">(CRON) ERROR chdir failed (/home/www): No such file or directory</span><br></pre></td></tr></table></figure><p>可以看到，定时任务确实有执行，但是执行出错。出现这个问题的原因是<code>www 用户没有主目录</code>。</p><p>解决方案如下：</p><ol><li>新建<code>/home/www</code>目录</li><li>将<code>/home/www</code>的用户属主改为<code>www</code>用户</li></ol><p>相关命令如下：</p><figure class="highlight arduino hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">mkdir</span> /<span class="hljs-built_in">home</span>/www</span><br><span class="line">chown -R www:www /<span class="hljs-built_in">home</span>/www</span><br></pre></td></tr></table></figure><p>后续执行没有再出现错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天访问接口时返回 &lt;strong&gt;接口写入日志失败&lt;/strong&gt;，通过排查后发现 &lt;code&gt;storage/logs&lt;/code&gt;下面出现了&lt;code&gt;root&lt;/code&gt;用户新建的日志，导致&lt;code&gt;www&lt;/code&gt;用户无法写入日志。&lt;/p&gt;
&lt;p&gt;通过排
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="php" scheme="https//www.ddhigh.com/categories/backend/php/"/>
    
    
      <category term="laravel" scheme="https//www.ddhigh.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Golang Http 验证码示例</title>
    <link href="https//www.ddhigh.com/2020/08/20/golang-http-captcha-example.html"/>
    <id>https//www.ddhigh.com/2020/08/20/golang-http-captcha-example.html</id>
    <published>2020-08-20T09:18:38.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>验证码（CAPTCHA）是“Completely Automated Public Turing test to tell Computers and Humans Apart”（全自动区分<a href="https://baike.baidu.com/item/计算机" target="_blank" rel="noopener">计算机</a>和人类的<a href="https://baike.baidu.com/item/图灵测试" target="_blank" rel="noopener">图灵测试</a>）的缩写，是一种区分用户是计算机还是人的公共全自动<a href="https://baike.baidu.com/item/程序/71525" target="_blank" rel="noopener">程序</a>。可以防止：恶意破解密码、<a href="https://baike.baidu.com/item/刷票/6540942" target="_blank" rel="noopener">刷票</a>、论坛灌水，有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试，实际上用验证码是现在很多网站通行的方式，我们利用比较简易的方式实现了这个功能。这个问题可以由计算机生成并评判，但是必须只有人类才能解答。由于计算机无法解答CAPTCHA的问题，所以回答出问题的用户就可以被认为是人类。</p></blockquote><h2 id="传统网站验证码工作机制"><a href="#传统网站验证码工作机制" class="headerlink" title="传统网站验证码工作机制"></a>传统网站验证码工作机制</h2><ol><li>客户端请求服务器获取验证码图片</li><li>服务器生成随机串(验证码值)写入Session，并将验证码值写入到图片中返回给客户端</li><li>客户端输入图片上的字符串提交给服务器验证</li><li>服务器比对客户端提交的字符串值和 Session 中是否匹配，如果匹配则通过验证</li></ol><p>由于服务器生成的验证码值从始至终均未返回给客户端，因此，客户端只能从图片中识别验证码字符串，从而保证人机校验逻辑。</p><h2 id="Go的HTTP验证码"><a href="#Go的HTTP验证码" class="headerlink" title="Go的HTTP验证码"></a>Go的HTTP验证码</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Go 语言的 HTTP 服务器默认不支持 Session，因此验证码值需要换个思路存储，以下是不使用 Session 的逻辑</p><ol><li>客户端请求服务器获取验证码ID</li><li>服务器生成验证码 ID，并生成验证码值，将 ID 和值的映射关系记录到内存或缓存，并将 ID 返回给客户端</li><li>客户端根据返回的 ID 请求服务器获取验证码图片</li><li>服务器获取到验证码 ID，从内存或缓存中取出验证码值，将该值写入图片并将图片返回给客户端</li><li>客户端提交验证码 ID（第1步获得）和验证码值给服务器验证</li><li>服务器获取验证码 ID，从内存或缓存中取出验证码值与客户端提交的验证码值比对</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p>安装验证码依赖</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github.com<span class="hljs-regexp">/dchest/</span>captcha</span><br></pre></td></tr></table></figure></li><li><p>代码实现</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"github.com/dchest/captcha"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 获取验证码 ID</span></span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/captcha/generate"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">id := captcha.NewLen(<span class="hljs-number">6</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> _, err := fmt.Fprint(w, id); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"generate captcha error"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// 获取验证码图片</span></span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/captcha/image"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">id := r.URL.Query().Get(<span class="hljs-string">"id"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> id == <span class="hljs-string">""</span> &#123;</span><br><span class="line">http.Error(w, <span class="hljs-string">"Bad Request"</span>, http.StatusBadRequest)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.Header().Set(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"image/png"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err := captcha.WriteImage(w, id, <span class="hljs-number">120</span>, <span class="hljs-number">80</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"show captcha error"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// 业务处理</span></span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/login"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"parseForm error"</span>, err)</span><br><span class="line">http.Error(w, <span class="hljs-string">"Internal Error"</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 获取验证码 ID 和验证码值</span></span><br><span class="line">id := r.FormValue(<span class="hljs-string">"id"</span>)</span><br><span class="line">value := r.FormValue(<span class="hljs-string">"value"</span>)</span><br><span class="line"><span class="hljs-comment">// 比对提交的验证码值和内存中的验证码值</span></span><br><span class="line"><span class="hljs-keyword">if</span> captcha.VerifyString(id, value) &#123;</span><br><span class="line">fmt.Fprint(w, <span class="hljs-string">"ok"</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="hljs-string">"mismatch"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行</p><ol><li>访问/captcha/generate获得验证码 ID</li><li>访问/captcha/image?id=验证码 ID</li><li>访问/login，并输入第一步的验证码 ID 和第二步的验证码值即可查看验证结果</li></ol></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/xialeistudio/go-http-captcha-example" target="_blank" rel="noopener">https://github.com/xialeistudio/go-http-captcha-example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;验证码（CAPTCHA）是“Completely Automated Public Turing test to tell Computers and Humans Apart”（全自动区分&lt;a href=&quot;https://baike.baidu.
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="go" scheme="https//www.ddhigh.com/categories/backend/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(5)——编写自定义插件</title>
    <link href="https//www.ddhigh.com/2020/03/18/webpack-plugin-development.html"/>
    <id>https//www.ddhigh.com/2020/03/18/webpack-plugin-development.html</id>
    <published>2020-03-18T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.ddhigh.com/blog/2020-03-18-032856.png" alt></p><p>Webpack通过Loader完成模块的转换工作，让“一切皆模块”成为可能。Plugin机制则让其更加灵活，可以在Webpack生命周期中调用钩子完成各种任务，包括修改输出资源、输出目录等等。</p><p>今天我们一起来学习如何编写Webpack插件。</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>在编写插件之前，还需要了解一下Webpack的构建流程，以便在合适的时机插入合适的插件逻辑。Webpack的基本构建流程如下：</p><ol><li>校验配置文件</li><li>生成Compiler对象</li><li>初始化默认插件</li><li>run/watch：如果运行在watch模式则执行watch方法，否则执行run方法</li><li>compilation：创建Compilation对象回调compilation相关钩子</li><li>emit：文件内容准备完成，准备生成文件，这是最后一次修改最终文件的机会</li><li>afterEmit：文件已经写入磁盘完成</li><li>done：完成编译</li></ol><h2 id="插件示例"><a href="#插件示例" class="headerlink" title="插件示例"></a>插件示例</h2><p>一个典型的Webpack插件代码如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 插件代码</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebpackPlugin</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    <span class="hljs-comment">// 在emit阶段插入钩子函数</span></span><br><span class="line">    compiler.hooks.emit.tap(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = MyWebpackPlugin;</span><br></pre></td></tr></table></figure><p>接下来需要在webpack.config.js中引入这个插件。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-comment">// 传入插件实例</span></span><br><span class="line">    <span class="hljs-keyword">new</span> MyWebpackPlugin(&#123;</span><br><span class="line">      param:<span class="hljs-string">'paramValue'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Webpack在启动时会实例化插件对象，在初始化compiler对象之后会调用插件实例的apply方法，传入compiler对象，插件实例在apply方法中会注册感兴趣的钩子，Webpack在执行过程中会根据构建阶段回调相应的钩子。</p><h2 id="Compiler-amp-amp-Compilation对象"><a href="#Compiler-amp-amp-Compilation对象" class="headerlink" title="Compiler &amp;&amp; Compilation对象"></a>Compiler &amp;&amp; Compilation对象</h2><p>在编写Webpack插件过程中，最常用也是最主要的两个对象就是Webpack提供的Compiler和Compilation，Plugin通过访问Compiler和Compilation对象来完成工作。</p><ul><li>Compiler 对象包含了当前运行Webpack的配置，包括entry、output、loaders等配置，这个对象在启动Webpack时被实例化，而且是全局唯一的。Plugin可以通过该对象获取到Webpack的配置信息进行处理。</li><li>Compilation对象可以理解编译对象，包含了模块、依赖、文件等信息。在开发模式下运行Webpack时，每修改一次文件都会产生一个新的Compilation对象，Plugin可以访问到本次编译过程中的模块、依赖、文件内容等信息。</li></ul><h3 id="常见钩子"><a href="#常见钩子" class="headerlink" title="常见钩子"></a>常见钩子</h3><p>Webpack会根据执行流程来回调对应的钩子，下面我们来看看都有哪些常见钩子，这些钩子支持的tap操作是什么。</p><table><thead><tr><th>钩子</th><th>说明</th><th>参数</th><th>类型</th></tr></thead><tbody><tr><td>afterPlugins</td><td>启动一次新的编译</td><td>compiler</td><td>同步</td></tr><tr><td>compile</td><td>创建compilation对象之前</td><td>compilationParams</td><td>同步</td></tr><tr><td>compilation</td><td>compilation对象创建完成</td><td>compilation</td><td>同步</td></tr><tr><td>emit</td><td>资源生成完成，输出之前</td><td>compilation</td><td>异步</td></tr><tr><td>afterEmit</td><td>资源输出到目录完成</td><td>compilation</td><td>异步</td></tr><tr><td>done</td><td>完成编译</td><td>stats</td><td>同步</td></tr></tbody></table><h2 id="Tapable"><a href="#Tapable" class="headerlink" title="Tapable"></a>Tapable</h2><p>Tapable是Webpack的一个核心工具，Webpack中许多对象扩展自Tapable类。Tapable类暴露了tap、tapAsync和tapPromise方法，可以根据钩子的同步/异步方式来选择一个函数注入逻辑。</p><ul><li>tap 同步钩子</li><li>tapAsync 异步钩子，通过callback回调告诉Webpack异步执行完毕</li><li>tapPromise 异步钩子，返回一个Promise告诉Webpack异步执行完毕</li></ul><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>tap是一个同步钩子，同步钩子在使用时不可以包含异步调用，因为函数返回时异步逻辑有可能未执行完毕导致问题。</p><p>下面一个在compile阶段插入同步钩子的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.compile.tap(<span class="hljs-string">'MyWebpackPlugin'</span>, params =&gt; &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是同步钩子'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapAsync"><a href="#tapAsync" class="headerlink" title="tapAsync"></a>tapAsync</h3><p>tapAsync是一个异步钩子，我们可以通过callback告知Webpack异步逻辑执行完毕。</p><p>下面是一个在emit阶段的示例，在1秒后打印文件列表。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件列表'</span>, <span class="hljs-built_in">Object</span>.keys(compilation.assets).join(<span class="hljs-string">','</span>));</span><br><span class="line">    callback();</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapPromise"><a href="#tapPromise" class="headerlink" title="tapPromise"></a>tapPromise</h3><p>tapPromise也是也是异步钩子，和tapAsync的区别在于tapPromise是通过返回Promise来告知Webpack异步逻辑执行完毕。</p><p>下面是一个将生成结果上传到CDN的示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.afterEmit.tapPromise(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> filelist = <span class="hljs-built_in">Object</span>.keys(compilation.assets);</span><br><span class="line">    uploadToCDN(filelist, (err) =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>apply方法中插入钩子的一般形式如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compileer.hooks.阶段.tap函数(<span class="hljs-string">'插件名称'</span>, (阶段回调参数) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="读取输出资源、模块及依赖"><a href="#读取输出资源、模块及依赖" class="headerlink" title="读取输出资源、模块及依赖"></a>读取输出资源、模块及依赖</h3><p>在emit阶段，我们可以读取最终需要输出的资源、chunk、模块和对应的依赖，如果有需要还可以更改输出资源。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apply(compiler) &#123;</span><br><span class="line">  compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// compilation.chunks存放了代码块列表</span></span><br><span class="line">    compilation.chunks.forEach(<span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="hljs-comment">// chunk包含多个模块，通过chunk.modulesIterable可以遍历模块列表 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> <span class="hljs-keyword">of</span> chunk.modulesIterable) &#123;</span><br><span class="line">        <span class="hljs-comment">// module包含多个依赖，通过module.dependencies进行遍历</span></span><br><span class="line">      <span class="hljs-built_in">module</span>.dependencies.forEach(<span class="hljs-function"><span class="hljs-params">dependency</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(dependency);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改输出资源"><a href="#修改输出资源" class="headerlink" title="修改输出资源"></a>修改输出资源</h3><p>通过操作compilation.assets对象，我们可以添加、删除、更改最终输出的资源。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apply(compiler) &#123;</span><br><span class="line">  compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// 修改或添加资源</span></span><br><span class="line">    compilation.assets[<span class="hljs-string">'main.js'</span>]  = &#123;</span><br><span class="line">      source() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'modified content'</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      size() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.source().length;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-comment">// 删除资源</span></span><br><span class="line">    <span class="hljs-keyword">delete</span> compilation.assets[<span class="hljs-string">'main.js'</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assets对象需要定义source和size方法，source方法返回资源的内容，支持字符串和Node.js的Buffer，size返回文件的大小字节数。</p><h2 id="插件编写实例"><a href="#插件编写实例" class="headerlink" title="插件编写实例"></a>插件编写实例</h2><p>接下来我们开始编写自定义插件，所有插件使用的示例项目如下(需要安装webpack和webpack-cli)：</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">|----src</span></span><br><span class="line"><span class="hljs-string">|----main.js</span></span><br><span class="line"><span class="hljs-string">|----plugins</span></span><br><span class="line"><span class="hljs-string">|----my-webpack-plugin.js</span></span><br><span class="line"><span class="hljs-string">|----package.json</span></span><br><span class="line"><span class="hljs-string">|----webpack.config.js</span></span><br></pre></td></tr></table></figure><p>相关文件的内容如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/main.js</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello World'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> MyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'my-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// webpack.config.js</span></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="hljs-string">'./src/main'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">    filename:<span class="hljs-string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> MyWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="生成清单文件"><a href="#生成清单文件" class="headerlink" title="生成清单文件"></a>生成清单文件</h3><p>通过在emit阶段操作compilation.assets实现。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebpackPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.emit.tapAsync(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> manifest = &#123;&#125;;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> name <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(compilation.assets)) &#123;</span><br><span class="line">                manifest[name] = compilation.assets[name].size();</span><br><span class="line">                <span class="hljs-comment">// 将生成文件的文件名和大小写入manifest对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            compilation.assets[<span class="hljs-string">'manifest.json'</span>] = &#123;</span><br><span class="line">                source() &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(manifest);</span><br><span class="line">                &#125;,</span><br><span class="line">                size() &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.source().length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = MyWebpackPlugin;</span><br></pre></td></tr></table></figure><p>构建完成后会在build目录添加manifest.json，内容如下：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="hljs-attr">"main.js"</span>:<span class="hljs-number">956</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="构建结果上传到七牛"><a href="#构建结果上传到七牛" class="headerlink" title="构建结果上传到七牛"></a>构建结果上传到七牛</h3><p>在实际开发中，资源文件构建完成后一般会同步到CDN，最终前端界面使用的是CDN服务器上的静态资源。</p><p>下面我们编写一个Webpack插件，文件构建完成后上传的七牛CDN。</p><p>我们的插件依赖qiniu，因此需要额外安装qiniu模块</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qiniu --save-dev</span><br></pre></td></tr></table></figure><p>七牛的Node.js SDK文档地址如下：</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="hljs-regexp">//</span>developer.qiniu.com<span class="hljs-regexp">/kodo/</span>sdk<span class="hljs-regexp">/1289/</span>nodejs</span><br></pre></td></tr></table></figure><p>开始编写插件代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> qiniu = <span class="hljs-built_in">require</span>(<span class="hljs-string">'qiniu'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebpackPlugin</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 七牛SDK mac对象</span></span><br><span class="line">    mac = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">      <span class="hljs-comment">// 读取传入选项</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.options = options || &#123;&#125;;</span><br><span class="line">      <span class="hljs-comment">// 检查选项中的参数</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.checkQiniuConfig();</span><br><span class="line">      <span class="hljs-comment">// 初始化七牛mac对象</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.mac = <span class="hljs-keyword">new</span> qiniu.auth.digest.Mac(</span><br><span class="line">            <span class="hljs-keyword">this</span>.options.qiniu.accessKey,</span><br><span class="line">            <span class="hljs-keyword">this</span>.options.qiniu.secretKey</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    checkQiniuConfig() &#123;</span><br><span class="line">        <span class="hljs-comment">// 配置未传qiniu，读取环境变量中的配置</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.options.qiniu) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.options.qiniu = &#123;</span><br><span class="line">                accessKey: process.env.QINIU_ACCESS_KEY,</span><br><span class="line">                secretKey: process.env.QINIU_SECRET_KEY,</span><br><span class="line">                bucket: process.env.QINIU_BUCKET,</span><br><span class="line">                keyPrefix: process.env.QINIU_KEY_PREFIX || <span class="hljs-string">''</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">const</span> qiniu = <span class="hljs-keyword">this</span>.options.qiniu;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!qiniu.accessKey || !qiniu.secretKey || !qiniu.bucket) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'invalid qiniu config'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.afterEmit.tapPromise(<span class="hljs-string">'MyWebpackPlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="hljs-comment">// 总上传数量</span></span><br><span class="line">                <span class="hljs-keyword">const</span> uploadCount = <span class="hljs-built_in">Object</span>.keys(compilation.assets).length;</span><br><span class="line">                <span class="hljs-comment">// 已上传数量</span></span><br><span class="line">                <span class="hljs-keyword">let</span> currentUploadedCount = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-comment">// 七牛SDK相关参数</span></span><br><span class="line">                <span class="hljs-keyword">const</span> putPolicy = <span class="hljs-keyword">new</span> qiniu.rs.PutPolicy(&#123; <span class="hljs-attr">scope</span>: <span class="hljs-keyword">this</span>.options.qiniu.bucket &#125;);</span><br><span class="line">                <span class="hljs-keyword">const</span> uploadToken = putPolicy.uploadToken(<span class="hljs-keyword">this</span>.mac);</span><br><span class="line">                <span class="hljs-keyword">const</span> config = <span class="hljs-keyword">new</span> qiniu.conf.Config();</span><br><span class="line">                config.zone = qiniu.zone.Zone_z1;</span><br><span class="line">                <span class="hljs-keyword">const</span> formUploader = <span class="hljs-keyword">new</span> qiniu.form_up.FormUploader()</span><br><span class="line">                <span class="hljs-keyword">const</span> putExtra = <span class="hljs-keyword">new</span> qiniu.form_up.PutExtra();</span><br><span class="line"><span class="hljs-comment">// 因为是批量上传，需要在最后将错误对象回调</span></span><br><span class="line">                <span class="hljs-keyword">let</span> globalError = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">              <span class="hljs-comment">// 遍历编译资源文件</span></span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> filename <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(compilation.assets)) &#123;</span><br><span class="line">                    <span class="hljs-comment">// 开始上传</span></span><br><span class="line">                    formUploader.putFile(</span><br><span class="line">                        uploadToken,</span><br><span class="line">                        <span class="hljs-keyword">this</span>.options.qiniu.keyPrefix + filename,</span><br><span class="line">                        path.resolve(compilation.outputOptions.path, filename),</span><br><span class="line">                        putExtra,</span><br><span class="line">                        (err) =&gt; &#123;</span><br><span class="line">                            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`uploade <span class="hljs-subst">$&#123;filename&#125;</span> result: <span class="hljs-subst">$&#123;err ? <span class="hljs-string">`Error:<span class="hljs-subst">$&#123;err.message&#125;</span>`</span> : <span class="hljs-string">'Success'</span>&#125;</span>`</span>)</span><br><span class="line">                            currentUploadedCount++;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">                                globalError = err;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (currentUploadedCount === uploadCount) &#123;</span><br><span class="line">                                globalError ? reject(globalError) : resolve();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = MyWebpackPlugin;</span><br></pre></td></tr></table></figure><p>Webpack中需要传递给该插件传递相关配置：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">    target: <span class="hljs-string">'node'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">        filename: <span class="hljs-string">'[name].js'</span>,</span><br><span class="line">      publicPath: <span class="hljs-string">'CDN域名'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="hljs-keyword">new</span> QiniuWebpackPlugin(&#123;</span><br><span class="line">            qiniu: &#123;</span><br><span class="line">                accessKey: <span class="hljs-string">'七牛AccessKey'</span>,</span><br><span class="line">                secretKey: <span class="hljs-string">'七牛SecretKey'</span>,</span><br><span class="line">                bucket: <span class="hljs-string">'static'</span>,</span><br><span class="line">                keyPrefix: <span class="hljs-string">'webpack-inaction/demo1/'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译完成后资源会自动上传到七牛CDN，这样前端只用交付index.html即可。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，Webpack相关常用知识和进阶知识都介绍完毕，需要各位读者在工作中去多加探索，Webpack配合Node.js生态，一定会涌现出更多优秀的新语言和新工具！</p><p><img src="https://static.ddhigh.com/blog/2020-03-11-060831.png" alt="0"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://static.ddhigh.com/blog/2020-03-18-032856.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Webpack通过Loader完成模块的转换工作，让“一切皆模块”成为可能。Plugin机制则让其更加灵活，可以在Webp
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(4)——编写自定义Loader</title>
    <link href="https//www.ddhigh.com/2020/03/11/webpack-loader-development.html"/>
    <id>https//www.ddhigh.com/2020/03/11/webpack-loader-development.html</id>
    <published>2020-03-11T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的内容中，我们学习了Webpack的基本知识、常用脚手架和性能优化，虽然说大部分的开发场景社区已经又成熟的模块给我们使用，但是遇到特殊情况还是需要自己有独立开发的能力，因此今天我们一起来学习如何编写自定义Loader。</p><h2 id="基本Loader"><a href="#基本Loader" class="headerlink" title="基本Loader"></a>基本Loader</h2><p>Webpack中loader是一个CommonJs风格的函数，接收输入的源码，通过同步或异步的方式替换源码后进行输出。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source, sourceMap, meta</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>source是输入的内容</li><li>sourceMap是可选的</li><li>meta是模块的元数据，也是可选的</li></ul><p>需要注意的是，该导出函数必须使用function，不能使用箭头函数，因为loader编写过程中会经常使用到<code>this</code>访问选项和其他方法。</p><p>我们先编写一个基本的Loader，完成的工作很简单，那就是把输出的字符串进行替换。</p><p>1.新建loader-example目录，执行npm初始化，并安装webpack</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir loader-example</span><br><span class="line"><span class="hljs-built_in">cd</span> loadeer-example</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli</span><br></pre></td></tr></table></figure><p>2.构建项目目录</p><figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|<span class="hljs-params">----loader</span> <span class="hljs-comment"># loader目录</span></span><br><span class="line">|<span class="hljs-params">----replace-loader</span>.js <span class="hljs-comment"># 替换字符串的Loader</span></span><br><span class="line">|<span class="hljs-params">----src</span>   <span class="hljs-comment"># 应用源码</span></span><br><span class="line">|<span class="hljs-params">----index</span>.js <span class="hljs-comment"># 首页</span></span><br><span class="line">|<span class="hljs-params">----package</span>.json</span><br><span class="line">|<span class="hljs-params">----webpack</span>.config.js</span><br></pre></td></tr></table></figure><p>3.编写loader/replace-loader.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> source.replace(<span class="hljs-regexp">/World/g</span>, <span class="hljs-string">'Loader'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本例中我们Loader只是简单的将源码中的”World“替换成了”Loader“。</p><p>4.编写src/index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello World'</span>);</span><br></pre></td></tr></table></figure><p>5.编写webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">  target: <span class="hljs-string">'node'</span>, <span class="hljs-comment">// 我们编译为Node.js环境下的JS，等下直接使用Node.js执行编译完成的文件</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">    filename: <span class="hljs-string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="hljs-string">'replace-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">  modules: [<span class="hljs-string">'./node_modules'</span>, <span class="hljs-string">'./loader'</span>] <span class="hljs-comment">// 配置loader的查找目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.编写package.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.执行构建</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>8.构建完成后，执行build/main.js</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node build/main.js</span><br></pre></td></tr></table></figure><p>此时终端输出如下，我们编写的Loader工作正常。</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Hello Loader</span></span><br></pre></td></tr></table></figure><h2 id="Loader选项"><a href="#Loader选项" class="headerlink" title="Loader选项"></a>Loader选项</h2><p>我们使用第三方loader时经常可以看到传递选项的情况：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">  use:[</span><br><span class="line">    &#123;</span><br><span class="line">      loader:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        plugins:[<span class="hljs-string">'@babel/transform-runtime'</span>],</span><br><span class="line">        presets:[<span class="hljs-string">'@babel/env'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Loader编写时，Webpack中官方推荐通过loader-utils来读取配置选项，我们需要先安装。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install loader-utils</span><br></pre></td></tr></table></figure><p>我们给刚才编写的replace-loader传递一个选项，允许自定义替换结果。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">'loader-utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">const</span> options = loaderUtils.getOptions(<span class="hljs-keyword">this</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> source.replace(<span class="hljs-regexp">/World/g</span>, options.text);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来编辑webpack.config.js，给replace-loader传递选项。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          &#123;</span><br><span class="line">            loader:<span class="hljs-string">'replace-loader'</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">              text: <span class="hljs-string">'Webpack4'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolveLoader:&#123;</span><br><span class="line">    modules: [<span class="hljs-string">'./node_modules'</span>, <span class="hljs-string">'./loader'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行构建之后用Node.js执行build/main.js，可以看到输出的内容已经发生变化了。</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Hello</span> Webpack4</span><br></pre></td></tr></table></figure><h2 id="异步Loader"><a href="#异步Loader" class="headerlink" title="异步Loader"></a>异步Loader</h2><p>在Loader中，如果存在异步调用，那么就无法直接通过return返回构建后的结果了，此时需要使用到Webpack提供的回调函数将数据进行回调。</p><p>Webpack4给Loader提供了<code>this.async()</code>函数，调用之后返回一个callback，callback的签名如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  err: Error|null,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  content: string|Buffer,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  sourceMap?:SourceMap,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  meta?: any</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"></span>)</span></span><br></pre></td></tr></table></figure><p>例如我们需要在loader中调用setTimeout进行等待，则相应的代码如下：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> callback = <span class="hljs-keyword">this</span>.async();</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> output = source.replace(<span class="hljs-regexp">/World/g</span>, <span class="hljs-string">'Webpack4'</span>);</span><br><span class="line">    callback(<span class="hljs-literal">null</span>, output);</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行构建，Webpack会等待一秒，然后再输出构建内容，通过Node.js执行构建后的文件，输出如下</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Hello</span> Webpack4</span><br></pre></td></tr></table></figure><h2 id="“Raw”-Loader"><a href="#“Raw”-Loader" class="headerlink" title="“Raw” Loader"></a>“Raw” Loader</h2><p>默认情况下，资源文件会被转化为 UTF-8 字符串，然后传给 loader。通过设置 <code>raw</code>，loader 可以接收原始的 <code>Buffer</code>。比如处理非文本文件时(如图片等等)。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">  assert(source <span class="hljs-keyword">instanceof</span> Buffer);</span><br><span class="line">  <span class="hljs-keyword">return</span> someSyncOperation(source);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">module</span>.exports.raw = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 设置当前Loader为raw loader, webpack会将原始的Buffer对象传入</span></span><br></pre></td></tr></table></figure><h2 id="读取loader配置文件"><a href="#读取loader配置文件" class="headerlink" title="读取loader配置文件"></a>读取loader配置文件</h2><p>babel-loader在使用时可以加载.babelrc配置文件来配置plugins和presets，减少了webpack.config.js的代码量，便于维护。接下来我们编写一个i18n-loader，通过读取语言配置文件完成语言转换。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|<span class="hljs-params">----loader</span></span><br><span class="line">|<span class="hljs-params">----i18n-loader</span>.js <span class="hljs-comment"># loader</span></span><br><span class="line">|<span class="hljs-params">----i18n</span></span><br><span class="line">|<span class="hljs-params">----zh</span>.json <span class="hljs-comment"># 中文语言包</span></span><br><span class="line">|<span class="hljs-params">----src</span></span><br><span class="line">|<span class="hljs-params">----index</span>.js <span class="hljs-comment"># 入口文件</span></span><br><span class="line">|<span class="hljs-params">----webpack</span>.config.js</span><br></pre></td></tr></table></figure><p>i18n/zh.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"hello"</span>: <span class="hljs-string">"你好"</span>,</span><br><span class="line">    <span class="hljs-attr">"today"</span>: <span class="hljs-string">"今天"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loader/i18n-loader.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">'loader-utils'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> options = loaderUtils.getOptions(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> locale = options ? options.locale : <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 读取语言配置文件</span></span><br><span class="line">    <span class="hljs-keyword">let</span> json = <span class="hljs-literal">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (locale) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> filename = path.resolve(__dirname, <span class="hljs-string">'..'</span>, <span class="hljs-string">'i18n'</span>, <span class="hljs-string">`<span class="hljs-subst">$&#123;locale&#125;</span>.json`</span>);</span><br><span class="line">        json = <span class="hljs-built_in">require</span>(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 读取语言标记 &#123;&#123;&#125;&#125;</span></span><br><span class="line">    <span class="hljs-keyword">const</span> matches = source.match(<span class="hljs-regexp">/\&#123;\&#123;\w+\&#125;\&#125;/g</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> match <span class="hljs-keyword">of</span> matches) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> name = match.match(<span class="hljs-regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/</span>)[<span class="hljs-number">1</span>].toLowerCase();</span><br><span class="line">        <span class="hljs-keyword">if</span> (json !== <span class="hljs-literal">null</span> &amp;&amp; json[name] !== <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">            source = source.replace(match, json[name]);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            source = source.replace(match, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'&#123;&#123;Hello&#125;&#125;, &#123;&#123;Today&#125;&#125; is a good day.'</span>);</span><br></pre></td></tr></table></figure><p>webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">        filename: <span class="hljs-string">'[name].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    target: <span class="hljs-string">'node'</span>,</span><br><span class="line">    <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="hljs-string">'i18n-loader'</span>,</span><br><span class="line">                        options: &#123; <span class="hljs-comment">// 传递选项</span></span><br><span class="line">                            locale: <span class="hljs-string">'zh'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolveLoader: &#123;</span><br><span class="line">        modules: [<span class="hljs-string">'./node_modules'</span>, <span class="hljs-string">'./loader'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行构建"><a href="#执行构建" class="headerlink" title="执行构建"></a>执行构建</h3><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="hljs-keyword">run</span><span class="hljs-bash"> build</span></span><br></pre></td></tr></table></figure><p>构建完毕后使用Node.js执行build/main.js输出如下：</p><figure class="highlight applescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好, 今天 <span class="hljs-keyword">is</span> a good <span class="hljs-built_in">day</span>.</span><br></pre></td></tr></table></figure><p>可以看到i18n-loader成功读取了配置文件。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文简要介绍了Webpack中如何编写一个自定义的loader，权当抛砖引玉，更多的用法等待读者在实际工作中去挖掘，要想掌握Webpack的高级知识，Loader是必不可少的技能，有时候如果社区找不到合适的Loader，大家可以根据需要自己进行开发。</p><p><img src="https://static.ddhigh.com/blog/2020-03-11-060831.png" alt="0"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前面的内容中，我们学习了Webpack的基本知识、常用脚手架和性能优化，虽然说大部分的开发场景社区已经又成熟的模块给我们使用，但是遇到特殊情况还是需要自己有独立开发的能力，因此今天我们一起来学习如何编写自定义Loader。&lt;/p&gt;
&lt;h2 id=&quot;基本Loader&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(3) ——性能优化</title>
    <link href="https//www.ddhigh.com/2020/03/06/webpack-optimize.html"/>
    <id>https//www.ddhigh.com/2020/03/06/webpack-optimize.html</id>
    <published>2020-03-06T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限定Webpack处理文件范围"><a href="#限定Webpack处理文件范围" class="headerlink" title="限定Webpack处理文件范围"></a>限定Webpack处理文件范围</h2><p>项目比较小的情况下Webpack的性能问题几乎可以忽略，但是一旦项目复杂度上升，Webpack会有额外的性能损失需要我们进行优化。</p><p>通过前面内容的学习我们可以知道Webpack主要干下面这些事情：</p><ol><li>通过entry指定的入口脚本进行依赖解析。</li><li>找到文件后通过配置的loader对其进行处理。</li></ol><p>因此，我们可以从这方面入手进行优化，减少Webpack搜索文件的范围，减少不必要的处理。</p><h3 id="loader配置"><a href="#loader配置" class="headerlink" title="loader配置"></a>loader配置</h3><p>在之前的内容中介绍过loader可以使用test、include、exclude配置项来匹配需要Loader处理的文件，因此推荐给每个loader定义test之后还定义include或exclude。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="hljs-string">'src'</span>), <span class="hljs-comment">// 只处理src目录下的js文件</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="resolve-extensions配置"><a href="#resolve-extensions配置" class="headerlink" title="resolve.extensions配置"></a>resolve.extensions配置</h3><p>导入未添加扩展名的模块时，Webpack会通过resolve.extensions后缀去检查文件是否存在。由于resolve.extensions是一个数组，如果数组项比较多，正确的后缀放置得越靠后，Webpack尝试次数就会越多，影响到性能。</p><p>因此配置resolve.extensions时需要遵守以下规则：</p><ul><li>尽量减少后缀列表，不要将不可能存在的文件后缀配置进来</li><li>出现频率越高的后缀尽量写到前面，比如可以将.js写在第一个</li><li>业务代码中导入模块时，可以手动加上后缀导入，省去Webpack查找过程</li></ul><h3 id="module-noParse配置"><a href="#module-noParse配置" class="headerlink" title="module.noParse配置"></a>module.noParse配置</h3><p>module.noParse可以告诉Webpack忽略未采用模块系统文件的处理，可以有效地提高性能。比如常见的jQuery非常大，又没有采用模块系统，让Webpack解析这类型文件完全是浪费性能。</p><p>因此我们可以配置如下的module.noParse:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">  noParse:[<span class="hljs-regexp">/jQuery/</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h2><p>在导入模块时，IgnorePlugin可以忽略指定模块的生成。比如moment.js在导入时会自动导入本地化文件，一般情况下几乎不使用而且又比较大，此时可以通过IgnorePlugin忽略对本地化文件的生成，减小文件大小。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.IgnorePlugin(<span class="hljs-regexp">/\.\/local/</span>, /moment/)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h2><p>使用过Windows操作系统的读者应该会经常看到以.dll扩展名的文件，这些文件叫做动态链接库，包含了其他程序或动态链接库的函数和数据。</p><p>Webpack的DllPlugin的思想是类似的，先将公共模块打包为独立的Dll模块，然后在业务代码中直接引用这些模块。采用DllPlugin之后会大大提升Webpack构建速度，原因在于，包含大量复用模块的动态链接库只需要编译一次，之后的构建中会直接引用这些构建好的模块。</p><p>在Webpack中使用动态链接库有以下两个步骤：</p><ol><li>通过webpack.DllPlugin插件打包出Dll库</li><li>通过webpack.DllReferencePlugin引用打包好的Dll库</li></ol><p>下面以React项目为例进行说明。</p><p>Dll库需要单独构建，因此我们需要一份单独的配置Webpack文件。</p><p>1.新建webpack.dll.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">entry:&#123;</span><br><span class="line">  react: [<span class="hljs-string">'react'</span>, <span class="hljs-string">'react-dom'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename: <span class="hljs-string">'_dll_[name].js'</span>, <span class="hljs-comment">// 输出的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出到dist目录</span></span><br><span class="line">    library: <span class="hljs-string">'_dll_[name]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-comment">// name要等于output.library里的name</span></span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="hljs-string">"_dll_[name]"</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="hljs-string">"dist"</span>, <span class="hljs-string">"manifest.json"</span>) <span class="hljs-comment">// 清单文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.编辑webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="hljs-string">'./src/main'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename: <span class="hljs-string">'[name].js'</span>, <span class="hljs-comment">// 输出的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出到dist目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-comment">// 传入manifest.json</span></span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="hljs-string">"dist"</span>, <span class="hljs-string">"manifest.json"</span>) <span class="hljs-comment">// 清单文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.添加构建命令</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>:&#123;</span><br><span class="line"> <span class="hljs-attr">"build-dll"</span>:<span class="hljs-string">"webpack --config webpack.dll.config.js"</span>,</span><br><span class="line">    <span class="hljs-attr">"build"</span>:<span class="hljs-string">"webpack"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.构建Dll</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build-dll</span><br></pre></td></tr></table></figure><p>5.构建应用</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><blockquote><p>Dll需要先构建，否则应用将构建失败</p></blockquote><h2 id="HappyPack"><a href="#HappyPack" class="headerlink" title="HappyPack"></a>HappyPack</h2><p>Webpack默认情况下是单进程执行的，因此无法利用多核优势，通过HappyPack可以变成多进程构建，从而提升构建速度。下面我们一起来看看如何使用happypack来加速构建。</p><p>1.安装happypack</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm isntall happypack</span><br></pre></td></tr></table></figure><p>2.编辑配置文件，需要将Loader配置到HappyPack插件中，由HappyPack对Loader进行调用。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> HappyPackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'happypack'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="hljs-string">'./src/main'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">    filename:<span class="hljs-string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'happypack/loader?id=js'</span>, <span class="hljs-comment">// 配置id为js</span></span><br><span class="line">        include:[</span><br><span class="line">          path.resolve(__dirname,<span class="hljs-string">'src'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.scss$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'happypack/loader?id=scss'</span>, <span class="hljs-comment">// 配置id为scss</span></span><br><span class="line">        include:[</span><br><span class="line">          path.resolve(__dirname,<span class="hljs-string">'src'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">        use:<span class="hljs-string">'happypack/loader?id=css'</span>, <span class="hljs-comment">// 配置id为css</span></span><br><span class="line">        include:[</span><br><span class="line">          path.resolve(__dirname,<span class="hljs-string">'src'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> HappyPackPlugin(&#123;</span><br><span class="line">      id:<span class="hljs-string">'js'</span>, <span class="hljs-comment">// id为js的loader配置</span></span><br><span class="line">      use:[</span><br><span class="line">        &#123;</span><br><span class="line">          loader:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            plugins:[<span class="hljs-string">'@babel/transform-runtime'</span>],</span><br><span class="line">            presets:[<span class="hljs-string">'@babel/env'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="hljs-keyword">new</span> HappyPackPlugin(&#123;</span><br><span class="line">      id:<span class="hljs-string">'scss'</span>, <span class="hljs-comment">// id为scss的loader配置</span></span><br><span class="line">      use:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>,<span class="hljs-string">'sass-loader'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="hljs-keyword">new</span> HappyPackPlugin(&#123;</span><br><span class="line">      id:<span class="hljs-string">'css'</span>, <span class="hljs-comment">// id为css的loader配置</span></span><br><span class="line">      use:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree-Shaking"></a>Tree-Shaking</h2><p>Tree-Shaking原始的本意是”摇动树“，这样就会将一些分支”摇掉“，从而减少主干大小。而Webpack中的Tree-Shaking是类似的，在Webpack项目中，有一个入口文件，相当于树的主干，入口文件又依赖了许多模块。实际开发中，虽然依赖了某个模块，但其实只使用了其中的部分代码，通过Tree-Shaking，可以将模块中未使用的代码剔除掉，从而减少构建结果的大小。</p><blockquote><p>注意：只有使用ES6模块系统的代码，在mode为production时，Tree-Shaking才会生效。因此，在编写代码时尽量使用import/export的方式。</p></blockquote><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><p>在开发中，我们一般会将业务代码打包为app.js，其他第三方依赖打包为vendor.js。这样会有一个比较大的问题，如果依赖的第三方模块过多，vendor.js会越来越大，而在浏览器加载时需要完全加载完vendor.js才可以，这样就会造成无谓的等待，因为我们当前页面可能只使用了一部分代码。此时可以使用Webpack来实现按需加载，只有在真正用到这个模块时才会加载相应的js。</p><p>比如基于echarts开发了一个数据可视化页面，可以在这个路由组件下面使用异步的方式加载echarts的代码：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span>(<span class="hljs-string">'echarts'</span>).then(<span class="hljs-function"><span class="hljs-params">modules</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> echarts = modules.default;</span><br><span class="line">  <span class="hljs-keyword">const</span> chart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#chart'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过使用按需加载时，构建代码中会包含Promise调用，因此低版本浏览器需要注入Promise的polyfill实现。</p><h2 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h2><p>Webpack4中可以将多个公共模块打包一份，减少代码冗余，Webpack4之前的版本是使用webpack内置的CommonsChunkPlugin实现的，Webpack4直接配置<code>optimization</code>即可。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    splitChunks:&#123;</span><br><span class="line">      cacheGroups:&#123;</span><br><span class="line">        common:&#123; <span class="hljs-comment">// 应用代码中公共模块</span></span><br><span class="line">          chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">          <span class="hljs-comment">// 最小公共模块引用次数</span></span><br><span class="line">          minChunks: <span class="hljs-number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        vendor:&#123; <span class="hljs-comment">// node_modules中第三方模块</span></span><br><span class="line">test: <span class="hljs-regexp">/node_modules/</span>,</span><br><span class="line">          chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">          minChunks: <span class="hljs-number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三方库代码的变更一般比较少(通过package.json的版本可以指定依赖版本)，因此构建出来的vendor.js基本不会变就可以利用浏览器的缓存机制进行缓存。</p><p>而应用代码的变更是比较频繁的，因此单独打包为common.js，浏览器可以单独缓存，如果应用代码发生变更，浏览器只用重新下载common.js文件，而不用重新下载vendor.js。</p><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>HMR(Hot Module Replacement)是Webpack提供的常用功能之一，它允许在运行时对模块进行修改，而无需刷新整个页面(LiveReload需要刷新页面才能加载)，这样有以下优势：</p><ul><li>保留应用状态，比如使用Vue/React时如果使用LiveReload，组件状态全部丢失，而HMR不会</li><li>只更新变更的内容，节省开发时间</li></ul><p>使用以下配置即可打开内置的HMR功能：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">    hot: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用热加载</span></span><br><span class="line">    contentBase: <span class="hljs-string">'./dist'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line"><span class="hljs-keyword">new</span> webpack.NamedModulesPlugin(), <span class="hljs-comment">// 打印更新的模块路径</span></span><br><span class="line">    <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="hljs-comment">// 热更新插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文我们对Webpack4最常用的性能优化技术进行了学习，这些优化方法对业务代码的侵入性非常小（只有按需加载优化会要求使用import()函数进行加载），在实际的开发中，可以结合这些技术进行针对性的优化，比如开发时编译慢，可能就需要使用HappyPack插件进行多进程编译以加快编译速度等等。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;限定Webpack处理文件范围&quot;&gt;&lt;a href=&quot;#限定Webpack处理文件范围&quot; class=&quot;headerlink&quot; title=&quot;限定Webpack处理文件范围&quot;&gt;&lt;/a&gt;限定Webpack处理文件范围&lt;/h2&gt;&lt;p&gt;项目比较小的情况下Webpack的性
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4不求人(2) ——手把手搭建TypeScript+React16+ReactRouter5同构应用脚手架</title>
    <link href="https//www.ddhigh.com/2020/03/02/react-ssr-example.html"/>
    <id>https//www.ddhigh.com/2020/03/02/react-ssr-example.html</id>
    <published>2020-03-02T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同构应用"><a href="#同构应用" class="headerlink" title="同构应用"></a>同构应用</h2><p>使用同一份应用代码，同时提供浏览器环境和服务器环境下的应用，解决传统浏览器单页应用的两个顽固问题：</p><ul><li>不利于SEO，浏览器环境代码是在客户端渲染，大部分爬虫都只能爬到一个空白的入口文件</li><li>代码在浏览器渲染，低端机可能会卡顿</li></ul><p>接下来我们一起从零开始搭建基于Webpack的React同构应用脚手架。</p><h2 id="SSR流程"><a href="#SSR流程" class="headerlink" title="SSR流程"></a>SSR流程</h2><ol><li>Web应用构建完成后输出CSS、JS和HTML</li><li>SSR应用构建完成后输出一个CommonJs模块文件，可以将虚拟DOM在服务端渲染为HTML字符串</li><li>Node.js新建HTTP服务器，收到请求后调用SSR模块导出的render函数输出HTML到客户端</li></ol><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-ssr-example</span><br><span class="line"><span class="hljs-built_in">cd</span> react-ssr-example</span><br><span class="line">yarn init -y</span><br><span class="line"></span><br><span class="line">yarn add webpack webpack-cli webpack-dev-server -D <span class="hljs-comment"># 安装Webpack</span></span><br><span class="line">yarn add react react-dom react-router-dom <span class="hljs-comment"># 安装React</span></span><br><span class="line">yarn add @types/react @types/react-dom @types/react-router-dom -D <span class="hljs-comment"># 安装React声明文件</span></span><br><span class="line">yarn add express <span class="hljs-comment"># 安装express</span></span><br><span class="line">yarn add css-loader sass-loader node-sass mini-css-extract-plugin <span class="hljs-comment"># 安装CSS相关模块</span></span><br><span class="line">yarn add ts-loader typescript <span class="hljs-comment"># 安装TypeScript</span></span><br><span class="line">yarn add html-webpack-plugin <span class="hljs-comment"># 安装HTML处理插件</span></span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>脚手架的完整目录如下：(这些文件一步步都会有)</p><figure class="highlight dsconfig hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">|--<span class="hljs-built_in">--build</span> <span class="hljs-comment"># 构建结果目录</span></span><br><span class="line">|--<span class="hljs-built_in">--styles</span> <span class="hljs-comment"># 样式</span></span><br><span class="line">|--<span class="hljs-built_in">--main.css</span></span><br><span class="line"><span class="hljs-built_in"></span>|--<span class="hljs-built_in">--bundle.ssr.js</span> <span class="hljs-comment"># SSR应用文件</span></span><br><span class="line">|--<span class="hljs-built_in">--bundle.web.js</span> <span class="hljs-comment"># Web应用文件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.html</span> <span class="hljs-comment"># Web应用入口HTML</span></span><br><span class="line">|--<span class="hljs-built_in">--src</span> <span class="hljs-comment"># 应用源码</span></span><br><span class="line">|--<span class="hljs-built_in">--home</span> <span class="hljs-comment"># 首页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.scss</span> <span class="hljs-comment"># 首页SCSS</span></span><br><span class="line">|--<span class="hljs-built_in">--index.tsx</span> <span class="hljs-comment"># 首页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--signin</span> <span class="hljs-comment"># 登录页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.scss</span> <span class="hljs-comment"># 登录页SCSS</span></span><br><span class="line">|--<span class="hljs-built_in">--index.tsx</span> <span class="hljs-comment"># 登录页组件</span></span><br><span class="line">|--<span class="hljs-built_in">--App.tsx</span> <span class="hljs-comment"># 应用路由设置</span></span><br><span class="line">|--<span class="hljs-built_in">--index.html</span> <span class="hljs-comment"># Web应用入口HTML</span></span><br><span class="line">|--<span class="hljs-built_in">--main.ssr.tsx</span> <span class="hljs-comment"># SSR入口文件</span></span><br><span class="line">|--<span class="hljs-built_in">--main.web.tsx</span> <span class="hljs-comment"># Web入口文件</span></span><br><span class="line">|--<span class="hljs-built_in">--index.js</span> <span class="hljs-comment">#　express服务器入口</span></span><br><span class="line">|--<span class="hljs-built_in">--package.json</span></span><br><span class="line"><span class="hljs-built_in">|----tsconfig.json</span> <span class="hljs-comment"># TypeScript配置文件</span></span><br><span class="line">|--<span class="hljs-built_in">--webpack.config.js</span> <span class="hljs-comment"># Web应用webpack配置</span></span><br><span class="line">|--<span class="hljs-built_in">--webconfig.ssr.config.js</span> <span class="hljs-comment"># SSR应用Webpack配置</span></span><br></pre></td></tr></table></figure><h2 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h2><p>1.TypeScript配置，新建tsconfig.json</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"compilerOptions"</span>: &#123;</span><br><span class="line">      <span class="hljs-attr">"target"</span>: <span class="hljs-string">"es5"</span>, </span><br><span class="line">      <span class="hljs-attr">"module"</span>: <span class="hljs-string">"commonjs"</span>, </span><br><span class="line">      <span class="hljs-attr">"jsx"</span>: <span class="hljs-string">"react"</span>, </span><br><span class="line">      <span class="hljs-attr">"strict"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">      <span class="hljs-attr">"lib"</span>: [</span><br><span class="line">        <span class="hljs-string">"DOM"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="hljs-attr">"esModuleInterop"</span>: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"include"</span>: [</span><br><span class="line">      <span class="hljs-string">"./src/**/*.ts"</span>,</span><br><span class="line">      <span class="hljs-string">"./src/**/*.tsx"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"exclude"</span>: [</span><br><span class="line">      <span class="hljs-string">"node_modules"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主要是添加了jsx设置和include设置</p><p>2.Web环境webpack配置，新建webpack.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> MiniCssPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/main.web'</span>, <span class="hljs-comment">// 入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>), <span class="hljs-comment">// 输出目录</span></span><br><span class="line">        filename: <span class="hljs-string">'bundle.web.js'</span> <span class="hljs-comment">// 输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.tsx?$/</span>, <span class="hljs-comment">// ts文件处理</span></span><br><span class="line">                use: <span class="hljs-string">'ts-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.scss$/</span>, <span class="hljs-comment">// scss文件处理</span></span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'sass-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">// css文件处理</span></span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            chunks: [<span class="hljs-string">'main'</span>], <span class="hljs-comment">// chunk名称，entry是字符串类型，因此chunk为main</span></span><br><span class="line">            filename: <span class="hljs-string">'index.html'</span>, <span class="hljs-comment">// 输出到build目录的文件名</span></span><br><span class="line">            template: <span class="hljs-string">'src/index.html'</span> <span class="hljs-comment">// 模板路径</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">            filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>, <span class="hljs-comment">// 输出的CSS文件名</span></span><br><span class="line">            chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="hljs-string">'.ts'</span>, <span class="hljs-string">'.tsx'</span>, <span class="hljs-string">'.js'</span>, <span class="hljs-string">'.json'</span>] <span class="hljs-comment">// 添加ts和tsx后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.SSR环境Webpack配置，新建webpack.ssr.config.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> MiniCssPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/main.ssr'</span>,</span><br><span class="line">    target: <span class="hljs-string">'node'</span>, <span class="hljs-comment">// 必须指定为Node.js，否则会打包Node.js内置模块</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'build'</span>),</span><br><span class="line">        filename: <span class="hljs-string">'bundle.ssr.js'</span>,</span><br><span class="line">        libraryTarget: <span class="hljs-string">'commonjs2'</span> <span class="hljs-comment">// 打包为CommonJs模块才能被Node.js加载</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.tsx?$/</span>,</span><br><span class="line">                use: <span class="hljs-string">'ts-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.scss$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'sass-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">            filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="hljs-string">'.ts'</span>, <span class="hljs-string">'.tsx'</span>, <span class="hljs-string">'.js'</span>, <span class="hljs-string">'.json'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.package.json添加npm命令</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"webpack"</span>,</span><br><span class="line">    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"webpack-dev-server"</span>,</span><br><span class="line">    <span class="hljs-attr">"build-ssr"</span>: <span class="hljs-string">"webpack --config webpack.ssr.config.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用编码"><a href="#应用编码" class="headerlink" title="应用编码"></a>应用编码</h2><p>src/home/index.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &apos;./index.scss&apos;;</span><br><span class="line"></span><br><span class="line">export default class Home extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;main&quot;&gt;首页&lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/home/index.scss</p><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/signin/index.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; withRouter &#125; from &apos;react-router-dom&apos;;</span><br><span class="line"></span><br><span class="line">function SignIn(props: any) &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; props.history.replace(&apos;/&apos;)&#125;&gt;登录&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">export default withRouter(SignIn);</span><br></pre></td></tr></table></figure><p>src/App.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; Switch, Route, Link &#125; from &apos;react-router-dom&apos;; // router</span><br><span class="line"></span><br><span class="line">// 导入页面组件</span><br><span class="line">import Home from &apos;./home&apos;;</span><br><span class="line">import SignIn from &apos;./signin&apos;;</span><br><span class="line"></span><br><span class="line">// 导出路由组件配置</span><br><span class="line">export default function App() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=&quot;/signin&quot; component=&#123;SignIn&#125; /&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src/main.ssr.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; StaticRouter, Link &#125; from &apos;react-router-dom&apos;;</span><br><span class="line">import &#123; renderToString &#125; from &apos;react-dom/server&apos;;</span><br><span class="line">import App from &apos;./App&apos;; // 将路由组件导入进来</span><br><span class="line"></span><br><span class="line">export function render(req: any) &#123; // 导出一个渲染函数，根据请求链接进行分发</span><br><span class="line">    const context = &#123;&#125;;</span><br><span class="line">    const html = renderToString(</span><br><span class="line">        &lt;StaticRouter location=&#123;req.url&#125; context=&#123;context&#125;&gt;</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;nav&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;Link to=&quot;/signin&quot;&gt;登录&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/nav&gt;</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;/StaticRouter&gt;</span><br><span class="line">    );</span><br><span class="line">    return [html, context]; // 导出context和html渲染结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/main.web.tsx</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &#123; BrowserRouter, Link &#125; from &apos;react-router-dom&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render( // 渲染路由</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;&lt;Link to=&quot;/signin&quot;&gt;登录&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;, document.querySelector(&apos;#app&apos;))</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>); <span class="hljs-comment">// 加载express</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; render &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./build/bundle.ssr'</span>); <span class="hljs-comment">// 加载ssr</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="hljs-string">'.'</span>)) <span class="hljs-comment">// 静态资源配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/*'</span>, (req, res) =&gt; &#123; <span class="hljs-comment">// 所有请求都走这里处理，必须加*</span></span><br><span class="line">    <span class="hljs-keyword">const</span> [html, context] = render(req)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(context) <span class="hljs-comment">// context目前没发现啥用处</span></span><br><span class="line">    res.send(<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;html&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;head&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;title&gt;SSR&lt;/title&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;link href="build/styles/main.8f173ff5.css" rel="stylesheet"&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/head&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;body&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;div id="app"&gt;<span class="hljs-subst">$&#123;html&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;script src="build/bundle.web.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/body&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/html&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(context)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="hljs-number">8080</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>静态资源配置必须在最上面</li><li>app.get(‘/<em>‘)必须有</em>号</li><li>HTML字符串必须手动引入CSS和Web构建结果</li></ul><h2 id="执行构建"><a href="#执行构建" class="headerlink" title="执行构建"></a>执行构建</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run build <span class="hljs-comment"># 构建Web</span></span><br><span class="line">npm run build-ssr <span class="hljs-comment">#　构建SSR</span></span><br><span class="line">node index.js <span class="hljs-comment"># 启动Express服务器</span></span><br></pre></td></tr></table></figure><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>首页样式</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093301.png" alt="image-20200302173258430"></p><p>首页代码</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093323.png" alt="image-20200302173322601"></p><p>登录页样式</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093346.png" alt="image-20200302173344488"></p><p>登录页代码</p><p><img src="https://static.ddhigh.com/blog/2020-03-02-093408.png" alt="image-20200302173405907"></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p>Https://github.com/xialeistudio/react-ssr-example</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同构应用&quot;&gt;&lt;a href=&quot;#同构应用&quot; class=&quot;headerlink&quot; title=&quot;同构应用&quot;&gt;&lt;/a&gt;同构应用&lt;/h2&gt;&lt;p&gt;使用同一份应用代码，同时提供浏览器环境和服务器环境下的应用，解决传统浏览器单页应用的两个顽固问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本快速入门(2)</title>
    <link href="https//www.ddhigh.com/2020/02/11/shell-operator-flow-control.html"/>
    <id>https//www.ddhigh.com/2020/02/11/shell-operator-flow-control.html</id>
    <published>2020-02-11T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来学习Shell的运算符和流程控制。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Shell和其他编程语言一样支持多种运算符，包括：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>下面我们一起来看看。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>原生bash不支持简单的数学运算，需要借助expr命令。</p></blockquote><p>例如，输出两个数的和：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum=`expr 1 + 1`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span></span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>操作数和操作符之间必须用空格分开；</p><p>表达式必须使用反引号包裹；</p></blockquote><table><thead><tr><th>操作符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>expr 1 + 1</td></tr><tr><td>-</td><td>减法</td><td>expr 1 - 1</td></tr><tr><td>*</td><td>乘法</td><td>expr 1 \<em> 1 需要转义</em>号</td></tr><tr><td>/</td><td>除法</td><td>expr 1 / 1</td></tr><tr><td>%</td><td>取余</td><td>expr 2 % 2</td></tr></tbody></table><p>完整示例如下：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="hljs-comment"># 加法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 减法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> - <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>-<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 乘法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> \* <span class="hljs-variable">$b</span>` <span class="hljs-comment"># 必须转义</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>*<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 除法</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> / <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>/<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 取余</span></span><br><span class="line">val=`expr <span class="hljs-variable">$a</span> % <span class="hljs-variable">$b</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>%<span class="hljs-variable">$b</span>=<span class="hljs-variable">$val</span>"</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符是比较两个操作数的数学大小关系，支持数字和数字字符串(如”1”)</p><table><thead><tr><th>运算符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>-eq</td><td>检测两数是否相等</td><td>[ <code>$a -eq $b</code> ]</td></tr><tr><td>-ne</td><td>检测两数是否不等</td><td>[ <code>$a -ne $b</code> ]</td></tr><tr><td>-gt</td><td>检查左边是否大于右边(greater than)</td><td>[ <code>$a -gt $b</code> ]</td></tr><tr><td>-lt</td><td>检查左边是否小于右边(less than)</td><td>[ <code>$a -lt $b</code> ]</td></tr><tr><td>-ge</td><td>检查左边是否大于等于右边</td><td>[ <code>$a -ge $b</code> ]</td></tr><tr><td>-le</td><td>检查左边是否小于等于右边</td><td>[ <code>$a -le $b</code> ]</td></tr><tr><td>==</td><td>判断两数是否相等</td><td>[ <code>$a == $b</code> ]</td></tr><tr><td>!=</td><td>判断两数是否不想等</td><td>[ <code>$a != $b</code> ]</td></tr></tbody></table><p>下面是一个if比较的示例，if语法将在本文介绍流程控制的时候进行详细学习。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -eq <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>=<span class="hljs-variable">$b</span>"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>!=<span class="hljs-variable">$b</span>"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符就是与(AND)、或(OR)、非(NOT)。</p><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>!</td><td>逻辑非</td><td>[ !false]返回true</td></tr><tr><td>-o</td><td>逻辑或</td><td>[ <code>$a -gt 0 -o $b -gt 0</code>] 当a和b有一个大于0时返回true</td></tr><tr><td>-a</td><td>逻辑与</td><td>[ <code>$a -gt 0 -a $b -gt 0</code> ]当a和b都大于0时返回true</td></tr></tbody></table><p>下面是结合关系运算符的例子：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"1!=2"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"1=2"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt 0 -o <span class="hljs-variable">$b</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a或b大于0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a和b都不大于0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt 0 -a <span class="hljs-variable">$b</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a和b都大于0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"a和b不都大于0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>Shell被常用来处理字符串数据，因此有一些专门适用于字符串的运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>检查两个字符串是否相等</td><td>[ <code>$a = $b</code> ]</td></tr><tr><td>!=</td><td>检查两个字符串是否不想等</td><td>[ <code>$a != $b</code> ]</td></tr><tr><td>-z</td><td>检查字符串长度是否为0</td><td>[ <code>-z $a</code> ]</td></tr><tr><td>-n</td><td>检查字符串长度是否不为0</td><td>[ <code>-n $a</code> ]</td></tr><tr><td>$</td><td>检查字符串是否为空</td><td>[ <code>$a</code> ]</td></tr></tbody></table><p>下面是一些示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="hljs-string">"hello"</span></span><br><span class="line">b=<span class="hljs-string">"world"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> = <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>和<span class="hljs-variable">$b</span>相同"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>和<span class="hljs-variable">$b</span>不同"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$a</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度为0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度不为0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -n <span class="hljs-variable">$a</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度不为0"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>长度为0"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>不为空"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$a</span>为空"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测文件的各种状态。下表列出了常用的文件测试运算符。</p><table><thead><tr><th>操作符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>-d file</td><td>检查文件是否是目录</td><td>[ <code>-d $file</code> ]</td></tr><tr><td>-f file</td><td>检查文件是否是普通文件(不是目录，也不是块设备文件)</td><td>[ <code>-f $file</code>]</td></tr><tr><td>-r file</td><td>检查文件是否可读</td><td>[ <code>-r $file</code> ]</td></tr><tr><td>-w file</td><td>检查文件是否可写</td><td>[ <code>-w $file</code> ]</td></tr><tr><td>-x file</td><td>检查文件是否可执行</td><td>[ <code>-x $file</code> ]</td></tr><tr><td>-s file</td><td>检查文件大小是否为0</td><td>[ <code>-s $file</code> ]</td></tr><tr><td>-e file</td><td>检查文件或文件夹是否存在</td><td>[ <code>-e $file</code> ]</td></tr><tr><td>-S</td><td>检查文件是否是Socket文件</td><td>[ <code>-S $file</code> ]</td></tr><tr><td>-L</td><td>检查文件是否存在且是一个符号链接</td><td>[ <code>-L $file</code> ]</td></tr></tbody></table><p>下面是一些示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">file=<span class="hljs-string">"/etc/passwd"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$file</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>是目录"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>不是目录"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$file</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>是普通文件"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>不是普通文件"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ -e <span class="hljs-variable">$file</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>存在"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$file</span>不存在"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>Shell的流程控制也包含判断和循环，我们一起来学习一下。</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if/else"></a>if/else</h3><p>语法</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> condition</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"> 语句1</span><br><span class="line"> 语句2</span><br><span class="line"> ...</span><br><span class="line"> 语句N</span><br><span class="line"><span class="hljs-keyword">elif</span> condition2</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line"> 语句1</span><br><span class="line"> 语句2</span><br><span class="line"> ...</span><br><span class="line"> 语句N</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"> 语句1</span><br><span class="line"> 语句2</span><br><span class="line"> ...</span><br><span class="line"> 语句N</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>elif和else分支是可以省略的</p></li><li><p>if/fi 需要配对</p></li></ul></blockquote><p>下面是一些示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"a = b"</span></span><br><span class="line"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"a &gt; b"</span></span><br><span class="line"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"a &lt; b"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"所有条件都不匹配"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>do/done需要配对</li><li>in列表支持文件列表、字符串、数字和其他数组数据</li></ul></blockquote><p>下面是循环输出<code>/etc</code>下文件和目录的示例：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> `ls /etc`</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$dir</span>"</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span> condition</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=1</span><br><span class="line"><span class="hljs-keyword">while</span>(( <span class="hljs-variable">$c</span>&lt;=10 ))</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$c</span></span><br><span class="line">c=`expr <span class="hljs-variable">$c</span> + 1`</span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> 值 <span class="hljs-keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line">;;</span><br><span class="line">模式2)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">语句N</span><br><span class="line">;;</span><br><span class="line">easc</span><br></pre></td></tr></table></figure><blockquote><ul><li>模式匹配之后不会再执行其他模式语句(不需要手动break)</li><li>case/easc 必须配对</li><li>每个模式语句的末尾必须添加两个分号</li><li>使用*号捕获其他模式</li></ul></blockquote><p>如下是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'输入星期几'</span></span><br><span class="line"><span class="hljs-built_in">read</span> day</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-variable">$day</span> <span class="hljs-keyword">in</span></span><br><span class="line">1)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"星期一"</span></span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"星期二"</span></span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"输入的数字无效"</span></span><br><span class="line">;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>read是从标准输入读取一行赋值给指定变量</li></ul></blockquote><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出循环体。下面是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> n</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">sum=`expr <span class="hljs-variable">$sum</span> + <span class="hljs-variable">$n</span>`</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">break</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令允许跳过本次循环，直接进行下一轮循环。下面是一个示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> n</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n</span> -gt 0 ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">sum=`expr <span class="hljs-variable">$sum</span> + <span class="hljs-variable">$n</span>`</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">continue</span> <span class="hljs-comment"># 本次输入不合法，跳过，</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><p>结合今日所学，我们用Shell来打印一个九九乘法表：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le 9 ] <span class="hljs-comment"># i &lt;= 9</span></span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">j=1</span><br><span class="line"><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$j</span> -le 9 ] <span class="hljs-comment"># j &lt;= 9</span></span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -ge <span class="hljs-variable">$j</span> ] <span class="hljs-comment"># if($i &gt;= $j)</span></span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">val=`expr <span class="hljs-variable">$i</span> \* <span class="hljs-variable">$j</span>`</span><br><span class="line"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">"<span class="hljs-variable">$j</span>*<span class="hljs-variable">$i</span>=<span class="hljs-variable">$val</span> "</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line">j=`expr <span class="hljs-variable">$j</span> + 1` <span class="hljs-comment"># j++</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br><span class="line"><span class="hljs-built_in">echo</span></span><br><span class="line">i=`expr <span class="hljs-variable">$i</span> + 1` <span class="hljs-comment"># i++</span></span><br><span class="line"><span class="hljs-keyword">done</span></span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">1</span>=<span class="hljs-number">1</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">2</span>=<span class="hljs-number">2</span> <span class="hljs-number">2</span>*<span class="hljs-number">2</span>=<span class="hljs-number">4</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">3</span>=<span class="hljs-number">3</span> <span class="hljs-number">2</span>*<span class="hljs-number">3</span>=<span class="hljs-number">6</span> <span class="hljs-number">3</span>*<span class="hljs-number">3</span>=<span class="hljs-number">9</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">4</span>=<span class="hljs-number">4</span> <span class="hljs-number">2</span>*<span class="hljs-number">4</span>=<span class="hljs-number">8</span> <span class="hljs-number">3</span>*<span class="hljs-number">4</span>=<span class="hljs-number">12</span> <span class="hljs-number">4</span>*<span class="hljs-number">4</span>=<span class="hljs-number">16</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">5</span>=<span class="hljs-number">5</span> <span class="hljs-number">2</span>*<span class="hljs-number">5</span>=<span class="hljs-number">10</span> <span class="hljs-number">3</span>*<span class="hljs-number">5</span>=<span class="hljs-number">15</span> <span class="hljs-number">4</span>*<span class="hljs-number">5</span>=<span class="hljs-number">20</span> <span class="hljs-number">5</span>*<span class="hljs-number">5</span>=<span class="hljs-number">25</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">6</span>=<span class="hljs-number">6</span> <span class="hljs-number">2</span>*<span class="hljs-number">6</span>=<span class="hljs-number">12</span> <span class="hljs-number">3</span>*<span class="hljs-number">6</span>=<span class="hljs-number">18</span> <span class="hljs-number">4</span>*<span class="hljs-number">6</span>=<span class="hljs-number">24</span> <span class="hljs-number">5</span>*<span class="hljs-number">6</span>=<span class="hljs-number">30</span> <span class="hljs-number">6</span>*<span class="hljs-number">6</span>=<span class="hljs-number">36</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">7</span>=<span class="hljs-number">7</span> <span class="hljs-number">2</span>*<span class="hljs-number">7</span>=<span class="hljs-number">14</span> <span class="hljs-number">3</span>*<span class="hljs-number">7</span>=<span class="hljs-number">21</span> <span class="hljs-number">4</span>*<span class="hljs-number">7</span>=<span class="hljs-number">28</span> <span class="hljs-number">5</span>*<span class="hljs-number">7</span>=<span class="hljs-number">35</span> <span class="hljs-number">6</span>*<span class="hljs-number">7</span>=<span class="hljs-number">42</span> <span class="hljs-number">7</span>*<span class="hljs-number">7</span>=<span class="hljs-number">49</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">8</span>=<span class="hljs-number">8</span> <span class="hljs-number">2</span>*<span class="hljs-number">8</span>=<span class="hljs-number">16</span> <span class="hljs-number">3</span>*<span class="hljs-number">8</span>=<span class="hljs-number">24</span> <span class="hljs-number">4</span>*<span class="hljs-number">8</span>=<span class="hljs-number">32</span> <span class="hljs-number">5</span>*<span class="hljs-number">8</span>=<span class="hljs-number">40</span> <span class="hljs-number">6</span>*<span class="hljs-number">8</span>=<span class="hljs-number">48</span> <span class="hljs-number">7</span>*<span class="hljs-number">8</span>=<span class="hljs-number">56</span> <span class="hljs-number">8</span>*<span class="hljs-number">8</span>=<span class="hljs-number">64</span> </span><br><span class="line"><span class="hljs-number">1</span>*<span class="hljs-number">9</span>=<span class="hljs-number">9</span> <span class="hljs-number">2</span>*<span class="hljs-number">9</span>=<span class="hljs-number">18</span> <span class="hljs-number">3</span>*<span class="hljs-number">9</span>=<span class="hljs-number">27</span> <span class="hljs-number">4</span>*<span class="hljs-number">9</span>=<span class="hljs-number">36</span> <span class="hljs-number">5</span>*<span class="hljs-number">9</span>=<span class="hljs-number">45</span> <span class="hljs-number">6</span>*<span class="hljs-number">9</span>=<span class="hljs-number">54</span> <span class="hljs-number">7</span>*<span class="hljs-number">9</span>=<span class="hljs-number">63</span> <span class="hljs-number">8</span>*<span class="hljs-number">9</span>=<span class="hljs-number">72</span> <span class="hljs-number">9</span>*<span class="hljs-number">9</span>=<span class="hljs-number">81</span></span><br></pre></td></tr></table></figure><p>今天的内容是Shell中比较重要的，也是最常用的语法。下一篇将对Shell的输入输出进行学习。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p><p>(未完待续)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来学习Shell的运算符和流程控制。&lt;/p&gt;
&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;p&gt;Shell和其他编程语言一样支持多种运算符，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="devtools" scheme="https//www.ddhigh.com/categories/devtools/"/>
    
    
      <category term="shell" scheme="https//www.ddhigh.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本快速入门(1)</title>
    <link href="https//www.ddhigh.com/2020/02/10/shell-quickstart.html"/>
    <id>https//www.ddhigh.com/2020/02/10/shell-quickstart.html</id>
    <published>2020-02-10T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>Shell 是一个用 C 语言编写的程序，用户可以通过Shell脚本语言来进行程序开发。与其他脚本语言不同，Shell脚本所需的解释器一般是内置在操作系统的，而像Node.js、PHP等脚本语言需要手动安装解释器程序才可以。</p><p>接下来将和大家一起来学习Shell脚本编程。</p><h2 id="Shell解释器"><a href="#Shell解释器" class="headerlink" title="Shell解释器"></a>Shell解释器</h2><p>Shell解释器种类众多，笔者的电脑上内置以下Shell:</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-regexp">/bin/</span>bash</span><br><span class="line"><span class="hljs-regexp">/bin/</span>csh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>ksh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>sh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>tcsh</span><br><span class="line"><span class="hljs-regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure><p>其中bash和sh是最常见的Shell解释器，一般情况下，这两种Shell没有区别，本文以bash为例。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>打开文本编辑器(vim或者vscode)，新建文件 <strong>hello.sh</strong>，扩展名为sh(常用)。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello World!"</span></span><br></pre></td></tr></table></figure><p>第1行用来指明本脚本需要使用什么解释器来执行。<code>#!</code>是一个约定的语法。</p><p><code>echo</code>用来输出文本。</p><h2 id="执行Shell脚本"><a href="#执行Shell脚本" class="headerlink" title="执行Shell脚本"></a>执行Shell脚本</h2><p>有两种方法可以执行Shell脚本：</p><ol><li>作为可执行程序。给脚本添加可执行权限之后执行即可。</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./hello.sh <span class="hljs-comment"># 添加可执行权限</span></span><br><span class="line">./hello.sh <span class="hljs-comment"># 执行脚本</span></span><br></pre></td></tr></table></figure><ol start="2"><li>作为解释器脚本。直接运行指定的解释器程序，并将脚本路径传入，本方式不要求脚本有可执行权限。</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash hello.sh <span class="hljs-comment"># 使用/bin/bash来执行hello.sh</span></span><br></pre></td></tr></table></figure><h2 id="Shell语法"><a href="#Shell语法" class="headerlink" title="Shell语法"></a>Shell语法</h2><p>和其他编程语言一样，Shell脚本也有自己的一套语法规则，我们现在来系统学习一下。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p>定义变量时，变量名不加美元符号$，如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br></pre></td></tr></table></figure><p>和其他编程语言不同的时，Shell脚本中<code>变量名和等号之间不能有空格</code>。Shell变量名的命名规则如下：</p><ul><li>只能包含英文字母、数字和下划线，且不能以数字开头</li><li>不能包含空格</li><li>不能使用关键字命名(通过下划线连接关键字是允许的)</li><li>不能使用标点符号</li></ul><p>以下是合法的示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1</span><br><span class="line">var_2</span><br><span class="line">_var3</span><br><span class="line">MAX_PAGE</span><br></pre></td></tr></table></figure><p>以下是不合法的示例</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">$var</span></span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>Shell有以下两种复制方式。</p><ol><li>直接赋值。直接在等号后面指定变量值。</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei</span></span><br><span class="line"><span class="hljs-string">admin=1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用命名执行结果。可以将其他命令的执行结果赋值给变量。（以下两种方式是等效的）</li></ol><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file=`ls /etc` <span class="hljs-comment"># 反引号(键盘Tab上面的键)</span></span><br><span class="line">file1=$(ls /etc)</span><br></pre></td></tr></table></figure><p>已经存在的变量，可以被重新赋值。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"hello"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br><span class="line"></span><br><span class="line">name=<span class="hljs-string">"world"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><blockquote><p>使用变量时在变量名前添加$符号，定义时不加。</p></blockquote><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure><p>变量名两边的花括号是可选的，一般情况下不用加，但是如果涉及到边界识别问题，则需要手动添加花括号。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"I'm <span class="hljs-variable">$&#123;name&#125;</span>studio."</span> <span class="hljs-comment"># 正确示例</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"I'm <span class="hljs-variable">$namestudio</span>."</span> <span class="hljs-comment"># 错误示例</span></span><br></pre></td></tr></table></figure><p>如果不添加花括号，Shell会将<code>namestudio</code>作为变量，该变量是不存在的，因此代码执行逻辑就不是我们想要的了。</p><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>如果某些变量在定义后就无法更改该变量的值，可以设置使用<code>readonly</code>设置为只读变量，对只读变量赋值会跑出错误。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">readonly</span> name</span><br><span class="line">name=<span class="hljs-string">"zhangsan"</span></span><br></pre></td></tr></table></figure><p>上述例子执行结果如下</p><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.<span class="hljs-string">sh:</span> line <span class="hljs-number">5</span>: <span class="hljs-string">name:</span> readonly variable</span><br></pre></td></tr></table></figure><h4 id="释放变量"><a href="#释放变量" class="headerlink" title="释放变量"></a>释放变量</h4><p>使用<code>unset</code>可以释放变量。变量被释放后不能使用(使用不会报错,shell中使用未定义变量当做空值处理)，此外unset命令无法释放只读变量。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">"xialei"</span></span><br><span class="line"><span class="hljs-built_in">unset</span> name <span class="hljs-comment"># 不要$</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><p>Shell脚本运行时，存在以下三种变量：</p><ul><li>局部变量。在脚本中定义的变量，只对当前脚本有效</li><li>环境变量。所有程序都能访问到环境变量，此外Shell脚本也可以在运行时定义环境变量</li><li>Shell变量。Shell变量是由Shell解释器设置的变量。Shell变量中有一部分是局部变量，有一部分是环境变量。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Shell支持数字、字符串和数组三种数据类型。下面我们分别进行学习。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以使用单引号、双引号，也可以不使用引号。</p><p>单引号</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br></pre></td></tr></table></figure><ul><li>单引号内的任何字符都会原样使用，不解析变量，也不解析转义字符。这一点和PHP有点类似</li></ul><p>双引号</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br><span class="line">msg=<span class="hljs-string">"Hello, <span class="hljs-variable">$&#123;name&#125;</span>"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span><br></pre></td></tr></table></figure><ul><li>双引号内的字符串会进行变量解析和转义字符解析</li></ul><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p>字符串拼接有以下两种方式。</p><p>引号拼接(支持双引号和单引号)</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br><span class="line">msg=<span class="hljs-string">'Hello '</span><span class="hljs-variable">$name</span><span class="hljs-string">', welcome!'</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span><br></pre></td></tr></table></figure><p>内部嵌套(只支持双引号，因为单引号不解析变量)</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="hljs-string">'xialei'</span></span><br><span class="line">msg=<span class="hljs-string">"Hello <span class="hljs-variable">$&#123;name&#125;</span>, welcome!"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>Shell只支持一维数组，不限定数组大小。</p><p>数组的索引由0开始，读取元素的索引可以使用整数或表达式。</p><h5 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h5><p>数组元素使用<code>小括号</code>括起来，每个元素之间用<code>空格</code>分割。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br></pre></td></tr></table></figure><h5 id="读取数组元素"><a href="#读取数组元素" class="headerlink" title="读取数组元素"></a>读取数组元素</h5><p>语法如下:</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-variable">$&#123;数组名称[下标]&#125;</span></span><br></pre></td></tr></table></figure><p>比如上例中读取第2个人</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;users[1]&#125;</span> <span class="hljs-comment"># 输出zhangsan</span></span><br></pre></td></tr></table></figure><p>使用<code>@</code>作为下标可以获取数组的所有元素。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;users[@]&#125;</span> <span class="hljs-comment"># 输出 xialei zhangsan lisi</span></span><br></pre></td></tr></table></figure><h5 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h5><p>语法如下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length=<span class="hljs-variable">$&#123;#数组名[@]&#125;</span></span><br></pre></td></tr></table></figure><p>比如输出users数组的长度</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users=(xialei zhangsan lisi)</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#users[@]&#125;</span></span><br></pre></td></tr></table></figure><p>今天的内容主要是让大家对Shell有一个宏观的认识，介绍了Shell的变量以及数据类型，下一篇将重点介绍Shell的运算符和流程控制。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p><p>(未完待续)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Shell 是一个用 C 语言编写的程序，用户可以通过Shell脚本语言来进行程序开发。与其他脚本语言不同，Shell脚本所需的解释器一般是内置在操作系统的，而像Node.js、PHP等脚本语言需要手动安装解释器程序才可以。&lt;/p&gt;
&lt;p&gt;接下来将和大家一起来学习Shell
      
    
    </summary>
    
      <category term="devtools" scheme="https//www.ddhigh.com/categories/devtools/"/>
    
    
      <category term="shell" scheme="https//www.ddhigh.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Java中加载文件的几种方式</title>
    <link href="https//www.ddhigh.com/2020/02/01/java-resource-load.html"/>
    <id>https//www.ddhigh.com/2020/02/01/java-resource-load.html</id>
    <published>2020-02-01T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>在Java程序中加载外部文件有多中方式，每种方式也存在区别，本文将理清这些加载方式之间的区别。</p><h2 id="文件IO方式"><a href="#文件IO方式" class="headerlink" title="文件IO方式"></a>文件IO方式</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.xialei.example.resource;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.File;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"app.properties"</span>);</span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的读取方式，使用该方式读取文件时规则如下：</p><blockquote><p>如果传入的是绝对路径，则以系统根目录作为绝对路径的起点。</p><p>如果传入的是相对路径，则以当前工作目录作为起点。</p></blockquote><p>本例中，运行<code>java</code>命令的目录即为工作目录，app.properties从工作目录开始查找。</p><h2 id="Class-getResourceAsStream"><a href="#Class-getResourceAsStream" class="headerlink" title="Class.getResourceAsStream"></a>Class.getResourceAsStream</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.xialei.example.resource;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        try (InputStream is = Main.class.getResourceAsStream("app.properties")) &#123;</span><br><span class="line">            Properties properties = <span class="hljs-keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            System.out.println(properties.getProperty(<span class="hljs-string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方式读取文件时规则如下：</p><blockquote><p>如果传入的是相对路径，则以当前class所在的包作为起点。</p><p>如果传入的是绝对路径，则以classpath的根目录为起点。</p></blockquote><ul><li><code>Main.class.getResourceAsStream(&quot;app.properties&quot;)</code> 会读取<code>/org/xialei/example/resource/app.properties</code>文件。</li><li><code>Main.class.getResourceAsStream(&quot;/app.properties&quot;)</code>会读取”classpath:/app.properties”文件</li></ul><h2 id="ClassLoader-getResourceAsStream"><a href="#ClassLoader-getResourceAsStream" class="headerlink" title="ClassLoader.getResourceAsStream"></a>ClassLoader.getResourceAsStream</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.xialei.example.resource;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        try (InputStream is = Main.class.getClassLoader().getResourceAsStream("org/xialei/example/resource/app.properties")) &#123;</span><br><span class="line">            Properties properties = <span class="hljs-keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            System.out.println(properties.getProperty(<span class="hljs-string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方式时规则如下:</p><blockquote><p>使用classpath根目录作为起点。</p></blockquote><p>本例中，<code>org/xialei/example/resource/app.properties</code>就是从classpath根目录进行查找的。</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java程序中加载外部文件有多中方式，每种方式也存在区别，本文将理清这些加载方式之间的区别。&lt;/p&gt;
&lt;h2 id=&quot;文件IO方式&quot;&gt;&lt;a href=&quot;#文件IO方式&quot; class=&quot;headerlink&quot; title=&quot;文件IO方式&quot;&gt;&lt;/a&gt;文件IO方式&lt;/h2&gt;&lt;f
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
      <category term="java" scheme="https//www.ddhigh.com/categories/backend/java/"/>
    
    
  </entry>
  
  <entry>
    <title>kafka二进制协议简要分析</title>
    <link href="https//www.ddhigh.com/2020/01/17/php-binary-io.html"/>
    <id>https//www.ddhigh.com/2020/01/17/php-binary-io.html</id>
    <published>2020-01-17T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>最近分享了《应用层私有协议的设计和实战》，对应用层私有协议设计做了一些介绍，同时也对协议设计中常用的数据类型做了比较形象的讲解，今天我们来研究一下kafka的二进制协议。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>kafka二进制协议定义了许多的数据类型，包含常用的数字、字符串，也包含了数组等类型。</p><p>本文主要讨论不可变长数据类型，可变长度（如Google Protocol Buffers）不在讨论范围内。</p><table><thead><tr><th>数据类型</th><th>字节长度</th><th>说明</th></tr></thead><tbody><tr><td>BOOLEAN</td><td>1</td><td>布尔值</td></tr><tr><td>INT8</td><td>1</td><td>单字节整型，-2^7 ~ 2^7-1</td></tr><tr><td>INT16</td><td>2</td><td>双字节整型，大端序，范围 -2^15 ~ 2^15 - 1</td></tr><tr><td>INT32</td><td>4</td><td>四字节整型、大端序，范围 -2^31 ~ 2^31 - 1</td></tr><tr><td>INT64</td><td>8</td><td>八字节整型、大端序，范围 -2^63 ~ 2^63 -1</td></tr><tr><td>UINT32</td><td>4</td><td>十字街</td></tr><tr><td>UUID</td><td>16</td><td>16字节，Java UUID类型</td></tr><tr><td>STRING</td><td>2+N</td><td>头部由2字节标识字符串长度N，后续N字节为字符串内容</td></tr><tr><td>NULLABLE_STRING</td><td>2+N</td><td>头部由2字节标识字符串长度N，后续N字节为字符串内容，N为-1时无后续内容</td></tr><tr><td>BYTES</td><td>4+N</td><td>头部4字节标识字节数组长度，后续N字节为字节数组内容</td></tr><tr><td>NULLABLE_BYTES</td><td>4+N</td><td>头部4字节标识字节数组长度，后续N字节为字节数组内容，N为-1时无后续内容</td></tr><tr><td>ARRAY</td><td>4+N*M</td><td>头部4字节标识数组长度N，M为单个数组元素的长度，N为-1时为空数组</td></tr></tbody></table><h2 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h2><ul><li>-1 未知错误</li><li>0 未出错</li><li>大于0， 具体错误</li></ul><p>kafka内置的操作类型有点多，有兴趣的可以参阅<a href="https://kafka.apache.org/protocol#protocol_error_codes" target="_blank" rel="noopener">kafka错误码</a></p><h2 id="Api-Keys"><a href="#Api-Keys" class="headerlink" title="Api Keys"></a>Api Keys</h2><p>可以理解为操作码，服务端根据该字段区分当前请求操作。</p><p>这里不做展开，有兴趣的可以参阅<a href="https://kafka.apache.org/protocol#protocol_api_keys" target="_blank" rel="noopener">kafka Api Keys</a></p><h2 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h2><p>接下来我们重点分析一下kafka的报文结构。</p><blockquote><p>本文基于kafka V1版本协议写作，其他版本的研究原理时一致的。</p></blockquote><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>kafka的协议结构比较简单，请求和响应使用同样的整体结构。</p><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestOrResponse =&gt; Size (RequestMessage | <span class="hljs-type">ResponseMessage</span>)</span><br><span class="line">  Size =&gt; int32</span><br></pre></td></tr></table></figure><p>我们转化为表格来看看</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093002.png" alt="image-20200117172959642"></p><ul><li>Size为INT32类型，正文长度</li><li>Message 为请求或响应正文的内容，变长字段，长度由Size给出</li></ul><h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><p>请求数据包有固定的请求包头，我们来看看。</p><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request Header v1 =&gt; request_api_key request_api_version correlation_id client_id </span><br><span class="line">  request_api_key =&gt; INT16</span><br><span class="line">  request_api_version =&gt; INT16</span><br><span class="line">  correlation_id =&gt; INT32</span><br><span class="line">  client_id =&gt; NULLABLE_STRING</span><br></pre></td></tr></table></figure><p>上面给出的是请求头的内容，结合整体结构得出的协议表格如下：</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093119.png" alt="image-20200117173117965"></p><ul><li>Size 4字节正文长度（包含请求头）</li><li>request_api_key 2字节 api key，用来区分操作</li><li>request_api_version 2字节api 版本号</li><li>correlation_id 4字节请求ID，服务端会原样响应该请求ID</li><li>client_id 可空字符串，根据kafka数据类型定义，需要2字节client_id length字段标识client_id长度，如果client_id length为-1，则不需要传具体的client_id，否则需要传递client_id</li><li>request message* 请求正文，不同的api key请求正文不同</li></ul><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response Header v1 =&gt; correlation_id TAG_BUFFER </span><br><span class="line">  correlation_id =&gt; INT32</span><br></pre></td></tr></table></figure><p>响应头的结构比较简单，返回了请求ID</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093701.png" alt="image-20200117173658934"></p><ul><li>Size 4字节响应正文长度（包含请求ID）</li><li>correlation_id 4字节请求ID</li><li>response message* 响应正文</li></ul><h3 id="Metadata-示例"><a href="#Metadata-示例" class="headerlink" title="Metadata 示例"></a>Metadata 示例</h3><h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>Kafka Metadata对应的协议格式如下</p><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Metadata Request (Version: <span class="hljs-number">1</span>) =&gt; [topics] </span><br><span class="line">  topics =&gt; name </span><br><span class="line">    name =&gt; STRING</span><br></pre></td></tr></table></figure><p>我们转化为表格看看</p><p><img src="https://static.ddhigh.com/blog/2020-01-17-093858.png" alt="image-20200117173855988"></p><ul><li>Size 4字节请求正文长度</li><li>Request_api_key，根据协议文档， 此处为3</li><li>Request_api_version，本文基于v1版本写作，因此版本号为1</li><li>correlation_id 请求ID</li><li>client_id length 2字节客户端长度，我们使用test作为客户端标识，此处传入4</li><li>client_id 客户端名称，传入test字符串</li><li>topic name length 需要查询的topic数组，我们查询test1这个topic，此处传入1</li><li>topic name 字符串类型，因此先写入字符串长度5(test1字符串长度为5)，再写入test1字符串（总共写入2+5 = 7个字节）</li></ul><h4 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h4><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Metadata Response (Version: 1) =&gt; [brokers] controller_id [topics] </span><br><span class="line">  brokers =&gt; node_id host<span class="hljs-built_in"> port </span>rack </span><br><span class="line">    node_id =&gt; INT32</span><br><span class="line">    host =&gt; STRING</span><br><span class="line">   <span class="hljs-built_in"> port </span>=&gt; INT32</span><br><span class="line">    rack =&gt; NULLABLE_STRING</span><br><span class="line">  controller_id =&gt; INT32</span><br><span class="line">  topics =&gt; error_code name is_internal [partitions] </span><br><span class="line">    error_code =&gt; INT16</span><br><span class="line">    name =&gt; STRING</span><br><span class="line">    is_internal =&gt; BOOLEAN</span><br><span class="line">    partitions =&gt; error_code partition_index leader_id [replica_nodes] [isr_nodes] </span><br><span class="line">      error_code =&gt; INT16</span><br><span class="line">      partition_index =&gt; INT32</span><br><span class="line">      leader_id =&gt; INT32</span><br><span class="line">      replica_nodes =&gt; INT32</span><br><span class="line">      isr_nodes =&gt; INT32</span><br></pre></td></tr></table></figure><p><img src="https://static.ddhigh.com/blog/2020-01-17-094212.png" alt="image-20200117174211271"></p><ul><li>Size 4字节响应长度</li><li>Correlation_id 4字节请求ID</li><li>Broker Count，数组类型，4字节整型标识数组长度<ul><li>node_id 4字节整型，broker的节点ID</li><li>host 字符串类型，主机名称</li><li>port 4字节整型，端口号</li><li>rack 可空字符串，如果broker是rack，则需要2+N字节，否则只需要2字节</li></ul></li><li>Controller_id 4字节整型</li><li>Topics 数组类型，topic数组<ul><li>error_code 2字节整型，错误码</li><li>name 字符串类型，topic名称</li><li>is_internal 布尔类型，是否内部topic</li><li>partions 数组类型，topic所在partition<ul><li>error_code 2字节整型，错误码</li><li>partition_index 4字节整型，partition index</li><li>leader_id 4字节整型，leader id</li><li>Replica_nodes 数组类型<ul><li>Replica_node 4字节整型</li></ul></li><li>isr_nodes 数组类型<ul><li>Isr_node 4字节整型</li></ul></li></ul></li></ul></li></ul><blockquote><p>其他类型的请求也可以使用同样的方式去分析</p></blockquote><h2 id="PHP客户端实现"><a href="#PHP客户端实现" class="headerlink" title="PHP客户端实现"></a>PHP客户端实现</h2><p>PHP自带了pack/unpack函数帮助我们操作二进制数据，不过pack/unpack易用性比较低。</p><blockquote><p>对于二进制数据，java有byte[]，golang有[]byte，PHP没有专门的类型，而是使用字符串存储的，不过PHP字符串是二进制安全的。</p></blockquote><p>针对pack/unpack函数易用性问题，这两天参考Java的IO系统开发了一个简单版本的io库来简化二进制数据流的操作（文末有仓库地址）。</p><p>接下来使用该库来编写一个kafka的客户端。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 读取kafka broker列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">BinaryStringInputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">BinaryStringOutputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">DataInputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">DataOutputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">FileInputStream</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-title">io</span>\<span class="hljs-title">FileOutputStream</span>;</span><br><span class="line"></span><br><span class="line">$client = stream_socket_client(<span class="hljs-string">'tcp://127.0.0.1:9092'</span>, $errno, $errstr, <span class="hljs-number">5</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> ($errno) &#123;</span><br><span class="line">    <span class="hljs-keyword">die</span>($errstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$binaryOutputStream = <span class="hljs-keyword">new</span> BinaryStringOutputStream();</span><br><span class="line">$binaryPacketOutput = <span class="hljs-keyword">new</span> DataOutputStream($binaryOutputStream);</span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(<span class="hljs-number">0x03</span>); <span class="hljs-comment">// METADATA_REQUEST</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(<span class="hljs-number">1</span>); <span class="hljs-comment">// API_VERSION</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedIntBE(<span class="hljs-number">0x01</span>); <span class="hljs-comment">// 请求ID</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(strlen(<span class="hljs-string">'test'</span>)); <span class="hljs-comment">// 客户端标识长度</span></span><br><span class="line">$binaryPacketOutput-&gt;writeString(<span class="hljs-string">'test'</span>); <span class="hljs-comment">// 客户端标识</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedIntBE(<span class="hljs-number">1</span>); <span class="hljs-comment">// topic列表数组长度</span></span><br><span class="line"><span class="hljs-comment">// topic数组元素</span></span><br><span class="line">$binaryPacketOutput-&gt;writeUnSignedShortBE(strlen(<span class="hljs-string">'test1'</span>)); <span class="hljs-comment">// 写入2字节topic名称长度</span></span><br><span class="line">$binaryPacketOutput-&gt;writeString(<span class="hljs-string">'test1'</span>); <span class="hljs-comment">// topic名称</span></span><br><span class="line">$binaryPacketOutput-&gt;flush(); <span class="hljs-comment">// 输出缓冲</span></span><br><span class="line">$packet = $binaryOutputStream-&gt;toBinaryString(); <span class="hljs-comment">// 获得构造好的正文数据包</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 包装socket链接，获得多数据类型操作能力</span></span><br><span class="line">$out = <span class="hljs-keyword">new</span> DataOutputStream(<span class="hljs-keyword">new</span> FileOutputStream($client));</span><br><span class="line">$out-&gt;writeUnSignedIntBE(strlen($packet)); <span class="hljs-comment">// 4字节包长度</span></span><br><span class="line">$out-&gt;write($packet); <span class="hljs-comment">// 包体</span></span><br><span class="line">$out-&gt;flush(); <span class="hljs-comment">// 输出到Socket</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 实例化输入流，从socket读取数据</span></span><br><span class="line">$in = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream($client));</span><br><span class="line">$size = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// 4字节包长度</span></span><br><span class="line"><span class="hljs-comment">// 一次性读取完socket数据后关闭，然后将读取到的响应数据填充到二进制字符串输入流中，释放socket</span></span><br><span class="line">$in = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> BinaryStringInputStream(fread($client, $size)));</span><br><span class="line">fclose($client);</span><br><span class="line"></span><br><span class="line">$requestId = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// 4字节请求ID</span></span><br><span class="line">printf(<span class="hljs-string">"packet length: %d requestId: %d\n"</span>, $size, $requestId);</span><br><span class="line"></span><br><span class="line">$brokerCount = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// broker数量</span></span><br><span class="line"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $brokerCount; $i++) &#123; <span class="hljs-comment">// 循环读取broker</span></span><br><span class="line">    $nodeId = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// nodeId</span></span><br><span class="line">    $hostLength = $in-&gt;readUnSignedShortBE(); <span class="hljs-comment">// host长度</span></span><br><span class="line">    $host = $in-&gt;readString($hostLength); <span class="hljs-comment">// 主机名</span></span><br><span class="line">    $port = $in-&gt;readUnSignedIntBE(); <span class="hljs-comment">// port</span></span><br><span class="line">    $rackLength = $in-&gt;readShortBE(); <span class="hljs-comment">// rack</span></span><br><span class="line">    $rack = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> ($rackLength != <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">        $rack = $in-&gt;readString($rackLength);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="hljs-string">"nodeId:%d host:%s port:%d rack: %s\n"</span>, $nodeId, $host, $port, $rack);</span><br><span class="line">&#125;</span><br><span class="line">$controllerId = $in-&gt;readUnSignedIntBE();</span><br><span class="line">printf(<span class="hljs-string">"controllerId: %d\n"</span>, $controllerId);</span><br><span class="line">$topicCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">printf(<span class="hljs-string">"topic count %d\n"</span>, $topicCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $topicCount; $i++) &#123;</span><br><span class="line">    printf(<span class="hljs-string">"----topic list----\n"</span>);</span><br><span class="line">    $errCode = $in-&gt;readUnSignedShortBE();</span><br><span class="line">    $nameLength = $in-&gt;readUnSignedShortBE();</span><br><span class="line">    $name = $in-&gt;readString($nameLength);</span><br><span class="line">    $isInternal = $in-&gt;readUnSignedChar();</span><br><span class="line">    printf(<span class="hljs-string">"errcode: %d name: %s interval: %d\n"</span>, $errCode, $name, $isInternal);</span><br><span class="line"></span><br><span class="line">    $partitionCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">    printf(<span class="hljs-string">"----topic [%s] partition list count %d---\n"</span>, $name, $partitionCount);</span><br><span class="line">    <span class="hljs-keyword">for</span> ($j = <span class="hljs-number">0</span>; $j &lt; $partitionCount; $j++) &#123;</span><br><span class="line">        $errCode = $in-&gt;readUnSignedShortBE();</span><br><span class="line">        $partitionIndex = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $leaderId = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $replicaNodesCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $replicaNodes = [];</span><br><span class="line">        <span class="hljs-keyword">for</span> ($k = <span class="hljs-number">0</span>; $k &lt; $replicaNodesCount; $k++) &#123;</span><br><span class="line">            $replicaNodes[] = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        &#125;</span><br><span class="line">        $isrNodeCount = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        $isrNodes = [];</span><br><span class="line">        <span class="hljs-keyword">for</span> ($k = <span class="hljs-number">0</span>; $k &lt; $isrNodeCount; $k++) &#123;</span><br><span class="line">            $isrNodes[] = $in-&gt;readUnSignedIntBE();</span><br><span class="line">        &#125;</span><br><span class="line">        printf(</span><br><span class="line">            <span class="hljs-string">"errcode: %d partitionIndex: %d leaderId: %d replicaNodes: [%s] isrNodes: [%s]\n"</span>,</span><br><span class="line">            $errCode,</span><br><span class="line">            $partitionIndex,</span><br><span class="line">            $leaderId,</span><br><span class="line">            join(<span class="hljs-string">','</span>, $replicaNodes),</span><br><span class="line">            join(<span class="hljs-string">','</span>, $isrNodes)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">packet <span class="hljs-string">length:</span> <span class="hljs-number">73</span> <span class="hljs-string">requestId:</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-string">nodeId:</span><span class="hljs-number">0</span> <span class="hljs-string">host:</span>bogon <span class="hljs-string">port:</span><span class="hljs-number">9092</span> <span class="hljs-string">rack:</span> </span><br><span class="line"><span class="hljs-string">controllerId:</span> <span class="hljs-number">0</span></span><br><span class="line">topic count <span class="hljs-number">1</span></span><br><span class="line">----topic list----</span><br><span class="line"><span class="hljs-string">errcode:</span> <span class="hljs-number">0</span> <span class="hljs-string">name:</span> test1 <span class="hljs-string">interval:</span> <span class="hljs-number">0</span></span><br><span class="line">----topic [test1] partition list count <span class="hljs-number">1</span>---</span><br><span class="line"><span class="hljs-string">errcode:</span> <span class="hljs-number">0</span> <span class="hljs-string">partitionIndex:</span> <span class="hljs-number">0</span> <span class="hljs-string">leaderId:</span> <span class="hljs-number">0</span> <span class="hljs-string">replicaNodes:</span> [<span class="hljs-number">0</span>] <span class="hljs-string">isrNodes:</span> [<span class="hljs-number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p> <a href="https://github.com/xialeistudio/php-io" target="_blank" rel="noopener">php-io</a></p><p>(完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近分享了《应用层私有协议的设计和实战》，对应用层私有协议设计做了一些介绍，同时也对协议设计中常用的数据类型做了比较形象的讲解，今天我们来研究一下kafka的二进制协议。&lt;/p&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="backend" scheme="https//www.ddhigh.com/categories/backend/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript事件系统</title>
    <link href="https//www.ddhigh.com/2019/12/30/javascript-event.html"/>
    <id>https//www.ddhigh.com/2019/12/30/javascript-event.html</id>
    <published>2019-12-30T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容</p><ul><li>事件基础</li><li>事件监听方式</li><li>事件默认行为</li><li>事件冒泡与事件捕获</li><li>事件绑定与事件委托</li></ul><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><blockquote><p>注意：本文不会深入探究Javascript的事件循环。</p></blockquote><p>提到事件，相信每位Javascript开发者都不会陌生，由于Javascript是先有实现，后有规范，因此，对于大部分人来说，事件模块可以说是比较模糊的，本文将从不同角度帮助你理清楚事件模块。</p><p>事件的本质可以说是一个回调函数，当事件触发时会调用你的监听函数。</p><blockquote><p>事件是一定会触发的，如果没有对应的监听函数，就不会执行回调。</p></blockquote><p>比如下面就是用户点击指定元素打印日志的例子：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#button'</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>事件基础相信大家都没什么问题，重点在后面的内容。</p><h2 id="事件监听方式"><a href="#事件监听方式" class="headerlink" title="事件监听方式"></a>事件监听方式</h2><p>由于历史原因，Javascript目前存在三种事件监听方式：</p><ol><li>HTML代码中监听</li><li>DOM0级监听</li><li>DOM2级监听</li></ol><p>Q: 为啥从DOM0级开始？</p><blockquote><p>1998年，W3C综合各浏览器厂商的现有API，指定了DOM1标准。在DOM1标准出现之前浏览器已有的事件监听方式叫做DOM0级。</p></blockquote><p>Q：DOM1级监听到哪里去了？</p><blockquote><p>由于DOM1标准只是对DOM0标准的整理+规范化，并没有增加新的内容，因此DOM0级可以看做DOM1级。</p></blockquote><h3 id="HTML代码监听"><a href="#HTML代码监听" class="headerlink" title="HTML代码监听"></a>HTML代码监听</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('Hello World!')"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接将事件处理函数或事件处理代码写到HTML元素对应的属性上的方式就是<strong>HTML代码监听方式</strong>。</p><p>该方式有一个明显的缺点，如果事件逻辑比较复杂时，将大段代码直接写在HTML元素上不利于维护。因此一般会提取到一个专一的函数进行处理。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"callback()"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该方式也有一个问题，那就是如果<code>callback()</code>函数还未加载好时点击按钮将报错。而且直接将事件耦合到HTML元素上也不符合单一职责，HTML元素应该只负责展示，不负责事件。</p><blockquote><p>不建议在开发中使用该方式处理事件。</p></blockquote><h3 id="DOM0级事件监听"><a href="#DOM0级事件监听" class="headerlink" title="DOM0级事件监听"></a>DOM0级事件监听</h3><p>在DOM1级规范出来之前，各浏览器厂商已经提供了一套事件API，也就是DOM0级API，它的写法如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个相信大家在刚开始入行时写的比较多，比如我们的ajax相关API就是DOM0级的。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</span><br><span class="line">xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>DOM0级事件基本上都是以”on”开头的</p></blockquote><p>DOM0级事件也存在一个问题，那就是不支持添加多个事件处理函数，因此只有在不支持DOM2级事件的情况下才会使用DOM0级来绑定事件。</p><h3 id="DOM2级事件监听"><a href="#DOM2级事件监听" class="headerlink" title="DOM2级事件监听"></a>DOM2级事件监听</h3><p>DOM2级事件是最新的事件处理程序规范（有许多年未更新了）。DOM2级事件通过<code>addEventListener</code>方式给元素添加事件处理程序。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多次调用addEventListener可以绑定多个事件处理程序，但是需要注意：</p><blockquote><p>同样的事件名、同样的事件处理函数和同样的事件流机制(冒泡和捕获，下面会讲到)，<strong>只会触发一次</strong>。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 下面的代码只会触发一次</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"request"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onClick</span><span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#request'</span>).addEventListener(<span class="hljs-string">'click'</span>, onClick, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#request'</span>).addEventListener(<span class="hljs-string">'click'</span>, onClick, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>onClick是同一个事件处理程序，所以只触发一次</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 下面的代码只会触发两次</span></span><br><span class="line">&lt;button id=<span class="hljs-string">"request"</span>&gt;登录&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">document.querySelector('#request').addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">console.log('clicked');</span></span><br><span class="line"><span class="hljs-regexp">&#125;, false);</span></span><br><span class="line"><span class="hljs-regexp">document.querySelector('#request').addEventListener('click', function() &#123;</span></span><br><span class="line"><span class="hljs-regexp">console.log('clicked');</span></span><br><span class="line"><span class="hljs-regexp">&#125;, false);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>两个匿名函数，所以会触发两次</p><h2 id="事件默认行为"><a href="#事件默认行为" class="headerlink" title="事件默认行为"></a>事件默认行为</h2><p>很多网页元素会有默认行为，比如下面这些：</p><ul><li>点击a标签的时候，会有跳转行为</li><li>点击右键时会弹出菜单</li><li>在表单中点击提交按钮会提交表单</li></ul><p>如果我们需要阻止默认行为，比如我们在阻止表单的默认提交事件，进行数据校验，通过校验后再调用表单submit方法提交。</p><blockquote><p>不同的监听方式阻止默认行为的方式也不同。</p></blockquote><h3 id="HTML代码方式"><a href="#HTML代码方式" class="headerlink" title="HTML代码方式"></a>HTML代码方式</h3><blockquote><p>HTML代码方式支持return false和event.preventDefault()</p></blockquote><h4 id="return-false方式"><a href="#return-false方式" class="headerlink" title="return false方式"></a>return false方式</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">"return handleSubmit()"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleSubmit</span><span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上例中我们监听了表单的<code>onsubmit</code>事件，当点击按钮或者按下回车时，将会触发<code>handleSubmit</code>方法，同时会阻止表单的提交。</p><blockquote><p>表单内如果有type=”submit”的按钮存在，按下回车时就会自动提交。</p></blockquote><p>HTML监听方式阻止默认事件需要满足以下两点：</p><ol><li>HTML事件监听代码<code>return handler()</code>，<code>return不能少</code>，少了就无法阻止默认行为</li><li><code>handler()</code>函数需要返回<code>false</code></li></ol><h4 id="event-preventDefault"><a href="#event-preventDefault" class="headerlink" title="event.preventDefault()"></a>event.preventDefault()</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"handleClick(event)"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span><span class="hljs-params">(e)</span> </span>&#123;</span></span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM0级事件方式"><a href="#DOM0级事件方式" class="headerlink" title="DOM0级事件方式"></a>DOM0级事件方式</h3><blockquote><p>DOM0级事件支持return false和event.preventDefault()两种方式。</p></blockquote><h4 id="event-preventDefault-1"><a href="#event-preventDefault-1" class="headerlink" title="event.preventDefault()"></a>event.preventDefault()</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// event.preventDefault()</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).onclick= <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span></span><br><span class="line">  event.preventDefault();</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// return false</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).onclick= <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-actionscript">  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两种方式都能工作，不过建议使用<code>event.preventDefault()</code>，原因在下面DOM2级会讲到</p><h3 id="DOM2级事件"><a href="#DOM2级事件" class="headerlink" title="DOM2级事件"></a>DOM2级事件</h3><blockquote><p>DOM2级事件事件<strong>只支持event.preventDefault()</strong>方式，这也是事件的标准处理方法。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.ddhigh.com"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"click"</span>&gt;</span>Href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#click'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span></span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件冒泡与事件捕获"><a href="#事件冒泡与事件捕获" class="headerlink" title="事件冒泡与事件捕获"></a>事件冒泡与事件捕获</h2><p>先来看一个HTML结构</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们知道，一旦绑定了事件处理程序，在事件触发时，事件处理函数都会触发。</p><p>如果我们给father/child/son都绑定了事件处理函数，点击了son时，谁被触发呢？</p><p>事实上，三个函数都会被触发，因为son时child的子元素，child又是father的子元素，点击son，同时也点击了father和child。</p><p>由此带来一个问题，三个函数谁先触发，谁后触发呢？这就是我们常说的事件流，father-&gt;child-&gt;son这种路径是可以的，但是son-&gt;child-&gt;father这种路径也是可以的。</p><p>针对这两种方式，W3C给了我们一个答案，两种方式都支持，即可以从父元素到子元素，又可以从子元素到父元素，前者叫<strong>事件捕获</strong>，后者叫<strong>事件冒泡</strong>。</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件发生时采取<code>自上而下</code>的方式进行触发，最先触发的是<code>window</code>，其次是<code>document</code>，然后根据DOM层级依次触发，最终进入到真正的事件元素。</p><blockquote><p>addEventListener第三个参数传入true就是捕获方式的标志。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击son之后的输出顺序为</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">father</span></span><br><span class="line"><span class="hljs-attribute">child</span></span><br><span class="line"><span class="hljs-attribute">son</span></span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件发生时采取<code>自下而上</code>的方式进行触发，最先触发的是发生事件的元素，其次是父元素，依次向上，最终触发到<code>document</code>和<code>window</code>。</p><blockquote><p>addEventListener第三个参数传入false就是捕获冒泡的标志。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击son之后的输出顺序为</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">son</span></span><br><span class="line"><span class="hljs-attribute">child</span></span><br><span class="line"><span class="hljs-attribute">father</span></span><br></pre></td></tr></table></figure><blockquote><p>由于事件捕获和事件冒泡机制，我们需要一个标记来标识真正触发事件的元素，这个元素就是event.target，而另外一个相似的属性叫event.currentTarget，这是当前元素。</p></blockquote><h3 id="事件捕获和时间冒泡的顺序"><a href="#事件捕获和时间冒泡的顺序" class="headerlink" title="事件捕获和时间冒泡的顺序"></a>事件捕获和时间冒泡的顺序</h3><blockquote><p>根据浏览器规范，事件捕获会先于事件冒泡发生。因此，总的事件顺序如下</p></blockquote><ol><li>window 捕获阶段</li><li>document 捕获阶段</li><li>… 依次到真正触发事件的元素 捕获阶段</li><li>真正触发事件的元素 冒泡阶段</li><li>依次向上的父元素 冒泡阶段</li><li>document  冒泡阶段</li><li>window 冒泡阶段</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"father"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"child"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father捕获'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child捕获'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son捕获'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#father'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'father冒泡'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#child'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child冒泡'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#son'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'son冒泡'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击son之后的输出为</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">father捕获</span><br><span class="line">child捕获</span><br><span class="line">son捕获</span><br><span class="line">son冒泡</span><br><span class="line">child冒泡</span><br><span class="line">father冒泡</span><br></pre></td></tr></table></figure><h2 id="事件绑定和事件委托"><a href="#事件绑定和事件委托" class="headerlink" title="事件绑定和事件委托"></a>事件绑定和事件委托</h2><p>弄明白浏览器的事件流机制之后，来讨论事件绑定和事件委托其实是很简单的事情。</p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>就是在事件监听方式中直接对具体元素进行事件监听的方式。有个明显的缺点，对于新增加的DOM节点是无法监听到事件的。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.a'</span>).forEach(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clicked '</span> + <span class="hljs-keyword">this</span>.innerHTML);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="hljs-actionscript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">const</span> div3 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)</span></span><br><span class="line"><span class="hljs-actionscript">        div3.className = <span class="hljs-string">"a"</span>;</span></span><br><span class="line"><span class="hljs-actionscript">        div3.innerHTML = <span class="hljs-string">"click3"</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.body.appendChild(div3)</span></span><br><span class="line">    &#125;, 500);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的click3点击是没有任何反应的，因为在创建该元素时没有绑定事件处理函数。</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>我们利用事件流机制来实现上面的需求。</p><blockquote><p>事件委托就是利用事件流机制，在父元素进行监听，由于事件冒泡机制，父元素可以接受新添加元素的事件。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>click2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">console</span>.log(e.target.innerHTML)</span></span><br><span class="line"><span class="hljs-actionscript">    &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="line"><span class="hljs-actionscript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">const</span> div3 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)</span></span><br><span class="line"><span class="hljs-actionscript">        div3.className = <span class="hljs-string">"a"</span>;</span></span><br><span class="line"><span class="hljs-actionscript">        div3.innerHTML = <span class="hljs-string">"click3"</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.body.appendChild(div3)</span></span><br><span class="line">    &#125;, 500);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于事件冒泡机制，click3元素点击之后会将事件冒泡给父元素，也就是我们的document.body，通过event.target可以拿到真正触发事件的元素。</p><p>（完）</p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件基础&lt;/li&gt;
&lt;li&gt;事件监听方式&lt;/li&gt;
&lt;li&gt;事件默认行为&lt;/li&gt;
&lt;li&gt;事件冒泡与事件捕获&lt;/li&gt;
&lt;li&gt;事件绑定与事件委托&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事件基础&quot;&gt;&lt;a href=&quot;#事件基础&quot; cla
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Webpack4不求人系列(1)</title>
    <link href="https//www.ddhigh.com/2019/12/19/webpack-get-started.html"/>
    <id>https//www.ddhigh.com/2019/12/19/webpack-get-started.html</id>
    <published>2019-12-19T04:00:00.000Z</published>
    <updated>2021-06-23T12:23:46.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Webpack是一个现在Javascript应用程序的模块化打包器，在Webpack中JS/CSS/图片等资源都被视为JS模块，简化了编程。当Webpack构建时，会递归形成一个模块依赖关系图，然后将所有的模块打包为一个或多个bundle。</p></blockquote><p><img src="https://static.ddhigh.com/blog/2019-12-19-024407.jpg" alt="img"></p><p>本文内容</p><ol><li>简介</li><li>常用loader &amp;&amp; plugin</li><li>传统网站的webpack配置</li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>要系统地学习Webpack，需要先了解Webpack的四个<strong>核心概念</strong>:</p><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>plugin</li></ul><p>webpack使用Node.js运行，因此所有的Node.js模块都可以使用，比如文件系统、路径等模块。</p><p>对Node.js基础不太了解的读者，可以参考我的<a href="https://www.ddhigh.com/2019/07/25/nodejs-guide-next-step.html" target="_blank" rel="noopener">Node.js系列</a></p><p>配置文件<code>webpack.config.js</code>的一般格式为:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>); <span class="hljs-comment">// 导入Node.js的path模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="hljs-string">'development'</span>, <span class="hljs-comment">// 工作模式</span></span><br><span class="line">  entry: <span class="hljs-string">'./src/index'</span>, <span class="hljs-comment">// 入口点</span></span><br><span class="line">  output: &#123; <span class="hljs-comment">// 输出配置</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出文件的目录</span></span><br><span class="line">    filename: <span class="hljs-string">'scripts/[name].[hash:8].js'</span>, <span class="hljs-comment">// 输出JS模块的配置</span></span><br><span class="line">    chunkFilename:<span class="hljs-string">'scripts/[name].[chunkhash:8].js'</span>, <span class="hljs-comment">// 公共JS配置</span></span><br><span class="line">    publicPath:<span class="hljs-string">'/'</span> <span class="hljs-comment">// 资源路径前缀，一般会使用CDN地址，这样图片和CSS就会使用CDN的绝对URL</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.(png|gif|jpg)$/</span>, <span class="hljs-comment">// 图片文件</span></span><br><span class="line">        use:[</span><br><span class="line">          &#123;</span><br><span class="line">            loader:<span class="hljs-string">'file-loader'</span>, <span class="hljs-comment">// 使用file-loader加载</span></span><br><span class="line">            options:&#123; <span class="hljs-comment">// file-loader使用的加载选项</span></span><br><span class="line">              name:<span class="hljs-string">'images/[name].[hash:8].[ext]'</span> <span class="hljs-comment">// 图片文件打包后的输出路径配置</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[ <span class="hljs-comment">// 插件配置</span></span><br><span class="line">    <span class="hljs-keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Webpack自己只管JS模块的输出，也就是output.filename是JS的配置，CSS、图片这些是通过loader来处理输出的</p></blockquote><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口指明了Webpack从哪个模块开始进行构建，Webpack会分析入口模块依赖到的模块(直接或间接)，最终输出到一个被称为<em>bundle</em>的文件中。</p><blockquote><p>使用<strong>entry</strong>来配置项目入口。</p></blockquote><p><strong>单一入口</strong></p><p>最终只会生成1个js文件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">'./src/index'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>多个入口</strong></p><p>最终会根据入口数量生成对应的js文件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">  home:<span class="hljs-string">'./src/home/index'</span>, <span class="hljs-comment">// 首页JS</span></span><br><span class="line">    about:<span class="hljs-string">'./src/about/index'</span> <span class="hljs-comment">// 关于页JS</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>多个入口一般会在多页面应用中使用，比如传统的新闻网站。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出指明了Webpack将bundle输出到哪个目录，以及这些bundle如何命名等，默认的目录为<code>./dist</code>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出路径</span></span><br><span class="line">    filename:<span class="hljs-string">'scripts/[name].[hash:8].js'</span>, <span class="hljs-comment">// 输出JS模块的文件名规范</span></span><br><span class="line">    chunkFilename:<span class="hljs-string">'scripts/[name].[chunkhash:8].js'</span>, <span class="hljs-comment">// 公共JS的配置</span></span><br><span class="line">    publicPath:<span class="hljs-string">'/'</span>, <span class="hljs-comment">// 资源路径前缀，一般会使用CDN地址，这样图片和CSS就会使用CDN的绝对URL</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>path</strong></p><p>path是打包后bundle的输出目录，<strong>必须使用绝对路径</strong>。所有类型的模块(js/css/图片等)都会输出到该目录中，当然，我们可以通过配置输出模块的名称规则来输出到path下的子目录。比如上例中最终输出的JS目录如下：</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">|----dist</span></span><br><span class="line"> <span class="hljs-string">|---- scripts</span></span><br><span class="line">  <span class="hljs-string">|---- home.aaaaaaaa.js</span></span><br></pre></td></tr></table></figure><p><strong>filename</strong></p><p><strong>入口模块</strong>输出的命名规则，在Webpack中，只有js是亲儿子，可以直接被Webpack处理，其他类型的文件(css/images等)需要通过loader来进行转换。</p><p>filename的常用的命名如下:</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-attr">[name]</span>.<span class="hljs-selector-attr">[hash]</span><span class="hljs-selector-class">.js</span></span><br></pre></td></tr></table></figure><ul><li>[name] 为定义入口模块的名称，比如定义了home的入口点，这里的name最终就是home</li><li>[hash] 是模块内容的MD5值，一次打包过程中所有模块的hash值是相同的，由于浏览器会按照文件名缓存，因此每次打包都需要指定hash来改变文件名，从而清除缓存。</li></ul><p><strong>chunkFilename</strong></p><p><strong>非入口模块</strong>输出的命名规则，一般是代码中引入其他依赖，同时使用了optimization.splitChunks配置会抽取该类型的chunk</p><p><strong>hash</strong></p><p>Webpack中常见的hash有<code>hash</code>,<code>contenthash</code>,<code>chunkhash</code>，很容易弄混淆，这里说明一下。</p><ul><li>hash 整个项目公用的hash值，不管修改项目的什么文件，该值都会变化</li><li>chunkhash 公共代码模块的hash值，只要不改该chunk下的代码，该值不会变化</li><li>contenthash 基于文件内容生成的hash，只要改了文件，对应的hash都会变化</li></ul><p><strong>publicPath</strong></p><p>资源的路径前缀，打包之后的资源默认情况下都是相对路径，当更改了部署路径或者需要使用CDN地址时，该选项比较常用。</p><p>比如我们把本地编译过程中产生的所有资源都放到一个CDN路径中，可以这么定义：</p><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">publicPath:</span> <span class="hljs-string">'https://static.ddhigh.com/blog/'</span></span><br></pre></td></tr></table></figure><p>那么最终编译的js,css,image等路径都是绝对链接。</p><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader用来在import时预处理文件，一般用来将非JS模块转换为JS能支持的模块，比如我们直接import一个css文件会提示错误，此时就需要loader做转换了。</p><p>比如我们使用loader来加载css文件。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="hljs-regexp">/\.(css)$/</span>,</span><br><span class="line">use: [<span class="hljs-string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><p>Webpack中有<strong>3</strong>种使用loader的方式：</p><ol><li>配置式：在webpack.config.js根据文件类型进行配置，这是推荐的配置</li><li>内联：在代码中import时指明loader</li><li>命令行：通过cli命令行配置</li></ol><h4 id="配置式"><a href="#配置式" class="headerlink" title="配置式"></a>配置式</h4><p><strong>module.rules</strong>用来配置loader。<strong>test</strong>用来对加载的<strong>文件名(包括目录)</strong>进行正则匹配，只有当匹配时才会应用对应loader。</p><blockquote><p>多个loader配置时从右向左进行应用</p></blockquote><p>配置式Webpack的loader也有好几种形式，有些是为了兼容而添加的，主要使用的方式有以下3种。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">        loader:<span class="hljs-string">'css-loader!less-loader'</span>, <span class="hljs-comment">// 多个loader中用感叹号分隔</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.css/</span>,</span><br><span class="line">        use:[<span class="hljs-string">'css-loader'</span>],<span class="hljs-comment">//数组形式</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="hljs-regexp">/\.(png|gif|jpg)$/</span>,</span><br><span class="line">        use:[ <span class="hljs-comment">// loader传递参数时建议该方法</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="hljs-string">'file-loader'</span>,</span><br><span class="line">            options:&#123; <span class="hljs-comment">// file-loader自己的参数，跟webpack无关</span></span><br><span class="line">              name: <span class="hljs-string">'images/[name].[hash:8].js'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>每个loader的options参数不一定相同，这个需要查看对应loader的官方文档。</p></blockquote><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>loader一般用来做模块转换，而插件可以执行更多的任务，包括打包优化、压缩、文件拷贝等等。插件的功能非常强大，可以进行各种各样的任务。</p><p>下面是打包之前清空dist目录的插件配置示例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">      ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>插件也可以传入选项，一般在实例化时进行传入。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">  chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h2><p>Webpack4中提取公共代码只需要配置optimization.splitChunks即可。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">splitChunks: &#123;</span><br><span class="line">  cacheGroups: &#123;</span><br><span class="line">    vendor: &#123; <span class="hljs-comment">// 名为vendor的chunk</span></span><br><span class="line">      name: <span class="hljs-string">"vendor"</span>,</span><br><span class="line">        test: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">        chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">        priority: <span class="hljs-number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      styles: &#123; <span class="hljs-comment">// 名为styles的chunk</span></span><br><span class="line">        name: <span class="hljs-string">'styles'</span>,</span><br><span class="line">        test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">        chunks: <span class="hljs-string">'all'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>cacheGroups 缓存组</li><li>name chunk的名称</li><li>test 加载的模块符合该正则时被打包到该chunk</li><li>chunks 模块的范围，有initial(初始模块),async(按需加载模块),all(全部模块)</li></ul><p>上面的例子中将node_modules中的js打包为vendor，以css结尾的打包为styles</p><h2 id="常用的loader和plugin"><a href="#常用的loader和plugin" class="headerlink" title="常用的loader和plugin"></a>常用的loader和plugin</h2><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><blockquote><p> 加载css文件</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.css$/</span></span><br><span class="line">  loader:[<span class="hljs-string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><blockquote><p>加载less文件，一般需要配合css-loader</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">  loader:[<span class="hljs-string">'css-loader'</span>,<span class="hljs-string">'less-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><blockquote><p>将文件拷贝到输出文件夹，并返回相对路径。一般常用在加载图片</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.(png|gif|jpg)/</span>,</span><br><span class="line">  use:[</span><br><span class="line">  &#123;</span><br><span class="line">      loader:<span class="hljs-string">'file-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        name:<span class="hljs-string">'images/[name].[hash:8].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><blockquote><p>转换ES2015+代码到ES5</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="hljs-regexp">/(node_modules|bower_components)/</span>, <span class="hljs-comment">// 排除指定的模块</span></span><br><span class="line">  use:[</span><br><span class="line">    &#123;</span><br><span class="line">      loader:<span class="hljs-string">'babel-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        presets:[<span class="hljs-string">'@babel/preset-env'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ts-loader"><a href="#ts-loader" class="headerlink" title="ts-loader"></a>ts-loader</h3><blockquote><p>转换Typescript到Javascript</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="hljs-regexp">/\.ts/</span>,</span><br><span class="line">  loader:<span class="hljs-string">'ts-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><blockquote><p>简化HTML的创建，该插件会自动将当前打包的资源(如JS、CSS)自动引用到HTML文件</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports =  &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> HtmlWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><blockquote><p>打包之前清理dist目录</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports =  &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h3><blockquote><p>提取、压缩CSS，需要同时配置loader和plugin</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> MiniCssPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports =  &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'less-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">      chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下面使用Webpack来配置一个传统多页面网站开发的示例。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="hljs-selector-tag">package</span><span class="hljs-selector-class">.json</span></span><br><span class="line">├── <span class="hljs-selector-tag">src</span></span><br><span class="line">│   ├── <span class="hljs-selector-tag">about</span>关于页</span><br><span class="line">│   │   ├── <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.html</span></span><br><span class="line">│   │   ├── <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.js</span></span><br><span class="line">│   │   └── <span class="hljs-selector-tag">style</span><span class="hljs-selector-class">.less</span></span><br><span class="line">│   ├── <span class="hljs-selector-tag">common</span></span><br><span class="line">│   │   └── <span class="hljs-selector-tag">style</span><span class="hljs-selector-class">.less</span></span><br><span class="line">│   └── <span class="hljs-selector-tag">home</span>首页</span><br><span class="line">│       ├── <span class="hljs-selector-tag">images</span></span><br><span class="line">│       │   └── <span class="hljs-selector-tag">logo</span><span class="hljs-selector-class">.png</span></span><br><span class="line">│       ├── <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.html</span></span><br><span class="line">│       ├── <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.js</span></span><br><span class="line">│       └── <span class="hljs-selector-tag">style</span><span class="hljs-selector-class">.less</span></span><br><span class="line">├── <span class="hljs-selector-tag">webpack</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span></span><br></pre></td></tr></table></figure><h3 id="使用到的npm包"><a href="#使用到的npm包" class="headerlink" title="使用到的npm包"></a>使用到的npm包</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">"<span class="hljs-selector-tag">clean-webpack-plugin</span>": "^3<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">css-loader</span>": "^3<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.1</span>",</span><br><span class="line">"<span class="hljs-selector-tag">exports-loader</span>": "^0<span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">extract-text-webpack-plugin</span>": "^4<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0-beta</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">file-loader</span>": "^5<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.2</span>",</span><br><span class="line">"<span class="hljs-selector-tag">html-webpack-plugin</span>": "^3<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">html-withimg-loader</span>": "^0<span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.16</span>",</span><br><span class="line">"<span class="hljs-selector-tag">less</span>": "^3<span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.3</span>",</span><br><span class="line">"<span class="hljs-selector-tag">less-loader</span>": "^5<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">mini-css-extract-plugin</span>": "^0<span class="hljs-selector-class">.8</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">normalize</span><span class="hljs-selector-class">.css</span>": "^8<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>",</span><br><span class="line">"<span class="hljs-selector-tag">script-loader</span>": "^0<span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.2</span>",</span><br><span class="line">"<span class="hljs-selector-tag">style-loader</span>": "^1<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>",</span><br><span class="line">"<span class="hljs-selector-tag">url-loader</span>": "^3<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">webpack</span>": "^4<span class="hljs-selector-class">.41</span><span class="hljs-selector-class">.2</span>",</span><br><span class="line">"<span class="hljs-selector-tag">webpack-cli</span>": "^3<span class="hljs-selector-class">.3</span><span class="hljs-selector-class">.10</span>",</span><br><span class="line">"<span class="hljs-selector-tag">webpack-dev-server</span>": "^3<span class="hljs-selector-class">.9</span><span class="hljs-selector-class">.0</span>",</span><br><span class="line">"<span class="hljs-selector-tag">zepto</span>": "^1<span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.0</span>"</span><br></pre></td></tr></table></figure><h3 id="配置入口点"><a href="#配置入口点" class="headerlink" title="配置入口点"></a>配置入口点</h3><p>由于是传统多页网站，每个页面都需要单独打包一份JS，因此<strong>每个页面需要一个入口</strong>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123; <span class="hljs-comment">// 入口配置，每个页面一个入口JS</span></span><br><span class="line">        home: <span class="hljs-string">'./src/home/index'</span>, <span class="hljs-comment">// 首页</span></span><br><span class="line">        about: <span class="hljs-string">'./src/about/index'</span> <span class="hljs-comment">// 关于页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置输出"><a href="#配置输出" class="headerlink" title="配置输出"></a>配置输出</h3><p>本例我们不进行CDN部署，因此输出点配置比较简单。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123; <span class="hljs-comment">// 输出配置</span></span><br><span class="line">  path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">// 输出资源目录</span></span><br><span class="line">  filename: <span class="hljs-string">'scripts/[name].[hash:8].js'</span>, <span class="hljs-comment">// 入口点JS命名规则</span></span><br><span class="line">  chunkFilename: <span class="hljs-string">'scripts/[name]:[chunkhash:8].js'</span>, <span class="hljs-comment">// 公共模块命名规则 </span></span><br><span class="line">  publicPath: <span class="hljs-string">'/'</span> <span class="hljs-comment">// 资源路径前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置开发服务器"><a href="#配置开发服务器" class="headerlink" title="配置开发服务器"></a>配置开发服务器</h3><p>本地开发时不需要每次都编译完Webpack再访问，通过webpack-dev-server，我们可以边开发变查看效果，文件会实时编译。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">        contentBase: <span class="hljs-string">'./dist'</span>, <span class="hljs-comment">// 开发服务器配置</span></span><br><span class="line">        hot: <span class="hljs-literal">true</span> <span class="hljs-comment">// 热加载</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="配置loader"><a href="#配置loader" class="headerlink" title="配置loader"></a>配置loader</h3><p>本例中没有使用ES6进行编程，但是引用了一个非CommonJS的js模块<code>Zepto</code>，传统用法中在HTML页面引入Zepto就会在window下挂载全局对象Zepto。但是在Webpack开发中不建议使用全局变量，否则模块化的优势将受到影响。</p><p>通过使用exports-loader和script-loader，我们可以将Zepto包装为CommonJS模块进入导入。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-built_in">require</span>.resolve(<span class="hljs-string">'zepto'</span>),</span><br><span class="line">                loader: <span class="hljs-string">'exports-loader?window.Zepto!script-loader'</span> <span class="hljs-comment">// 将window.Zepto包装为CommonJS模块</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.less$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'less-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssPlugin.loader, <span class="hljs-string">'css-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="hljs-string">'file-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: <span class="hljs-string">'images/[name].[hash:8].[ext]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="hljs-regexp">/\.(htm|html)$/i</span>,</span><br><span class="line">                loader: <span class="hljs-string">'html-withimg-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="配置optimization"><a href="#配置optimization" class="headerlink" title="配置optimization"></a>配置optimization</h3><p>主要进行公共模块的打包配置。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    name: <span class="hljs-string">"vendor"</span>,</span><br><span class="line">                    test: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                    chunks: <span class="hljs-string">'all'</span>,</span><br><span class="line">                    priority: <span class="hljs-number">10</span>, <span class="hljs-comment">// 优先级</span></span><br><span class="line">                &#125;,</span><br><span class="line">                styles: &#123;</span><br><span class="line">                    name: <span class="hljs-string">'styles'</span>,</span><br><span class="line">                    test: <span class="hljs-regexp">/\.css$/</span>,</span><br><span class="line">                    chunks: <span class="hljs-string">'all'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="配置plugin"><a href="#配置plugin" class="headerlink" title="配置plugin"></a>配置plugin</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        <span class="hljs-keyword">new</span> CleanWebpackPlugin(), <span class="hljs-comment">// 清理发布目录</span></span><br><span class="line">        <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            chunks: [<span class="hljs-string">'home'</span>, <span class="hljs-string">'vendor'</span>, <span class="hljs-string">'styles'</span>], <span class="hljs-comment">// 声明本页面使用到的模块，有主页，公共JS以及公共CSS</span></span><br><span class="line">            filename: <span class="hljs-string">'index.html'</span>, <span class="hljs-comment">// 输出路径，这里直接输出到dist的根目录，也就是dist/index.html</span></span><br><span class="line">            template: <span class="hljs-string">'./src/home/index.html'</span>, <span class="hljs-comment">// HTML模板文件路径</span></span><br><span class="line">            minify: &#123; </span><br><span class="line">                removeComments: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 移除注释</span></span><br><span class="line">                collapseWhitespace: <span class="hljs-literal">true</span> <span class="hljs-comment">// 合并空格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            chunks: [<span class="hljs-string">'about'</span>, <span class="hljs-string">'vendor'</span>, <span class="hljs-string">'styles'</span>],</span><br><span class="line">            filename: <span class="hljs-string">'about/index.html'</span>, <span class="hljs-comment">// 输出到dist/about/index.html</span></span><br><span class="line">            template: <span class="hljs-string">'./src/about/index.html'</span>,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeComments: <span class="hljs-literal">true</span>,</span><br><span class="line">                collapseWhitespace: <span class="hljs-literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> MiniCssPlugin(&#123;</span><br><span class="line">            filename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="hljs-string">'styles/[name].[contenthash:8].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="hljs-keyword">new</span> webpack.NamedModulesPlugin(), <span class="hljs-comment">// 热加载使用</span></span><br><span class="line">        <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="hljs-comment">// 热加载使用</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>部分示例代码如下:</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// src/about/index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'zepto'</span>);</span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">'normalize.css'</span>);</span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">'../common/style.less'</span>);</span><br><span class="line"><span class="hljs-built_in">require</span>(<span class="hljs-string">'./style.less'</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="hljs-string">'#about'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="hljs-string">'点击了about按钮'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>和传统的JS有点不太一样，多了一些css的require，前面说过，webpack把所有资源当做JS模块，因此这是推荐的做法。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!--首页--&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/about"</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"logo"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"home"</span>&gt;</span>首页按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面中不再需要编写JS。</p><blockquote><p>注意：html中使用<img>标签导入图片的编译，目前还没有好的解决办法，可以通过css background的形式进行处理</p></blockquote><h3 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h3><p>开发模式下直接启用webpack-dev-server即可，会自动加载工作目录下的webpack.config.js</p><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package.json</span></span><br><span class="line"><span class="hljs-string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-string">"build"</span>: <span class="hljs-string">"webpack"</span>,</span><br><span class="line">    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"webpack-dev-server"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h3><p>生产模式下使用webpack编译，编译完成后输出最终文件。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="输出效果"><a href="#输出效果" class="headerlink" title="输出效果"></a>输出效果</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="hljs-selector-tag">about</span></span><br><span class="line">│   └── <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.html</span></span><br><span class="line">├── <span class="hljs-selector-tag">images</span></span><br><span class="line">│   └── <span class="hljs-selector-tag">logo</span><span class="hljs-selector-class">.b15c113a</span><span class="hljs-selector-class">.png</span></span><br><span class="line">├── <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.html</span></span><br><span class="line">├── <span class="hljs-selector-tag">scripts</span></span><br><span class="line">│   ├── <span class="hljs-selector-tag">about</span><span class="hljs-selector-class">.3fb4aa0f</span><span class="hljs-selector-class">.js</span></span><br><span class="line">│   ├── <span class="hljs-selector-tag">home</span><span class="hljs-selector-class">.3fb4aa0f</span><span class="hljs-selector-class">.js</span></span><br><span class="line">│   └── <span class="hljs-selector-tag">vendor</span><span class="hljs-selector-pseudo">:ed5b7d31.js</span></span><br><span class="line">└── <span class="hljs-selector-tag">styles</span></span><br><span class="line">    ├── <span class="hljs-selector-tag">about</span><span class="hljs-selector-class">.71eb65e9</span><span class="hljs-selector-class">.css</span></span><br><span class="line">    ├── <span class="hljs-selector-tag">home</span><span class="hljs-selector-class">.cd2738e6</span><span class="hljs-selector-class">.css</span></span><br><span class="line">    └── <span class="hljs-selector-tag">vendor</span><span class="hljs-selector-class">.9df34e21</span><span class="hljs-selector-class">.css</span></span><br></pre></td></tr></table></figure><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>项目已经托管到github，有需要的读者可以自取。</p><p><a href="https://github.com/xialeistudio/webpack-multipage-example" target="_blank" rel="noopener">https://github.com/xialeistudio/webpack-multipage-example</a></p><p><img src="https://static.ddhigh.com/blog/2019-10-22-102654.jpg" alt="0.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Webpack是一个现在Javascript应用程序的模块化打包器，在Webpack中JS/CSS/图片等资源都被视为JS模块，简化了编程。当Webpack构建时，会递归形成一个模块依赖关系图，然后将所有的模块打包为一个或多个bundle。&lt;/p&gt;
      
    
    </summary>
    
      <category term="frontend" scheme="https//www.ddhigh.com/categories/frontend/"/>
    
      <category term="javascript" scheme="https//www.ddhigh.com/categories/frontend/javascript/"/>
    
    
      <category term="webpack" scheme="https//www.ddhigh.com/tags/webpack/"/>
    
  </entry>
  
</feed>
