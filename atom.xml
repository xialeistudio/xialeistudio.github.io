<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xia Lei</title>
  
  <subtitle>Learning &amp; Sharing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.ddhigh.com/"/>
  <updated>2023-06-11T12:20:12.083Z</updated>
  <id>https://www.ddhigh.com/</id>
  
  <author>
    <name>xialeistudio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Understanding TCC in distributed transactions</title>
    <link href="https://www.ddhigh.com/2023/06/04/understanding-TCC-and-message-based-distributed-transactions.html"/>
    <id>https://www.ddhigh.com/2023/06/04/understanding-TCC-and-message-based-distributed-transactions.html</id>
    <published>2023-06-04T06:58:33.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>A <strong>distributed transaction</strong> is a <a href="https://en.wikipedia.org/wiki/Database_transaction" target="_blank" rel="noopener">database transaction</a> in which two or more network hosts are involved.  </p><p>As we know, network and hosts may unreachable due to some reasons, like power failure, hardware malfunction, etc. </p><p>In this article, I’ll share how to implement distributed transaction with TCC.</p><a id="more"></a><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Imaging you are developing an e-commercial application. Typically, there are many services, including OrderService, StockService, ProductService. If customer buys some product and create an order, we need to create an order and reduct the stock of these products.</p><p>The following sequence diagram shows that if everything goes ok, it will create an order and ACID is ensured.</p><pre class="mermaid">sequenceDiagramCustomer-&gt;&gt;+OrderService: Create an orderOrderService-&gt;&gt;+Order Database: Start transactionOrder Database--&gt;&gt;-OrderService: Transaction startedOrderService-&gt;&gt;+Order Database: Store orderOrder Database--&gt;&gt;-OrderService: Order storedOrderService-&gt;&gt;+StockService: Reduct stock of productStockService--&gt;&gt;-OrderService: Operation succeedOrderService-&gt;&gt;+Order Database: Commit transactionOrder Database--&gt;&gt;-OrderService: Transaction committedOrderService--&gt;&gt;-Customer: Order created</pre><p>If database or downstream service fails, we can do a simple rollback to database and OrderService, that seems good. But network and hosts maybe unreachable, our rollback maybe lost. So what will happen? Nobody knows, maybe there is no order created, but stock still reduced, this is a terrible thing!</p><p>The following sequence diagram shows the transaction rollback but the stock reduced, which causes a inconsistency and breaks ACID. </p><pre class="mermaid">sequenceDiagramCustomer-&gt;&gt;+OrderService: Create an orderOrderService-&gt;&gt;+Order Database: Start transactionOrder Database--&gt;&gt;-OrderService: Transaction startedOrderService-&gt;&gt;+Order Database: Store orderOrder Database--&gt;&gt;-OrderService: Order storedOrderService-&gt;&gt;+StockService: Reduct stock of productStockService--&gt;&gt;-OrderService: Operation succeedOrderService--&gt;&gt;OrderService: Internal operation failedOrderService-x StockService: RollbackOrderService-&gt;&gt;+Order Database: Rollback transactionOrder Database--&gt;&gt;-OrderService: Transaction rollbackedOrderService--&gt;&gt;-Customer: Order creation failed</pre><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>TCC represents Try-Confirm-Cancel, any resource in distributed transaction should provide three stage:</p><ul><li>Try: Try to allocate resource for future use</li><li>Confirm: All operation at stage <strong>Try</strong> are succeed, commit the distributed transaction</li><li>Cancel: Something wrong, rollback</li></ul><p>Take the e-commerce order just now as an example, the following sequence diagram shows the whole process in TCC.</p><pre class="mermaid">sequenceDiagramCustomer-&gt;&gt;+OrderService: Create an orderOrderService-&gt;&gt;+Order Database: Try: Store order<executing>Order Database--&gt;&gt;-OrderService: Order storedalt Successful pathOrderService-&gt;&gt;+StockService: Try: Reserve some stockStockService--&gt;&gt;-OrderService: Stock reservedOrderService-&gt;&gt;+StockService: Confirm: Mark stock reducedStockService--&gt;&gt;-OrderService: Stock reducedOrderService-&gt;&gt;+Order Database: Confirm: Modify order status<succeed>Order Database--&gt;&gt;-OrderService: Order modifiedelse Failure pathOrderService-&gt;&gt;+StockService: Try: Reserve some stockStockService--&gt;&gt;-OrderService: Stock reservedOrderService-xStockService: Confirm: Mark stock reducedOrderService-&gt;&gt;+StockService: Cancel: Restore stockStockService--&gt;&gt;-OrderService: Stock restoredOrderService-&gt;&gt;+Order Database: Cancel: Modify order status<failed>Order Database--&gt;&gt;-OrderService: Order modifiedendOrderService--&gt;&gt;-Customer: Order created or failed</failed></succeed></executing></pre><p>If everything goes ok, our Try-Confirm will execute successfully, database is consistent, if something fails, our Try-Cancel will handle this situation, database is also consisten. But as mentioned above, network and hosts maybe unreachable, so our commit or rollback will lost.</p><h3 id="General-Problems"><a href="#General-Problems" class="headerlink" title="General Problems"></a>General Problems</h3><p>I’ll show some general problems and associated solution with TCC.</p><ol><li><p>Order creation with EXECUTING state fails</p><p>Local transaction will rollback, make sense!</p></li><li><p>Call StockService to reverse some stocks fails</p><p>Local transaction will rollback, and a rollback also send to StockService, StockService can do rollback or do nothing</p></li><li><p>Call StockService to reverse some stocks successfully, but reply of StockService lost</p><p>This will cause Try to timeout, local transaction will rollback and a following rollback will send to StockService, StockService can do rollback.</p></li></ol><p>To solve some temporary problem, we can do retry. There are two points we need to considerate when do retry.</p><p><strong>Idempotency</strong></p><p>Idempotency means that no matter how many requests are made, the result is the same as the first successful request.</p><p>For example, we want to reserve 10 units of a product,  no matter how many times we call Try to StockService, finally only 10 units are reserved.</p><p>For every order, we create a unique id as idempotent key, and send to StockService, so if StockService processed current request, it will simply return the previous result.</p><p><strong>Retry delay</strong></p><p>There are many delay strategies:</p><ul><li>Immediately retry. Once previous request failed, do a retry immediately, this is not a good choice which may cause downstream service overload</li><li>Fixed rate retry. Retry with a fixed rate like 10ms.</li><li>Incremental retry. Every retry will increase delay sequentially, for example, sleep 10ms, 20ms, 30ms</li><li>Expotential backoff retry.  Every retry will increase delay expotentially, for example, sleep 10ms, 20ms, 40ms</li></ul><h3 id="Special-Problems"><a href="#Special-Problems" class="headerlink" title="Special Problems"></a>Special Problems</h3><p>Due to network issue, there are some special problems.</p><p><strong>Empty Rollback</strong></p><p>Try did not execute, but Cancel executed. </p><p>The following steps show how <strong>empty rollback</strong> occurs.</p><ol><li>Make a Try to downstream (packet lost)</li><li>Transaction rollback, make a Cancel to downstream</li><li>Downstream receives Cancel</li></ol><p>The Cancel operaiton of downstream will fail because of no cancellable record found, but if we responses fail to upstream, upstream will do a retry which is a useless operation. So in Empty Rollback situation, we need to response success to upstream and downstream service do nothing to avoid network and compute resource waste.</p><p><strong>Hanging transaction</strong></p><p>Handing transaction means because of network issues, Cancel is executed before Try, if not handled properly, may result in inconsistencies.</p><p>The following steps show how <strong>Haning transaction</strong> occurs.</p><ol><li>Make a Try to downstream(congested network)</li><li>Transaction rollback due to timeout of Try, make a Cancel to downstream</li><li>Downstream receives Cancel, do nothing but respond success</li><li>Downstream receives Congested Try, reserve resource</li></ol><p>To solve this problem, downstream service need to record that current transaction was handled(by record transactionId) before reply Cancel call to upstream. Once Try received, check whether the current transaction has been handled. </p><h2 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a>Wrap Up</h2><p>TCC is a good solution to implement distributed transaction in which there also are some problems. Idempotency and proper Retry make TCC better.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[1] <a href="https://en.wikipedia.org/wiki/Distributed_transaction" target="_blank" rel="noopener">Distributed transaction</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;A &lt;strong&gt;distributed transaction&lt;/strong&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_transaction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;database transaction&lt;/a&gt; in which two or more network hosts are involved.  &lt;/p&gt;
&lt;p&gt;As we know, network and hosts may unreachable due to some reasons, like power failure, hardware malfunction, etc. &lt;/p&gt;
&lt;p&gt;In this article, I’ll share how to implement distributed transaction with TCC.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
      <category term="engineering" scheme="https://www.ddhigh.com/categories/engineering/"/>
    
    
      <category term="distributing" scheme="https://www.ddhigh.com/tags/distributing/"/>
    
  </entry>
  
  <entry>
    <title>Minimum difficulty of a job schedule</title>
    <link href="https://www.ddhigh.com/2023/05/16/minimum-difficulty-of-a-job-schedule.html"/>
    <id>https://www.ddhigh.com/2023/05/16/minimum-difficulty-of-a-job-schedule.html</id>
    <published>2023-05-16T14:19:15.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Today I’ll share an article about <code>Dynamic Programing</code> .</p><blockquote><p><strong>Dynamic programming</strong> is both a <a href="https://en.wikipedia.org/wiki/Mathematical_optimization" target="_blank" rel="noopener">mathematical optimization</a> method and a computer programming method. The method was developed by <a href="https://en.wikipedia.org/wiki/Richard_Bellman" target="_blank" rel="noopener">Richard Bellman</a> in the 1950s and has found applications in numerous fields, from <a href="https://en.wikipedia.org/wiki/Aerospace_engineering" target="_blank" rel="noopener">aerospace engineering</a> to <a href="https://en.wikipedia.org/wiki/Economics" target="_blank" rel="noopener">economics</a>.</p><p><strong><em>wikipedia</em></strong> - <a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank" rel="noopener">Dynamic programming</a></p></blockquote><a id="more"></a><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>You want to schedule a list of jobs in <code>d</code> days. Jobs are dependent (i.e To work on the <code>ith</code> job, you have to finish all the jobs <code>j</code> where <code>0 &lt;= j &lt; i</code>).</p><p>You have to finish <strong>at least</strong> one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the <code>d</code> days. The difficulty of a day is the maximum difficulty of a job done on that day.</p><p>You are given an integer array <code>jobDifficulty</code> and an integer <code>d</code>. The difficulty of the <code>ith</code> job is <code>jobDifficulty[i]</code>.</p><p>Return <em>the minimum difficulty of a job schedule</em>. If you cannot find a schedule for the jobs return <code>-1</code>.</p><p><strong>Example 1:</strong></p><p><img src="https://static.ddhigh.com/blog/2023/05/16/1684246842894993000.png" alt="img"></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: jobDifficulty = [<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], d = <span class="hljs-number">2</span></span><br><span class="line">Output: <span class="hljs-number">7</span></span><br><span class="line">Explanation: First day you can finish the first <span class="hljs-number">5</span> jobs, total difficulty = <span class="hljs-number">6.</span></span><br><span class="line">Second day you can finish the last job, total difficulty = <span class="hljs-number">1.</span></span><br><span class="line">The difficulty of the schedule = <span class="hljs-number">6</span> + <span class="hljs-number">1</span> = <span class="hljs-number">7</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Example 2:</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: jobDifficulty = [<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>], d = <span class="hljs-number">4</span></span><br><span class="line">Output: <span class="hljs-number">-1</span></span><br><span class="line">Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule <span class="hljs-keyword">for</span> the given jobs.</span><br></pre></td></tr></tbody></table></figure><p><strong>Example 3:</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: jobDifficulty = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], d = <span class="hljs-number">3</span></span><br><span class="line">Output: <span class="hljs-number">3</span></span><br><span class="line">Explanation: The schedule <span class="hljs-keyword">is</span> one job per day. total difficulty will be <span class="hljs-number">3.</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li><li><code>0 &lt;= jobDifficulty[i] &lt;= 1000</code></li><li><code>1 &lt;= d &lt;= 10</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h3><p>We need to split $jobDifficulty$ to $d$ parts, and make the sum of the maximum of each parts be lowest. </p><p>If the $d$ equal <code>1</code>, the answer is simple: $ \max_{i=0}^n jobDifficulty_i $, so what if  $d$ is greater than $1$?</p><p>We can split at index $k$ , so we get  $2$ parts, the first part $jobDifficulty[0,k]$ and the second part $jobDifficulty[k+1, n]$,</p><p>so we can calculate the maximum of the first part and the second part, and then we succeeded in reducing the scale of the problem, we can keep splitting the first part, for different $k$, we’ll get different parts and different maximum of each part.</p><p>Let’s start Dynamic programming. In this article, I’ll use <strong>Recursion</strong> to implement Dynamic programming.</p><p><strong>DP Definition</strong></p><p>We can declare a function as below, this function will return the <strong>minimal</strong> sum of $count$ parts from $nums[0, index]$.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> count)</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>Base case</strong></p><ul><li>If the $length$ of $nums[0, index]$ is less than $count$, it’s impossible to split.</li><li>If the $count=1$ , just return  $\max_{i=0}^n nums_i$</li></ul><p><strong>State transition equation</strong></p><p>If the $count&gt;1$, we will declare a split point $i$ iterates from $0…index-1$,  so we get a answer and a sub problem, to solve the sub problem, we can call <code>dp</code> function again. So we can get a State transition equation.<br>$$<br>dp[index][count] = min(dp[index][count], current+subProblem)<br>$$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] memo;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Human translate</span></span><br><span class="line">        <span class="hljs-comment">// split the `jobDifficulty` array to `d` parts, make the sum of the maximum of each parts be lowest</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minDifficulty</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] jobDifficulty, <span class="hljs-keyword">int</span> d)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">if</span> (jobDifficulty.length &lt; d) {</span><br><span class="line">                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            memo = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[jobDifficulty.length][d+<span class="hljs-number">1</span>];</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; memo.length; i++) {</span><br><span class="line">                Arrays.fill(memo[i], -<span class="hljs-number">2</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> dp(jobDifficulty, jobDifficulty.length - <span class="hljs-number">1</span>, d);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// split [0, index] to `count` parts</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> count)</span> </span>{</span><br><span class="line">            <span class="hljs-comment">// if [0, index] can't split to `count` parts, return -1(impossible)</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (index + <span class="hljs-number">1</span> &lt; count) {</span><br><span class="line">                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (memo[index][count] != -<span class="hljs-number">2</span>) { <span class="hljs-comment">// if the memo store current value, return</span></span><br><span class="line">                <span class="hljs-keyword">return</span> memo[index][count];</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-comment">// split to one part, return the maximun</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) {</span><br><span class="line">                <span class="hljs-keyword">var</span> max = Integer.MIN_VALUE;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= index; i++) {</span><br><span class="line">                    max = Math.max(max, nums[i]);</span><br><span class="line">                }</span><br><span class="line">                memo[index][count] = max;</span><br><span class="line">                <span class="hljs-keyword">return</span> max;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">var</span> answer = Integer.MAX_VALUE;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) { <span class="hljs-comment">// i represents the split point</span></span><br><span class="line">                <span class="hljs-keyword">var</span> current = max(nums, i + <span class="hljs-number">1</span>, index); <span class="hljs-comment">// get the maximum of right part</span></span><br><span class="line">                <span class="hljs-comment">// we have a sub problem that split nums[0, i] to `count-1` part</span></span><br><span class="line">                <span class="hljs-keyword">var</span> subProblem = dp(nums, i, count - <span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">if</span> (subProblem != -<span class="hljs-number">1</span>) { <span class="hljs-comment">// if the sub problem has answer, update</span></span><br><span class="line">                    answer = Math.min(answer, current + subProblem);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            answer = answer == Integer.MAX_VALUE ? -<span class="hljs-number">1</span> : answer;</span><br><span class="line">            memo[index][count] = answer;</span><br><span class="line">            <span class="hljs-keyword">return</span> answer;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> max = Integer.MIN_VALUE;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= j; k++) {</span><br><span class="line">                max = Math.max(max, nums[k]);</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> max;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Complexity</strong></p><p>Time Complexity: $O(n^2*d)$, $n$ is the length of $jobDiffculty$, we have a internal cycle to split the $nums$, whose time complexity is $d$, and the <code>max</code> function has a time complexity $n$, and when $d=1$, we have a cycle to calculate maximum.</p><p>Space complexity: $O(n*d)$, we use a memo to store the result to prevent repeat call.</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Today I’ll share an article about &lt;code&gt;Dynamic Programing&lt;/code&gt; .&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dynamic programming&lt;/strong&gt; is both a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_optimization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mathematical optimization&lt;/a&gt; method and a computer programming method. The method was developed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Bellman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Richard Bellman&lt;/a&gt; in the 1950s and has found applications in numerous fields, from &lt;a href=&quot;https://en.wikipedia.org/wiki/Aerospace_engineering&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aerospace engineering&lt;/a&gt; to &lt;a href=&quot;https://en.wikipedia.org/wiki/Economics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;economics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;wikipedia&lt;/em&gt;&lt;/strong&gt; - &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dynamic programming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="Dynamic programming" scheme="https://www.ddhigh.com/tags/Dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>understanding Merge Sort</title>
    <link href="https://www.ddhigh.com/2023/05/11/understanding-Merge-Sort.html"/>
    <id>https://www.ddhigh.com/2023/05/11/understanding-Merge-Sort.html</id>
    <published>2023-05-11T02:08:29.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Implementing a sorted set by ordered array</title>
    <link href="https://www.ddhigh.com/2023/05/06/implement-a-sorted-set-by-array.html"/>
    <id>https://www.ddhigh.com/2023/05/06/implement-a-sorted-set-by-array.html</id>
    <published>2023-05-06T07:41:52.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" target="_blank" rel="noopener"><code>Set</code></a> that further provides a <em>total ordering</em> on its elements. The elements are ordered using their <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html" target="_blank" rel="noopener">natural ordering</a>, or by a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html" target="_blank" rel="noopener"><code>Comparator</code></a> typically provided at sorted set creation time. The set’s iterator will traverse the set in ascending element order. Several additional operations are provided to take advantage of the ordering. (This interface is the set analogue of <a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html" target="_blank" rel="noopener"><code>SortedMap</code></a>.)</p><p><strong><em>Oracle</em></strong> - <a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html" target="_blank" rel="noopener">SortedSet</a></p></blockquote><p>Java provides a built-in <code>SortedSet</code> implementation, known as <code>TreeSet</code>. In this article, I’ll show how to implement a <code>SortedSet</code> by <code>Ordered Array</code>.</p><a id="more"></a><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><p>To implement a <code>SortSet</code>, you need to know about the following concepts and algorithms.</p><h3 id="Binary-Search-Algorithm"><a href="#Binary-Search-Algorithm" class="headerlink" title="Binary Search Algorithm"></a>Binary Search Algorithm</h3><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Computer_science" target="_blank" rel="noopener">computer science</a>, <strong>binary search</strong>, also known as <strong>half-interval search</strong>,<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#cite_note-Williams1976-1" target="_blank" rel="noopener">[1]</a> <strong>logarithmic search</strong>,<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#cite_note-FOOTNOTEKnuth1998§6.2.1_(&quot;Searching_an_ordered_table&quot;" target="_blank" rel="noopener">[2]</a>,<em>subsection</em>“Binary_search”-2) or <strong>binary chop</strong>,<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#cite_note-FOOTNOTEButterfieldNgondi201646-3" target="_blank" rel="noopener">[3]</a> is a <a href="https://en.wikipedia.org/wiki/Search_algorithm" target="_blank" rel="noopener">search algorithm</a> that finds the position of a target value within a <a href="https://en.wikipedia.org/wiki/Sorted_array" target="_blank" rel="noopener">sorted array</a>.<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#cite_note-FOOTNOTECormenLeisersonRivestStein200939-4" target="_blank" rel="noopener">[4]</a><a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#cite_note-5" target="_blank" rel="noopener">[5]</a> Binary search compares the target value to the middle element of the array. If they are not equal, the half in which the target cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the target value, and repeating this until the target value is found. If the search ends with the remaining half being empty, the target is not in the array.</p><p><strong><em>Wikipedia</em></strong> - <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener">Binary search algorithm</a></p></blockquote><p>Binary Search can also search for ceil and floor key to a specific key.</p><p>In my implementation, I use Binary Search to find a specific key or the first key greater than the specific key.</p><h3 id="Automatic-expansion-algorithm"><a href="#Automatic-expansion-algorithm" class="headerlink" title="Automatic expansion algorithm"></a>Automatic expansion algorithm</h3><p>In Java,<code>Array</code> can’t be automatically expanded, so we need to expand manually, a simple way is to double the array size and copy the element to the new array.</p><p>Here is an example.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Automatic expansion</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCapacity)</span> </span>{</span><br><span class="line">  <span class="hljs-comment">// keys is enough for newCapacity</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (newCapacity &lt; keys.length) {</span><br><span class="line">  <span class="hljs-keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="hljs-comment">// increase by double</span></span><br><span class="line">  <span class="hljs-keyword">var</span> newKeys = (K[]) Array.newInstance(Comparable<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">keys</span>.<span class="hljs-title">length</span> * 2)</span>;</span><br><span class="line">  <span class="hljs-keyword">var</span> newValues = (V[]) Array.newInstance(Comparable<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">values</span>.<span class="hljs-title">length</span> * 2)</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; i++) {</span><br><span class="line">  <span class="hljs-keyword">if</span> (keys[i] != <span class="hljs-keyword">null</span>) {</span><br><span class="line">    newKeys[i] = keys[i];</span><br><span class="line">    newValues[i] = values[i];</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  keys = newKeys;</span><br><span class="line">  values = newValues;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="How-to-find-ceil-floor-key"><a href="#How-to-find-ceil-floor-key" class="headerlink" title="How to find ceil/floor key?"></a>How to find ceil/floor key?</h3><p>Well, for examle, there is a sorted array.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]</span><br></pre></td></tr></tbody></table></figure><p>If we want to find $ceil(5)$, what’s the step? Here is the binary search procedure.</p><p><strong>Step 1</strong><br>$$<br>left = 0, right = 5, middle = (0+5)/2=2, nums[middle] = 3, \because 3 &lt; 5, \therefore left = middle + 1 = 4<br>$$<br><strong>Step 2</strong><br>$$<br>left = 4, right = 5, middle = (4+5)/2=4, nums[middle] = 7, \because 7 &gt; 5, \therefore right = middle-1=3<br>$$<br><strong>Step3</strong><br>$$<br>left=4,right=3, exit loop<br>$$<br>so finally $ceil(5) = 7$.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>First, we need to declare a interface, so if we have some new implementations, we can easily expand our algorithm.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// A simple SortSet implementation by Array</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SortSet</span>&lt;<span class="hljs-title">K</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">K</span>&gt;, <span class="hljs-title">V</span>&gt; </span>{</span><br><span class="line">    <span class="hljs-comment">// Retrieve for the value of specific key</span></span><br><span class="line">    <span class="hljs-function">V <span class="hljs-title">get</span><span class="hljs-params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Put a new value</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Remove a specific key</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Retrieve the first key greater than the specific key</span></span><br><span class="line">    <span class="hljs-function">K <span class="hljs-title">ceil</span><span class="hljs-params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Get the rank of the specific key</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Retrieve the last key less than the specific key</span></span><br><span class="line">    <span class="hljs-function">K <span class="hljs-title">floor</span><span class="hljs-params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Check whether the key is exists</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArraySortedSet</span>&lt;<span class="hljs-title">K</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">K</span>&gt;, <span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">SortSet</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt; </span>{</span><br><span class="line">        <span class="hljs-keyword">private</span> K[] keys;</span><br><span class="line">        <span class="hljs-keyword">private</span> V[] values;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArraySortedSet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>{</span><br><span class="line">            keys = (K[]) Array.newInstance(Comparable<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">capacity</span>)</span>;</span><br><span class="line">            values = (V[]) Array.newInstance(Object<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">capacity</span>)</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArraySortedSet</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">this</span>(<span class="hljs-number">8</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(K key)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> rank = rank(key);</span><br><span class="line">            <span class="hljs-keyword">if</span> (rank &lt; size &amp;&amp; keys[rank].compareTo(key) == <span class="hljs-number">0</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> values[rank];</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> rank = rank(key);</span><br><span class="line">            <span class="hljs-keyword">if</span> (rank &lt; size &amp;&amp; keys[rank].compareTo(key) == <span class="hljs-number">0</span>) {</span><br><span class="line">                values[rank] = value;</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            ensureCapacity(size + <span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = size; j &gt; rank; j--) {</span><br><span class="line">                <span class="hljs-comment">// move the prev element forward to make an empty to save new element</span></span><br><span class="line">                keys[j] = keys[j - <span class="hljs-number">1</span>];</span><br><span class="line">                values[j] = values[j - <span class="hljs-number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            keys[rank] = key;</span><br><span class="line">            values[rank] = value;</span><br><span class="line">            size++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Automatic expansion</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCapacity)</span> </span>{</span><br><span class="line">            <span class="hljs-comment">// keys is enough for newCapacity</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (newCapacity &lt; keys.length) {</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-comment">// increase by double</span></span><br><span class="line">            <span class="hljs-keyword">var</span> newKeys = (K[]) Array.newInstance(Comparable<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">keys</span>.<span class="hljs-title">length</span> * 2)</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> newValues = (V[]) Array.newInstance(Comparable<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">values</span>.<span class="hljs-title">length</span> * 2)</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; i++) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (keys[i] != <span class="hljs-keyword">null</span>) {</span><br><span class="line">                    newKeys[i] = keys[i];</span><br><span class="line">                    newValues[i] = values[i];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            keys = newKeys;</span><br><span class="line">            values = newValues;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(K key)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> rank = rank(key);</span><br><span class="line">            <span class="hljs-keyword">if</span> (rank &lt; size &amp;&amp; keys[rank].equals(key)) {</span><br><span class="line">                <span class="hljs-comment">// move the next element forward</span></span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = rank + <span class="hljs-number">1</span>; i &lt; size; i++) {</span><br><span class="line">                    keys[i - <span class="hljs-number">1</span>] = keys[i];</span><br><span class="line">                    values[i - <span class="hljs-number">1</span>] = values[i];</span><br><span class="line">                }</span><br><span class="line">                size--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">ceil</span><span class="hljs-params">(K key)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> rank = rank(key);</span><br><span class="line">            <span class="hljs-keyword">if</span> (rank &lt; size &amp;&amp; keys[rank].compareTo(key) == <span class="hljs-number">0</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> keys[rank];</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> rank &gt;= size ? <span class="hljs-keyword">null</span> : keys[rank];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(K key)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> start = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> end = size;</span><br><span class="line">            <span class="hljs-keyword">while</span> (start &lt;= end) {</span><br><span class="line">                <span class="hljs-keyword">var</span> middle = start + (end - start) / <span class="hljs-number">2</span>;</span><br><span class="line">                <span class="hljs-keyword">if</span> (keys[middle] == <span class="hljs-keyword">null</span>) {</span><br><span class="line">                    end = middle - <span class="hljs-number">1</span>;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-keyword">var</span> compare = key.compareTo(keys[middle]);</span><br><span class="line">                <span class="hljs-keyword">if</span> (compare == <span class="hljs-number">0</span>) {</span><br><span class="line">                    <span class="hljs-keyword">return</span> middle;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-keyword">if</span> (compare &gt; <span class="hljs-number">0</span>) {</span><br><span class="line">                    start = middle + <span class="hljs-number">1</span>;</span><br><span class="line">                } <span class="hljs-keyword">else</span> {</span><br><span class="line">                    end = middle - <span class="hljs-number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> start;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">floor</span><span class="hljs-params">(K key)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> left = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> right = size - <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span> (left &lt;= right) {</span><br><span class="line">                <span class="hljs-keyword">var</span> middle = left + (right - left) / <span class="hljs-number">2</span>;</span><br><span class="line">                <span class="hljs-keyword">var</span> compare = keys[middle].compareTo(key);</span><br><span class="line">                <span class="hljs-keyword">if</span> (compare == <span class="hljs-number">0</span>) {</span><br><span class="line">                    <span class="hljs-keyword">return</span> keys[middle];</span><br><span class="line">                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (compare &gt; <span class="hljs-number">0</span>) {</span><br><span class="line">                    right = middle - <span class="hljs-number">1</span>;</span><br><span class="line">                } <span class="hljs-keyword">else</span> {</span><br><span class="line">                    left = middle + <span class="hljs-number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-comment">// target is left than minimal value of keys</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (right &lt; <span class="hljs-number">0</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (left &gt;= size) { <span class="hljs-comment">// left is greater than the max keys</span></span><br><span class="line">                <span class="hljs-keyword">return</span> keys[size - <span class="hljs-number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> keys[right];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(K key)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">return</span> get(key) != <span class="hljs-keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> sb = <span class="hljs-keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (keys[i] != <span class="hljs-keyword">null</span>) {</span><br><span class="line">                    sb.append(keys[i]).append(<span class="hljs-string">'='</span>).append(values[i]);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (i &lt; size - <span class="hljs-number">1</span>) {</span><br><span class="line">                        sb.append(<span class="hljs-string">','</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> sb.toString();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> ArraySortedSet&lt;Integer, Integer&gt;();</span><br><span class="line">        set.put(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);</span><br><span class="line">        set.put(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">        set.put(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);</span><br><span class="line">        set.put(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>);</span><br><span class="line">        set.put(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>);</span><br><span class="line">        set.put(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>);</span><br><span class="line">        set.put(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>);</span><br><span class="line">        set.put(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>);</span><br><span class="line">        set.put(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        System.out.println(set.get(<span class="hljs-number">3</span>));</span><br><span class="line">        System.out.println(set.get(-<span class="hljs-number">1</span>));</span><br><span class="line">        System.out.println(set.get(<span class="hljs-number">2</span>));</span><br><span class="line">        System.out.println(set.ceil(<span class="hljs-number">2</span>));</span><br><span class="line">        System.out.println(set.ceil(-<span class="hljs-number">1</span>));</span><br><span class="line">        set.put(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        System.out.println(set.ceil(-<span class="hljs-number">1</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><strong><em>Oracle</em></strong> - <a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html" target="_blank" rel="noopener">SortedSet</a></li><li><strong><em>Wikipedia</em></strong> - <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener">Binary search algorithm</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;A &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its elements. The elements are ordered using their &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;natural ordering&lt;/a&gt;, or by a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; typically provided at sorted set creation time. The set’s iterator will traverse the set in ascending element order. Several additional operations are provided to take advantage of the ordering. (This interface is the set analogue of &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Oracle&lt;/em&gt;&lt;/strong&gt; - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SortedSet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java provides a built-in &lt;code&gt;SortedSet&lt;/code&gt; implementation, known as &lt;code&gt;TreeSet&lt;/code&gt;. In this article, I’ll show how to implement a &lt;code&gt;SortedSet&lt;/code&gt; by &lt;code&gt;Ordered Array&lt;/code&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>How to retry requests correctly with Feign</title>
    <link href="https://www.ddhigh.com/2023/05/05/how-to-retry-requests-correctly.html"/>
    <id>https://www.ddhigh.com/2023/05/05/how-to-retry-requests-correctly.html</id>
    <published>2023-05-05T03:46:27.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Network is unstable, it can fail at any moment. In this article, I’ll share how to retry requests correctly with Feign.</p><blockquote><p><a href="https://github.com/OpenFeign/feign/" target="_blank" rel="noopener">Feign</a> is a Java to HTTP client binder inspired by <a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit</a>, <a href="https://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html" target="_blank" rel="noopener">JAXRS-2.0</a>, and <a href="http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html" target="_blank" rel="noopener">WebSocket</a>. Feign’s first goal was reducing the complexity of binding <a href="https://github.com/Netflix/Denominator" target="_blank" rel="noopener">Denominator</a> uniformly to HTTP APIs regardless of <a href="http://www.slideshare.net/adrianfcole/99problems" target="_blank" rel="noopener">ReSTfulness</a>.</p><p><strong><em><a href="https://github.com/OpenFeign/feign/#error-handling" target="_blank" rel="noopener">Feign</a></em></strong> - Introduction</p></blockquote><a id="more"></a><h2 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h2><h3 id="ErrorDecoder"><a href="#ErrorDecoder" class="headerlink" title="ErrorDecoder"></a>ErrorDecoder</h3><p><a href="https://github.com/OpenFeign/feign/#error-handling" target="_blank" rel="noopener">ErrorDecoder</a> is a interface in Feign to decode an Exception, you can modify the return exception type of <code>decode</code> method, we usually implement retry in conjunction with <code>ErrorDecoder</code> with <code>Retryer</code>.  </p><p>The following code shows the definition of <code>ErrorDecoder</code>.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ErrorDecoder</span> </span>{</span><br><span class="line">  <span class="hljs-function">Exception <span class="hljs-title">decode</span><span class="hljs-params">(String methodKey, Response response)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Retryer"><a href="#Retryer" class="headerlink" title="Retryer"></a>Retryer</h3><blockquote><p>Feign, by default, will automatically retry <code>IOException</code>s, regardless of HTTP method, treating them as transient network related exceptions, and any <code>RetryableException</code> thrown from an <code>ErrorDecoder</code>. </p><p><strong><em><a href="https://github.com/OpenFeign/feign/#error-handling" target="_blank" rel="noopener">Feign</a></em></strong> - <a href="https://github.com/OpenFeign/feign/#retry" target="_blank" rel="noopener">Retryer</a></p></blockquote><p>In <code>Retryer</code>, we need to override <code>continueOrPropagate</code> method to do some retry work, there are 2 execution flows:</p><ol><li>If no exception thrown, Feign will retry a new request</li><li>If any exception thrown, Feign will stop to retry</li></ol><h2 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h2><p>Imaging you are developing a feature: when we get a 401 response from server, we need to refresh our access_token and then request again. This is all transparent and has no impact on the end user.</p><p>How do we solve this problem?</p><p>Simply, we need to get a new access_token by a new request and then set the access_token to the header of the failed request, so the next request can be succeed.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>401 response usually throws a <code>UnauthorizedException</code>, it’s not an <code>IOException</code> so Feign will not retry. </p><p>We can implement <code>ErrorDecoder</code> to return a <code>RetryableException</code> so Feign will retry our request, and we need implement a <code>Retryer</code>, modify the request parameters in <code>continueOrPropagate</code> method.</p><p>Here is a full example.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> </span>{</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">var</span> github = Feign.builder()</span><br><span class="line">                .decoder(<span class="hljs-keyword">new</span> GsonDecoder())</span><br><span class="line">                .retryer(<span class="hljs-keyword">new</span> MyRetryer(<span class="hljs-number">100</span>, <span class="hljs-number">3</span>))</span><br><span class="line">                .errorDecoder(<span class="hljs-keyword">new</span> MyErrorDecoder())</span><br><span class="line">                .target(Github.class, "https://api.github.com");</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">var</span> contributors = github.contributors(<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>, <span class="hljs-string">"invalid_token"</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> contributor : contributors) {</span><br><span class="line">            System.out.println(contributor.login + <span class="hljs-string">" "</span> + contributor.contributions);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyErrorDecoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ErrorDecoder</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ErrorDecoder defaultErrorDecoder = <span class="hljs-keyword">new</span> Default();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Exception <span class="hljs-title">decode</span><span class="hljs-params">(String methodKey, Response response)</span> </span>{</span><br><span class="line">            <span class="hljs-comment">// wrapper 401 to RetryableException in order to retry</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (response.status() == <span class="hljs-number">401</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RetryableException(response.status(), response.reason(), response.request().httpMethod(), <span class="hljs-keyword">null</span>, response.request());</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> defaultErrorDecoder.decode(methodKey, response);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRetryer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Retryer</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> period;</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxAttempts;</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> attempt = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRetryer</span><span class="hljs-params">(<span class="hljs-keyword">long</span> period, <span class="hljs-keyword">int</span> maxAttempts)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">this</span>.period = period;</span><br><span class="line">            <span class="hljs-keyword">this</span>.maxAttempts = maxAttempts;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">continueOrPropagate</span><span class="hljs-params">(RetryableException e)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">if</span> (++attempt &gt; maxAttempts) {</span><br><span class="line">                <span class="hljs-keyword">throw</span> e;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (e.status() == <span class="hljs-number">401</span>) {</span><br><span class="line">                <span class="hljs-comment">// remove Authorization first, otherwise Feign will add a new Authorization header</span></span><br><span class="line">                <span class="hljs-comment">// cause github responses a 400 bad request</span></span><br><span class="line">                e.request().requestTemplate().removeHeader(<span class="hljs-string">"Authorization"</span>);</span><br><span class="line">                e.request().requestTemplate().header(<span class="hljs-string">"Authorization"</span>, <span class="hljs-string">"Bearer "</span> + getNewToken());</span><br><span class="line">                <span class="hljs-keyword">try</span> {</span><br><span class="line">                    Thread.sleep(period);</span><br><span class="line">                } <span class="hljs-keyword">catch</span> (InterruptedException ex) {</span><br><span class="line">                    <span class="hljs-keyword">throw</span> e;</span><br><span class="line">                }</span><br><span class="line">            } <span class="hljs-keyword">else</span> {</span><br><span class="line">                <span class="hljs-keyword">throw</span> e;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Access an external api to obtain new token</span></span><br><span class="line">        <span class="hljs-comment">// In this example, we can simply return a fixed token to demonstrate how Retryer works</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getNewToken</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"newToken"</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-meta">@Override</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Retryer <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyRetryer(period, maxAttempts);</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>By modify <code>e.request().requestTemplate()</code>, you can do anything you want to modify a request.</p><p><em>This code example has been merged to Feign Project.</em></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener"><strong><em></em></strong></a><strong><em><a href="https://github.com/OpenFeign/feign/#error-handling" target="_blank" rel="noopener">Feign</a></em></strong> - Introduction</li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Network is unstable, it can fail at any moment. In this article, I’ll share how to retry requests correctly with Feign.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Feign&lt;/a&gt; is a Java to HTTP client binder inspired by &lt;a href=&quot;https://github.com/square/retrofit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Retrofit&lt;/a&gt;, &lt;a href=&quot;https://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JAXRS-2.0&lt;/a&gt;, and &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebSocket&lt;/a&gt;. Feign’s first goal was reducing the complexity of binding &lt;a href=&quot;https://github.com/Netflix/Denominator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Denominator&lt;/a&gt; uniformly to HTTP APIs regardless of &lt;a href=&quot;http://www.slideshare.net/adrianfcole/99problems&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ReSTfulness&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign/#error-handling&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Feign&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; - Introduction&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
      <category term="Engineering" scheme="https://www.ddhigh.com/categories/Engineering/"/>
    
    
      <category term="java" scheme="https://www.ddhigh.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>How to build a Finite State Machine to help business workflow</title>
    <link href="https://www.ddhigh.com/2023/05/04/how-to-build-a-Finite-State-Machine-to-help-business-workflow.html"/>
    <id>https://www.ddhigh.com/2023/05/04/how-to-build-a-Finite-State-Machine-to-help-business-workflow.html</id>
    <published>2023-05-04T09:16:00.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>This is the first article written in English. In this article, I’ll share how to build a Finite State Machine(FSM) to help business workflow transition, such as auditing.</p><blockquote><p>A <strong>finite-state machine</strong> (<strong>FSM</strong>) or <strong>finite-state automaton</strong> (<strong>FSA</strong>, plural: <em>automata</em>), <strong>finite automaton</strong>, or simply a <strong>state machine</strong>, is a mathematical <a href="https://en.wikipedia.org/wiki/Model_of_computation" target="_blank" rel="noopener">model of computation</a>. It is an <a href="https://en.wikipedia.org/wiki/Abstract_machine" target="_blank" rel="noopener">abstract machine</a> that can be in exactly one of a finite number of <em><a href="https://en.wikipedia.org/wiki/State_(computer_science" target="_blank" rel="noopener">states</a>)</em> at any given time. The FSM can change from one state to another in response to some <a href="https://en.wikipedia.org/wiki/Input_(computer_science" target="_blank" rel="noopener">inputs</a>); the change from one state to another is called a <em>transition</em></p><p><strong><em>Wikipedia</em></strong> - <strong><a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener">Finite-state machine</a></strong></p></blockquote><a id="more"></a><h2 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h2><p>Imaging you are working at a E-Commercial company, if you want to publish a new product to production environment, you need to submit a <strong>AuditRequest</strong> first, then your manager will accept or reject this AuditRequest. If your manager accept, you can publish your product, so anyone can see it.</p><p>In this case, the state of the product transited many times, show as the following graph.</p><pre class="mermaid">stateDiagramdirection LR[*] --&gt; UnpublishedUnpublished --&gt; Auditing: Apply auditingAuditing --&gt; AuditAccepted: AcceptAuditing --&gt; AuditRejected: RejectAuditAccepted --&gt; Published: PublishAuditRejected --&gt; [*]Published --&gt; [*]</pre><h2 id="Definition-of-Terms"><a href="#Definition-of-Terms" class="headerlink" title="Definition of Terms"></a>Definition of Terms</h2><ul><li>FromState: the current state of an entity. In the example above, at the beginning, the state is <strong>Unpublished</strong>.</li><li>Event: the event to transit to next state. There is an <strong>Apply auditing</strong> event triggered by you.</li><li>ToState: the next state.  There is an <strong>Auditing</strong> state.</li><li>Action: action to execute. This action will change the state of the product from <strong>FromState</strong> and <strong>ToState</strong>, and action allows to do more things such as sending a HTTP request to an audit platform.</li><li>Transition: A record represents from <strong>FromState</strong> to <strong>ToState</strong> through <strong>Event</strong> with <strong>Action</strong>.</li></ul><h2 id="Implementing"><a href="#Implementing" class="headerlink" title="Implementing"></a>Implementing</h2><p>How to implement this FSM? Essentially, we can think of it as a directed cyclic graph, each Node is a state, each edge is a event. So we can use some data structure and algorithm of graph to implement this. </p><p>The following are the implementation steps:</p><ol><li>Config the state machine, usually we can query the all the transitions from database, so we can config it freely.</li><li>Make a <code>Map&lt;FromState, Map&lt;Event, Pair&lt;ToState, List&lt;Action&gt;&gt;&gt;&gt;</code> map, it represents the graph.</li><li>Query current state of product and event, we can get event name from <strong>requestURI</strong>.</li><li>Find the next <code>Pair</code> in Map, by current state and event.</li></ol><p>The following is the implementation of the java language.</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Action.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@FunctionalInterface</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Action</span> </span>{</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ApplyAuditAction.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example.actions;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.example.Action;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// send http request to apply an audit</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplyAuditAction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Action</span> </span>{</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="hljs-string">"mock send HTTP request"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// AuditController.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuditController</span> </span>{</span><br><span class="line">    Repository repository;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> productId)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            <span class="hljs-keyword">var</span> product = repository.findProduct(productId);</span><br><span class="line">            <span class="hljs-keyword">var</span> transitions = repository.findAllByTypeId(product.typeId);</span><br><span class="line">            <span class="hljs-keyword">var</span> stateMachine = <span class="hljs-keyword">new</span> StateMachine(transitions);</span><br><span class="line">            stateMachine.transit(product, Event.ApplyAudit);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"succeed"</span>;</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (RuntimeException e) {</span><br><span class="line">            <span class="hljs-keyword">return</span> e.getMessage();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Event.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">enum</span> Event {</span><br><span class="line">        ApplyAudit,</span><br><span class="line">        AcceptAudit,</span><br><span class="line">        RejectAudit,</span><br><span class="line">        Publish</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Pair.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">F</span>, <span class="hljs-title">S</span>&gt; </span>{</span><br><span class="line">    <span class="hljs-keyword">public</span> F first;</span><br><span class="line">    <span class="hljs-keyword">public</span> S second;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">(F first, S second)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">this</span>.first = first;</span><br><span class="line">        <span class="hljs-keyword">this</span>.second = second;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Product.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;</span><br><span class="line">    <span class="hljs-keyword">public</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> typeId;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Repository.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// a simple definition of Repository, you need to implement</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Repository</span> </span>{</span><br><span class="line">    <span class="hljs-function">List&lt;Transition&gt; <span class="hljs-title">findAllByTypeId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> typeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function">Product <span class="hljs-title">findProduct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> productId)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="hljs-comment">// State.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">enum</span> State {</span><br><span class="line">    Unpublished,</span><br><span class="line">    Auditing,</span><br><span class="line">    AuditAccepted,</span><br><span class="line">    AuditRejected,</span><br><span class="line">    Published</span><br><span class="line">}</span><br><span class="line"><span class="hljs-comment">// StateMachine.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.example.actions.ApplyAuditAction;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.List;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StateMachine</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Action&gt; actionMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;() {{</span><br><span class="line">        put(<span class="hljs-string">"applyAudit"</span>, <span class="hljs-keyword">new</span> ApplyAuditAction());</span><br><span class="line">    }};</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;State, Map&lt;Event, Pair&lt;State, List&lt;Action&gt;&gt;&gt;&gt; graph;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StateMachine</span><span class="hljs-params">(List&lt;Transition&gt; transitions)</span> </span>{</span><br><span class="line">        graph = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> transition : transitions) {</span><br><span class="line">            addTransition(transition);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addTransition</span><span class="hljs-params">(Transition transition)</span> </span>{</span><br><span class="line">        graph.putIfAbsent(transition.fromState, <span class="hljs-keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        graph.get(transition.fromState).put(transition.event, <span class="hljs-keyword">new</span> Pair&lt;&gt;(transition.toState, makeActions(transition.actions)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Action&gt; <span class="hljs-title">makeActions</span><span class="hljs-params">(String action)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">var</span> actionNames = action.split(<span class="hljs-string">","</span>); <span class="hljs-comment">// use comma to split multi actions</span></span><br><span class="line">        <span class="hljs-keyword">return</span> Arrays.stream(actionNames).map(actionMap::get).toList();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transit</span><span class="hljs-params">(Product product, Event event)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">if</span> (!graph.containsKey(product.state)) {</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"Product state not found"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">if</span> (!graph.get(product.state).containsKey(event)) {</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"Event not found"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">var</span> next = graph.get(product.state).get(event);</span><br><span class="line">        <span class="hljs-comment">// modify product state</span></span><br><span class="line">        product.state = next.first;</span><br><span class="line">        <span class="hljs-comment">// execute actions</span></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> action : next.second) {</span><br><span class="line">            action.run();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Transition.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transition</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> typeId; <span class="hljs-comment">// represents the type of a product</span></span><br><span class="line">    <span class="hljs-keyword">public</span> State fromState;</span><br><span class="line">    <span class="hljs-keyword">public</span> Event event;</span><br><span class="line">    <span class="hljs-keyword">public</span> State toState;</span><br><span class="line">    <span class="hljs-keyword">public</span> String actions;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By using a configurable FSM, you can easily modify the workflow by modifying database record, no code editing.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><strong><em>Wikipedia</em></strong> - <strong><a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener">Finite-state machine</a></strong></li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the first article written in English. In this article, I’ll share how to build a Finite State Machine(FSM) to help business workflow transition, such as auditing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;finite-state machine&lt;/strong&gt; (&lt;strong&gt;FSM&lt;/strong&gt;) or &lt;strong&gt;finite-state automaton&lt;/strong&gt; (&lt;strong&gt;FSA&lt;/strong&gt;, plural: &lt;em&gt;automata&lt;/em&gt;), &lt;strong&gt;finite automaton&lt;/strong&gt;, or simply a &lt;strong&gt;state machine&lt;/strong&gt;, is a mathematical &lt;a href=&quot;https://en.wikipedia.org/wiki/Model_of_computation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;model of computation&lt;/a&gt;. It is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_machine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;abstract machine&lt;/a&gt; that can be in exactly one of a finite number of &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/State_(computer_science&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;states&lt;/a&gt;)&lt;/em&gt; at any given time. The FSM can change from one state to another in response to some &lt;a href=&quot;https://en.wikipedia.org/wiki/Input_(computer_science&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;inputs&lt;/a&gt;); the change from one state to another is called a &lt;em&gt;transition&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Finite-state machine&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
      <category term="Engineering" scheme="https://www.ddhigh.com/categories/Engineering/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL、Redis、Aurora读书笔记</title>
    <link href="https://www.ddhigh.com/2023/05/03/reading-note.html"/>
    <id>https://www.ddhigh.com/2023/05/03/reading-note.html</id>
    <published>2023-05-03T07:07:05.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>本文分享一下五一期间的读书感悟，包括MySQL、Redis、Aurora。</p><a id="more"></a><h2 id="优化Redis主线程负载"><a href="#优化Redis主线程负载" class="headerlink" title="优化Redis主线程负载"></a>优化Redis主线程负载</h2><ol><li><p>网络IO可以多线程处理，将请求包体和文件描述符投递到一个<strong>request</strong>队列，参考结构如下</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Request</span> </span>{</span><br><span class="line">  <span class="hljs-keyword">byte</span>[] req;</span><br><span class="line">  <span class="hljs-keyword">int</span> fd;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>主线程轮询<strong>request</strong>队列，取出<strong>req</strong>数据并按照以往方式准备响应<strong>resp</strong>，再次投递到一个<strong>response</strong>队列，参考结构如下</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Response</span> </span>{</span><br><span class="line">  <span class="hljs-keyword">byte</span>[] req;</span><br><span class="line">  <span class="hljs-keyword">int</span> fd;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>网络IO线程轮询<strong>response</strong>队列，将数据发往指定<strong>fd</strong></p></li></ol><p>优点：</p><ul><li>解耦业务线程和IO线程，充分利用多线程能力</li><li>基于单线程+队列保证Redis业务线程仍然是单线程，无需同步/互斥逻辑</li></ul><p>缺点：</p><ul><li>需要维护两个额外队列，当请求激增，主线程处理不过来会造成数据积压</li></ul><h2 id="MySQL事务过程"><a href="#MySQL事务过程" class="headerlink" title="MySQL事务过程"></a>MySQL事务过程</h2><ol><li>从磁盘加载数据到bufferpool</li><li>写入并Flush undo日志 (顺序磁盘IO)</li><li>修改bufferpool中的数据</li><li>写入redo日志，不flush(无磁盘IO)</li><li>如果有其他数据参与，重复步骤1…4</li><li>设置所有redo日志为prepare状态</li><li>写入并Flush binlog(顺序磁盘IO)</li><li>Flush redo日志（顺序磁盘IO）</li><li>提交事务</li></ol><h2 id="MySQL-double-write"><a href="#MySQL-double-write" class="headerlink" title="MySQL double-write"></a>MySQL double-write</h2><blockquote><p>关于IO的最小单位：</p><p>　　1. 数据库IO的最小单位是16K（MySQL默认，oracle是8K）</p><p>　　2. 文件系统IO的最小单位是4K（也有1K的）</p><p>　　3. 磁盘IO的最小单位是512字节</p><p>因此，存在IO写入导致page损坏的风险：</p><p><img src="https://static.ddhigh.com/blog/2023/05/03/1683100294373935000.png" alt="img"> </p><p><strong><em><a href="https://home.cnblogs.com/u/geaozhang/" target="_blank" rel="noopener">GeaoZhang</a></em></strong> - <a href="https://www.cnblogs.com/geaozhang/p/7241744.html" target="_blank" rel="noopener">InnoDB关键特性之double write</a></p></blockquote><p>上述例子中，一个脏页只有前面一半落盘了，后面一半还是老数据，所以这一个16K脏页数据无效。</p><h3 id="redo日志无法恢复"><a href="#redo日志无法恢复" class="headerlink" title="redo日志无法恢复"></a>redo日志无法恢复</h3><p>redo日志记录对数据页的物理修改，但是现在出现的问题是页本身无效，redo日志也无法恢复。具体原因如下：</p><ol><li>数据文件上有一个老页面，加载到内存之后，内存也有一个老页面</li><li>修改内存数据，比如把某脏页第2个字节改为1， redo日志记录把该页第2个字节改为1</li><li>当InnoDB刷新脏页出现刷一半的问题时，数据文件上的老页面已经无效了（一半是新的，一半是旧的），跟内存修改时的老页面不一致，redo日志无法应用</li></ol><h3 id="double-write流程"><a href="#double-write流程" class="headerlink" title="double-write流程"></a>double-write流程</h3><p><img src="https://static.ddhigh.com/blog/2023/05/03/1683100403081956000.png" alt="img"></p><ol><li>脏页刷新时，拷贝到内存中的doublewrite buffer（大小2MB）</li><li>将doublewrite buffer分两次写入共享表空间文件（每次1MB，顺序IO，速度快）</li><li>将doublewrite buffer数据写入数据文件（随机磁盘IO）</li></ol><p>本质上优点类似WAL(Write-Ahead-Log)，通过先顺序写入文件，再随机磁盘IO落盘。</p><h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><p>回到最开始的问题，InnoDB恢复时可以通过校验和发现数据文件中的脏页数据无效（对比脏页计算出来的校验和和磁盘上的校验和），此时可以通过共享表空间文件找到该页最近的数据，复制到数据文件，再应用redo日志，完成恢复</p><h2 id="Aurora"><a href="#Aurora" class="headerlink" title="Aurora"></a>Aurora</h2><p>Aurora是Amazon研发的分布式MySQL，随着数据库上云，传统数据库的磁盘IO瓶颈已经变为了数据计算层和存储曾之间的IO瓶颈。换句话说，由于SSD的广泛使用，磁盘IO本身基本不是瓶颈。</p><p>Aurora的主要优点如下：</p><ul><li>使用一个独立部署、能容忍错误并且能自动修改的分布式存储服务（跨数据中心），保证数据库不受存储层的可用性影响</li><li>不同数据库计算节点之间以及数据库存储节点之间，网络IO只有redolog（没有binlog）</li><li>将耗时的串行操作尽量拆解为异步操作，减少延迟</li></ul><h3 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h3><ul><li>计算节点：安装数据库软件的节点</li><li>存储节点：存储数据的节点</li></ul><h3 id="传统MySQL分布式架构"><a href="#传统MySQL分布式架构" class="headerlink" title="传统MySQL分布式架构"></a>传统MySQL分布式架构</h3><p><img src="https://static.ddhigh.com/blog/2023/05/03/1683099089289616000.PNG" alt="原MySQL负载"></p><p>可以看到MySQL节点之间同步了非常多的数据，而由于MySQL的分层架构，数据库层和存储引擎层是分离的，导致binlog和redolog两份日志出现，实际上这两份日志的功能本质上是一样的，提供数据镜像和数据恢复。</p><h3 id="Aurora的网络IO"><a href="#Aurora的网络IO" class="headerlink" title="Aurora的网络IO"></a>Aurora的网络IO</h3><p>Aurora极大减少了网络IO，节点之间真正传输的只有redolog和表的元数据，下图是Aurora的网络IO</p><p><img src="https://static.ddhigh.com/blog/2023/05/03/1683099365972619000.PNG" alt="Aurora优化负载"></p><p>一个数据写入流程如下：</p><ol><li>存储节点接收到redo日志，写入本地内存队列（无磁盘IO）</li><li>将redo日志持久化到磁盘，并返回响应给计算节点（顺序磁盘IO）</li><li>整理记录，并检查是否有因为一些操作丢失导致的记录差异。</li><li>基于gossip解析和其他节点对齐数据</li><li>应用redo日志记录，将数据变更应用到数据页（随机磁盘IO）</li><li>定期将日志和新页面备份到S3</li><li>定期进行垃圾回收，清理掉无用的旧版本数据，释放存储空间</li><li>定期进行CRC校验， 修复损坏数据</li></ol><p>只有1/2步会影响计算节点，其他步骤全部是异步的，这是高性能的保证</p><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>redo日志关联了（LSN，Log Sequence Number），LSN的概念和MySQL一致，当节点丢失数据时，可以通过gossip和其他节点对比LSN并补齐丢失的数据。</p><p>而当需要进行故障恢复时，Aurora首先会保证所有节点上的数据一致，通过使用LSN来实现，Aurora会选出一个保证可用的最高LSN，称为VCL（Volume Complete LSN），任何LSN高于VCL的日志记录会被截断。Aurora还规定只有某些特定的LSN可以作为截断点，称为CPL（Consistency Point LSNs），另外定义了VDL（Volume Durable LSN）为小于等于VCL的最大CPL。</p><p>简单例子：当前日志的LSN已经达到了1007，但数据库定义CPL为900，1000，1100这些特定值。那么&gt;1000的LSN数据会被截断，所以，最终VCL是1000。实际流程如下：</p><ol><li>每个数据库层事务被切分成多个有序且可被原子操作的小事务（mini-transactions，MTRs）</li><li>每个MTR由多个连续的log record组成。</li><li>一个MTR的最后一个log record被认为是一个CPL。</li></ol><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><blockquote><ul><li>Writes：当数据库收到一批log日志的write quorum的确认后，就会向前推进当前的VDL。在每一时刻，会有很多事务在同时进行，数据库会为每个日志分配一个唯一有序的LSN，同时LSN要小于当前VDL和LAL（LSN Allocation Lmit）的和。这段话翻译有些生硬，其实就是为了防止前台操作太快，后台存储系统处理不过来，LSN不能超前VDL太多，其差值最大为LAL，目前设置为10M。同时，为了解决每个分片可能存在的日志丢失问题，每个日志都有一个向前的回链（像是一个反向链表），通过向前回溯，以及Gossip交互，可以为各个节点构建一个完整的日志记录，称之为SCL（Segement Complete LSN），也即所有日志到达了所有节点的最大LSN。</li><li>Commits：Aurora的事务提交是完全异步的。工作线程收到commit请求，在一个等待commit的事务列表中记录它的commit LSN，然后就继续处理其它请求。有一个专门的线程在VDL推进时，判断列表中有哪些LSN小于等于VDL，然后将这些事务的应答推回给还在等待的客户端。</li><li>Reads：Aurora和很多其它数据库一样，数据页会放在缓存中，命中丢失时才会做一次IO请求，当缓存满时，系统会根据特定的算法汰换数据页。Aurora不一样的是，它要求在缓存中的page LSN一定要大于等于VDL。从而保证在这个数据页中所有请求都已经写到log，且可以通过VDL始终获取到最新的持久化数据。也因此，正常的读取只需要读一个满足条件的分片就足够了。</li><li>Replicas：在Aurora中，一个存储磁盘可以挂载一个writer和最多15个read副本。增加一个read副本不会对性能有什么影响。为了加快响应，写请求生成的日志流也会被发送到所有读副本中去。如果这个写请求涉及到当前缓存中的某个数据页，那就把这个请求更新到数据页中，否则就直接丢弃了。这里读副本消费请求是异步的，需要遵循两条规则：一是会更新到数据页的请求，其LSN需要小于等于VDL。二是mini-transaction的修改需要原子性的写入缓存，以保障数据一致性。</li></ul><p><strong><em>Hotlink Qiu</em></strong> - <a href="https://hotlinkqiu.github.io/2019/08/15/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%A0%94%E7%A9%B6%E2%80%94%E2%80%94Aurora/" target="_blank" rel="noopener">分布式存储研究——Aurora</a></p></blockquote><h3 id="数据恢复-1"><a href="#数据恢复-1" class="headerlink" title="数据恢复"></a>数据恢复</h3><p>和MySQL不同，Aurora的数据恢复是后台化的，在存储层即可完成，无需停机。恢复完成后，需要进行quorum读(从其他副本取出保证可用的数据)，同时进行VDL计算，截断&gt;VDL的数据，这些操作都可以在后台进行，不影响前台响应延迟。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hotlinkqiu.github.io/2019/08/15/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%A0%94%E7%A9%B6%E2%80%94%E2%80%94Aurora/" target="_blank" rel="noopener">分布式存储研究——Aurora</a></li><li><a href="https://www.cnblogs.com/geaozhang/p/7241744.html" target="_blank" rel="noopener">InnoDB关键特性之double write</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;本文分享一下五一期间的读书感悟，包括MySQL、Redis、Aurora。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
      <category term="Engineering" scheme="https://www.ddhigh.com/categories/Engineering/"/>
    
    
  </entry>
  
  <entry>
    <title>修复M1使用gomonkey提示permission defined错误</title>
    <link href="https://www.ddhigh.com/2023/04/20/fix-gomonkey-permission-defined.html"/>
    <id>https://www.ddhigh.com/2023/04/20/fix-gomonkey-permission-defined.html</id>
    <published>2023-04-20T04:00:00.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Go单元测试在M1上使用<code>github.com/agiledragon/gomonkey/v2 v2.9.0</code>包提示<code>permission defined</code>。<br>网上查阅消息得知是由于内存安全导致，不能同时对内存进行写和执行</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>下面分享一种比较简单的方法，需要修改本地的go源码。</p><p>修改<a href="mailto:`go/pkg/mod/github.com/agiledragon/gomonkey/v2@v2.9.0">`go/pkg/mod/github.com/agiledragon/gomonkey/v2@v2.9.0</a>/modify_binary_darwin.go<code>的</code>modifyBinary`方法。<br>将<br></p><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := mprotectCrossPage(target, <span class="hljs-built_in">len</span>(bytes), syscall.PROT_READ|syscall.PROT_WRITE|syscall.PROT_EXEC)</span><br></pre></td></tr></tbody></table></figure><br>修改为<br><figure class="highlight go hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := mprotectCrossPage(target, <span class="hljs-built_in">len</span>(bytes), syscall.PROT_READ|syscall.PROT_WRITE)</span><br></pre></td></tr></tbody></table></figure><p></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;Go单元测试在M1上使用&lt;code&gt;github.com/agiledragon/gomo
      
    
    </summary>
    
      <category term="Engineering" scheme="https://www.ddhigh.com/categories/Engineering/"/>
    
    
  </entry>
  
  <entry>
    <title>拓补排序</title>
    <link href="https://www.ddhigh.com/2023/02/10/topological-sorting.html"/>
    <id>https://www.ddhigh.com/2023/02/10/topological-sorting.html</id>
    <published>2023-02-10T04:00:00.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p> 在计算机科学领域，有向图的拓扑排序或拓扑测序是对其顶点的一种线性排序，使得对于从顶点$u$到顶点$v$的每个有向边$uv$, $u$在排序中都在$v$之前。</p><p>例如，图形的顶点可以表示要执行的任务，并且边可以表示一个任务必须在另一个任务之前执行的约束；在这个应用中，拓扑排序只是一个有效的任务顺序。</p><p>当且仅当图中没有定向环时（即有向无环图），才有可能进行拓扑排序。</p><p>任何有向无环图至少有一个拓扑排序。</p></blockquote><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>遍历有向边，构造u-&gt;v边中v的入度表，可使用哈希存储入度</li><li>将入度为0的节点入队</li><li>队列节点不断出队，出队时减小被更新节点的入度，如果被更新节点入度为0，则该节点入队</li><li>重复以上过程，最终可以得到一个从入度为0到最终节点的序列，这就是拓补排序算法。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Leetcode <a href="https://leetcode.cn/problems/course-schedule-ii/description/" target="_blank" rel="noopener">210. 课程表2</a></p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 生成邻接表 &lt;当前节点，后置节点&gt;</span></span><br><span class="line">    <span class="hljs-comment">// 进行BFS拓补排序，由最低依赖的开始写入答案</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] findOrder(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-keyword">int</span>[][] prerequisites) {</span><br><span class="line">        Set&lt;Integer&gt;[] graph = <span class="hljs-keyword">new</span> HashSet[numCourses];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">            graph[i] = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-comment">// 入度</span></span><br><span class="line">        <span class="hljs-keyword">int</span>[] inDegree = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] p : prerequisites) {</span><br><span class="line">            <span class="hljs-keyword">int</span> current = p[<span class="hljs-number">0</span>];</span><br><span class="line">            <span class="hljs-keyword">int</span> pre = p[<span class="hljs-number">1</span>];</span><br><span class="line">            graph[pre].add(current);</span><br><span class="line">            inDegree[current]++;</span><br><span class="line">        }</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">            <span class="hljs-keyword">if</span> (inDegree[i] == <span class="hljs-number">0</span>) {</span><br><span class="line">                queue.offer(i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">int</span>[] answer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];</span><br><span class="line">        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">            <span class="hljs-comment">// 弹出课程</span></span><br><span class="line">            <span class="hljs-keyword">int</span> course = queue.remove();</span><br><span class="line">            answer[index++] = course;</span><br><span class="line">            <span class="hljs-comment">// 遍历邻接表，减掉入度，入度归0时入队</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> target : graph[course]) {</span><br><span class="line">                inDegree[target]--;</span><br><span class="line">                <span class="hljs-keyword">if</span> (inDegree[target] == <span class="hljs-number">0</span>) {</span><br><span class="line">                    queue.offer(target);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> index &gt;= numCourses ? answer : <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(n)$ ,$n$是课程数量</p><p>空间复杂度：$O(n)$，$n$是课程数量</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt; 在计算机科学领域，有向图的拓扑排序或拓扑测序是对其顶点的一种线性排序，使得对于从顶点$u$到顶点$v$的每个有向边$uv$, $u$在排序中都在$v$之前。&lt;/p&gt;
&lt;p&gt;例如，图形的顶点可以表示
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>水塘抽样算法</title>
    <link href="https://www.ddhigh.com/2023/01/19/reservoir-sampling.html"/>
    <id>https://www.ddhigh.com/2023/01/19/reservoir-sampling.html</id>
    <published>2023-01-19T15:34:44.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>下面是<a href="https://zh.wikipedia.org/zh-mo/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A8%A3" target="_blank" rel="noopener">维基百科水塘抽样</a>的说明。</p><blockquote><p> 水塘抽样是一系列的随机算法，其目的在于从包含 $n$个项目的集合  中选取$k$ 个样本，其中 $n$为一很大或未知的数量，尤其适用于不能把所有 $n$ 个项目都存放到内存的情况。</p></blockquote><p>本文分享在随机数据流中等概率抽取target的水塘抽样算法。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>定义$count$计数变量</li><li>遍历给定的数据流，如果当前数字等于$target$, $count$+1</li><li>在$[0, count]$产生随机数，如果等于$count$，则抽样成功</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Leetcode <a href="https://leetcode.cn/problems/random-pick-index/" target="_blank" rel="noopener">398. 随机数索引</a></p><p><strong>代码</strong></p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 哈希表保存&lt;值,List&lt;下标&gt;&gt;</span></span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] nums;</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Random random;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Solution</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">this</span>.nums = nums;</span><br><span class="line">            <span class="hljs-keyword">this</span>.random = <span class="hljs-keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 水塘抽样</span></span><br><span class="line">        <span class="hljs-comment">// 统计target count,随机数%count 为0时重置index</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (nums[i] == target) {</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (random.nextInt() % count == <span class="hljs-number">0</span>) {</span><br><span class="line">                        index = i;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> index;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(n)$,$n$是$nums$长度，需要遍历一次$nums$</p><p>空间复杂度：$O(1)$,严格来说，java默认使用浅拷贝，因此$nums$不会有额外空间占用。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;下面是&lt;a href=&quot;https://zh.wikipedia.org/zh-mo/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A8%A3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>时间差计算算法</title>
    <link href="https://www.ddhigh.com/2023/01/19/time-difference.html"/>
    <id>https://www.ddhigh.com/2023/01/19/time-difference.html</id>
    <published>2023-01-19T15:27:14.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>本文分享如何解决计算时间差类的问题。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>首先需要将时间转化为数字，比如23:59，可以转化为23*60+59</li><li>然后根据数字从小到大排序，此时从<code>[0, n]</code>处的数据有序，可以遍历该区间计算差值</li><li>需要注意的是，由于时间的特殊性，比如<code>23:59</code>下一分会归0，因此还需要比如<code>0</code>处和<code>n</code>处的时间差</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Leetcode <a href="https://leetcode.cn/problems/minimum-time-difference/" target="_blank" rel="noopener">539. 最小时间差</a></p><p><strong>代码</strong></p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 模拟</span></span><br><span class="line">        <span class="hljs-comment">// 时间字符串转化为数字</span></span><br><span class="line">        <span class="hljs-comment">// 排序，线性遍历，然后再比较第一个和最后一个的差值</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMinDifference</span><span class="hljs-params">(List&lt;String&gt; timePoints)</span> </span>{</span><br><span class="line">            <span class="hljs-comment">// 24小时总共1440个可能，超过1440，直接返回0（存在重复时间点）</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (timePoints.size() &gt; <span class="hljs-number">1440</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">var</span> array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[timePoints.size()];</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; timePoints.size(); i++) {</span><br><span class="line">                <span class="hljs-keyword">var</span> str = timePoints.get(i);</span><br><span class="line">                array[i] = Integer.parseInt(str.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)) * <span class="hljs-number">60</span> + Integer.parseInt(str.substring(<span class="hljs-number">3</span>));</span><br><span class="line">            }</span><br><span class="line">            Arrays.sort(array);</span><br><span class="line">            <span class="hljs-keyword">var</span> answer = Integer.MAX_VALUE;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">                answer = Math.min(answer, array[i] - array[i - <span class="hljs-number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-comment">// 和首尾差值比较</span></span><br><span class="line">            <span class="hljs-keyword">return</span> Math.min(answer, array[<span class="hljs-number">0</span>] + <span class="hljs-number">1440</span> - array[array.length - <span class="hljs-number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(nlogn)$,$n$是序列长度，主要是排序的时间。</p><p>空间复杂度：$O(n)$,$n$是序列长度。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;本文分享如何解决计算时间差类的问题。&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先需要将时间转化为数字，
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口算法</title>
    <link href="https://www.ddhigh.com/2023/01/19/slide-window-algorithm.html"/>
    <id>https://www.ddhigh.com/2023/01/19/slide-window-algorithm.html</id>
    <published>2023-01-19T15:16:29.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>滑动窗口算法是查找连续区间常用的算法之一。</p><p>本文分享滑动窗口算法的通用框架。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>定义$left$和$right$双指针，代表窗口的左边界和右边界</li><li>当$right$小于给定区间大小时，我们可以进行操作。</li><li>在扩大窗口时，需要加当前新加入的数据进行处理</li><li>当当前窗口内数据不满足条件时，右移$left$指针缩小窗口</li><li>计算$[left,right]$之间的数据，和最佳答案比较并更新最佳答案</li><li>右移$right$</li></ol><p>下面是滑动窗口通用框架的java语言实现。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(right &lt; 上界) {</span><br><span class="line">  将right处数据加入窗口</span><br><span class="line">  <span class="hljs-keyword">while</span>(窗口数据不符合要求) {</span><br><span class="line">    移除left数据</span><br><span class="line">    left++</span><br><span class="line">  }</span><br><span class="line">  根据当前right和left计算最佳答案并更新</span><br><span class="line">  right++</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Leetcode <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></p><p><strong>思路</strong></p><p>基于算法框架的思路如下：</p><ol><li>定义$left$和$right$双指针，代表窗口的左边界和右边界，再定义<code>HashMap&lt;Character, Integer&gt;</code>存储窗口内的字符和数量(可以使用长度为<code>128</code>的字符数组代替，省去操作hashmap的开销。</li><li>当$right$小于$s.length()$时，我们可以进行操作。</li><li>在扩大窗口时，将$s.charAt(right)$加入<code>HashMap</code></li><li>当<code>HashMap.get(s.charAt(right)&gt;1)</code>，此时$right$处字符重复，需要收缩左边界，$left$处的字符数量-1，右移$left$</li><li>计算$[left,right]$之间的数据，和最佳答案比较并更新最佳答案</li></ol><p><strong>代码</strong></p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line">    <span class="hljs-comment">// 滑动窗口</span></span><br><span class="line">        <span class="hljs-comment">// 定义left,right, hashmap&lt;char,int&gt;</span></span><br><span class="line">        <span class="hljs-comment">// 循环条件 right&lt;s.length()</span></span><br><span class="line">        <span class="hljs-comment">// right字符入map</span></span><br><span class="line">        <span class="hljs-comment">// while刚才入的字符重复，map移除left的字符，left++</span></span><br><span class="line">        <span class="hljs-comment">// 计算长度</span></span><br><span class="line">        <span class="hljs-comment">// right++</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> left = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> right = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> answer = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">128</span>];</span><br><span class="line">            <span class="hljs-keyword">while</span> (right &lt; s.length()) {</span><br><span class="line">                <span class="hljs-keyword">var</span> rightChar = s.charAt(right);</span><br><span class="line">                map[rightChar]++;</span><br><span class="line">                <span class="hljs-comment">// 窗口有重复字符，收缩左边界</span></span><br><span class="line">                <span class="hljs-keyword">while</span> (map[rightChar] &gt; <span class="hljs-number">1</span>) {</span><br><span class="line">                    <span class="hljs-keyword">var</span> leftChar = s.charAt(left);</span><br><span class="line">                    map[leftChar]--;</span><br><span class="line">                    left++;</span><br><span class="line">                }</span><br><span class="line">                answer = Math.max(answer, right - left + <span class="hljs-number">1</span>);</span><br><span class="line">                right++;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> answer;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(n)$, $n$是字符串长度，每个字符至多访问2次。</p><p>空间复杂度: $O(1)$，只需常数项空间。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;滑动窗口算法是查找连续区间常用的算法之一。&lt;/p&gt;
&lt;p&gt;本文分享滑动窗口算法的通用框架。&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>字符串子序列检测算法</title>
    <link href="https://www.ddhigh.com/2023/01/05/subsequence-checking-algorithm.html"/>
    <id>https://www.ddhigh.com/2023/01/05/subsequence-checking-algorithm.html</id>
    <published>2023-01-05T04:36:10.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>本文分享一种检测一个字符串是否为另一个字符串子序列的算法。</p><p>子序列的定义：</p><p>若字符串$s1$可以由字符串$s2$删除某些字符得到，则$s1$是$s2$的子序列。换句话说，若$s1$的所有字符都在$s2$中且顺序一致，则$s1$是$s2$的子序列。</p><p>例如：</p><p>a是aaa的子序列，adf是abcdef的子序列，但是cba不是abc的子序列（因为字符顺序变了）。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>声明$s1$的下标变量$strIndex$，若$s2$有$s1$的该字符，则$strIndex+1$</li><li>若遍历过程中$strIndex$和$s1$的长度相等，则证明$s1$所有字符都在$s2$中，返回$s1$是$s2$在子序列</li><li>遍历结束仍未返回，证明$s1$不是$s2$的子序列</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubsequent</span><span class="hljs-params">(String str, String str1)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> strIndex = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-comment">// 逐字符遍历</span></span><br><span class="line">            <span class="hljs-comment">// 如果字符想通，则strIndex++</span></span><br><span class="line">            <span class="hljs-comment">// 如果strIndex到达末尾，则证明str是子序列</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str1.length(); i++) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (str.charAt(strIndex) == str1.charAt(i)) {</span><br><span class="line">                    strIndex++;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-keyword">if</span> (strIndex == str.length()) {</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(n)$,$n$是$str1$的长度。</p><p>空间复杂度：$O(1)$。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;本文分享一种检测一个字符串是否为另一个字符串子序列的算法。&lt;/p&gt;
&lt;p&gt;子序列的定义：&lt;/p&gt;
&lt;p&gt;若字符串$s1$可以由字符串$s2$删除某些字符得到，则$s1$是$s2$的子序列。换句话说，若$s1$的所有字符都在$
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
      <category term="string" scheme="https://www.ddhigh.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>计算数字二进制位中1的个数</title>
    <link href="https://www.ddhigh.com/2023/01/05/counting-bit1-of-binary-number.html"/>
    <id>https://www.ddhigh.com/2023/01/05/counting-bit1-of-binary-number.html</id>
    <published>2023-01-05T04:35:00.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>本文分享一种计算给定数字二进制表示中有多少个1的算法。</p><p>位运算对于非硬件相关的开发者来说可能用的比较少，朴素做法是将数字转换为二进制字符串，然后遍历该字符串得到1的个数。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>通过右移我们可以访问到数字的指定比特</li><li>将该比特与1进行按位与<code>&amp;</code>，结果为1则证明当前比特位是1，计数器+1</li></ol><p>根据给定数字的数据类型可以确定需要位移的次数，对于<code>int</code>来说，4个字节，因此需要右移32次，而对于<code>long</code>来说，8个字节，需要右移64次。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBit1Count</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>{</span><br><span class="line">              <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {</span><br><span class="line">                  <span class="hljs-keyword">if</span> (((num &gt;&gt; i) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) {</span><br><span class="line">                      count++;</span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">              <span class="hljs-keyword">return</span> count;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(1)$，不管多大的数字，只需要右移32次。</p><p>空间复杂度：$O(1)$，无需额外空间。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;本文分享一种计算给定数字二进制表示中有多少个1的算法。&lt;/p&gt;
&lt;p&gt;位运算对于非硬件相关的开发者来说可能用的比较少，朴素做法是将数字转换为二进制字符串，然后遍历该字符串得到1的个数。&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>解析字符串中的数字</title>
    <link href="https://www.ddhigh.com/2023/01/03/parse-number-in-string.html"/>
    <id>https://www.ddhigh.com/2023/01/03/parse-number-in-string.html</id>
    <published>2023-01-03T14:36:49.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>本文分享一种如何在字符串中解析数字的算法。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>解析字符串中的数字需要判断当前是否是数字字符，以及如何处理连续的数字字符。</p><p>本文使用while循环来解析数字，之所以不使用for循环，是笔者认为while循环操控力比for循环要好。</p><p>while循环解析方法如下：</p><ol><li>如果当前字符是数字，则开启内部while循环</li><li>内部while循环退出条件为当前字符不是数字</li><li>内部循环操作为读取当前数字，然后加上一个数字乘以10</li><li>内部循环退出后，我们就得到一个连续的数字</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Leetcode <a href="https://leetcode.cn/problems/check-if-numbers-are-ascending-in-a-sentence/" target="_blank" rel="noopener">2042. 检查句子中的数字是否递增</a></p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 提取字符串中的数字，判断是否严格递增</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">areNumbersAscending</span><span class="hljs-params">(String s)</span> </span>{</span><br><span class="line">            <span class="hljs-comment">// 定义上一个数字，初始化为最小的数字</span></span><br><span class="line">            <span class="hljs-keyword">var</span> lastNumber = Integer.MIN_VALUE;</span><br><span class="line">            <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span> (i &lt; s.length()) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (Character.isDigit(s.charAt(i))) { <span class="hljs-comment">// 当前是数字，继续处理</span></span><br><span class="line">                    <span class="hljs-keyword">var</span> number = <span class="hljs-number">0</span>;</span><br><span class="line">                    <span class="hljs-comment">// 核心代码</span></span><br><span class="line">                    <span class="hljs-keyword">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) { <span class="hljs-comment">// 字符串没越界而且当前字符是数字字符</span></span><br><span class="line">                        number = number * <span class="hljs-number">10</span> + (s.charAt(i) - <span class="hljs-string">'0'</span>); <span class="hljs-comment">// (s.charAt(i) - '0') 就是利用ASCII码表直接得到数字值，不需要再做parseInt</span></span><br><span class="line">                        i++; <span class="hljs-comment">// 坐标后移</span></span><br><span class="line">                    }</span><br><span class="line">                    <span class="hljs-keyword">if</span> (number &lt;= lastNumber) { <span class="hljs-comment">// 如果当前数字&lt;=上一个数字，证明不是严格递增，return false</span></span><br><span class="line">                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="hljs-comment">// number &gt; lastNumber，更新lastNumber</span></span><br><span class="line">                    lastNumber = number;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-comment">// i后移</span></span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(n)$，每个字符访问一次。<br>空间复杂度:$O(1)$，仅需常数项额外变量。</p><p><strong>注意</strong></p><p>时间复杂度就是分析随着数据量增大，算法执行次数的变化。本题虽然有两重循环，有些同学可能无脑以为时间复杂度是$O(n^2)$，实际上是不对的。可以发现每个字符串最多访问一次，所以复杂度是$O(n)$。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;本文分享一种如何在字符串中解析数字的算法。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;解析字符串中的数字需要判断当前是
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
      <category term="string" scheme="https://www.ddhigh.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>查找第N大的数</title>
    <link href="https://www.ddhigh.com/2023/01/03/nth-maximum-number.html"/>
    <id>https://www.ddhigh.com/2023/01/03/nth-maximum-number.html</id>
    <published>2023-01-03T04:22:08.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>在给定的序列中查找第N大的数，朴素做法是对序列排序，然后根据索引直接查询，时间复杂度为$O(nlogn)$。</p><p>本文介绍一种在$O(n)$的时间复杂度查询第N大的数的算法。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法思路就是定义标志变量，然后遍历数组，根据标志变量和当前数组变量的大小更新标志变量，最后根据情况返回标志变量。</p><h2 id="示例：查找第2大的数"><a href="#示例：查找第2大的数" class="headerlink" title="示例：查找第2大的数"></a>示例：查找第2大的数</h2><p>定义$first$和$second$分别存储最大和次大，然后遍历数组时更新即可。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 查找第二大的数字</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondMaximumNumber</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">secondMaximumNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="hljs-comment">// 最大数</span></span><br><span class="line">        <span class="hljs-keyword">var</span> first = Integer.MIN_VALUE;</span><br><span class="line">        <span class="hljs-comment">// 次大数</span></span><br><span class="line">        <span class="hljs-keyword">var</span> second = Integer.MIN_VALUE;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> num : nums) {</span><br><span class="line">            <span class="hljs-comment">// 当前数字比最大数还大，最大数更新为当前数字，原来的最大数更新为第2大</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (num &gt;= first) {</span><br><span class="line">                second = first;</span><br><span class="line">                first = num;</span><br><span class="line">            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &gt;= second) { <span class="hljs-comment">// 当前数字小于最大，但是大于第2大，更新第2大</span></span><br><span class="line">                second = num;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> second;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">var</span> nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]{<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>};</span><br><span class="line">        <span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> SecondMaximumNumber();</span><br><span class="line">        System.out.println(s.secondMaximumNumber(nums));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="示例：查找第3大的数"><a href="#示例：查找第3大的数" class="headerlink" title="示例：查找第3大的数"></a>示例：查找第3大的数</h2><p>Leetcode: <a href="https://leetcode.cn/problems/third-maximum-number/" target="_blank" rel="noopener">第三大的数</a></p><p>原理和查第2大的数想通，定义$first$,$second$,$third$三个变量，然后遍历$nums$</p><ol><li>若$num &gt; first$，则$second$赋值给$third$，$first$赋值给$second$,$num$赋值给$first$</li><li>若$num &lt; first$且 $num &gt; second$，则$second$赋值给$third$，$num$赋值给$second$</li><li>若$num &lt; second$且$num &gt; third$，则$num$赋值给$third$</li></ol><p>最后根据题意返回$third$或者$first$即可。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution3</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 三个变量</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">thirdMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> first = Long.MIN_VALUE;</span><br><span class="line">            <span class="hljs-keyword">var</span> second = first;</span><br><span class="line">            <span class="hljs-keyword">var</span> third = second;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> num : nums) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (num &gt; first) { <span class="hljs-comment">// 如果num&gt;最大值，原来的最大变次大，原来的次大变三大, 当前边最大</span></span><br><span class="line">                    third = second;</span><br><span class="line">                    second = first;</span><br><span class="line">                    first = num;</span><br><span class="line">                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; first &amp;&amp; num &gt; second) { <span class="hljs-comment">// 小于最大，但是大于第二, 第二变第三，当前边第二</span></span><br><span class="line">                    third = second;</span><br><span class="line">                    second = num;</span><br><span class="line">                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; second &amp;&amp; num &gt; third) { <span class="hljs-comment">// 小于第二，但是大于第三</span></span><br><span class="line">                    third = num;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) (third == Long.MIN_VALUE ? first : third);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度:$O(n)$，$n$是数组长度，仅需遍历一次。</p><p>空间复杂度: $O(1)$，仅需使用3个变量。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在给定的序列中查找第N大的数，朴素做法是对序列排序，然后根据索引直接查询，时间复杂度为$O(nlogn)$。&lt;/p&gt;
&lt;p&gt;本文介绍一种在$O(n)$的时间复杂度查询第N大的数的算法。&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>洗牌算法</title>
    <link href="https://www.ddhigh.com/2023/01/03/shuffle-algorithm.html"/>
    <id>https://www.ddhigh.com/2023/01/03/shuffle-algorithm.html</id>
    <published>2023-01-03T04:05:44.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>洗牌算法用来将给定的序列打乱，可以认为是排序的反操作。</p><h2 id="正确性判断"><a href="#正确性判断" class="headerlink" title="正确性判断"></a>正确性判断</h2><p>对于包含$n$个元素的序列，其全排列有$n!$种。如果<strong>序列打乱的结果为$n!$种且每种序列出现的概率相同</strong>，则是正确的洗牌算法。</p><h2 id="Fisher–Yates-洗牌算法"><a href="#Fisher–Yates-洗牌算法" class="headerlink" title="Fisher–Yates 洗牌算法"></a>Fisher–Yates 洗牌算法</h2><blockquote><p>以下算法说明摘自: <a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/" target="_blank" rel="noopener">https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/</a></p><p>Fisher–Yates shuffle 的原始版本，最初描述在 1938 年的 Ronald Fisher和 Frank Yates 写的书中，书名为《Statistical tables for biological, agricultural and medical research》。他们使用纸和笔去描述了这个算法，并使用了一个随机数表来提供随机数。它给出了 1 到 N 的数字的的随机排列，具体步骤如下：</p><ol><li>写下从 1 到 N 的数字</li><li>取一个从 1 到剩下的数字（包括这个数字）的随机数 k</li><li>从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位</li><li>重复第 2 步，直到所有的数字都被取出</li><li>第 3 步写出的这个序列，现在就是原始数字的随机排列</li></ol><p>已经证明如果第 2 步取出的数字是真随机的，那么最后得到的排序一定也是。</p></blockquote><h2 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h2><p>正确的洗牌算法要保证每个数字出现在每个位置的概率一样。我们来看看Fisher–Yates洗牌算法是否正确。</p><p>假设现在有1,2,3,4,5五个数字。</p><ol><li>首先在<code>1-5</code>随机一个数，假设是<code>4</code>，随机概率为<code>1/5</code></li><li>再次从<code>1,2,3,5</code>中随机一个数，假设是<code>5</code>，随机概率为<code>1/4</code>，但是<code>5</code>在第一步没被选上的概率是<code>4/5</code>，因此总体概率是<code>1/4*4/5</code>还是<code>1/5</code></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="hljs-keyword">var</span> n = nums.length;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {</span><br><span class="line">  <span class="hljs-keyword">int</span> newIndex = i + random.nextInt(n - i); <span class="hljs-comment">// 在i之后的下标随机，可以保证不会随机到i前面的</span></span><br><span class="line">    <span class="hljs-keyword">int</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[newIndex];</span><br><span class="line">    nums[newIndex] = temp;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度: $O(n)$，$n$是数组长度，只需要遍历一次。</p><p>空间复杂度：$O(1)$，仅需常数项空间。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;洗牌算法用来将给定的序列打乱，可以认为是排序的反操作。&lt;/p&gt;
&lt;h2 id=&quot;正确性判断&quot;&gt;&lt;a href=&quot;#正确性判断&quot; class=&quot;headerlink&quot; title=&quot;正确性判断&quot;&gt;&lt;/a&gt;正确性判断&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>原地哈希算法</title>
    <link href="https://www.ddhigh.com/2022/12/31/cyclic-sort.html"/>
    <id>https://www.ddhigh.com/2022/12/31/cyclic-sort.html</id>
    <published>2022-12-31T06:16:32.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>原地哈希算法(Cyclic Sort)主要应用在值都在$[0,n]$的数组$nums$中，此时可以将$nums[i]$作为索引，放回原数组，当然，由于程序上索引是从0开始，因此可以将$nums[i]$放到$nums[nums[i]-1]$的位置上。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>Leetcode <a href="https://leetcode.cn/problems/missing-number/" target="_blank" rel="noopener">268. 丢失的数字</a></p><p>给定一个包含 <code>[0, n]</code> 中 <code>n</code> 个数的数组 <code>nums</code> ，找出 <code>[0, n]</code> 这个范围内没有出现在数组中的那个数。</p><p><strong>示例 1：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]</span><br><span class="line">输出：<span class="hljs-number">2</span></span><br><span class="line">解释：n = <span class="hljs-number">3</span>，因为有 <span class="hljs-number">3</span> 个数字，所以所有的数字都在范围 [<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] 内。<span class="hljs-number">2</span> 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]</span><br><span class="line">输出：<span class="hljs-number">2</span></span><br><span class="line">解释：n = <span class="hljs-number">2</span>，因为有 <span class="hljs-number">2</span> 个数字，所以所有的数字都在范围 [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] 内。<span class="hljs-number">2</span> 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 3：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]</span><br><span class="line">输出：<span class="hljs-number">8</span></span><br><span class="line">解释：n = <span class="hljs-number">9</span>，因为有 <span class="hljs-number">9</span> 个数字，所以所有的数字都在范围 [<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] 内。<span class="hljs-number">8</span> 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 4：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">0</span>]</span><br><span class="line">输出：<span class="hljs-number">1</span></span><br><span class="line">解释：n = <span class="hljs-number">1</span>，因为有 <span class="hljs-number">1</span> 个数字，所以所有的数字都在范围 [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] 内。<span class="hljs-number">1</span> 是丢失的数字，因为它没有出现在 nums 中。</span><br></pre></td></tr></tbody></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= n</code></li><li><code>nums</code> 中的所有数字都 <strong>独一无二</strong></li></ul><p><strong>进阶：</strong>你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>用哈希表可以解答，但是空间复杂度达到了$O(n)$，没有利用到值都在$[0,n]$这个已知条件。所以我们用原地哈希解答本题。</p><ol><li>遍历数组，如果$nums[i]-1&gt;=0$ 且$nums[i] != nums[nums[i]-1]$，证明$nums[i]$未归位，我们将$i$和$nums[i]-1$处的数字交换，此步骤要一直循环到$nums[i]-1$越界或者$nums[i]$归位</li><li>重新遍历数组，如果$nums[i] != i+1$，证明当前位置的$nums[i]$是错的，也就是缺少本来应该放到这个位置的数字，所以答案也就呼之欲出了。</li></ol><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 原地哈希</span></span><br><span class="line">        <span class="hljs-comment">// 1. 将nums[i] 放到 nums[nums[i]-1]的位置</span></span><br><span class="line">        <span class="hljs-comment">// 2. 重新遍历，如果 nums[i] != i+1 则缺失i+1数字</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">missingNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">                <span class="hljs-comment">// 数字归位</span></span><br><span class="line">                <span class="hljs-comment">// 如nums[i]为2，那么最终需要放到1号索引</span></span><br><span class="line">                <span class="hljs-keyword">while</span> (nums[i] - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] != nums[nums[i] - <span class="hljs-number">1</span>]) {</span><br><span class="line">                    swap(nums, i, nums[i] - <span class="hljs-number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-comment">// 数字已归位，查询哪个数字的值和位置不匹配，不匹配的就是缺失的数字</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (nums[i] != i + <span class="hljs-number">1</span>) {</span><br><span class="line">                    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> temp = nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度：$O(n)$。$n$是数组长度，每个元素会被一次性移动归位，此后不再移动，因此每个元素的访问次数是常数，而总共需要访问$n$个数字。</p><p>空间复杂度：$O(1)$。复用题目给定的$nums$空间作为哈希表，未引入额外空间。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;原地哈希算法(Cyclic Sort)主要应用在值都在$[0,n]$的数组$nums$中，此时可以将$nums[i]$作为索引，放回原数组，当然，由于程序上索引是从0开始，因此可以将$nums[i]$放到$nums[nums
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>厄拉多塞筛素数筛选算法</title>
    <link href="https://www.ddhigh.com/2022/12/31/eratosthenes-sieve.html"/>
    <id>https://www.ddhigh.com/2022/12/31/eratosthenes-sieve.html</id>
    <published>2022-12-31T06:13:45.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>厄拉多塞筛算法（Eratosthenes Sieve）是一种求素数的方法，由古希腊数学家厄拉多塞提出。它的原理是，给定一个数 n，从 2 开始依次将 $\sqrt n$ 以内的素数的倍数标记为合数，标记完成后，剩余未被标记的数为素数（从 2 开始）。如此可省去检查每个数的步骤，使筛选素数的过程更加简单。</p></blockquote><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>厄拉多塞筛算法具体步骤如下：</p><ol><li>读取输入的数 n，将 2 到 n 的所有整数记录在表中</li><li>从 2 开始，划去表中所有 2 的倍数</li><li>由小到大寻找表中下一个未被划去的整数，再划去表中所有该整数的倍数</li><li>重复第（3）步，直到找到的整数大于$\sqrt n$为止</li><li>表中所有未被划去的整数均为素数</li></ol><p>朴素的素数筛选算法如下：对给定的数字$i$，设定数字$j$从$2$遍历到$\sqrt i$，如果中间$i$能整除$j$，则$i$不是素数。该方法的时间复杂度为$O(n\sqrt n)$ ,$n$是数组长度，外层循环需要遍历$n$次，内层循环需要遍历$\sqrt n$次。</p><p>而厄拉多塞筛算法的时间复杂度为$O(n log(log(n)))$。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>这是一张来自<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="noopener">维基百科</a>的算法示意图。</p><p><img src="https://static.ddhigh.com/algorithm/Sieve_of_Eratosthenes_animation.gif" alt="算法示例"></p><ol><li>先从2开始遍历，将2的倍数(2,4,6,8,…)标记为为非素数</li><li>继续遍历，当前数字是素数时，继续将当前数字的倍数标记为非素数</li><li>直到所有数字标记完，重新标记数组，未被标记的就是素数</li></ol><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><p>Leetcode <a href="https://leetcode.cn/problems/count-primes/" target="_blank" rel="noopener">204. 计数质数</a></p><p>给定整数 <code>n</code> ，返回 <em>所有小于非负整数 <code>n</code> 的质数的数量</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="hljs-number">10</span></span><br><span class="line">输出：<span class="hljs-number">4</span></span><br><span class="line">解释：小于 <span class="hljs-number">10</span> 的质数一共有 <span class="hljs-number">4</span> 个, 它们是 <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span> 。</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="hljs-number">0</span></span><br><span class="line">输出：<span class="hljs-number">0</span></span><br></pre></td></tr></tbody></table></figure><p><strong>示例 3：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="hljs-number">1</span></span><br><span class="line">输出：<span class="hljs-number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 厄拉多塞筛素数筛选算法</span></span><br><span class="line">        <span class="hljs-comment">// 1. 准备O(n)的数组，标识数字是否是质数，初始情况下全部是质数</span></span><br><span class="line">        <span class="hljs-comment">// 2. 从2开始遍历到sqrt(n),如果数字是质数，则i*i开始，后面i的倍数全是合数</span></span><br><span class="line">        <span class="hljs-comment">// 3. 从[2,n)筛选质数并统计</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">var</span> isPrime = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];</span><br><span class="line">            Arrays.fill(isPrime, <span class="hljs-keyword">true</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt; n; i++) { <span class="hljs-comment">// 遍历一半即可</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (isPrime[i]) { <span class="hljs-comment">// 如果是质数，则将i平方开始的所有i的倍数设为合数</span></span><br><span class="line">                    <span class="hljs-comment">// 任意素数x的倍数有：2x, 3x, 4x, ..., x*x, (x+1)*x, ...</span></span><br><span class="line">                    <span class="hljs-comment">// 任意小于x*x的倍数都被之前的素数筛过滤过，如：2 过滤 2x, 4x, ...，3 过滤 3x, ...</span></span><br><span class="line">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i * i; j &lt; n; j += i) {</span><br><span class="line">                        isPrime[j] = <span class="hljs-keyword">false</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (isPrime[i]) {</span><br><span class="line">                    count++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> count;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度: $O(nlog(log(n)))$。时间复杂度证明过程有点复杂，我暂时还没消化。</p><p>空间复杂度：$O(n)$。需要长度为$n$的数组标记是否素数。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;厄拉多塞筛算法（Eratosthenes Sieve）是一种求素数的方法，由古希腊数学家厄拉多塞提出。它的原理是，给定一个数 n，从 2 开始依次将 $&#92;sqrt n$ 以内的素数的倍数标记为合数，
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>博耶-摩尔多数投票算法</title>
    <link href="https://www.ddhigh.com/2022/12/31/boyer-moore-majority-vote-algorithm.html"/>
    <id>https://www.ddhigh.com/2022/12/31/boyer-moore-majority-vote-algorithm.html</id>
    <published>2022-12-31T06:13:06.000Z</published>
    <updated>2023-06-11T12:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>来自<a href="https://zh.m.wikipedia.org/zh-hans/%E5%A4%9A%E6%95%B0%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">维基百科</a>的解释：</p><blockquote><p><strong>博耶-摩尔多数投票算法</strong>（英语：Boyer–Moore majority vote algorithm）,中文常作<strong>多数投票算法</strong>、<strong>摩尔投票算法</strong>等，是一种用来寻找一组元素中占多数元素的常数空间级<a href="https://zh.m.wikipedia.org/wiki/时间复杂度" target="_blank" rel="noopener">时间复杂度</a>算法。这一算法由<a href="https://zh.m.wikipedia.org/w/index.php?title=罗伯特·S·博耶&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">罗伯特·S·博耶</a>（英语：<a href="https://en.wikipedia.org/wiki/Robert_S._Boyer" target="_blank" rel="noopener">Robert S. Boyer</a>）和<a href="https://zh.m.wikipedia.org/w/index.php?title=J_Strother_Moore&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">J·斯特罗瑟·摩尔</a>（英语：<a href="https://en.wikipedia.org/wiki/J_Strother_Moore" target="_blank" rel="noopener">J Strother Moore</a>）在1981年发表<a href="https://zh.m.wikipedia.org/zh-hans/多数投票算法#cite_note-bm-1" target="_blank" rel="noopener">[1]</a>，也是<a href="https://zh.m.wikipedia.org/w/index.php?title=Streaming_algorithm&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">处理数据流</a>（英语：<a href="https://en.wikipedia.org/wiki/streaming_algorithm" target="_blank" rel="noopener">streaming algorithm</a>）的一种典型算法。</p></blockquote><p>简单来说，博耶-摩尔多数投票算法用来寻找数组中的多数元素，相比于用哈希表存储元素和次数使用$O(n)$的时间复杂度来说，该投票算法使用$O(1)$的空间复杂度。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>摩尔投票算法分为投票-校验两个阶段。投票阶段会统计候选人的票数，遍历数组，如果当前数字和当前候选人不相等，则该候选人票数-1，当候选人票数归0时，需要更换候选人为当前数字；在校验阶段，需要重新遍历数字，并将值等于候选人的数字计数，遍历结束后，比如计数满足要求，则候选人满足要求。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>比如[A,A, A, B,C]这组元素，我们需要筛选数量超过一半的数字。</p><p>首先我们定A为候选人，然后遍历数组，遇到B时A有3个，由于A!=B，因此A结果为2，再和C比较，犹豫A!=C，因此A结尾为1，遍历结束，A是投票阶段的候选人；再遍历数组，统计A的数量为3，超过一半(5/2)，因此A是票数最高的元素。</p><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><p>Leetcode <a href="https://leetcode.cn/problems/majority-element-ii/" target="_blank" rel="noopener">229. 多数元素 II</a></p><p>给定一个大小为 <em>n</em> 的整数数组，找出其中所有出现超过 <code>⌊ n/3 ⌋</code> 次的元素。</p><p><strong>示例 1：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="line">输出：[<span class="hljs-number">3</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">1</span>]</span><br><span class="line">输出：[<span class="hljs-number">1</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 3：</strong></p><figure class="highlight angelscript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]</span><br><span class="line">输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目要求找出所有出现次数超过<code>n/3</code>次的元素，由于摩尔投票算法空间复杂度是常数，因此需要预先定义候选人个数。</p><p>设出现次数超过<code>n/3</code>次的元素有$x$个，以下是求解$x$的过程：<br>$$<br>\begin{equation}\label{eqn:1}<br>\begin{aligned}<br>&amp; 假设刚好是n/3个 \<br>&amp; \because x * n/3 = n \<br>&amp; \therefore x=3 \<br>&amp; 而实际上题目要求次数 &gt; n/3 \<br>&amp; \therefore x &lt; 3 \<br>&amp; \therefore x = 2<br>\end{aligned}<br>\end{equation}<br>$$<br>所以本题最多能选择2个候选人。</p><ol><li>不妨设两个候选人$candidate1$和$candidate2$，$count1$和$count2$都是0</li><li>遍历数组，如果当前$nums[i]==candidate1$，则$count1++$，否则$count1–$，对$candidate2$同样处理</li><li>如果遍历过程中$count1$或$count2$为0，则更新对应的候选人为$nums[i]$</li><li>投票阶段结束，进入重新计数校验阶段，我们留下了$candidate1$和$candidate2$，再次遍历数组，如果值和这两个候选人相同，则对应的$count$增加</li><li>如果$count&gt;nums.length/3$，则将当前候选人加入答案</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 摩尔投票法</span></span><br><span class="line">        <span class="hljs-comment">// 1. 因为题目要求超过 n/3 的数字，因此最多有2个数字</span></span><br><span class="line">        <span class="hljs-comment">// 2. 投票阶段，初始化2个数字，以及count</span></span><br><span class="line">        <span class="hljs-comment">// 3. 遍历nums，如果和num1相等，则count1++，如果和num2相等，则count2++，否则票数--</span></span><br><span class="line">        <span class="hljs-comment">// 4. 如果num1的count1为0，则num1为当前num</span></span><br><span class="line">        <span class="hljs-comment">// 5. 校验阶段</span></span><br><span class="line">        <span class="hljs-comment">// 6. 统计num1和num2的次数，看看是否&gt;n/3</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">            <span class="hljs-keyword">var</span> answer = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> Collections.emptyList();</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">int</span> candidate1 = nums[<span class="hljs-number">0</span>], count1 = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">int</span> candidate2 = nums[<span class="hljs-number">0</span>], count2 = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) {</span><br><span class="line">                <span class="hljs-comment">// 增加1的票数</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (num == candidate1) {</span><br><span class="line">                    count1++;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-comment">// 增加2的票数</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (num == candidate2) {</span><br><span class="line">                    count2++;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-comment">// 1票数不足，更新候选人1</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (count1 == <span class="hljs-number">0</span>) {</span><br><span class="line">                    candidate1 = num;</span><br><span class="line">                    count1++;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-comment">// 2票数不足，更新候选人2</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (count2 == <span class="hljs-number">0</span>) {</span><br><span class="line">                    candidate2 = num;</span><br><span class="line">                    count2++;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="hljs-comment">// 票数相减</span></span><br><span class="line">                count1--;</span><br><span class="line">                count2--;</span><br><span class="line">            }</span><br><span class="line">            count1 = <span class="hljs-number">0</span>;</span><br><span class="line">            count2 = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> num : nums) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (num == candidate1) {</span><br><span class="line">                    count1++;</span><br><span class="line">                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num == candidate2) {</span><br><span class="line">                    count2++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (count1 &gt; nums.length / <span class="hljs-number">3</span>) {</span><br><span class="line">                answer.add(candidate1);</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (count2 &gt; nums.length / <span class="hljs-number">3</span>) {</span><br><span class="line">                answer.add(candidate2);</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">return</span> answer;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度：$O(n)$, $n$是数组长度，需要遍历两次。</p><p>空间复杂度: $O(1)$，只需要常数项额外空间。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;来自&lt;a href=&quot;https://zh.m.wikipedia.org/zh-hans/%E5%A4%9A%E6%95%B0%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.ddhigh.com/categories/Algorithm/"/>
    
    
      <category term="leetcode" scheme="https://www.ddhigh.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
